<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004979A1-20030102-D00000.TIF SYSTEM "US20030004979A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004979A1-20030102-D00001.TIF SYSTEM "US20030004979A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004979A1-20030102-D00002.TIF SYSTEM "US20030004979A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004979A1-20030102-D00003.TIF SYSTEM "US20030004979A1-20030102-D00003.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004979</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10167964</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020612</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>203000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Data object generator and method of use</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60302086</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>John</given-name>
<family-name>Woodring</family-name>
</name>
<residence>
<residence-us>
<city>Ambler</city>
<state>PA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Siemens Corporation</name-1>
<name-2>Intellectual Property Department</name-2>
<address>
<address-1>186 Wood Avenue South</address-1>
<city>Iselin</city>
<state>NJ</state>
<postalcode>08830</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention creates source code that can be used by an application program to manipulate a relational database management system. An executable procedure for use in accessing a database management system (DBMS) by other software, e.g. application software, is created by dynamically obtaining a set of data representative of and useful in manipulating the DBMS and a table within the DBMS from a preexisting DBMS system catalog; merging the set of data with pre-existing source code comprising a predetermined object source code template that comprises object methods and object properties useful in manipulating the table; and generating a source file containing the merged template object source code to create the executable procedure. It is emphasized that this abstract is provided to comply with the rules requiring an abstract which will allow a searcher or other reader to quickly ascertain the subject matter of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope of meaning of the claims. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority through U.S. Provisional Application No. 60/302,086 filed Jun. 29, 2001 by J. Woodring for &ldquo;Data Object Generator.&rdquo;</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to interfaces to database management systems and more specifically to programmatic creation of software object interfaces to database management systems. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Many computer applications need to manipulate a database and its internal components, e.g. tables, such as by storing records into and retrieving records from those tables. The database may be a traditional database management system (DBMS) such as a relational DBMS. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> This manipulation often requires an application programmer to write specific code for each table. The coding effort is often tedious, is prone to errors, and requires a considerable amount of time, especially as the number of tables in the DBMS increases. In addition, the application software code often needs to be customized based on a low level DBMS application programming interface (API) and the specific DBMS being accessed. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The most common approach for coding database manipulation code is to write, by hand, the computer code needed. Typically, programs need to be written to perform the same repetitive function on every table in the DBMS. The disadvantages of this approach include (a) it requires a technical programming resource to write basic database manipulation code for each table in the system, which takes time; (b) the resulting code is prone to errors, since most of the programming is tedious and repetitive; (c) each line of code is tested during unit testing, since each line was coded by hand; (d) it requires valuable programming resources when program developers could be utilized on other programming tasks; and (e) changes to the specific underlying API or to the coding structure in general are applied to the code. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The present invention comprises a system and method to allow creation of an executable procedure for use in accessing a database management system (&ldquo;DBMS&rdquo;) by other software, e.g. application software. Code for the desired data object is created by dynamically obtaining a set of data representative of and useful in manipulating a DBMS and its components, e.g. DBMS tables, from a preexisting DBMS system catalog; merging the set of data with source code comprising a predetermined template object source code that comprises object methods and object properties useful in manipulating the table; and generating a source file containing the merged template object source code to create executable code, e.g. by compiling or interpreting the merged template object source code as required by its target language. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A system for generating an executable procedure to accomplish the methods disclosed herein may comprise an interrogation processor, used for interrogating system information associated with the DBMS and deriving database characteristics from the interrogated system information; a source of a template object source code, the template object source code being useful for accessing the database; and a code generator for merging the template object source code with the derived database characteristics to provide a merged object source code for use in manipulating data in the database. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The scope of protection is not limited by the summary of an exemplary embodiment set out above, but is only limited by the claims.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> These and other features, aspects, and advantages of the present invention will become more fully apparent from the following description, appended claims, and accompanying drawings in which: </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic of an exemplary system; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schematic chart of an exemplary DBMS showing tables with records and fields, objects, and a DBMS system information store; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic view of a set of template objects; and </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of a preferred method.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> As used herein, &ldquo;database&rdquo; or &ldquo;DBMS&rdquo; may comprise a relational database, an object oriented database, a flat file, a comma delimited file, or the like, or combinations thereof. Additionally, &ldquo;table&rdquo; as used herein may be a part of a DBMS or may be free standing, i.e. not included in the DBMS&apos; native structure. As will be familiar to those of ordinary skill in the database arts, a &ldquo;system catalog&rdquo; is a data dictionary of a DBMS and stores meta-deta including the schemas of the databases. It is typically stored within the DBMS in one or more special tables that can be queried by users like any other table. As used herein, &ldquo;DBMS system catalog&rdquo; may therefore be either an interrogatable system catalog that is part of the DBMS structure, e.g. information about a table&apos;s fields and their data characteristics; information about fields and their data characteristics derivable from a free-standing table; information about fields in a comma-delimited, spreadsheet, or other flat file; and the like, according to the data being accessed. Accordingly, as used herein, &ldquo;DBMS system catalog&rdquo; is understood to mean an interrogatable collection of description of characteristics of data within a DBMS or a table in the DBMS, and can include a field definition row in a spreadsheet, a field definition record in a flat or comma delimited file, and the like, or combinations thereof. As used herein, a &ldquo;schema&rdquo; is a description of the tables, indexes, constraints, and the like contained within a DBMS. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> As used herein, &ldquo;source code&rdquo; and &ldquo;source code module&rdquo; are understood to mean a collection of editable programmatic instructions which, when compiled or interpreted, create an executable software object as these terms are understood by those of ordinary skill in the computer programming arts. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Referring now to both <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> schematic of an exemplary system of the present invention, and <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> schematic of an exemplary database, a preferred embodiment of a system of the present invention comprises interrogation processor <highlight><bold>10</bold></highlight>; source <highlight><bold>30</bold></highlight> of template object source code <highlight><bold>32</bold></highlight>; and code generator <highlight><bold>40</bold></highlight>. DBMS <highlight><bold>20</bold></highlight> is typically a pre-existing DBMS, e.g. an industry standard relational DBMS. Further, DBMS <highlight><bold>20</bold></highlight> and source <highlight><bold>30</bold></highlight> may be resident on a storage device associated with either of interrogation processor <highlight><bold>10</bold></highlight> and code generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> It is understood that interrogation processor <highlight><bold>10</bold></highlight> and code generator <highlight><bold>40</bold></highlight> may be separate or a unitary computer systems, e.g. a single personal computer or several networked personal computers having mass storage devices or the like. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Interrogation processor <highlight><bold>10</bold></highlight> is used to interrogate DBMS <highlight><bold>20</bold></highlight> for system information <highlight><bold>22</bold></highlight> associated with DBMS <highlight><bold>20</bold></highlight> and derive database characteristics <highlight><bold>26</bold></highlight> from the interrogated system information <highlight><bold>22</bold></highlight>, e.g. a database schema embodied in DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> DBMS <highlight><bold>20</bold></highlight> may be a true database, comprising tables <highlight><bold>21</bold></highlight> and optionally other elements. As used herein, the numeral &ldquo;<highlight><bold>21</bold></highlight>&rdquo; refers to tables in DBMS <highlight><bold>20</bold></highlight> generally, with each such table in DBMS <highlight><bold>20</bold></highlight> identified as &ldquo;<highlight><bold>21</bold></highlight><highlight><italic>a,&rdquo; &ldquo;</italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b,&rdquo; </italic></highlight>and the like. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> As used in the art, independent or freestanding tables <highlight><bold>121</bold></highlight>, individually referred to by &ldquo;<highlight><bold>121</bold></highlight><highlight><italic>a&rdquo; </italic></highlight>and &ldquo;<highlight><bold>121</bold></highlight><highlight><italic>b,&rdquo; </italic></highlight>are sometimes also referred to as a database, such as with older database systems such as so-called xBase database systems like Visual FoxPro&reg; marketed by Microsoft Corp. of Seattle, Wash. Both types of tables, e.g. table <highlight><bold>21</bold></highlight><highlight><italic>a </italic></highlight>in tables <highlight><bold>21</bold></highlight> and table <highlight><bold>121</bold></highlight><highlight><italic>a </italic></highlight>in freestanding tables <highlight><bold>121</bold></highlight>, typically comprise one or more records <highlight><bold>25</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, each record <highlight><bold>25</bold></highlight> (also referred to as row <highlight><bold>25</bold></highlight>) in a table such as table <highlight><bold>21</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>121</bold></highlight><highlight><italic>a </italic></highlight>comprises one or more fields <highlight><bold>23</bold></highlight> (also referred to as columns <highlight><bold>23</bold></highlight>). Some DBMS systems <highlight><bold>20</bold></highlight> also provide validation and integrity rules for fields <highlight><bold>23</bold></highlight>, records <highlight><bold>25</bold></highlight>, and the like. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Additionally, especially in modern databases, DBMS <highlight><bold>20</bold></highlight> may be or otherwise comprise software objects <highlight><bold>27</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As will also be familiar to those of ordinary skill in the database arts, fields <highlight><bold>23</bold></highlight> may have characteristics such as a name, a field type, a data field data length, a null character indicator, an index indicator, and the like, or combinations thereof. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Referring additionally to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, source <highlight><bold>30</bold></highlight> comprises one or more template object source code modules <highlight><bold>32</bold></highlight>, e.g. <highlight><bold>32</bold></highlight><highlight><italic>a</italic></highlight>-<highlight><bold>32</bold></highlight><highlight><italic>e, </italic></highlight>which are software objects which may be used to create basic database manipulation code for each table, e.g. <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a </italic></highlight>(<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, individual software objects are referenced by a letter designator, e.g. a template query software object is shown as object <highlight><bold>32</bold></highlight><highlight><italic>a. </italic></highlight>Code generator <highlight><bold>40</bold></highlight> may customize a desired template object source code <highlight><bold>32</bold></highlight>, e.g. template insert software object <highlight><bold>32</bold></highlight><highlight><italic>a, </italic></highlight>by merging template object source code <highlight><bold>32</bold></highlight> with database characteristics <highlight><bold>26</bold></highlight> derived from DBMS system catalog <highlight><bold>24</bold></highlight>, as is described herein below. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Template object source code modules <highlight><bold>32</bold></highlight> may vary depending on several factors related to DBMS <highlight><bold>20</bold></highlight> upon which generated object source code <highlight><bold>34</bold></highlight> may be dependent, e.g. the actual underlying application program interface (&ldquo;API&rdquo;) for DBMS <highlight><bold>20</bold></highlight> that is being used (such as ActiveX&reg; Data Objects (&ldquo;ADO&rdquo;), Java Database Connectivity (&ldquo;JDBC&rdquo;), and the like) and the target DBMS <highlight><bold>20</bold></highlight>, e.g. Microsoft&reg; SQL Server, Oracle&reg;, or IBM&reg; DB2&reg;. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Each template object source code <highlight><bold>32</bold></highlight> module may comprise one or more object methods and one or more object properties useful in accomplishing its task in general, e.g. object methods and object properties useful in accessing DBMS <highlight><bold>20</bold></highlight> such as predetermined object methods and object properties supporting manipulation of data from at least one of fields <highlight><bold>23</bold></highlight>, records <highlight><bold>25</bold></highlight>, database objects <highlight><bold>27</bold></highlight>, tables <highlight><bold>21</bold></highlight>,<highlight><bold>121</bold></highlight>, and/or an entire DBMS <highlight><bold>20</bold></highlight>. Accordingly, in a preferred embodiment, the object methods and object properties of merged object source code <highlight><bold>34</bold></highlight> may be used by an application invoking merged object source code <highlight><bold>34</bold></highlight> to manipulate a specific DBMS <highlight><bold>20</bold></highlight>. As used herein, &ldquo;manipulate&rdquo; means to access and modify DBMS <highlight><bold>20</bold></highlight> and its data, e.g. opening DBMS <highlight><bold>20</bold></highlight>, opening table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b, </italic></highlight>loading table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>such as with template load object <highlight><bold>32</bold></highlight><highlight><italic>b, </italic></highlight>retrieving record <highlight><bold>25</bold></highlight>, querying DBMS <highlight><bold>20</bold></highlight> and/or table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>such as with template query object <highlight><bold>32</bold></highlight><highlight><italic>a, </italic></highlight>inserting a new record <highlight><bold>25</bold></highlight> in table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>such as with template insert object <highlight><bold>32</bold></highlight><highlight><italic>d, </italic></highlight>updating an existing record <highlight><bold>25</bold></highlight> in table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>such as with template update object <highlight><bold>32</bold></highlight><highlight><italic>c, </italic></highlight>deleting record <highlight><bold>25</bold></highlight> in table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>such as with template delete object <highlight><bold>32</bold></highlight><highlight><italic>e, </italic></highlight>closing table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b, </italic></highlight>and closing DBMS <highlight><bold>20</bold></highlight>, or the like, or a combination thereof. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In a preferred embodiment template object source code <highlight><bold>32</bold></highlight> comprises source code defining an executable procedure for querying or selecting records, e.g. query records <highlight><bold>25</bold></highlight> by a primary key; loading a table template, e.g. load a entire table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b; </italic></highlight>inserting a record template, e.g. insert a new record <highlight><bold>25</bold></highlight> into table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b; </italic></highlight>updating a record template, e.g. update an existing record <highlight><bold>25</bold></highlight> based on a primary key; deleting a record template, e.g. delete record <highlight><bold>25</bold></highlight> based on the primary key; or the like; or combinations thereof. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The object methods may be further tailorable, e.g. to update only changed fields <highlight><bold>23</bold></highlight>, verify that data is consistent with a predetermined data type such as a data type required by field <highlight><bold>23</bold></highlight>, process empty fields <highlight><bold>23</bold></highlight> in accordance with requirements of table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>and/or DBMS <highlight><bold>20</bold></highlight>, convert data from a first type to a second type compatible with requirements of table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>and/or DBMS <highlight><bold>20</bold></highlight>, or the like, or combinations thereof. For example, a query template may comprise object methods and object properties to allow invocation of the compiled query object to accomplish a query and return the results of that query. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In a preferred embodiment, template object source code <highlight><bold>32</bold></highlight> may also comprise object methods to accomplish the following tasks: for a Query, populate private data members for merged object <highlight><bold>34</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) from a &ldquo;result set&rdquo; returned from DBMS <highlight><bold>20</bold></highlight>; for an Insert, validate that required fields <highlight><bold>23</bold></highlight> are present and have the appropriate data type and data characteristics; for an update, only update fields <highlight><bold>23</bold></highlight> that actually changed. i.e., have new values; verify that the actual data is correct for the data type of the requisite field <highlight><bold>23</bold></highlight>, e.g., validate that field <highlight><bold>23</bold></highlight> defined as an integer contains a valid integer; perform predetermined edit checks. e.g., ensure that the length of a text field <highlight><bold>23</bold></highlight> does not exceed the maximum specified in the database definition; remove leading and/or trailing spaces from a text field <highlight><bold>23</bold></highlight>; convert empty text fields <highlight><bold>23</bold></highlight> to database &ldquo;nulls;&rdquo; handle special characters imbedded in text fields <highlight><bold>23</bold></highlight>, e.g., quotes within quotes; convert the programming language&apos;s data types into DBMS specific data types, e.g., many DBMS systems <highlight><bold>20</bold></highlight> store dates and times in different formats; and provide standardized methods for other programs in the an application to retrieve data from the data object (&ldquo;get&rdquo; methods) and to store data into the data object (&ldquo;set&rdquo; methods). </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Accordingly, merged object source code <highlight><bold>34</bold></highlight> may be used for manipulating data from a predetermined section of DBMS <highlight><bold>20</bold></highlight>, e.g. record <highlight><bold>25</bold></highlight>, a table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c </italic></highlight>associated with DBMS <highlight><bold>20</bold></highlight> or a freestanding table <highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b, </italic></highlight>database object <highlight><bold>27</bold></highlight>, and database system catalog information <highlight><bold>24</bold></highlight>, or the like, or a combination thereof. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, code generator <highlight><bold>40</bold></highlight> creates merged object source code <highlight><bold>34</bold></highlight> by merging database characteristics <highlight><bold>26</bold></highlight> derived from DBMS system catalog <highlight><bold>24</bold></highlight> with template object source code <highlight><bold>32</bold></highlight> to provide merged object source code <highlight><bold>34</bold></highlight> which can then be used to manipulate data in DBMS <highlight><bold>20</bold></highlight>. Code generator <highlight><bold>40</bold></highlight> may further comprise display <highlight><bold>12</bold></highlight> and input <highlight><bold>14</bold></highlight>. Input <highlight><bold>14</bold></highlight> may be one or more input devices such as are known in the art, e.g. a keyboard, mouse, or other computer input device as will be understood by those of ordinary skill in the computer arts. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In the operation of a preferred embodiment, and referring additionally to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the present invention further comprises one or more development tools that may be used during a development phase of a project to create objects <highlight><bold>34</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) to perform common database manipulation routines, e.g. input-output procedures, for each desired table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c </italic></highlight>(<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) in DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) or freestanding table <highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>(<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In a preferred embodiment, the present invention assumes that details needed to generate the database manipulation code for each table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c </italic></highlight>are already known and accessible in DBMS system catalog <highlight><bold>24</bold></highlight> of DBMS <highlight><bold>20</bold></highlight> or otherwise available for freestanding tables <highlight><bold>121</bold></highlight>. This is true for such relational DBMS systems as Microsoft&reg; SQL Server, Oracle&reg;, IBM&reg; DB2&reg;, and Microsoft&reg; Visual Foxpro&reg;. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In a preferred embodiment, a user, e.g. a programmer, invokes a user interface at code generator <highlight><bold>40</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) during the development of an application system to dynamically obtain a set of data, at step <highlight><bold>200</bold></highlight>, from a preexisting DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) of DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). DBMS system catalog <highlight><bold>24</bold></highlight> may be obtained directly from DBMS <highlight><bold>20</bold></highlight>, from a database script file, or the like. The set of data may be derived from DBMS system catalog <highlight><bold>24</bold></highlight> by interrogation processor <highlight><bold>10</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). For example, interrogation processor <highlight><bold>10</bold></highlight> may use a standardized database API to access DBMS system catalog <highlight><bold>24</bold></highlight> of the desired DBMS <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The set of data is representative of and useful in manipulating DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) and its tables <highlight><bold>21</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Once names of tables <highlight><bold>21</bold></highlight> within DBMS <highlight><bold>20</bold></highlight> have been determined, predetermined parameters are processed such as from a memory array or from a file to retrieve information required to set up an environment that includes locations and other characteristics of template object source code <highlight><bold>32</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Additionally, predetermined parameters may be obtained from freestanding tables <highlight><bold>121</bold></highlight> and processed. These characteristics may comprise language type, DBMS type, server name, database name, connection settings, and the like. In a like manner, locations and other characteristics of merged object source code <highlight><bold>34</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) may be processed, e.g. language type, data access methods, naming conventions, and the like. In a typical configuration, DBMS system catalog <highlight><bold>24</bold></highlight> will be interrogated for the name of each field <highlight><bold>23</bold></highlight>; predetermined characteristics of each field <highlight><bold>23</bold></highlight>, e.g. data type, data field length, data format requirements, and &ldquo;nullable&rdquo; indicator; and an index value, e.g. whether field <highlight><bold>23</bold></highlight> is a primary key. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The user may also specify one or more startup parameters such as via input <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In a preferred embodiment, an object may then be defined to comprise object properties describing predetermined characteristics of data types which will be further accessible using the object, where these data types are present in DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) as well as in one or more target languages for the data object, e.g. Java or C&plus;&plus;. At least one data object is then created for each table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>(<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) in DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). A database object creation routine may be run once per each such data object, e.g. in a loop processing each table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>found. Alternatively, all tables <highlight><bold>21</bold></highlight> for DBMS <highlight><bold>20</bold></highlight> may be processed automatically such as via an API to DBMS <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Once obtained, the set of data obtained from DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) is merged, at step <highlight><bold>210</bold></highlight>, with a predetermined template object source code <highlight><bold>32</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) to create merged object source code <highlight><bold>34</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). For example, template object source code <highlight><bold>32</bold></highlight> may be populated with pre-existing source code into which one or more place holders exist, e.g. by substitution of a value for a place holder, such as where the place holders are identifiable by the merging process and relate to a predetermined set of data obtained from the preexisting DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) of DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). In this manner, a &ldquo;get&rdquo; method in template source <highlight><bold>34</bold></highlight>, which may be invoked by a software application to obtain values in one or more fields of a record in a table, e.g. table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight>would have a place holder allowing for identification of each field obtained from the preexisting DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) of DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In an alternative embodiment, the set of data obtained from DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) is examined and one or more of characteristics of the data is determined. A template is then identified which corresponds to the characteristics for each datum in the set of data, and that datum is merged into its corresponding template in template object source code <highlight><bold>32</bold></highlight>. For example, template insert software object <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>may comprise the string &ldquo;INSERT&rdquo; for a structured query language (SQL) target, and the merge process may build a further string containing the template &ldquo;INSERT&rdquo; with appended names of columns <highlight><bold>23</bold></highlight> gleaned from DBMS system catalog <highlight><bold>24</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). If columns <highlight><bold>23</bold></highlight> named &ldquo;ONE,&rdquo; &ldquo;TWO,&rdquo; and &ldquo;THREE&rdquo; are to exist in table <highlight><bold>21</bold></highlight><highlight><italic>a </italic></highlight>named &ldquo;TBL,&rdquo; the resulting merged string would be &ldquo;INSERT INTO TBL (ONE,TWO,THREE) VALUES (var1, var2, var3)&rdquo; where var1, var2, and var3 would be program determined variables appropriate for columns <highlight><bold>23</bold></highlight> named &ldquo;ONE,&rdquo; &ldquo;TWO,&rdquo; and &ldquo;THREE&rdquo; in table <highlight><bold>21</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In a preferred embodiment, when the characteristics for template object source code <highlight><bold>32</bold></highlight> and merged object source code <highlight><bold>34</bold></highlight> have been obtained, as well as the information regarding DBMS <highlight><bold>20</bold></highlight>, an output file may be created. The output file may be provided with a standard header as required by a target language, including header information required for a desired software object class. As will be understood by those of ordinary skill in the software object oriented programming arts, a software object is defined via its class, i.e. an object is an individual instance of the class to which it belongs. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Member variables may then be generated for the class, based on definitions of tables <highlight><bold>21</bold></highlight>,<highlight><bold>121</bold></highlight> for which the class is being defined. Additional elements for the object class may then be created for the class, e.g. constructors, get methods, put methods, and the like, or combinations thereof. Specialized methods may also be created for the class, e.g. for database views present within DBMS <highlight><bold>20</bold></highlight>. Characteristics for template object source code <highlight><bold>32</bold></highlight> and merged object source code <highlight><bold>34</bold></highlight> may be validated during the processing. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In addition to these methods and properties, a set of SQL code may be created to allow access and manipulation of DBMS <highlight><bold>20</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>), depending on the requirements of that DBMS <highlight><bold>20</bold></highlight>. This SQL code may include dynamic and static syntactical statements and routines to allow loading of data, updates, inserts, deletions, executing of stored procedures, and the like. Additionally, methods to process data loaded from DBMS <highlight><bold>20</bold></highlight> as well as validation methods are created for the class. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The merged object source code <highlight><bold>34</bold></highlight> may then be stored, at step <highlight><bold>220</bold></highlight>, such as created as an editable or otherwise manipulatable text source file and written to disk. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Merged object source code <highlight><bold>34</bold></highlight> may then be used to generate executable code containing the desired data object, e.g. merged object source code <highlight><bold>34</bold></highlight> may be generated in a desired target language such as C, C&plus;, C&plus;&plus;, C&num;, Visual Basic, COBOL, SQL, Java, or the like, or a combination thereof for further compilation or interpretation. Merged object source code <highlight><bold>34</bold></highlight> may then handled just like any other source file that the programmer develops, e.g., checked into a software repository, compiled, unit tested, and the like. A predetermined programming language&apos;s data types may also be converted into one or more data types specific to DBMS <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In a preferred embodiment, merged object source code <highlight><bold>34</bold></highlight> are to be used in a target application as &ldquo;containers&rdquo; to hold data for a specific table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b. </italic></highlight>Data coming from DBMS <highlight><bold>20</bold></highlight> and going to DBMS <highlight><bold>20</bold></highlight> will thus pass through the compiled or interpreted merged object source code <highlight><bold>34</bold></highlight>. Other programs in the software application, e.g. &ldquo;classes&rdquo; in object oriented applications, may use &ldquo;get&rdquo; and &ldquo;set&rdquo; methods of merged object source code <highlight><bold>34</bold></highlight> to retrieve data from the data object <highlight><bold>34</bold></highlight> and to store data into the data object <highlight><bold>34</bold></highlight>. With this mechanism, application business logic does not need to know the details of how the data is actually stored in DBMS <highlight><bold>20</bold></highlight>, e.g., which DBMS <highlight><bold>20</bold></highlight> or table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>is being used, structures of tables <highlight><bold>21</bold></highlight>,<highlight><bold>121</bold></highlight>, and the like. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Unit testing may also be improved, since code generator <highlight><bold>40</bold></highlight> produces application code specific to a table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight> in the generated code conforms to a desired &ldquo;model&rdquo; code, template <highlight><bold>32</bold></highlight>. Further, changes to a specific underlying API or to the coding structure in general can be applied to one place, e.g. templates <highlight><bold>32</bold></highlight>, and code generator <highlight><bold>40</bold></highlight> can be rerun to recreate the code <highlight><bold>34</bold></highlight> for each table <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>21</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>121</bold></highlight><highlight><italic>b </italic></highlight>instead of having to make changes manually. Similarly, common rules that need to be applied across DBMS <highlight><bold>20</bold></highlight> need to be coded once, e.g. in templates <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In the preferred embodiment as described herein, programmatic errors may be detected in a earlier, development phase, decreasing the likelihood of a runtime error. However, in a currently envisioned alternative embodiment, the present invention may be used in a runtime environment during real-time operation of a software application such that database manipulation code could be created dynamically while the application is running. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As will be familiar to those of ordinary skill in the database arts, other object methods may be present as desired to help maintain one or more standards of DBMS <highlight><bold>20</bold></highlight>, its tables <highlight><bold>21</bold></highlight>, freestanding tables <highlight><bold>121</bold></highlight>, and their records <highlight><bold>25</bold></highlight> and fields <highlight><bold>23</bold></highlight>. For example, programmers often desire to remove leading and/or trailing spaces from text fields <highlight><bold>23</bold></highlight>, convert empty fields <highlight><bold>23</bold></highlight> to database &ldquo;nulls,&rdquo; and/or handle special characters imbedded in text fields <highlight><bold>23</bold></highlight> such as by substitutions for or deletions of those special characters. One or more methods to accomplish these tasks may be present in template source code <highlight><bold>32</bold></highlight> to handle these in a consistent manner. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The present invention may be used in application systems that need to manipulate data in DBMS <highlight><bold>20</bold></highlight>, e.g. client/server application systems that require records to be stored into and retrieved from DBMS <highlight><bold>20</bold></highlight>. Among other advantages, the present invention may free up development time, allowing programmers to be utilized on other programming tasks; programming errors may be eliminated that may have resulted if the code were programmed by hand; unit testing may be faster as each line of code automatically conforms to the &ldquo;model&rdquo; code; changes to a specific underlying API or to the coding structure in general can be applied to one place, i.e. templates <highlight><bold>32</bold></highlight>; and common rules that need to be applied to manipulate DBMS <highlight><bold>20</bold></highlight> need to be coded once. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> It will be understood that various changes in the details, materials, and arrangements of the parts which have been described and illustrated above in order to explain the nature of this invention may be made by those skilled in the art without departing from the principle and scope of the invention as recited in the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>) A method for providing an executable procedure for use in accessing a database management system (DBMS), comprising the steps of: 
<claim-text>a. dynamically obtaining a set of data from a preexisting DBMS system catalog, the data being representative of and useful in manipulating the DBMS and a table within the DBMS; </claim-text>
<claim-text>b. merging the set of data with source code comprising predetermined template object source code, the template object source code comprising an object method and an object property useful in manipulating the table; and </claim-text>
<claim-text>c. generating a source file containing the merged object source code useful in creation of executable procedure. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>a. the DBMS system catalog further comprises information relating to fields within a table of the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein: 
<claim-text>a. the template object source code is at least one of a (a) query template, (b) load table template, (c) insert record template, (d) update record template, and (e) delete record template. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein: 
<claim-text>a. the set of data is merged with query template source code; and </claim-text>
<claim-text>b. the merged query object source code further comprises an object method useful in populating private data members in an object derived from the query object source code with data from the set of data obtained from the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein: 
<claim-text>a. the set of data is merged with insert record template source code; and </claim-text>
<claim-text>b. the merged insert record object source code further comprises an object method for verifying that fields required by the table are present. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein: 
<claim-text>a. the set of data is merged with update record template source code; and </claim-text>
<claim-text>b. the merged update record object source code further comprises an object method for selectively updating table fields whose data have changed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for verifying that data are correct for a data type of a desired field. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for performing predetermined edit checks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for removing undesired spaces from predetermined text fields. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for converting empty fields to database nulls. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for handling special characters imbedded in text fields. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of: 
<claim-text>a. generating merged object source code comprising an object method for converting a predetermined programming language&apos;s data types into data types specific to the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>a. the method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> is performed during a development phase of a project to produce a merged object source code for a selected table in the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is created for at least one of (i) C, (ii) C&plus;&plus;, (iii) C&num;, (iv) Visual Basic, (v) COBOL, and (vi) Java. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>a. the DBMS is at least one of a (i) relational database, (ii) comma delimited file, (iii) a flat file, and (iv) a spreadsheet. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>) A system for generating an executable procedure for accessing a database management system (DBMS), comprising: 
<claim-text>a. an interrogation processor for interrogating system information associated with a DBMS and deriving DMBS characteristics from the interrogated system information; </claim-text>
<claim-text>b. a source of a template object source code, the template object source code being useful for accessing the DBMS; and </claim-text>
<claim-text>c. a code generator, operatively in communication with the interrogation processor and the source of template object source code, the code generator being useful for merging the template object source code with the derived characteristics of DBMS to provide a merged object source code for use deriving an executable procedure for manipulating data in the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the template object source code includes template object source code for a plurality of template objects; and </claim-text>
<claim-text>b. the code generator merges template object source code for a selected one of the plurality of template objects with the derived characteristics of the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the template object source code comprises predetermined object methods and object properties supporting manipulation of data from at least one of a (i) field, (ii) record, (iii) database object, (iv) table, and (v) DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the system information comprises at least one of (i) a name of a data field, (ii) a data field type, (iii) a data field data length, (iv) a null character indicator, and (v) an index indicator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for manipulating data from a predetermined portion of the DBMS comprising at least one of (i) a record, (ii) a DBMS table, (iii) a DBMS object, and (iv) information from database system catalog. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for at least one of (i) opening a DBMS, (ii) opening a table, (iii) loading a table, (iv) retrieving a record, (v) querying a DBMS, (vi) inserting a new record in a table, (vii) updating an existing record in a table, (viii) deleting a record in a table, (ix) closing a table, and (x) closing a DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>) A system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for at least one of (i) updating only changed database data fields, (ii) verifying data in a record is consistent with a predetermined data type, (iii) processing empty data field portions in accordance with requirements of the DBMS, and (iv) converting data type to be compatible with requirements of the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>) A method for generating an executable procedure for accessing a database management system (DBMS), comprising the steps of: 
<claim-text>a. interrogating system information associated with a DBMS at an interrogation processor; </claim-text>
<claim-text>b. deriving DBMS characteristics from the interrogated system information at the interrogation processor; and </claim-text>
<claim-text>c. merging template object source code, at a code generator, from a source of template object source code, the template object source code being useful for accessing the DBMS, with the derived DBMS characteristics to provide a merged object source code for use in manipulating data in the DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further comprising the step of: 
<claim-text>a. merging the derived DBMS characteristics by the code generator with specific template object source code selected from a plurality of template object source code. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein: 
<claim-text>a. the template object source code comprises source code supporting manipulation of data from at least one of a (i) field, (ii) record, (iii) database object, (iv) table, and (v) DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein: 
<claim-text>a. the system information comprises at least one of (i) a name of a data field, (ii) a data field type, (iii) a data field data length, (iv) a null character indicator, and (v) an index indicator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for manipulating data from a predetermined portion of the DBMS comprising at least one of (i) a record, (ii) a table, (iii) a database object, and (iv) information from a database system catalog. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>) A method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for at least one of (i) opening a DBMS, (ii) opening a table, (iii) loading a table, (iv) retrieving a record, (v) querying a DBMS, (vi) inserting a new record in a table, (vii) updating an existing record in a table, (viii) deleting a record in a table, (ix) closing a table, and (x) closing a DBMS. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>) A method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein: 
<claim-text>a. the merged object source code is used for at least one of (i) updating only changed database data fields, (ii) verifying record data is consistent with a predetermined data type, (iii) processing empty data field portions in accordance with requirements of the DBMS, and (iv) converting data type to be compatible with requirements of the DBMS </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>) A computer program embodied within a computer-readable medium created using the method of <dependent-claim-reference depends_on="CLM-00011">claim 1.</dependent-claim-reference></claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004979A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004979A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004979A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004979A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
