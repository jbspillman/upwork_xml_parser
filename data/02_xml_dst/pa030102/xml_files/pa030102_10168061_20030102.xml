<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005291A1-20030102-D00000.TIF SYSTEM "US20030005291A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00001.TIF SYSTEM "US20030005291A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00002.TIF SYSTEM "US20030005291A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00003.TIF SYSTEM "US20030005291A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00004.TIF SYSTEM "US20030005291A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00005.TIF SYSTEM "US20030005291A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00006.TIF SYSTEM "US20030005291A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00007.TIF SYSTEM "US20030005291A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00008.TIF SYSTEM "US20030005291A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005291A1-20030102-D00009.TIF SYSTEM "US20030005291A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005291</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10168061</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020614</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F001/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>159000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>200000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Hardware token self enrollment process</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>William</given-name>
<family-name>Burn</family-name>
</name>
<residence>
<residence-us>
<city>Campbell</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Glenn Patent Group</name-1>
<name-2></name-2>
<address>
<address-1>3475 Edison Way Suite L</address-1>
<city>Menlo Park</city>
<state>CA</state>
<postalcode>94025</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/US00/35151</doc-number>
<document-date>20001220</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Intelligent hardware token processors (<highlight><bold>5</bold></highlight>) are capable of sending and receiving encrypted messages. Generic initialization with non-user-specific certificates comprising public and private keys allows a certificate authority (<highlight><bold>210</bold></highlight>) to securely communicate with the hardware token. New users enrolling with the certificate server (<highlight><bold>210</bold></highlight>) have their hardware tokens securely reprogrammed with user specific certificates. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Technical Field </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention pertains to the authentication of users needing access to commonly accessible data and users engaged in transactions completed over a computer network. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Prior Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The traditional method of limiting access to information has relied on a password mechanism. In order to access data in a common database or data that is accessed over a network, a user must be first identified and then authenticated. Identification has normally consisted of a user name and authentication was accomplished by a password known only to the user. The security of these prior-art password based mechanisms could easily be breached if the password was compromised in some manner. Passwords could be compromised by observing the user as the user entered the password. Password are even more vulnerable to compromise through monitoring of the computer network used to convey the password back to the information source. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Other prior art protection technologies included the use of digital certificates. As sophisticated and versatile as digital certificates are, they are commonly protected by simple passwords. Again, these passwords can be captured over the network or captured through keyboard sniffers. Once the password is compromised, a file-based certificate is vulnerable to theft through innumerable means. Stealing a user&apos;s certificate and the accompanying password allows imposters to read encrypted electronic mail, access private files and engage in monetary transaction over a computer network. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Passwords have also been used to protect automation accounts that are used to provide information or perform automated tasks. These &ldquo;robot accounts&rdquo; are routinely used to disseminate critical information to privileged employees and agents in large companies, governmental agencies and other institutions. As such, automation accounts must be protected from compromise at all costs. In the present day, password protection mechanisms fall intolerably short of the security levels modern institutions demand. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> One technique that can enhance the security aspects of user authentication is the use of hardware tokens. Traditionally, a hardware token was little more than a glorified password mechanism. The hardware token contained a non-volatile certificate that was accessed by specialized hardware connected to a user&apos;s computer. When the user needed to authenticate her identity, the hardware token was coupled to the hardware reader, the computer read the certificate, and then passed that along to the source computer. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In known hardware-based token approaches, the certificate can be protected so long as the user&apos;s computer is trustworthy Authentication credentials could still be compromised if the token is attached to a machine with inadequate host-based security. Rogue processes can infiltrate the machine and compromise the credentials. One example of this type of process is the so-called &ldquo;Trojan Horse&rdquo;, a process that electronically mails the certificate to hundreds of users if the token is in an &ldquo;unlocked&rdquo; state. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Registering the hardware token is also a cumbersome task. In order to ensure the fidelity of the authentication credentials stored therein, the hardware token must be initialized by a central credential authority (CA) and then securely delivered to the user. Any other means, such as electronically delivering the certificates to the user or even postal delivery of the initialized hardware device are susceptible to compromise. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> What is needed, then, is a digital certificate infrastructure that is easy to use, easy to administer and is impervious to network-based attacks such as Trojan horses and viruses. Obviously, use of a hardware-based token to store certificates provides inadequate security where host systems are not trustworthy. The digital certificate infrastructure must provide for a more resilient means not only to store the certificates, but a means to ensure security in uncontrolled environments. Finally, associating a hardware token and the certificate therein must be a distributed affair that does not rely on user specific token initialization and the inherent security risk of disseminating initialized tokens to the end users. Certificates must be initialized in an automated and encrypted manner that ensures secure identification of the user. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The present invention is a method for initializing hardware tokens useful in authenticating users attempting to access data or engaged in electronic commerce transactions. The general scheme relies on an intelligent token device called a hardware token processor (HTP). The HTP comprises an instruction unit augmented with non-volatile memory, and an interface to outside equipment. A math accelerator helps the HTP execute encryption and decryption algorithms quickly The HTP also has a metal case that is tamper evident. Tampering with the case triggers an intrusion detector that immediately clears the memory preventing compromise of encryption certificates. Only the interface is allowed to penetrate the case to enable interface with external equipment. In the preferred embodiment, an interface such as a one-wire interface (manufactured by Dallas Semiconductor) may be used. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> One key aspect of the present invention is the step of pre-initializing the hardware token processors in an essentially generic fashion. Although the HTP are not strictly fungible, they only vary with unique identification numbers and encryption keys that can be randomly generated. HTPs are also initialized with random personal identification numbers for a general user and for an administrative user. HTPs can be initialized in bulk by means of a bulk-programmer driven by an initialization workstation. A certificate authority generates identification numbers for each HTP together with encryption keys. These are stored in an HTP recognition database. Alternatively, the certificate authority can drive the bulk-programmer directly, or the initialization workstation can generate the initialization data. Where the certificate authority generates the initialization data either a secure network or a non-trusted network can be used to transfer the initialization data to the initialization workstation. Alternative forms of computer readable media can be used to convey the initialization data to the initialization workstations. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Once the HTPs are initialized, they are freely distributed to potential users. When a user wants to register for authentication service, the user is allowed to submit their identification data to a certificate authority. The certificate authority then create new certificates for the HTP and uses the original certificates stored in the HTP at initialization as the means to securely convey the new certificates to the token. The new certificates also replaced the original certificates stored in the HTP recognition database that is maintained by the certificate authority. Once the HTP is programmed, Boolean flags are set to indicate the HTP has been initialized. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> All initialization data for a hardware token is stored in the HTP recognition database. In the preferred embodiment, the recognition database comprises fields for the HTP identifier; an administrative personal identification number and user personal identification number; an initialization Boolean, a user certificate and certification number and a server certificate and certification number Further comprising the recognition database are fields for user registration date and user identification data. These additional fields are used to store information about users when they enroll. The registration date field is set to a null value upon initialization to indicate that the HTP has not been assigned to a user. Once a user enrolls, the date of registration is recorded in the recognition database. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Before users can enroll for authentication service, they must first obtain and then install a hardware token reader on their workstations. However, installation may not always be necessary, e.g. some computers and peripherals now come with these readers preinstalled. Once the HTP reader is installed (if necessary), the user obtains an initialized token and couples it to the reader. Using a web browser augmented with a special plug-in that enables the browser to interact with the HTP reader, the new user retrieves an enrollment web page. The enrollment web page comprises the graphical user interface necessary to accept user identification data. A Java applet attached to the web page uses the browser plug-in to interact with the HTP. The user data accepted by the web page is sent to the HTP. In turn, the HTP sends an enrollment request to the certificate authority and includes the new user&apos;s identification data. Before sending the message, the HTP encrypts the message using the certificate authority&apos;s public key that was stored in the HTP during initialization. The certificate authority decrypts the message, again using the private key generated during initialization and stores the user identification data in the recognition database. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> There are four types of encryption keys that comprise the certificates used in the present method. A user certificate is a private key that the HTP uses to decrypt a message it receives from the certificate authority. A user certification number is a public key that the certificate authority uses to encrypt messages it sends to the HTP. A server certificate is a private key that the certificate authority uses to decrypt a message it receives from the HTP. A server certification number is a public key that the HTP uses to encrypt messages it sends to the certificate authority. These are generated as non-user-specific certificates on initialization, but are replaced by user-specific versions during enrollment. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The foregoing aspects are better understood from the following detailed description of one embodiment of the invention with reference to the drawings, in which: </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram that describes the internal structure of a generic hardware token processor (HTP) that is suitable for use with the disclosed method; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a pictorial representation of an alternative form of the HTP useful for Internet transaction authentication; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a pictorial representation of the HTP and how it interfaces to a host computer; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram that depicts a method for deploying hardware tokens to a plurality of users; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram that depicts the process used to initialize HTPs; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a pictorial representation of the structure of the recognition database; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a pictorial representation of an HTP initialization suite; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flow diagram that depicts the HTP enrollment process; and </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a software instantiation diagram that depicts the processes used in an enrollment process according to the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Enabling the methods that comprise the present invention are hardware components manufactured by Dallas Semiconductor. Inc. Specifically. the Dallas Semiconductor, Inc. product called the iButton&trade; is used as an intelligent hardware token. The Dallas Semiconductor, Inc. product referred to as a BlueDot&trade; is used as an interface unit that allows a computer user to couple the hardware token to the user&apos;s computer. The Dallas Semiconductor, Inc. products are well suited to support the method described herein. However, alternatives are available and the present invention is not to be construed as limited only to application with the Dallas Semiconductor, Inc. hardware. Specifically, the invention concerns systems in which the HTP must be able to perform calculations, i.e. have an operating system iButtons and some smartcards can run an operating system, such as implemented in Java. Other, more simple smartcards are only memory cards and cannot be used for this application. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram that describes the internal structure of a generic hardware token processor (HTP) that is suitable for use with the disclosed method. The HTP <highlight><bold>5</bold></highlight> comprises an instruction unit <highlight><bold>10</bold></highlight> that executes a sequence of computer instructions stored in a non-volatile random access memory <highlight><bold>15</bold></highlight> (NV-RAM). The HTP can optionally comprise a math accelerator <highlight><bold>30</bold></highlight>. The math accelerator is not specifically required, but a primary purpose for using the HTP is to enable encrypted certificate transfers between the hardware token (i.e. the HTP) and a certificate authority. The math accelerator reduces the time required to perform the encryption and decryption processes and is a useful augmentation of the HTP hardware configuration. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> A metal encasement <highlight><bold>20</bold></highlight> is used as an integument, protecting the inner cavity <highlight><bold>25</bold></highlight> that houses the HTP electronic components from intrusion. In one embodiment of the invention, in the event that the metal encasement is tampered with, an intrusion detector <highlight><bold>30</bold></highlight> immediately erases the contents of the non-volatile RAM <highlight><bold>15</bold></highlight>. This ensures a high level of security, since the NV-RAM <highlight><bold>15</bold></highlight> is used to store certificates, private keys, and other secret material that, if compromised, would breach the security of the overall security system. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> An interface unit <highlight><bold>40</bold></highlight> penetrates the metal encasement and allows the HTP to communicate with external equipment. In the preferred embodiment, the interface unit may comprise, for example a one-wire interface that provide two-way communications with a host computer. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a pictorial representation of an alternative form of the HTP useful for Internet transaction authentication. In this case, the metal encasement is replaced by encapsulating the HTP electronic components into a plastic card <highlight><bold>42</bold></highlight> akin to a standard credit card or smart card. An interface <highlight><bold>43</bold></highlight> connects to the molding and allows the HTP electronic components to communicate with external equipment. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a pictorial representation of the HTP and how it interfaces to a host computer. The HTP <highlight><bold>5</bold></highlight> is coupled to an HTP reader <highlight><bold>50</bold></highlight>. The HTP reader <highlight><bold>50</bold></highlight> actually allows the host computer to read and write to the HTP <highlight><bold>5</bold></highlight>. The HTP reader interfaces to the host computer <highlight><bold>55</bold></highlight> by means of an interface. The interface can be any convenient interface such as a serial or parallel connection. More sophisticated interfaces, such as a computer network, can also be used. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow diagram that depicts a method for deploying hardware tokens to a plurality of users. Against the hardware background described supra, the present invention is a method for distributing the hardware tokens in a manner that is impervious to attack from ordinary computer security threats such as hackers, rogue computer processes and the like. The first step in the process is Step <highlight><bold>60</bold></highlight>, Initialization of the hardware token. Once the hardware tokens, which are intelligent hardware token processors in the preferred embodiment, the HTPs <highlight><bold>5</bold></highlight> are distributed to a plurality of potential users. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The advantage of the present invention over the prior art is that the present invention allows distribution of the hardware tokens to unknown users through insecure distribution channels. In a company environment, HTPs <highlight><bold>5</bold></highlight> can be mailed to potential users or freely distributed in grab-bags that can be located in company cafeterias. In broader applications, such as would normally be used in Internet based transactions, the molded version of HTPs <highlight><bold>42</bold></highlight> can be sent to credit card holders directly using the mails. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In order to use an initialized hardware token, or HTP <highlight><bold>5</bold></highlight>, the user must install an HTP reader (step <highlight><bold>70</bold></highlight>) and then enroll with a certificate authority (step <highlight><bold>75</bold></highlight>). Once the user has enrolled, the certificate authority will subsequently associate that particular user with a specific HTP. This enables authentication of that user on subsequent occasions. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flow diagram that depicts the process used to initialize HTPs. This process is performed in a trusted server that comprises a certificate authority. The first step in initialization (step <highlight><bold>80</bold></highlight>) is to create a unique token identifier. In the preferred embodiment, the HTP ID number is derived from a sequential numbering of HTPs. In steps <highlight><bold>85</bold></highlight> and <highlight><bold>90</bold></highlight>, personal identification numbers (PINs) are randomly generated. Using yet another random process, two key pairs are generated in steps <highlight><bold>95</bold></highlight> and <highlight><bold>100</bold></highlight>. A first key pair, referred to as the user certificate and certification number, are used to encrypt messages that are to be sent from a certificate authority to a user. The user, in the present embodiment, is the processor in the HTP. A second key pair, referred to as the server certificate and certification number, are used to encrypt messages that are sent from the HTP to the certificate authority. Once the certificate authority server creates the HTP ID number, personal identification numbers and certificates, these are stored in a recognition database (step <highlight><bold>105</bold></highlight>). </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In order to complete the HTP initialization process, the HTP ID number and the user and administrative PINs need to be stored on the HTP (step <highlight><bold>110</bold></highlight>). The HTP must also be initialized with the user certificate (step <highlight><bold>115</bold></highlight>) and the server certification number (step <highlight><bold>120</bold></highlight>). Once the HTP is initialized, a Boolean variable stored in the HTP is set to true to indicate that the HTP has been initialized. Once this Boolean is set true, the HTP enters a cryptographic mode. In the cryptographic mode, the HTP will only interact with the certificate authority using encrypted message formats. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a pictorial representation of the structure of the recognition database. Whenever the trusted server (i.e. certificate authority) prepares to initialize an HTP, a new record is added to the HTP recognition table and each of these records comprises the following fields:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0" pgwide="1">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="266PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE 1</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Structure of Recognition Database</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="OFFSET" colwidth="238PT" align="left"/>
<colspec colname="1" colwidth="28PT" align="center"/>
<tbody valign="top">
<row>
<entry></entry>
<entry>Refer-</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="49PT" align="left"/>
<colspec colname="2" colwidth="189PT" align="left"/>
<colspec colname="3" colwidth="28PT" align="center"/>
<tbody valign="top">
<row>
<entry>Field Name</entry>
<entry>Purpose</entry>
<entry>ence</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>HTP ID&num;</entry>
<entry>The HTP ID number field is used to store the HTP ID number</entry>
<entry>130</entry>
</row>
<row>
<entry></entry>
<entry>associated with the record. This is a Key Field and is used to</entry>
</row>
<row>
<entry></entry>
<entry>distinguish HTP recognition records from each other. Each</entry>
</row>
<row>
<entry></entry>
<entry>record, and each corresponding HTP is assigned a unique</entry>
</row>
<row>
<entry></entry>
<entry>HTP ID Number.</entry>
</row>
<row>
<entry>Admin PIN</entry>
<entry>The Admin PIN field is used to store the administrative PIN</entry>
<entry>135</entry>
</row>
<row>
<entry></entry>
<entry>number for the HTP that was generated during the</entry>
</row>
<row>
<entry></entry>
<entry>initialization process</entry>
</row>
<row>
<entry>User PIN</entry>
<entry>The User PIN field is used to store the user PIN number for</entry>
<entry>140</entry>
</row>
<row>
<entry></entry>
<entry>the HTP that was generated during the initialization process.</entry>
</row>
<row>
<entry>Initialized</entry>
<entry>The Initialized field is used to store a Boolean variable. The</entry>
<entry>145</entry>
</row>
<row>
<entry></entry>
<entry>state of the initialized Boolean variable indicates if the HTP is</entry>
</row>
<row>
<entry></entry>
<entry>initialized and is set to true after the HTP has been</entry>
</row>
<row>
<entry></entry>
<entry>programmed with initialization values, including but not limited</entry>
</row>
<row>
<entry></entry>
<entry>to the HTP ID number, admin PIN, user PIN, user certificate,</entry>
</row>
<row>
<entry></entry>
<entry>and sever certification number.</entry>
</row>
<row>
<entry>User Certificate</entry>
<entry>The User Certificate field is used to store a private key that the</entry>
<entry>150</entry>
</row>
<row>
<entry></entry>
<entry>HTP uses to decrypt messages it receives from the certificate</entry>
</row>
<row>
<entry></entry>
<entry>authority.</entry>
</row>
<row>
<entry>User</entry>
<entry>The User Certification Number field is used to store a public</entry>
<entry>160</entry>
</row>
<row>
<entry>Certification</entry>
<entry>key that the certificate authority uses to encrypt messages that</entry>
</row>
<row>
<entry>Number</entry>
<entry>are to be sent to the HTP.</entry>
</row>
<row>
<entry>Server</entry>
<entry>The Server Certificate field is used to store a private key that</entry>
<entry>165</entry>
</row>
<row>
<entry>Certificate</entry>
<entry>the certificate authority uses to decrypt messages it receives</entry>
</row>
<row>
<entry></entry>
<entry>from the HTP.</entry>
</row>
<row>
<entry>Server</entry>
<entry>The Server Certification Number field is used to store a public</entry>
<entry>170</entry>
</row>
<row>
<entry>Certification</entry>
<entry>key that the HTP uses to encrypt messages that it needs to</entry>
</row>
<row>
<entry>Number</entry>
<entry>send to the certificate authority.</entry>
</row>
<row>
<entry>Registered</entry>
<entry>The Registered field is used to store the date on which a user</entry>
<entry>175</entry>
</row>
<row>
<entry></entry>
<entry>enrolled for authentication service using the HTP. During</entry>
</row>
<row>
<entry></entry>
<entry>initialization, the Registered field is set to a null value.</entry>
</row>
<row>
<entry>User Data</entry>
<entry>The User Data field is used to store information about the user</entry>
<entry>180</entry>
</row>
<row>
<entry></entry>
<entry>who has enrolled for authentication service using the HTP.</entry>
</row>
<row>
<entry></entry>
<entry>This information includes, but should not be construed as</entry>
</row>
<row>
<entry></entry>
<entry>being limited to: name; address; employee number, social</entry>
</row>
<row>
<entry></entry>
<entry>security number, e-mail address, and phone and fax numbers.</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a pictorial representation of an HTP initialization suite. According to the figure, a plurality of HTPs can be inserted into a gang-programmer <highlight><bold>200</bold></highlight>. The gang programmer <highlight><bold>200</bold></highlight> interfaces directly with an HTP initialization workstation <highlight><bold>205</bold></highlight>. In the preferred embodiment, the HTP initialization workstation <highlight><bold>205</bold></highlight> is a personal computer comprising a processor, memory, a user display and display adapter and interfaces. The HTP initialization workstation <highlight><bold>205</bold></highlight> is a trusted platform. The purpose of the HTP initialization workstation <highlight><bold>205</bold></highlight> is to intelligently receive initialization data from a certificate authority <highlight><bold>210</bold></highlight>. The initialization data is created in the trusted environment of the certificate authority <highlight><bold>210</bold></highlight> and is then delivered to the HTP initialization workstation <highlight><bold>205</bold></highlight>. In the preferred embodiment, the trusted platforms that comprise the HTP initialization workstation <highlight><bold>205</bold></highlight> and the certificate authority <highlight><bold>210</bold></highlight> communicate by way of a trusted network <highlight><bold>215</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> also shows that the HTP initialization workstation <highlight><bold>205</bold></highlight> can further comprise an HTP reader <highlight><bold>50</bold></highlight> and an HTP <highlight><bold>5</bold></highlight>. In the preferred embodiment, the administrative user performing the HTP initialization process is authenticated by coupling their personal HTP into the HTP reader <highlight><bold>50</bold></highlight>. Only after the administrative user has been authenticated by the certificate authority is initialization allowed. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flow diagram that depicts the HTP enrollment process. Once HTPs are initialized, they are distributed to potential new users. Once a user obtains an HTP, that user must engage in an enrollment process that result of which affiliates that user with a particular HTP. Using the user&apos;s own workstation, or any other workstation augmented with an HTP reader <highlight><bold>50</bold></highlight>, the user must send an enrollment request to the certificate authority (step <highlight><bold>220</bold></highlight>). The enrollment request includes the new users personal identification data including, but not limited to name; address; employee number, social security number, e-mail address, and phone and fax numbers. The HTP receives this information from the user workstation and then creates a message internally unto itself. The message is then encrypted by encryption algorithms stored in the HTP NV-RAM <highlight><bold>15</bold></highlight> These algorithms are executed by the instruction unit <highlight><bold>10</bold></highlight> with aid from the math accelerator <highlight><bold>30</bold></highlight>. The encryption is based on the server certification number, a public key stored in the HTP NV-RAM <highlight><bold>15</bold></highlight> during initialization. The encrypted message is then transmitted to the certificate authority (step <highlight><bold>225</bold></highlight>). </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a software instantiation diagram that depicts the processes used in an enrollment process according to the present invention. In the preferred embodiment, the user that is engaged in the enrollment process uses a web browser <highlight><bold>230</bold></highlight> to call an enrollment web page stored on the certificate authority server <highlight><bold>210</bold></highlight>. The browser <highlight><bold>230</bold></highlight> communicates with the certificate authority <highlight><bold>210</bold></highlight> by means of a TCP/IP connection <highlight><bold>245</bold></highlight>. The enrollment web page comprises a collection of data entry fields together with a &ldquo;submit&rdquo; command button. The appearance of this web page is quite common place and will not be described here. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Augmenting the page description comprising the graphical user interface for the enrollment web page is a Java applet <highlight><bold>235</bold></highlight> The Java applet <highlight><bold>235</bold></highlight> ensures that all of the fields required in the enrollment form have been addressed by the user. After the user actuates the submit command button on the enrollment form, the Java applet <highlight><bold>235</bold></highlight> then collects the user identification data and directs that data to the HTP. The Java applet <highlight><bold>235</bold></highlight> uses a special browser plug-in <highlight><bold>240</bold></highlight> to communicate with the HTP <highlight><bold>5</bold></highlight> coupled to the HTP reader <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows that the certificate authority decrypts the enrollment message (step <highlight><bold>250</bold></highlight>). In response to receiving the enrollment message from the user&apos;s HTP, the certificate authority <highlight><bold>30</bold></highlight> creates new key pairs specifically for the new user (step <highlight><bold>255</bold></highlight>). Only the new server certification number and the new user certificates are then sent to the HTP in an encrypted message. This message is encrypted using the non-user-specific certification number generated for the HTP upon initialization. The encrypted registration message is then transmitted to the HTP (steps <highlight><bold>265</bold></highlight> and <highlight><bold>268</bold></highlight>). The certificate authority will then store the new user identification data in the recognition database and will replace the certificates stored there with the newly creates user-specific certificates (step <highlight><bold>270</bold></highlight>) The HTP will then decrypt the registration message using it&apos;s initialization user certificate (step <highlight><bold>275</bold></highlight>) and then store the new server certification number and the new user certificate in the NV-RAM <highlight><bold>15</bold></highlight> (step <highlight><bold>280</bold></highlight>) thereby replacing the certificates stored there during initialization. At this point, the HTP is affiliated with the new user and has been securly reprogrammed with user specific certificates. </paragraph>
<paragraph id="P-0045" lvl="7"><number>&lsqb;0045&rsqb;</number> Alternative Embodiments </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> While this invention has been described in terms of several preferred embodiments, it is contemplated that alternatives, modifications, permutations, and equivalents thereof will become apparent to those skilled in the art upon a reading of the specification and study of the drawings. It is therefore intended that the true spirit and scope of the present invention include all such alternatives, modifications, permutations, and equivalents. Some, but by no means all of the possible alternatives are described herein. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The present invention improves on the security afforded to a specific HTP by making first initializing each HTP with a unique identifier, and distinct identification numbers and certificates. Since, the initial certificates are replaced with user-specific certificates during the enrollment process, it is conceivable that each HTP could be initialized so that HTPs become entirely fungible. Unique identifiers could then be assigned to HTPs during enrollment. Initializing each HTP in an identical manner is an alternative to the preferred embodiment. Distribution of fungible HTPs is not as secure as the preferred method due to the fact that a user may not immediately change their personal identifier. Also, using distinct certificates helps to ensure that the HTP engaged in enrollment is the correct HTP and that no other HTP can inadvertently receive user-specific certificates that are encrypted with a distinct non-user specific certificate. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The present invention is based on TCP/IP protocols. Any suitable networking structure and protocol that provides for client-sever interaction is an acceptable alternative to TCP/IP. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The preferred embodiment includes a gang programmer for initializing a plurality of HTPs. As described supra, the gang programmer is driven by an HTP initialization workstation. The HTP initialization workstation receives initialization data from a certificate authority my way of a network. The inventor submits that the HTP initialization workstation can receive initialization data by any secure means including any form of computer readable media. Likewise, the HTP initialization workstation could receive initialization data from the certificate authority using a secure connection over a non-trusted network or it may receive encrypted that is then decrypted upon receipt. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> One additional alternative is noted by the inventor, the gang programmer could also be driven by the certificate authority platform directly. This is not the preferred embodiment since the certificate authority platform may be required to service authentication requests from other users enrolled with the system. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for initializing and distributing hardware tokens comprising the steps of: 
<claim-text>initializing a hardware token processor with non-user specific certificates; </claim-text>
<claim-text>distributing the hardware token processors to potential users; </claim-text>
<claim-text>allowing a new user to register a hardware token processor together with their specific user identification information; </claim-text>
<claim-text>generating new certificates for the new user; and </claim-text>
<claim-text>storing said new certificates for said new user in the hardware token processor submitted for registration by said new user. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the hardware token processor comprises: 
<claim-text>non-volatile random access memory; 
<claim-text>instruction unit that executes instruction sequences stored in memory; </claim-text>
<claim-text>encasement that houses the non-volatile random access memory and instruction unit; and </claim-text>
<claim-text>interface unit that penetrates said encasement and allows the instruction unit to communicate with external equipment. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the hardware token processor further comprises: 
<claim-text>intrusion detection unit that detects the compromise of the encasement and erases the contents of the non-volatile memory in response thereto. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the hardware token processor further comprises: 
<claim-text>math accelerator that is tailored to execute mathematical instructions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> wherein the interface unit is a one-wire interface. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of 
<claim-text>distributing a plurality of hardware token processor interface units to potential users. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising the step of 
<claim-text>Installing a hardware token reader on a plurality of user computers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of initializing a hardware token processor with non-user specific certificates is accomplished using a bulk programmer. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the bulk programmer is controlled by a hardware token processor initialization workstation. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the hardware token processor initialization workstation creates initialization data for each hardware token processor initialized. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein the hardware token processor initialization workstation obtains initialization data from an external source by means of computer readable media. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein the computer readable media comprises a computer network or a trusted computer network. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the step of initializing a hardware token processor further comprises the steps of: 
<claim-text>creating a unique identifier for the hardware token processor; generating a personal identification number for a potential user in a random manner; </claim-text>
<claim-text>generating a personal identification number for an administrative user in a random manner; </claim-text>
<claim-text>generating a user certificate and a user certification number key pair for the hardware token processor; </claim-text>
<claim-text>generating a server certificate and a server certification number key pair for the hardware token processor; </claim-text>
<claim-text>storing said unique identifier, said personal identification numbers for both a potential user and an administrative user, and said user and server key pairs in a recognition database; </claim-text>
<claim-text>storing said unique identifier, said personal identification numbers for both a potential user and an administrative user in the hardware token processor; </claim-text>
<claim-text>storing said user certificate in the hardware token processor; and </claim-text>
<claim-text>storing said server certification number in the hardware token processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> further comprising the step of 
<claim-text>setting an initialization Boolean flag in the hardware token processor to indicate that the hardware token processor has been initialized. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the recognition database comprises a unique record for each hardware token processor initialized and wherein each of said records comprises the following fields: 
<claim-text>hardware token processor identifier field that is used to store a unique identifier for each hardware token processor initialized; </claim-text>
<claim-text>administrative personal identification number field that is used to store a randomly generated personal identification number for an administrative user; </claim-text>
<claim-text>user personal identification number field that is used to store a randomly generated personal identification number for a user; </claim-text>
<claim-text>hardware token processor initialization Boolean field that is set to true after the hardware token processor is initialized; </claim-text>
<claim-text>user certificate field that is used to store a private decryption key used by the hardware token processor to decrypt messages received from a certificate authority; </claim-text>
<claim-text>user certification number field that is used to store a public key used by a certificate authority to encrypt messages that are to be sent to the hardware token processor; </claim-text>
<claim-text>server certificate field that is used to store a private decryption key used by the certificate authority to decrypt messages received from the hardware token processor; and </claim-text>
<claim-text>server certification number field that is used to store a public key used by a hardware token processor to encrypt messages that are to be sent to the certificate authority. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> wherein the recognition database further comprises the following fields: 
<claim-text>registered field that is set to a null value upon initialization of the hardware token processor and is subsequently set to a date indicative of the date on which the hardware token processor is registered by a user, and </claim-text>
<claim-text>user data field that is used to store information about a user once the user has enrolled for authentication service with the certificate authority. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method for enrolling for user authentication service with a certificate authority comprising the steps of: 
<claim-text>obtaining a hardware token processor that is initialized with non-user specific certificate; </claim-text>
<claim-text>obtaining a hardware token processor interface unit; </claim-text>
<claim-text>installing said hardware interface unit onto a user&apos;s computer; </claim-text>
<claim-text>coupling the hardware token processor to said hardware token processor interface unit; and </claim-text>
<claim-text>engaging in a hardware token processor user enrollment process. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein the user enrollment process comprises the following steps: 
<claim-text>accepting user identification data from a user; </claim-text>
<claim-text>sending a request to a certificate authority in order to register wherein the request comprises said user identification data and non-user specific certificates; and </claim-text>
<claim-text>registering the user in a recognition database. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the non-user certificates comprise: 
<claim-text>user certificate that is a private decryption key used by the hardware token processor to decrypt messages received from the certificate authority; </claim-text>
<claim-text>user certification number that is a public key used by the certificate authority to encrypt messages that are to be sent to the hardware token processor; </claim-text>
<claim-text>server certificate that is a private decryption key used by the certificate authority to decrypt messages received from the hardware token processor; and </claim-text>
<claim-text>server certification number that is a public key used by a hardware token processor to encrypt messages that are to be sent to the certificate authority. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> further comprising the step of setting a Boolean flag in the hardware token processor to indicate that the hardware token processor has been assigned to a user. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> further comprising the step of 
<claim-text>recording the date that the user registered the hardware token processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the step of accepting user identification data from a user is accomplished by a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the step of accepting user identification data from a user is accomplished by a graphical user interface embodied as a web page. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the step of sending a request to a certificate authority is accomplished by a Java applet attached to a web page. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference> wherein the step of registering the user in a recognition database comprises the steps of: 
<claim-text>receiving a hardware token processor identifier from the hardware token processor; </claim-text>
<claim-text>generating new user-specific certificates and storing those certificates with the hardware token processor identifier; </claim-text>
<claim-text>encrypting the new certificates using the non-user-specific certificate that the hardware token processor was initialized with; and </claim-text>
<claim-text>sending the encrypted new certificate to the hardware token processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> wherein the new user-specific certificates comprise: 
<claim-text>user certificate that is a private decryption key used by the hardware token processor to decrypt messages received from the certificate authority; </claim-text>
<claim-text>user certification number that is a public key used by the certificate authority to encrypt messages that are to be sent to the hardware token processor; </claim-text>
<claim-text>server certificate that is a private decryption key used by the certificate authonty to decrypt messages received from the hardware token processor; and </claim-text>
<claim-text>server certification number that is a public key used by a hardware token processor to encrypt messages that are to be sent to the certificate authority. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> further comprising the steps of: 
<claim-text>decrypting the new certificate in the hardware token processor; and </claim-text>
<claim-text>replacing the non-user-specific certificates with which the hardware token processor was initialized with the user-specific certificates. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> further comprising the step of 
<claim-text>storing the user identification data together with the hardware token processor identifier.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005291A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005291A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005291A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005291A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005291A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005291A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005291A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005291A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005291A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005291A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
