<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004989A1-20030102-D00000.TIF SYSTEM "US20030004989A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00001.TIF SYSTEM "US20030004989A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00002.TIF SYSTEM "US20030004989A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00003.TIF SYSTEM "US20030004989A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00004.TIF SYSTEM "US20030004989A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00005.TIF SYSTEM "US20030004989A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00006.TIF SYSTEM "US20030004989A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00007.TIF SYSTEM "US20030004989A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00008.TIF SYSTEM "US20030004989A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00009.TIF SYSTEM "US20030004989A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00010.TIF SYSTEM "US20030004989A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00011.TIF SYSTEM "US20030004989A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00012.TIF SYSTEM "US20030004989A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00013.TIF SYSTEM "US20030004989A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00014.TIF SYSTEM "US20030004989A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004989A1-20030102-D00015.TIF SYSTEM "US20030004989A1-20030102-D00015.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004989</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10168627</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020624</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>99.16419</doc-number>
</priority-application-number>
<filing-date>19991223</filing-date>
<country-code>FR</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>507000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Computer device, method and software product for filling printouts by computer</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Roland</given-name>
<family-name>Tomasi</family-name>
</name>
<residence>
<residence-non-us>
<city>Merenvielle</city>
<country-code>FR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>YOUNG &amp; THOMPSON</name-1>
<name-2></name-2>
<address>
<address-1>745 SOUTH 23RD STREET 2ND FLOOR</address-1>
<city>ARLINGTON</city>
<state>VA</state>
<postalcode>22202</postalcode>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/FR00/03643</doc-number>
<document-date>20001221</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The invention concerns a computer device and a method for filling by computer printouts comprising marks and wherein the characters need to be input Said device is adapted to enable storing and displaying on an electronic display screen an image, called initial image (<highlight><bold>12</bold></highlight>), representing a printout to be filled; automatically identifying the marks in the initial image (<highlight><bold>12</bold></highlight>); enabling said image (<highlight><bold>12</bold></highlight>) to be opened in at least one input window (<highlight><bold>20</bold></highlight>); then automatically identifying, in each input window, each of the portions of the initial image, called invariable graphic portions (M<highlight><bold>1</bold></highlight>), corresponding to marks extending in the input window (<highlight><bold>20</bold></highlight>), but having at least a dimension greater that a predetermined value. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention concerns a device, a method and a software product for the automated filling of printed documents that contain marks&mdash;among which usually are frames, lines, borders, columns, patterns, markers, graphical signs, alphanumerical signs . . . &mdash;and onto which characters are to be inserted and/or modifies and/or erased. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Even though the constant development of computer and communication technologies that results in a reduction of support materials like paper in industrial, commercial or administrative correspondence, there does not yet exist a considerable amount of situations where one cannot exclude the use of printed documents that have to be filled. Such printed documents may be forms, directories, tables . . . which have to be completed by inscription and/or modification of characters within certain predefined zones of the printed document, allowing thereby to deliver information and, in certain cases, to facilitate further computer processing. An example for such a printed document one can cite responses to calls to tender; the forms provided by administrations for the execution of formalities, for tax-payment, assets, rights or documents; le printed contracts for assurance or car-selling . . . </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In order to solve this problem some organizations have developed specific programs that reproduces a specific printed document and enables the filling of its edition-fields with a computer. Those programs may be provided under the form of software products shipped on storage-media (loadable to a computer) or via a network similar to the Internet. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Furthermore each specific program is dedicated to the usage of a particular printed document and requires a relatively high cost of development. And there does not exist numerous situations yet where such programs are available, and/or important variations can be encountered from one printed document to another. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In the case of calls to tender for example there may not exist a universal printed document. The inverse is true, a specific printed document is created for each call to tender by the government or the collectivity corresponding to the charge book of this call to tender Therefore, in any situation where people have to fill printed documents (which means at least certain of their zones by variable characters), have to do this filling manually, with aid of traditional typing machines, or by collage of images (graphics, plans, photographs, etc.). </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Additionally, before the filling of certain zones can be realized, it is necessary to do information processing (like calculation, text or image layout,). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> All these operations are long, in some cases relatively complex, in other cases they are highly repetitive and annoying, while always a considerable cost of manpower. They force the users to maintain methods and tools which are now out-dated, slowing the integration of information-technologies in the companies. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Throughout the following text these terminologies are used: </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> Character: all graphical symbol, including alphanumerical characters, paintings, maps, patters, images, photographs, signatures, manual writings, fingerprints, codes for optoelectronical reading (bar-codes for example), </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> Editing a character: writing and/or modifying and/or erasing a character in a zone of a printed document, </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> Filling of a printed document: the fact of modifying at least one pixel in at least one zone of a numeric image of a printed document, usually to introduce signs or characters, to erase signs or characters, to replace signs or characters by others, or more generally to edit one or more characters. </paragraph>
<paragraph id="P-0012" lvl="2"><number>&lsqb;0012&rsqb;</number> Automated: the fact of executing one step or one function by means of information-technology and under their own control without requiring continued human guidance, even if one or more isolated actions of the human operator may be required at start-up or during execution of the step or function, </paragraph>
<paragraph id="P-0013" lvl="2"><number>&lsqb;0013&rsqb;</number> Identifying a mark: applying means to each subset of an image representing this mark that allow to select it in the image, to link it with an identification-code which is common for each of this subsets, and to save these information&apos;s on mass-storage memory, or in a volatile way in random access memory for use during processing. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Therefore the invention aims at giving a solution to the above-mentioned problem and at providing a information-technology device and method, a procedure and a software product (computer program) that allows the automated filling with the aid of a computer of any printed document, which means apply able in general manner to any printed document without need of configuration operations, complex development or longer programming. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Hence the invention aims at proposal of an information-technology device and method, a procedure, and a software-product for computer-aided filling of printed documents, universally apply able and usable in a simple, intuitive and quick way buy every computer-user even if not a computer-specialist. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The invention also aims at allowing the simultaneous realization, based on the same equipment, of information treatment that allows elaborating and/or to layout editable characters. In specific, the invention aims at allowing the automated calculation of editable characters and the automated filling of zones in a printed document with precalculated characters. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> For this reason the invention also aims at proposing a device and method, a procedure and a software-product that offer important possibilities of configuration and programming to allow their adaptation to the constraints or needs of each individual application or user. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The invention furthermore aims at proposing a information-technology device and method, a procedure and a software-product that are compatible with current and most wide-spread computer-equipment, including the clock-frequencies of microprocessors, their memory capacity in random access or mass-storage memory and the use of personal computers available on the market. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The invention also aims at allowing securing the characters and original marks, which are normally invariable, of printed documents by preventing their modification. The invention also aims at allowing the modification of certain characters or marks originating from a printed document if necessary. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In order to do so, the invention concerns a device and method for automated, computer-aided filling of printed documents that contain marks&mdash;explicitly those may explicitly contain frames, borders, lines, columns, patterns markers, signs, graphics, logotypes, alphanumerical characters, . . . &mdash;and in which characters have to be edited, this device containing information-technology means of numerical treatment that are adapted and programmed for: </paragraph>
<paragraph id="P-0021" lvl="2"><number>&lsqb;0021&rsqb;</number> Allowing the storage and display on electronic graphics monitors of an image called initial image, which represents the printed document to be filled, </paragraph>
<paragraph id="P-0022" lvl="2"><number>&lsqb;0022&rsqb;</number> Automated identification of subsets in the initial image that correspond to pictures, </paragraph>
<paragraph id="P-0023" lvl="2"><number>&lsqb;0023&rsqb;</number> Allowing the option to define at least one frame, called Edition-Frame, that covers a subset of the initial image in which at least one character is to be edited, </paragraph>
<paragraph id="P-0024" lvl="2"><number>&lsqb;0024&rsqb;</number> Automated identification of those subsets in each Edition-Frame of the initial image of the Initial Image that are called invariable graphical subsets, corresponding to marks that extend into the Edition-Frame but have at least one that is higher than a predetermined value. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In this preferred embodiment the invariable graphical subsets correspond to marks that have at least one dimension that is higher than a predetermined value. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In this preferred embodiment the invariable graphical subsets correspond to marks that exceed the limits of the Edition-Frame. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In further variations the invariable graphical subsets may be defined to correspond to marks that have at least one dimension exceeding a value defined in absolute manner. Pixelised images are an example where the invariable graphical subsets may contain marks with an extension (&equals;total number of neighboring pixels, which means those next to each other or with a distance between them that is inferior to a predefined value measured in pixels or any metrical measure) that is larger than a predefined value. Similarly the invariable graphical subsets may contain marks with an extension is lower than a predefined value (it may be stains, defects, small characters printed in the initial image . . . ). </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In this preferred embodiment, the means of information-technology are adapted to: </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> Allow the activation of means to character modification, adapted to allow the edition of at least one character, called edited character, and able to place it at a predefined point in at least one Edition-Frame of the initial image. </paragraph>
<paragraph id="P-0030" lvl="2"><number>&lsqb;0030&rsqb;</number> Automated modification of each subset of the initial image within the edition-frame that is covered by at least one edited character, with exception of invariable graphical subsets, which remain unchanged, thereby creating an image called filled image of the printed document. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Note that for a device and method corresponding to the invention the initial image is entirely and automatically analyzed during the step in which the different marks are identified, before the creation of any Edition-Frame or the edition of characters in any way. The inventor in fact found out that even if this step of analysis may be intense and unnecessary it allows obtaining compensating advantages, regarding the immediate treatment of any Edition-Frame, and the identification of invariable graphical subsets within an Edition-Frame. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In this preferred embodyment the means of information technology are adapted for automated identification of marks as subset of the initial image having a different color than a predefined color, called background color. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> This background color may be automatically defined as the color with the most pixels of that color in the initial image, or by a threshold (at least one component of the code corresponding to the color is lower or higher then a predefined threshold-value); or it may be defined by user-input. This background color corresponds to the original color of the base-material on which the document has been printed. (Usually the paper). </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The initial image may have been pre-memorized in a computer memory in appropriate manner, for example by simple scanning of the printed document with the aid of an optical image scanner. Another variant is the creation of this initial image with the aid of software-tools that are implemented on a computer or to read files representing this initial image from storage media on which that file is stored, or even the use of such a file that has been obtained via local-area-network or internet. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The invention starts from the simple observation that within a frame which partially covers a zone of a printed document (not the total initial image), the within that frame which exceed a predefined threshold in at least one dimension&mdash;especially those exceeding the frame&mdash;and form an invariable graphical subset must not be modified and represent zones or fields within the printed document that are to be filled. Those zones must not be modified; they even impose the dimensions of the corresponding edited characters, but also can be used to calculate those dimensions. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Note that some programs or devices of text or image processing incorporate the possibility of superposing two images on the screen. One of these images is the background image, which may correspond to the marks, where the other image may be only containing changes made to the background image. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Furthermore this possibility does not allow identifying the invariable graphical subsets in the edition-frame and therefore does not allow differentiating between different elements of the image (characters, stains, background . . . ) This possibility does not allow to handle the invariable graphical subsets appropriately and to independently treat the edited characters and/or other elements of the background image. Therefore this possibility does not allow determining automatically the initial characters that already exist in the background image in order to replace them by edited characters without risking modifying invariable graphical subsets. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In this preferred embodiment a computer is adapted to automatically identify each of those subsets of the initial image that are called initial characters in each of the edition-frames, which corresponds to a mark extending entirely throughout the edition-frame that is not identified as invariable graphical subset. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In another variation of the invention it may be needed to erase the invariable graphical subsets in order to conserve the initial characters, for example in order to perform character recognition only on the initial characters. Therefore In this preferred embodyment a computer is adapted and programmed to automatically modify each of the original images subsets in the edition-frame by eliminating the invariable graphical subsets while conserving initial characters. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In this preferred embodyment a computer is adapted to erase at least one of the initial characters within an edition-frame that is at least partially covered by an edited character. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Additionally the device and method of the invention is also comprising the steps of a computer which incorporate a program for character recognition able to attribute an identification code&mdash;for example an ASCII code&mdash;that has been memorized according to one known form of a family of predefined known object-forms to each initial character. The computer is adapted and programmed to execute such a recognition program to identify at least the initial characters in at least one edition-frame. The identified initial characters may then be processed by other data processing programs in order to replace them by the edited characters and/or to modify them and/or to erase a subset or to reintroduce them into the image in order to form the filled image. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In this preferred embodiment the computer is configured with at least one program able to treat numerical data that has been selected within a spreadsheet or a text-editor and an image-processing program that is configured with the settings that are predefined by the image that is to be filled, tools that allow the user to connect each edition-frame with such a numerical-data-processing programs output or input interfaces. The computer is also adapted to define data that is generated by the pre-mentioned program as edited characters. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In the case of printed documents constituted from calls to tender it is most often necessary to edit the quantities and prices/unit arid Lo calculate the price/article a sum which may or may not be duty-free, the taxes that have to be added, the price with all taxes corresponding to the specific market included, and values to add to other precalculated values (for other types of printed documents) and to keep them in memory. Edition-frames may be defined for the zones that correspond to that data and are associated to pre-configured files of a spreadsheet program that treats the initial characters like data of that file, modified and/or completed and/or erased, and then reintroduced into the image as edited characters in order to create the filled image. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A computer may automatically do the reintroduction of the edited characters following a modified spreadsheet file. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Different known types of image-storage may be used. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In this preferred embodiment, the device and method is comprising the steps of the initial image being a numeric pixelised image and the computer being configured with means of analysis for the initial image that are adapted to automatically create a dynamic list of marks of the initial image, each mark of that list being formed by a single set of adjacent pixels, represented by their coordinates and having a color-code that satisfies at least one predetermined condition. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Within this entire text the expression &ldquo;adjacent pixels&rdquo; specifies any set of pixels with a distance lower or equal to a predetermined value. That predetermined value may be defined by a distance in any appropriate units (millimeters, number pixels . . . ). In the most simple case, that predefined value is equal to 1 pixel, the adjacent pixels being those directly neighboring others. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Such a computer may be configured and programmed to realize means of image analysis which regroup the adjacent pixels in a similar way (color-code satisfying at least one predetermined condition) while separating and identifying the invariable graphical subsets in the initial image of the printed document. For example each rectangle, every line and every initial character present on the printed document is identified. In the invention, the step that consists of generating such a list allows to automatically identify the marks of the initial image, and constitutes therefore the corresponds to the step realized so far. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In this preferred embodiment the device and method is also comprising the steps of means of analysis of the initial image, including mean of sorting and/or filtering adapted to automatically generate an image with colors that are part of a palette that contains a predetermined number&mdash;usually 2&mdash;of colors from the initial image, where one color corresponds to the background color of the image and each mark in the list being a set of adjacent pixels having a different color-code than the background color. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In this preferred embodiment each mark in the list builds a set of adjacent pixels having the same color-code. Reciprocally each set of adjacent pixels that have the same color-code (or in variation, similar color-codes) build a single invariable identifiable mark of a corresponding entry in the pre-mentioned list. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In this preferred embodiment the computer may be configured to automatically compare the coordinates of the pixels in each mark of the list with those of pixels within an edition-frame, in order to automatically determine if one of them is part of that edition-frame, and, if that is the case, to automatically determine if pixels of that same market exist that have coordinated exceeding predefined limits&mdash;usually those outside the edition-frame&mdash;, in way that identifies those marks as invariable graphical subsets. Similarly, In this preferred embodiment, a computer is configured to automatically compare the coordinates of pixels of each mark in the list with those of pixels of a edition-frame, in order to automatically determine if one of them is part of that edition-frame, and, if that is the case, in order to automatically determine if each of those pixels of that same mark have their coordinates within predetermined limits&mdash;usually inside the edition-frame&mdash;, in a way that identifies that mark as an initial character. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In this preferred embodiment a computer is configured to automatically examine each mark of the list after another, and, </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> If it is identified as invariable graphical subset, not applying a character recognition program to that mark, </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> If it is identified as initial character, automatically applying </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> A character recognition program to that mark. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In order to do so, it is possible to create a temporary image, which only contains the initial characters, the invariable graphical subsets being erased. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Therefore it is possible to either let the initial character unchanged, in order to conserve its authentic form, or to erase the mark of the edition-frame corresponding to the initial character by applying the background color to each of its pixels. Furthermore the pixels, which correspond to each initial character, are still memorized and known in the list. In a way that, in the case where an initial character has been erased and then not been modified and has to be reintroduce in the filled image, two possibilities exist: either one reintroduces the character in its recognized and edited, by the means of character edition, form or one reintroduces the pixels memorized in the corresponding list to the image. In the second case, In this preferred embodiment, the computer is configured to conserve or automatically incorporate the pixels of the mark in the list corresponding to the invariable graphical subsets and to the edited characters. Each unchanged initial character, even if recognized, appears in the exact same form that he had in the initial image, without modification of typeface or size. In the first case, on the contrary, a modification in form will generally appear. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In this preferred embodiment the computer is configured to automatically calculate the dimension of each edited character in a way that is compatible with the invariable graphical subsets and with the edition-frame, and that the edited character is placed in the right way in the filled image. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The edited characters may be edited manually by a user, or being the result of data processing program, or more generally being obtained by a computerized automatic treatment or via a data-transmission network. They are furthermore being processed by character editing means, a text-editor program for example, which are configured to adapt the size of the characters to the size of the edition-frame that contains the pre-mentioned point at which the edited characters are to be placed. The placement of each edited character may be calculated by a computer-program starting from the initial characters and/or the invariable graphical subsets, if they exist. The dimensions and placement of the edited characters may also be defined by the user that is enabled to set a number of cells which surround the edited characters horizontally and/or vertically, within each edition-frame. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In this preferred embodiment a computer is configured and programmed to activate means of character-edition, commanded by a program that enables the user to move a pointer and a predetermined point of edition at which the edited character is to be placed in the initial image. A variation is that this predetermined point may be automatically calculated by a computer, based on the dimensions of the edition-frame, and those of the corresponding edited characters, in order to center and/or adjust the edited characters appropriately in a way similar to a text-editor or spreadsheet. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In this preferred embodiment a computer is configured and programmed to allow the definition of each edition-frame by the use of a pointer-program or graphical user-interface. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In this preferred embodiment a computer is configured and programmed to allow the reintroduction of the filled image in a stable form, usually printed, or memorized on storage-media, or transmitted via local-area-network or internet in encrypted or unencrypted way. In the most common variation the &ldquo;filled&rdquo; printed image obtained may then be used like a printed document that has been manually filled. But the invention opens an increase on perspectives more important to the transmission and usage of printed documents via local-area-networks or the Internet. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The invention extends a method implemented in a device and method of to the invention. The invention concerns therefore a computer-device, build of a computerized means of numerical treatment and at least one electric screen for display, a method of automated filling of printed documents containing marks by computers&mdash;usually containing frames, borders, lines, columns, patters, markers, signs, graphics, characters or alphanumerical signs, . . . &mdash;and in which the characters have to be edited, this method containing the steps: </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> Displaying an image, called initial image, that represents a printed document on an electronic screen, </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> Automatically identifying the subsets of the initial image that correspond to marks, </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> Defining, within that initial image, at least one frame, called edition-frame, that covers a partial zone of the printed document in which at least one character has to be edited, </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> Automatically identifying, within each edition-frame, each subset of the initial image, called invariable graphical subsets, which correspond to marks that extend within the edition-frame but have at least one dimension exceeding a first predetermined limit and/or being inferior to a second predetermined limit. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Exceedingly those steps also characterize a method of the invention: </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> Activation of character-edition means that are adapted to allow the edition of at least one character, called edited character, and able to place it at a predetermined point of at least one edition-frame of the initial image, </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> Automated modification of each subset of the initial image within the edition-frame that is covered at least by one edited character, with the exception of invariable graphical subsets which remain unchanged, and thereby the generation of an image, called filled image, of the printed document. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The invention contains a software product that can be loaded into the random access memory of a computer for the creation of a method of the invention, in order to realize a device and method of the invention. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> That software product is a computer-program that can be provides via computer-networks, and that is adapted to be <highlight><bold>1</bold></highlight>u directly charged into the <highlight><bold>1</bold></highlight>random access memory of a computer. It may also be provided in storage-media. The invention contains therefore also storage-media that is adapted to be connected to a computer that is comprising the steps of understanding a stored program that is adapted to be loaded in random access memory of a computer and program it to provide a method of to the invention, in a way that a device and method of to the invention is realized. A storage-media of the invention contains therefore a software-product that follows the invention and allows, when it is on the drives of a computer, that the software-product after being loaded into the random access memory of the computer provides the possibility of filling printed documents with a computer. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The invention also consists of a device, a method, a software-product and a storage-media, which are comprising therefore in the list, and all background pixels, which occur more often usually, are not memorized, which considerably reduces the memory usage of the list. Therefore a file of reduced size is obtained that still incorporated all relevant information of the image. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> This is only possible if a background can be effectively defined, like it is the case for printed text or lists (the background being formed by pixels with a color of the original material on which the printed document has been realized). In contrary that is not possible if the printed document contains relevant information on its entire surface, which is for example the case in a photograph.</paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Other goals, characteristics and advantages of the invention appear during the lecture of the following description, which refers to the figures appended: </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schema illustrating an example of a device and method of the invention, </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schema that shows an example of an initial image of a printed document that is to be filled with a device and method, method and software product of the invention, </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schema that shows an example of an edition-frame being opened with a device, method and software-product of the invention, </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>are schemas representing an the steps of combination by all or some of the characteristics mentioned above or below. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Furthermore, the invention concerns a more general way of a method to numerically process pixelised images that is comprising the steps of : </paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> Subsets of the image are identified to correspond to marks having a color-code satisfying at least one predetermined condition </paragraph>
<paragraph id="P-0082" lvl="2"><number>&lsqb;0082&rsqb;</number> A dynamic list which contains all marks of the image, each mark of the list being formed by a single set of adjacent pixels selected by the coordinates is created. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The invention permits to recognize and isolate automatically the different marks of a numerical image, and then processing that image not by its pixels, but that dynamic list, each entry containing and regrouping the coordinates of each mark. It is therefore possible to do these analysis or recognition processes in a more simple way than possible with the preceding state of the art. In this preferred embodiment it is determined (automatically (by sorting or by considering the color most pixels have) or by user-choice) what color-code corresponds to the background color, and a list consisting only of those marks that have a different color-code that the background color. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Only the relevant information of the image is memorized example of a subset of the initial image at a zoomed scale in order to allow the distinction of the pixels, and the numeric matrixes corresponding to these subsets, different steps allowing to isolate and code the marks of these subsets of the initial image in a dynamic list, using a device, method and software-product of the invention, </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schema illustrating an example for a dynamic list created by a device, metriod and software-product of the invention. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a, </italic></highlight><highlight><bold>6</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>7</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>7</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>9</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>10</bold></highlight> are flow-charts showing the different steps for the edition in a methods, a device and method and software product of the invention. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a schema illustrating a subset of an edition-frame in which it is possible to identify an invariable graphical subset and an initial character using a method, device and software product according to the invention. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>12</bold></highlight><highlight><italic>f </italic></highlight>are schemas illustrating the different steps needed to the processing of initial characters, and the incorporation of edited characters in the edition-frame from <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a schema showing an example of a filled image obtained by the invention and from the initial image of a printed document from <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a flow-chart that illustrates a method of the invention allowing to obtain a map of the contours from <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b </italic></highlight>starting from the filtered image <highlight><bold>4</bold></highlight><highlight><italic>a, </italic></highlight></paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The <cross-reference target="DRAWINGS">FIGS. 15</cross-reference><highlight><italic>a, </italic></highlight><highlight><bold>15</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>15</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>15</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>15</bold></highlight><highlight><italic>e </italic></highlight>are flowcharts illustrating a method of the invention that allows to obtain a separation-map from <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>c </italic></highlight>starting with the contour image of <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b </italic></highlight></paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a flow-chart that illustrated a method of the invention that allows to obtain a map of marks according to <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>d </italic></highlight>starting from a separation map showing in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b</italic></highlight></paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 1</cross-reference> represents an example of a device and method of the invention that contains a micro-computer <highlight><bold>1</bold></highlight> with a central processing unit <highlight><bold>2</bold></highlight> with microprocessor(s), a reader <highlight><bold>3</bold></highlight> of storage-media <highlight><bold>4</bold></highlight> like disks&mdash;usually CD-ROM&mdash;, a screen <highlight><bold>5</bold></highlight>, a keyboard <highlight><bold>6</bold></highlight>, a mouse <highlight><bold>7</bold></highlight> or any other pointing device, an optical scanner <highlight><bold>8</bold></highlight>, a printer <highlight><bold>9</bold></highlight>, a modem <highlight><bold>10</bold></highlight> with network <highlight><bold>11</bold></highlight> connection that allows data transmission similar to the network enabling dial-in access to the INTERNET network. Note that the device <highlight><bold>1</bold></highlight> represented in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is only an example and numerous other configurations are possible (portable micro-computer, other storage-media or other peripheral devices associated, replacement of the mouse <highlight><bold>7</bold></highlight> by a touch-screen, ball-based pointing devices,). </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The micro-computer <highlight><bold>1</bold></highlight> is also configured with standard software allowing its usage, particularly an operating system that incorporates a graphical user interface, usually WINDOWS (R) commercialized by MICROSOFT CORPORATION (U.S.A.), or Max OS (r) commercialized by Apple Computer (U.S.A.), or BeOs (R) commercialized by Be (France), or X-WINDOWS (R) commercialized by SUN MICROSYSTEMS (U.S.A.)&mdash;, and a pointer-software&mdash;usually a mouse-driver contained in the operating system&mdash;. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The central processing unit <highlight><bold>2</bold></highlight> incorporated a microprocessor and its associated components, usually at least one read only memory and one internal random access memory. The central processing unit <highlight><bold>2</bold></highlight> also has at least one motherboard and at least one bus that allow the connection of different peripheral cards, also a mass-storage memory, usually a hard disk. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The microcomputer <highlight><bold>1</bold></highlight> is adapted and programmed to allow the memorization of a numerical image in its mass-storage memory, called initial image <highlight><bold>12</bold></highlight>, representing a printed document <highlight><bold>13</bold></highlight> that has to be filled. In the example of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the scanner <highlight><bold>8</bold></highlight> that creates a numerical file representing that printed document <highlight><bold>13</bold></highlight>, which means the initial image <highlight><bold>12</bold></highlight>, in a traditional manner, may read the printed document <highlight><bold>13</bold></highlight>. Such a scanner <highlight><bold>8</bold></highlight> is known by it and does allow creating pixelised images that are then memorized on the hard disk of a microcomputer <highlight><bold>1</bold></highlight>. In variation, the initial image <highlight><bold>12</bold></highlight> may also be transmitted by network <highlight><bold>11</bold></highlight> or modem <highlight><bold>10</bold></highlight> and memorize on the hard disk of the microcomputer <highlight><bold>1</bold></highlight>. Also, the initial image <highlight><bold>12</bold></highlight> may be stored on a storage-media and retrieved by a drive like the drive <highlight><bold>3</bold></highlight> of the microcomputer <highlight><bold>1</bold></highlight>. The device and method of the invention is adapted and programmed to allow the display on a screen <highlight><bold>5</bold></highlight> of the initial image <highlight><bold>12</bold></highlight> like represented in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> More generally, in order to realize the invention, a software product of the invention and stored on storage-media <highlight><bold>4</bold></highlight> of the invention is inserted to the drive <highlight><bold>3</bold></highlight> and installed on the microcomputer <highlight><bold>1</bold></highlight>. The files of the programs and data corresponding are copied to the hard disk, and the system files are modified to support storage <highlight><bold>4</bold></highlight> if necessary. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The operating system WINDOWS (R) is compatible to pre-programmed class-libraries that are commercialized by MICROSOFT CORPORATION (U.S.A.) and the name Microsoft Foundation Classes (R), which allow realizing a software product of the invention. Other libraries with similar functionality and/or targeting other operating systems may be used (UNIX, MACINTOSH (R) . . . ) in similar manner. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Starting with the activation of the program of the invention and after loading an initial image <highlight><bold>12</bold></highlight> with this software product (program), a program for digital image editing is started to allow the display of the initial image <highlight><bold>12</bold></highlight>. This digital image-editing program may consist of any compatible program with the operating system of the microcomputer <highlight><bold>1</bold></highlight>, and for example with the Win32 (R) API de MICROSOFT CORPORATION (U.S.A.). </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 2</cross-reference> an example on an initial image <highlight><bold>12</bold></highlight> of a printed document is represented, which in this example is similar to a call to tender. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The initial image <highlight><bold>12</bold></highlight> represented in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is that of a printed document as provided by an administration before being filled by the applicants to the call to tender. Obviously, in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> very simplified version of such a document is represented, with single goal of illustration to this invention. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Visibly, the initial image <highlight><bold>12</bold></highlight> of the printed document contains pre-printed marks that allow defining the zones <highlight><bold>14</bold></highlight>, <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, <highlight><bold>17</bold></highlight>, <highlight><bold>18</bold></highlight>, <highlight><bold>19</bold></highlight> that the applicant has to fill with characters of to the offer he wants to formulate. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> More generally, and in the represented example, the initial image <highlight><bold>12</bold></highlight> is a pixelised image, a &ldquo;bitmap&rdquo;, in black and white. The invention, which is furthermore applicable to other image, formats, especially also vectorized images and/or color images, which have various levels of a variety of colors. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> The initial pre-printed marks in the initial image <highlight><bold>12</bold></highlight> contain in this example: </paragraph>
<paragraph id="P-0105" lvl="2"><number>&lsqb;0105&rsqb;</number> A set M<highlight><bold>1</bold></highlight> of black adjacent pixels that form the borderlines of a spreadsheet, </paragraph>
<paragraph id="P-0106" lvl="2"><number>&lsqb;0106&rsqb;</number> Some alphanumerical characters, called initial characters M<highlight><bold>2</bold></highlight>, each initial character M<highlight><bold>2</bold></highlight> being formed by a set of black adjacent pixels. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> In this example, the printed document contains a heading <highlight><bold>14</bold></highlight> that allows the edition of a market and date, a column <highlight><bold>15</bold></highlight> of product-designations corresponding to the market, a column <highlight><bold>16</bold></highlight> in which the quantities of the products are indicated individually, a column <highlight><bold>18</bold></highlight> that allows to edit the price for each product, and a column <highlight><bold>19</bold></highlight> that allows the calculation of intermediate sums, taxes, totals, etc. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Like indicated previously, the initial image <highlight><bold>12</bold></highlight> is displayed on a screen with the aid of a library similar to the Win32 (R) API library or the Microsoft MFC (R) class library for the WINDOWS operating system. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> The program of the invention is configured to generate a dynamic list <highlight><bold>22</bold></highlight> representing the initial marks of the initial image <highlight><bold>12</bold></highlight>, each mark of this list <highlight><bold>22</bold></highlight> being formed of a set of adjacent pixels identified by their coordinates, and having a color-code that satisfies at least one predetermined condition. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> The <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>5</bold></highlight> illustrate the method that can be realized to generate such a dynamic list <highlight><bold>22</bold></highlight>. In the entire text, the expression &ldquo;dynamic&rdquo; list specifies, in traditional manner, a list with variable dimensions, may vary from one initial image <highlight><bold>12</bold></highlight> to another. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> The images are stored in the microcomputer <highlight><bold>1</bold></highlight> in the form of matrixes of numerical data, called maps, containing the information of each pixel. Each number of the map represents one pixel of the image, which is identified by its coordinates (x, y) in the corresponding map. The coordinates of a pixel are unsigned integral numbers. By convention, the origin of the coordinates (0, 0) is the pixel located in the left-top corner of the image. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> First, a process of sorting and filtering is applied to the initial image <highlight><bold>12</bold></highlight>, known by itself, adapted to generate an image with the colors that are part of a group of predetermined number of colors, including one color of the images background (defined by the user or calculated as being the color that most pixels of the image have, or a predetermined color whose color-code is used as minimum and/or maximum). In the represented example, the process of sorting and filtering delivers a contrasted bitonal image. <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>a </italic></highlight>is at larger scale a subset of an image obtained from the initial image <highlight><bold>12</bold></highlight> after the process of sorting and filtering. This image is called filtered image <highlight><bold>23</bold></highlight>. An example for such processing can be the methods based on the algorithms of HECKBERT. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Let K be a in some way determined map. Internal pixels of K are all pixels of the map K that are neither part of the last or fist columns and neither part of the first or last line of that map K. Corner Pixels of K are those pixels that are either part of the first column or last column and of the last or first line of K. Border pixels are those pixels that are neither corner nor internal pixels. <highlight><bold>1</bold></highlight>o The neighborhood U (P; K) is the set of pixels P of a map K that are different to the pixel P but are touching it directly. The neighborhood of an internal pixel has eight pixels. The neighborhood of a border pixel contains five pixels. The neighborhood of a corner pixel contains three pixels. Starting from the filtered image <highlight><bold>23</bold></highlight>, the map, called contour map <highlight><bold>24</bold></highlight>, represented in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b </italic></highlight>is constructed. Initially all elements of the map are fixed to zero. The filtered image is processed pixel-by-pixel and line-by-line, in each line pixel by pixel. For each pixel the color-code (black or white in the example of <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>a</italic></highlight>) of the pixel is compared to the code examined previously. If the code of the current pixel is not the same as the one of the preceding pixel, the current pixel is a pixel where the color of the image changes, and therefore called changing pixel. There are two cases: </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> 1) Transition for the exterior of a mark to its interior has occurred; in that case, the current pixel is a pixel called contour pixel, that build the peripheral contour of a mark in the initial image <highlight><bold>12</bold></highlight>; its value is therefore set to 1 into the contour map <highlight><bold>24</bold></highlight>; </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> 2) Transition from the interior of a mark to its exterior has occurred; in that case the current pixel is immediately preceding a counter pixel and its value in the contour map is <highlight><bold>24</bold></highlight> set to 1. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> To differentiate between those two cases, the number q of changing pixels in the current line is counted during the examination of pixels. The initial value for q is fixed to 1 so that every new line q will have the value <highlight><bold>2</bold></highlight> for the first changing pixel of the line. Therefore it is known that if q is an even number during the detection of a changing pixel, it is the case 1) elsewise, if q is odd it is case 2). </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> While successively examining all the pixels of the filtered image <highlight><bold>23</bold></highlight>, the contour map <highlight><bold>24</bold></highlight> in which the contour of any mark is represented by the value <highlight><bold>1</bold></highlight> is created. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is an exemplary flow-chart allowing the realization of the above-described method to obtain a contour map <highlight><bold>24</bold></highlight> from a filtered image <highlight><bold>23</bold></highlight>. In this figure, after step <highlight><bold>101</bold></highlight> from start, one will encounter a loop in step <highlight><bold>102</bold></highlight> that allows the processing of the abscises x, from 0 to xmax, which means the pixels of the filtered image <highlight><bold>23</bold></highlight> line by line. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The variable q is initialized with 1 after step <highlight><bold>103</bold></highlight>. In step <highlight><bold>104</bold></highlight> the value of the color code T of element FK&lsqb;<highlight><bold>0</bold></highlight>&rsqb; &lsqb;<highlight><bold>0</bold></highlight>&rsqb; that is the code of the color from the point at the coordinates (0, 0) in the filtered image <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In the flow-charts of <cross-reference target="DRAWINGS">FIG. 14, 15</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>15</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>16</bold></highlight> the following terminology is adopted: </paragraph>
<paragraph id="P-0121" lvl="2"><number>&lsqb;0121&rsqb;</number> FK&lsqb;x&rsqb; &lsqb;y&rsqb;: the color code of the pixel from the coordinates (x, y) of the filtered image <highlight><bold>23</bold></highlight> </paragraph>
<paragraph id="P-0122" lvl="2"><number>&lsqb;0122&rsqb;</number> UK&lsqb;x&rsqb; &lsqb;y&rsqb; : the color code of the pixel from the coordinates (x, y) in the contour image <highlight><bold>24</bold></highlight>, </paragraph>
<paragraph id="P-0123" lvl="2"><number>&lsqb;0123&rsqb;</number> SK&lsqb;x&rsqb; &lsqb;y&rsqb; : the color code of the pixel from the coordinates (x, y) in the separation image <highlight><bold>25</bold></highlight> or mark map <highlight><bold>26</bold></highlight>, </paragraph>
<paragraph id="P-0124" lvl="2"><number>&lsqb;0124&rsqb;</number> S&lsqb;N&rsqb;: symbol with the number N in the dynamic list <highlight><bold>22</bold></highlight> </paragraph>
<paragraph id="P-0125" lvl="2"><number>&lsqb;0125&rsqb;</number> P(x, y): pixel from the coordinates (x, y). </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> After step <highlight><bold>105</bold></highlight>, a loop is entered that processes the ordinates y of the pixels in the filtered image <highlight><bold>23</bold></highlight>, from 0 to ymax. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> In Step <highlight><bold>106</bold></highlight>, it can be examined that the variable T is equal to the color code of the pixel at the current coordinates (x, y), being FK&lsqb;x&rsqb; &lsqb;y&rsqb;. If such is the case the code of the contour map <highlight><bold>24</bold></highlight> is fixed to 0 for that pixel entered, and step <highlight><bold>112</bold></highlight> where a loop over the ordinates y of the contour map <highlight><bold>24</bold></highlight> is entered. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> Therefore step <highlight><bold>123</bold></highlight> which invokes the function CHECK represented in the flow-chart of <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>c </italic></highlight>is executed for each pixel. After a initial step <highlight><bold>160</bold></highlight>, we proceed with step <highlight><bold>162</bold></highlight> if the code of the contour map <highlight><bold>24</bold></highlight> of the current pixel at coordinates (x, y) equals 1. If this is the case CHECK always returns 0 in step <highlight><bold>165</bold></highlight>, i.e. CHECK(x, y)&equals;0. In that case, after step <highlight><bold>163</bold></highlight>, if the code in the separation maps <highlight><bold>25</bold></highlight> of the pixel with coordinates (x, y) equals 1. If it is not the case, in step <highlight><bold>165</bold></highlight> CHECK returns 0. If it is the case CHECK returns 1 in step <highlight><bold>164</bold></highlight>. Therefore if the function CHECK is equal to 0, it is known that the pixel has been processed or is not a contour pixel. If CHECK returns 1 though, it is known that it is a pixel that hasn&apos;t been processed by PROC and that is a contour pixel. Therefore step <highlight><bold>123</bold></highlight> from <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a, </italic></highlight>if CHECK evaluates to 0, one continues directly with <highlight><bold>128</bold></highlight>, the end of the loop over the ordinates y. whereas when CHECK evaluates to a value that is not 0, a new entry is added to the dynamic list in step <highlight><bold>124</bold></highlight>, in a way that allows inserting a new mark. To achieve this value N is attributed to the new mark, called code of mark N, which is an unsigned integral number that allows indexing the marks in the dynamic list <highlight><bold>22</bold></highlight>. The first value for N equals 0. A dynamic list according to <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is created, the first column during step <highlight><bold>107</bold></highlight>. If such is not the case, q is incremented by one during step <highlight><bold>108</bold></highlight>, and it is possible to calculate the value p which is equal to 0 if q is even and equal to 1 if q is odd, during step <highlight><bold>109</bold></highlight>. In the subsequent step, the code of the pixel at coordinates (x, y) is set to 1. The Steps <highlight><bold>107</bold></highlight> and <highlight><bold>111</bold></highlight> lead both to step <highlight><bold>112</bold></highlight> in which T is modified by giving it the color code of the pixel at coordinates (x, y) in filtered image <highlight><bold>23</bold></highlight> as value. During steps <highlight><bold>113</bold></highlight> and <highlight><bold>114</bold></highlight>, the loops are terminated and y, respectively x are increased by <highlight><bold>1</bold></highlight>. When the entire filtered image <highlight><bold>23</bold></highlight> has been processed the steps <highlight><bold>115</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> which are similar to the preceding ones but in which the ordinates y are the first being opened. Further the step <highlight><bold>111</bold></highlight> is replaced by a step in which the code of the pixel at coordinates (x-p, y) is fixed to 1 after the execution of this step <highlight><bold>115</bold></highlight> is taken, which lead to the final step <highlight><bold>116</bold></highlight>. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Starting from the contour map <highlight><bold>24</bold></highlight>, another map, called separation map <highlight><bold>25</bold></highlight> is created, which is represented in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>c </italic></highlight>where the different marks are seperated from each other. To achieve this every pixel of the separation map <highlight><bold>25</bold></highlight> is initialized to &minus;1. Then the subprocedure PROC which is represented in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>is invoked. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> This subprocedure starts with step <highlight><bold>110</bold></highlight>. Then in step <highlight><bold>120</bold></highlight> in which the variable n is initialized to 0, step <highlight><bold>121</bold></highlight> where a loop over the abscisses x of the contour map <highlight><bold>24</bold></highlight> is representing the code of mark N and the second column representing the color code that corresponds, and which each line contains the different pixels identified to be part of that mark. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Now the function REKURS is invoked, which corresponds to the flow-chart in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b. </italic></highlight>It allows examining the neighborhood of the current pixel. Starting with step <highlight><bold>140</bold></highlight>, in step <highlight><bold>141</bold></highlight> k is incremented by 1, which was initialized to 0, which allows to calculate the number of times that the function REKURS has been invoked. in fact the function REKURS is a function that invokes itself, therefore one called self-recurrent. It is known that the capabilities of computers to perform recurrence are limited. The procedure represented in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>allows therefore interrupting the number of executed recurrences in order to not exceed the limits of the used computer. Those capabilities are defined by a constant called Limit. If such is not the case the code of the separation map <highlight><bold>25</bold></highlight> i fixed to the value of the code of mark N, introduced in step <highlight><bold>143</bold></highlight>, and written to the current pixel P(x, y) in the dynamic list <highlight><bold>22</bold></highlight>, which means in the mark which has the code of mark N, in step <highlight><bold>144</bold></highlight>. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Then in step <highlight><bold>145</bold></highlight> a loop over the neighboring pixels of P(x, y) is entered. This loop is executed over an index i which runs from 0 to 7 and that allows varying the increments by 1 for the abscises and the ordinates Ux(i) and Uy(i) relative to the coordinates (x, y) of the current pixel. The increments Ux(i) and Uy(i) can have the values 0, 1, and &minus;1, and the eight combinations that are not equal to (0, 0) can be formed with the three values determining the neighboring pixels of P(x, y). Each combination corresponds to one of the values of the index i, which means the point (x&plus;Ux(i), y&plus;Uy(i)) is one of the neighboring pixels of (x, y). </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> In Step <highlight><bold>146</bold></highlight>, the function CHECK that has been described above is invoked for each neighboring pixel and its return value is examined. If it equals 0, it will be continued with step <highlight><bold>148</bold></highlight>, the end of the loop, which means the return to the previous neighborhood. If it is not equal to 0, the function REKURS is invoked again for that neighboring point, with a code of mark N. The return value is examined in step <highlight><bold>147</bold></highlight>. If it equals 0, that signifies that REKURS could be executed completely for every contour pixel of the mark with code of mark N, without interruption in the recurrence. If in contrary REKURS returns a non-zero value, in other words it return 1, it is known that the value of Limit has been reached and that recurrent iterations will be required. This is the reason why when detecting during REKURS that the current neighboring point with the index i is not equal to 0 in step <highlight><bold>147</bold></highlight>, REKURS returns 1 for the current point (x, y) in step <highlight><bold>152</bold></highlight>. If in the other case the value of REKURS for the neighboring point equals 0, step <highlight><bold>148</bold></highlight> is executed and the end of the loop over the neighboring points is reached, in other words i is incremented by 1. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> When all neighboring points could be examined, the value of REKURS is fixed to 0 in step <highlight><bold>149</bold></highlight>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> If during step <highlight><bold>142</bold></highlight>, the recurrence threshold Limit is exceeded, the coordinates of the pixel (x, y) ate which the recursion had to be interrupted are added to a dynamic list called correction list LI. This is done in step <highlight><bold>151</bold></highlight> that is preceded by step <highlight><bold>150</bold></highlight> in which the length of the list LI is incremented by 1. After step <highlight><bold>151</bold></highlight> REKURS returns 1 in step <highlight><bold>152</bold></highlight>, allowing detecting the interruption of recurrence. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> In the global procedure PROC, if during step <highlight><bold>125</bold></highlight> it is detected that the function REKURS is not equal to 0, and therefore an interruption has occurred, the function CORRECT(LI) with corresponding flow-chart in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>d </italic></highlight>is invoked in step <highlight><bold>126</bold></highlight>. This function allows to continue the function REKURS that has been described above starting from each of the nLI pixels contained in the list LI, but having reinitialized the value of recursion to 0, since recursion is restarting. The function contains step <highlight><bold>170</bold></highlight> in which k is reinitialized to 0, since in step <highlight><bold>171</bold></highlight> a loop over the index i running from 0 to nLI is entered, which allows the execution of each REKURS function. In that loop first of all a local dynamic list LI<highlight><bold>2</bold></highlight> is reset in step <highlight><bold>172</bold></highlight>. In step <highlight><bold>173</bold></highlight> the function REKURS is invoked for the current pixel, corresponding to the entry i in the list LI, with a current code of mark N, the value of k is set to 0, and instead of the interruption list LI the local list LI<highlight><bold>2</bold></highlight> is used. In step <highlight><bold>173</bold></highlight> the return value of REKURS is also examined. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> If it is equal to 0 the loop over i is exited while incrementing i by 1 in step <highlight><bold>175</bold></highlight>, moving on to the next entry in LI. If it is not the case CORRECT is invoked another time in step <highlight><bold>174</bold></highlight>, not with the original dynamic list LI but using the local list LI<highlight><bold>2</bold></highlight>. After doing so the loop is exited in step <highlight><bold>175</bold></highlight>. After the processing of all entries the loop is terminated in step <highlight><bold>176</bold></highlight>. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> After step <highlight><bold>126</bold></highlight> where the function CORRECT is applied to the interruption list LI, or after the execution of the function REKURS in step <highlight><bold>125</bold></highlight> of the sub procedure PROC, the current code of mark N is incremented by 1 in step <highlight><bold>27</bold></highlight>, and the loops over the ordinates y from step <highlight><bold>128</bold></highlight> and over the abscises x from step <highlight><bold>129</bold></highlight> are terminated. This way all points of the contour map are processed, terminating with step <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>e </italic></highlight>show schematically the function-call tree of the sub procedure PROC and the function REKURS and CORRECT. Obviously the sub procedure PROC invokes the function REKURS which invokes itself one or multiple times, with high or low recursion level k. The function CORRECT invokes the function REKURS in a similar way, and invokes itself multiple times, too. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Note that in certain applications, such a limitation to the number of recursions may be absolutely necessary. This is particularly the case when marks are made of a simple geometry, for example consisting only of lines and the computer being sufficiently strong. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>c</italic></highlight>, the separation map <highlight><bold>25</bold></highlight> contains a mark with a code of mark equal to 0 (N&equals;0), another mark with a code of mark equal to 1 (N&equals;1). In the separation map <highlight><bold>25</bold></highlight> each mark is separated from other marks, since each of its contour pixels have been identified. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> In the next step, each of the marks are filled in order to add the pixels placed in the interior of the mark to the dynamic list <highlight><bold>22</bold></highlight> and in order to create a new map, called mark map <highlight><bold>26</bold></highlight>, represented in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>d</italic></highlight>. Note that this step may in certain applications be omitted since the geometric extension of a mark in the initial image <highlight><bold>12</bold></highlight> is entirely determined by its contour pixels in the separation map <highlight><bold>25</bold></highlight>, represented in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>c</italic></highlight>. This is particularly true for marks that are made of alphanumerical characters or simple lines. Whereas, in the case of marks with big surfaces, it is preferable to perform the filling step. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> Note also that in contrary in the case of marks with simple geometry, it is not necessary to identify the contour pixels in order to create list <highlight><bold>22</bold></highlight> and to identify the individual pixels of each mark in the image. In fact it is possible to directly create the mark map <highlight><bold>26</bold></highlight> from the filtered image <highlight><bold>23</bold></highlight> as described below. Furthermore the identification of contour pixels in advance as described above allows accelerating significantly the process in the case of marks with complex geometry. Especially when combining alphanumerical characters with frames, like for example in some traditional printed documents. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In order to realize this filling step, the separation map <highlight><bold>25</bold></highlight> is processed again, the pixels are examined columns by columns, line by line like described above. Simultaneously the filtered image <highlight><bold>23</bold></highlight> is examined concerning the color of each pixel. At the first contour pixel of an encountered mark in the separation map <highlight><bold>25</bold></highlight>, it is assumed that the color of that first encountered contour pixel from that mark in the filtered image <highlight><bold>23</bold></highlight> corresponds to the color of the mark. The processing of the separation map <highlight><bold>25</bold></highlight> continues. At the next pixel the value in the separation map <highlight><bold>25</bold></highlight> is necessarily either the same (N) of the preceding pixel, which is a contour pixel, or has the value &minus;1. In this second case the color of the corresponding pixel in the filtered image is examined. If that color is the same than that of the preceding pixel, which is a contour pixel, the value in the map is altered to N, since it is a pixel in the inferior of the mark. But if the color is not the same than that of the preceding contour pixel, is must be a pixel at the exterior of the mark, and therefore processing may continue with the next pixel. By processing all pixels in the separation map <highlight><bold>25</bold></highlight>, the interior of the marks are being filled and the mark map <highlight><bold>26</bold></highlight> has been obtained. At each altering of a value, the coordinates are, of course, added to the entry of the mark in the dynamic list <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> represents an example of a flow-chart allowing to realize the mark map <highlight><bold>26</bold></highlight> starting with the separation map <highlight><bold>25</bold></highlight>. During the initial step <highlight><bold>190</bold></highlight>, a variable X is set to the value TF that corresponds to the color code of the background in the filtered image <highlight><bold>23</bold></highlight>. This color code may have been calculated in advance or set by the user as described above. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> During step <highlight><bold>191</bold></highlight> a loop over the ordinates y from 0 to ymax of the filtered image <highlight><bold>24</bold></highlight> is entered, and in step <highlight><bold>192</bold></highlight> another loop is entered over the abscisses x, from 0 to xmax. During step <highlight><bold>193</bold></highlight>, the color code in the initial image <highlight><bold>23</bold></highlight> of the current pixel (x, y) is compared to X. If this code is different from the code of the background the current pixel is not part of a mark, proceeding to step <highlight><bold>198</bold></highlight> and <highlight><bold>199</bold></highlight> where the loop is exited, the abscises and ordinate are respectively increased by 1. Else wise it is examined if the code of the separation map <highlight><bold>25</bold></highlight> equals &minus;1 in step <highlight><bold>194</bold></highlight>. If not, it is a previously identified contour pixel, therefore R is set to the value of SK&lsqb;x&rsqb; &lsqb;y&rsqb; of the pixel in the separation map <highlight><bold>25</bold></highlight> during step <highlight><bold>195</bold></highlight>, continuing with steps <highlight><bold>198</bold></highlight> and <highlight><bold>199</bold></highlight>. In the other case it can be found that the code in the separation map <highlight><bold>25</bold></highlight> equals &minus;1. That value is changed to the value of R in step <highlight><bold>196</bold></highlight>, since a interior pixel of a mark has been identified. During step <highlight><bold>197</bold></highlight> the pixel P(x, y) is added to the dynamic list <highlight><bold>22</bold></highlight> in the entry corresponding to the mark with code of mark R. The loop is exited in step <highlight><bold>198</bold></highlight> and <highlight><bold>199</bold></highlight>. By these means the marks in the separation map <highlight><bold>25</bold></highlight> are filled. Once all pixels have been processed, the flow-chart ends with step <highlight><bold>200</bold></highlight>. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> The creation of the dynamic list <highlight><bold>22</bold></highlight> has been described referring to an initial image <highlight><bold>12</bold></highlight> and a filtered bitonal image <highlight><bold>23</bold></highlight>. It is easily understandable that this process could also be applied to the case of multiple distinct colors obtained after sorting and filtering. For example, if the image contains four colors, a similar process can be realized. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Preferably, the operation of sorting and filtering allows to obtain a filtered image <highlight><bold>23</bold></highlight>, where all joint pixels with a color code differing from the background colors code, are attributed the same color code. Hence a single mark is formed of adjacent pixels of same color. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In the dynamic list <highlight><bold>22</bold></highlight>, the individual marks of the initial image <highlight><bold>12</bold></highlight> constituted of adjacent pixels, which have therefore been identified and separated from each other. This method is automatically done for any opened initial image <highlight><bold>12</bold></highlight>, in other words, loaded to random access memory, due to the programs of the invention. This method can be associated to the function of editing the loaded image during activation of the program and of the invention during load of the initial image <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> During startup of the program of the invention and during opening of the initial image (during its load into random access memory), not only the image-editing function is activated, but also the (mouse-) pointer-program is launched and associated to a program that allows to define one or more edition-frames <highlight><bold>20</bold></highlight>, superposing the original image <highlight><bold>12</bold></highlight>, as represented in dotted lines in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, and more detailed <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The user may do the definition of that edition-frame <highlight><bold>20</bold></highlight> with the aid of a pointer <highlight><bold>21</bold></highlight>, or by a maneuver with the mouse <highlight><bold>7</bold></highlight> of the type drag-and-drop. From the upper left corner of the edition-frame <highlight><bold>20</bold></highlight> its lower right corner. Such a function for the definition of edition-frames with pointer-aid is well known to graphical user interfaces and image-processing programs. The function of defining such a frame is associated with the primary button of the pointer, usually the left mouse button <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> During the startup of the program of the invention, a primary window is opened, containing in a traditional manner a menu-bar, and a tool-bar in order to incorporate some icons that allow to launch different programs of the application that correspond to the different functions to be realized. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> While the user has defined the edition-frame, he may define the nature of the content of that edition-frame by acting on the secondary button of the mouse <highlight><bold>7</bold></highlight>&mdash;usually the right button&mdash;which should open a configuration menu as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. In that figure, two different types are shown. In the more general example, the configuration menu <highlight><bold>27</bold></highlight> enables the user to define the edition-frame <highlight><bold>20</bold></highlight> and is aimed at realizing operations chosen according to the OCR editing; user-editing; source-editing and application-editing. Those different operations define the nature of the processing on the editing-frame <highlight><bold>20</bold></highlight> aiming to the insertion of edited characters. The functional flow-charts of each of those operations is described in the <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>for the OCR-editing; <highlight><bold>7</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>7</bold></highlight><highlight><italic>b </italic></highlight>for user-input; <highlight><bold>8</bold></highlight> for source-input ad <highlight><bold>9</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>9</bold></highlight><highlight><italic>b </italic></highlight>for application editing. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Each of those operations has to one part the editing-function allowing reforming the content of the edition-frame <highlight><bold>20</bold></highlight> (flow-charts in <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a</italic></highlight>, <highlight><bold>7</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>9</bold></highlight><highlight><italic>a</italic></highlight>) ant, to another part, a editing-function allowing to incorporate the edited characters into the edition-frame <highlight><bold>20</bold></highlight> (flow-charts <highlight><bold>6</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>7</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>8</bold></highlight>, and <highlight><bold>9</bold></highlight><highlight><italic>b</italic></highlight>). </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> In the following pictures and descriptions those definitions are used: </paragraph>
<paragraph id="P-0155" lvl="2"><number>&lsqb;0155&rsqb;</number> B&lsqb;i&rsqb;: edition-frame <highlight><bold>20</bold></highlight> with the number i, </paragraph>
<paragraph id="P-0156" lvl="2"><number>&lsqb;0156&rsqb;</number> B&lsqb;i&rsqb; &lsqb;j&rsqb;: mark with code j within the edition-frame number i, </paragraph>
<paragraph id="P-0157" lvl="2"><number>&lsqb;0157&rsqb;</number> S&lsqb;i&rsqb;: mark with code i within the dynamic list <highlight><bold>22</bold></highlight>, called S, </paragraph>
<paragraph id="P-0158" lvl="2"><number>&lsqb;0158&rsqb;</number> T(x, y : color-code of the coordinates of a pixel (x, y). </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> The OCR-editing operation allows recognizing the characters in the initial image <highlight><bold>12</bold></highlight>, due to a program for character recognition and the fact of using them at startup of a numerical data processing program. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The editing function contains in any case, a starting step <highlight><bold>30</bold></highlight>, and an end step <highlight><bold>31</bold></highlight>. Similarly, each input function contains the initial step <highlight><bold>32</bold></highlight> and the final step <highlight><bold>33</bold></highlight>. These initial and final steps are automatically executed by the program of the invention, according to the state it is in, or due to a user-command. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> In the OCR-input frame, one single step, realized within in the editing function is step <highlight><bold>40</bold></highlight> during which parts of the initial image <highlight><bold>12</bold></highlight> that correspond to the edition-frame <highlight><bold>20</bold></highlight> are painted. During this OCR-input function there is no modification of the image within the editing-frame <highlight><bold>20</bold></highlight>, at this state. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> Le input function corresponds to OCR-input, which consists of identifying the initial characters inside the edition-frame, and to creating a new image of this edition-frame which only incorporates only the initial characters, and to then launch a OCR-program over those initial characters, which have been isolated in advance. These steps are shown in the <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>b</italic></highlight>, with the initial characters in the edition-frame <highlight><bold>20</bold></highlight>. In order to obtain this result, it is necessary that initial characters, which are entirely contained within the edition-frame <highlight><bold>20</bold></highlight>, be separated from marks that extend out of the edition-frame <highlight><bold>20</bold></highlight>. These invariable graphical subsets M<highlight><bold>1</bold></highlight> cannot contain marks whose extensions exceed a first predetermined value and/or whose extension remain under a second predetermined value. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> In order to do so, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b</italic></highlight>, a loop is entered in step <highlight><bold>41</bold></highlight> over the marks running from 0 to nM of the dynamic list <highlight><bold>22</bold></highlight>. For each mark S&lsqb;i&rsqb; of that list is is examined if it is entirely contained in the edition-frame <highlight><bold>20</bold></highlight> in step <highlight><bold>42</bold></highlight>. If such is the case, the mark S&lsqb;i&rsqb; is written to a new image DN of the edition-frame B&lsqb;n&rsqb; in step <highlight><bold>43</bold></highlight>. If not the case, it will be directly continued with step <highlight><bold>44</bold></highlight> where the loop is exited and the index i of that loop is incremented by 1. At then end of those loops a new image of the edition-frame <highlight><bold>20</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b </italic></highlight>is obtained, which only contains the characters entirely contained within the edition-frame <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> In order to implement step <highlight><bold>42</bold></highlight>, for each mark its set of pixels as represented <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is examined. If all pixels of S&lsqb;i&rsqb; have coordinates (x, y) that satisfy the condition x1&lt;x&lt;x2 and y1&lt;y&lt;y2, (x1, y1) being the coordinates of the pixel in the upper left corner of the edition-frame <highlight><bold>20</bold></highlight>, and (x2, y2) being the coordinates of the pixel in the lower right corner of the edition-frame <highlight><bold>20</bold></highlight>, it can be concluded that the mark S&lsqb;i&rsqb; is an initial character like the character nM<highlight><bold>2</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. It is stringent that every pixel C and D of that mark nM<highlight><bold>2</bold></highlight> is contained in the interior of the edition-frame <highlight><bold>20</bold></highlight>. Whereas, if a mark nM<highlight><bold>1</bold></highlight> represents a pixel A with coordinates (xA, yA) is within the edition-frame <highlight><bold>20</bold></highlight>, but also a pixel (xB, yB) which is outside the edition-frame <highlight><bold>20</bold></highlight>, this mark nM<highlight><bold>1</bold></highlight> forms an invariable graphical subset M<highlight><bold>1</bold></highlight> and is not considered. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> When executing step <highlight><bold>42</bold></highlight>, a loop over all pixels of each mark S&lsqb;i&rsqb;, it is examined whether its coordinates are contained within the edition-frame <highlight><bold>20</bold></highlight> like indicated above. For each pixel with coordinates inside the edition-frame <highlight><bold>20</bold></highlight>, a first counter, with an initial value of 0 can be set to 1. If subsequently within the same mark a pixel outside of the edition-frame <highlight><bold>20</bold></highlight> is found, a second counter, with initial value 0, is set to 1. For the mark being considered as initial character, the value of the first counter needs to be 1, whereas the second counter needs to be 0. For the other cases, the mark S&lsqb;i&rsqb; is skipped, because it is not an initial character. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> During the next step <highlight><bold>45</bold></highlight>, a frame (memorized but not displayed) similar to the edition-frame <highlight><bold>20</bold></highlight>, but only created from new images DN, which have been obtained before. Step <highlight><bold>46</bold></highlight>, the recognition program, is applied to the image by invoking the input function represented by B&lsqb;i&rsqb;.ln on that new frame, which in the case of OCR-input, corresponds to a function OCR(B&lsqb;n&rsqb;) for character recognition. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Any program that is able Lo recognize characters on a pixelised subset of an image as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b </italic></highlight>can be used as character recognition program. Many character recognition programs are known and may be used. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> This character recognition program, in the example of <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b</italic></highlight>, allows recognizing the alphanumerical ASCII characters individually as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>c</italic></highlight>. The thereby obtained values can be used directed as input for a digital data processing program, a spreadsheet or text-editor for example, as shown in step <highlight><bold>47</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> The operation of user input/edition allows to manually edit the data by an user, with the aid of a keyboard for example, providing the option to use data from a digital data processing program like a text-editor or a spreadsheet . . . or to introduce them directly in the edition-frame at a predetermined and chosen place. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> In the context of this operation, the edition function has to determine in advance which the initial characters in the edition-frame are, and erase all those initial character in order to avoid all possible and unwanted overlaying of edited characters and initial characters. This is shown in the flow-chart of <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>a</italic></highlight>. After the initial step <highlight><bold>30</bold></highlight>, step <highlight><bold>48</bold></highlight> draws the edition frame <highlight><bold>20</bold></highlight>, and then in step <highlight><bold>49</bold></highlight>, a loop over the marks in the dynamic list <highlight><bold>22</bold></highlight>, running from 0 to nM is entered. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> During the subsequent step <highlight><bold>50</bold></highlight>, a loop designed to examine the different pixels of a mark, numbered from 1 to nP, is entered. In step <highlight><bold>51</bold></highlight> examination if coordinate (x, y) of the pixels is inside the edition-frame <highlight><bold>20</bold></highlight> takes place as described above. If this is the case, the pixel is erased by setting its color code to TF, the background color (equals to 0 in the example), thus writing the value TF to the second column of the dynamic list <highlight><bold>22</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Let T(x, y) equal TF. Step <highlight><bold>52</bold></highlight> is not executed if the coordinates of the pixel are not laying outside of the edition-frame <highlight><bold>20</bold></highlight>. Then the final steps of the loops <highlight><bold>53</bold></highlight> and <highlight><bold>54</bold></highlight> are executed, which increment the indices of the loop by 1, and the new frame where the initial character have been erase is redrawn in step <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> The source input operation allows obtaining edited characters from a digital data processing program like a spreadsheet or a text-editor. The edition function of this operation is the same as the function used in the user input operation, which has been described above, therefore all initial characters within the edition-frame <highlight><bold>20</bold></highlight> are erased in advance. See the flow-chart at the edition function of point O<highlight><bold>1</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>in order to create a new frame B&lsqb;n&minus;1&rsqb; in which the obtained values, that are the output of the numerical data processing program and represented by the function EXTERN (B(n&plus;1)) during step <highlight><bold>58</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> are used. in the next step <highlight><bold>59</bold></highlight>, a new step of the numerical data processing with the aide of a spreadsheet or text-editor is invoked, in order to obtain the edited characters that are to be inserted in the edition-frame <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> The operation of application edition allow to the user to display and introduce the results of a calculation, like price per article or taxes, done by a digital data processing program at a chosen place of the edition-frame <highlight><bold>20</bold></highlight> and to draw it to the image of that frame. For the editing function of the operation (<cross-reference target="DRAWINGS">FIG. 9</cross-reference><highlight><italic>a</italic></highlight>), in an initial step the initial characters within that frame are erased, hence starting from Q<highlight><bold>2</bold></highlight> of the flow-chart in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>a</italic></highlight>, before the new image DN is created during step <highlight><bold>55</bold></highlight>. From that point on the result of the calculation done by the digital data processing program is drawn to a new frame in step <highlight><bold>60</bold></highlight>. The function then exits. During this operation, no particular edition is done in a way the edition function (<cross-reference target="DRAWINGS">FIG. 9</cross-reference><highlight><italic>b</italic></highlight>) resumes with Q<highlight><bold>1</bold></highlight> of the flow-chart in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b</italic></highlight>, final step <highlight><bold>33</bold></highlight>. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>d </italic></highlight>represents an example of a frame obtained by a spreadsheet during source edition. The spreadsheet program has in fact modified the initial character &ldquo;5&rdquo; to an edited character &ldquo;6&rdquo;, and allowed to add the edited characters &ldquo;8&rdquo; and &ldquo;9&rdquo;. In the next step of <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>e, </italic></highlight>the editing function erases all initial characters of the edition-frame <highlight><bold>20</bold></highlight>, represented in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>a</italic></highlight>. By combining their values in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>d </italic></highlight>with the image of <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>e</italic></highlight>, created during step <highlight><bold>55</bold></highlight>, a final new image DN, represented by <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>f</italic></highlight>, can be obtained. Obviously, these initial characters, even if erased from the image, can be reintroduced in their initial form to the frame. In fact, their pixels are still memorized in the dynamic list <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> In the second variant, represented by <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the configuration menu is preprogrammed to incorporate the different above-described operations on the edition-frame <highlight><bold>20</bold></highlight>. For example, for a call to tender the edition-frames can correspond to a limited number of date which has to be edited, usually chosen in a list or articles, in the number of articles, the quantity of articles, the price par piece of an article, the amount per article and the total sum. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Under these conditions, the menu <highlight><bold>28</bold></highlight> may incorporate the required operations for data editing. For example the editing-frame declared to naturally correspond to a &ldquo;designation&rdquo; would be an operation if user-editing. An editing-frame, declared to correspond to a column of quantities would require the OCR-input operation, see source-editing if the values are issue of a program running in advance. An editing-frame declared as &ldquo;amount per article&rdquo; corresponds to a source-editing operation . . . </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> Of course the different operations of the main configuration menu <highlight><bold>27</bold></highlight> can be combined in a single editing-frame <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> During the drawing of the new frame (step <highlight><bold>55</bold></highlight>), the program of the invention is adapted to automatically calculate the dimension of edited characters and their appropriate replacement, in a way that the invariable graphical subsets are not overlaying. This is done according to the flow-chart in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> which contains an initial step <highlight><bold>34</bold></highlight>, a step <highlight><bold>61</bold></highlight> where a parameter called max is initialized to 0, a step <highlight><bold>62</bold></highlight> where a loop is entered, that covers the individual lines, numbered from 1 to nl within the edition-frame <highlight><bold>20</bold></highlight>. The number of lines nl can be entered by the user or be calculated by the program, for example depending on the amount of space between the initial character M<highlight><bold>1</bold></highlight> and the edition-frame <highlight><bold>20</bold></highlight>, after the execution of a character recognition program, and/or depending on the number of invariable graphical subsets present in the edition-frame <highlight><bold>20</bold></highlight>, as determined in the above-described step <highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> For each line, the parameter max is compared to the number nM(i) of initial characters on that line, during step <highlight><bold>63</bold></highlight>. If it is inferior, the value of max is set to that of nM(i) in step <highlight><bold>64</bold></highlight>. If superior, step <highlight><bold>64</bold></highlight> is skipped and the loop is terminated in step <highlight><bold>65</bold></highlight>. At the end of that loop, the value of max equals to the number of initial characters in the longest line of the edition-frame <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> During step <highlight><bold>66</bold></highlight>, the width lM and the height hM of each edited character is formulated:</paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>lM&equals;lF</italic></highlight>/max,</in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>hM&equals;hF/nl,</italic></highlight></in-line-formula></paragraph>
<paragraph id="P-0181" lvl="2"><number>&lsqb;0181&rsqb;</number> Where lF is the width of the edition-frame <highlight><bold>20</bold></highlight>, and If is its height, measured in pixels. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Then the placement of the coordinates (X, Y) where the edited characters are to be drawn. First, during step <highlight><bold>67</bold></highlight>, initialization X&equals;x1 and Y&equals;y1 to the coordinates of the upper-left corner of the edition-frame <highlight><bold>20</bold></highlight>. Then a loop over the number of lines, numbered <highlight><bold>1</bold></highlight> to nl, is entered during step <highlight><bold>68</bold></highlight>, where for every line Y is incremented by hM during step <highlight><bold>69</bold></highlight>. Then the edited characters are altered on the current line during step <highlight><bold>70</bold></highlight>, beginning at the placement of the coordinates (X, Y). Step <highlight><bold>71</bold></highlight> terminates the loop and therefore all lines that have to be edited. The process terminates with step <highlight><bold>35</bold></highlight>. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> The calculation of the dimension and the placements is automatically done each time the characters are drawn. This is particularly the case during step <highlight><bold>55</bold></highlight>, the above-mentioned operation of user editing. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> represents an example of a filled printed document of to the invention. In that figure, the edited characters are written in italic, in order to distinguish them from the initial characters, represented in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Of course, such a distinction is not mandatory. It may furthermore be easily realized when the characters are edited in the invention, with the aid of every character-edition function. For example the CEdit class of MICROSOFT (R)&apos;s library MFC. Thereby a filled image <highlight><bold>80</bold></highlight>, onto which the edited characters are automatically positioned with the appropriate dimensions, into the adept zones, without the risk of overlapping or loss of invariable graphical subsets. The different edition-frames <highlight><bold>20</bold></highlight> that are opened to fill that image are marker with dotted lines. This filled image <highlight><bold>80</bold></highlight> may be directly printed, stored on storage-media, or transmitted through computer-networks, for example in an encrypted way. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> The invention therefore allows good usability for the filling of printed documents of any sort in a very quick and easy way. Note that it allows the filling of empty documents that lack any calculations with a simple manual-editing, or the filling of more complex printed documents which incorporate calculations that may have been preprogrammed by one or more spreadsheet- or text-editor-programmers, as in the example of a call to tender. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> The invention can be the subject of many variations relative to the currently described realization types. The functions, operations and steps described above may be realized by programming, for example using C&plus;&plus; language, under the WINDOWS (R) platform. Furthermore other operating systems or pointer-software may be used, than those commercialized by MICROSOFT CORPORATION. Also, the invention can be applied to other image formats that pixelised imaged, for example vectorized images, by adapting the corresponding algorithms in a manner that allows identifying the invariable graphical subsets. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>/ &mdash;Device for automated filling of printed documents containing marks with the aid of a computer&mdash;note that those may contain frames, borders, lines, columns, patterns, markers, signs, graphics, alphanumerical characters or signs, . . . &mdash;where contained characters have to be edited, this device and method incorporating a computer that is configured and adapted to: 
<claim-text>allow the memorization and displaying on a screen (<highlight><bold>5</bold></highlight>) of an image called initial image (<highlight><bold>12</bold></highlight>), representing a printed document that is to be filled, </claim-text>
<claim-text>automatically identify the corresponding marks in the initial image (<highlight><bold>12</bold></highlight>), </claim-text>
<claim-text>allow the creation of at least one edition-frame (<highlight><bold>20</bold></highlight>), which covers a partial zone of the printed document in which at least one character is to be edited, </claim-text>
<claim-text>automatically identify, in each edition-frame (<highlight><bold>20</bold></highlight>), each of the subsets of the initial images, which are called invariable graphical subsets (M<highlight><bold>1</bold></highlight>), </claim-text>
<claim-text>corresponding to marks that extend into the edition-frame (<highlight><bold>20</bold></highlight>), but have at least 1 dimension that is superior to a predetermined value and/or inferior to another predetermined value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>/ &mdash;Device of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, comprising invariable graphical subsets (M<highlight><bold>1</bold></highlight>) that correspond to marks which extend more than the edition-frame (<highlight><bold>20</bold></highlight>) in at least one dimension. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>/ &mdash;Device of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, comprising invariable graphical subsets (M<highlight><bold>1</bold></highlight>) corresponding to marks which extend over the limits of the edition-frame (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00003">3</dependent-claim-reference>, comprising a computer that is configured and programmed in order to: 
<claim-text>allow the activation of tools adapted for the edition of characters in order to allow the edition of at least one character, called edited character, and able to place it automatically at a predetermined point of the edition-frame, </claim-text>
<claim-text>automatically modify each subset of the original image (<highlight><bold>12</bold></highlight>) within the edition-frame (<highlight><bold>20</bold></highlight>) covered by at least one edited character, with the exception of invariable graphical subsets (M<highlight><bold>1</bold></highlight>), which remain unchanged, and thereby generate an image which is called filled image (<highlight><bold>80</bold></highlight>) of the printed document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00004">4</dependent-claim-reference>, comprising a computer which is configured to automatically identify in each edition-frame (<highlight><bold>20</bold></highlight>) each of those subsets of the initial image (<highlight><bold>12</bold></highlight>) which have a different color that a predetermined color, called background color. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00005">5</dependent-claim-reference>, comprising a computer that is configured to automatically identify in each edition-frame (<highlight><bold>20</bold></highlight>), each of those subsets of the initial image (<highlight><bold>12</bold></highlight>), called initial characters (M<highlight><bold>2</bold></highlight>), corresponding to a mark that lies entirely within the edition-frame (<highlight><bold>20</bold></highlight>) and is not identified as invariable graphical subset (M<highlight><bold>1</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>/ &mdash;Device of the <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, comprising a computer that is configured and programmed to automatically modify each subsets of the initial image (<highlight><bold>12</bold></highlight>) within the edition-frame (<highlight><bold>20</bold></highlight>), by eliminating the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) and conserving the initial characters (M<highlight><bold>2</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>/ &mdash;Device of the <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> and one of the claims <highlight><bold>6</bold></highlight> or <highlight><bold>7</bold></highlight>, comprising a computer which is configured to modify the image of the edition-frame (<highlight><bold>20</bold></highlight>) in order to create the filled image (<highlight><bold>80</bold></highlight>), automatically erase at least every of the initial characters (M<highlight><bold>2</bold></highlight>) that would be at least partially covered by an edited character, within the edition-frame (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>/ &mdash;Device of the <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> or <highlight><bold>8</bold></highlight>, comprising a computer, which is able to attribute each initial character (M<highlight><bold>2</bold></highlight>) with a memorized identification code, according to its family of predetermined object-forms, where the computer is adapted and programmed to execute a character recognition program at least for every initial character (M<highlight><bold>2</bold></highlight>) identified within at least one edition-frame (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>/ &mdash;Device of one of <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00009">9</dependent-claim-reference>, comprising a computer that incorporates at least one digital data processing program, chosen among a spreadsheet, a text-editor a image-editor, configured according to predetermined conditions that are imposed by the printed document which has to be filled, tools to allow the user to associate each edition-window to an input or output interface of a computer-program, and that the computer is adapted to define data as edited characters generated by this computer-program. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00010">10</dependent-claim-reference>, comprising the fact of the initial image (<highlight><bold>12</bold></highlight>) being a digital pixelised image, where the computer incorporates tools for analysis of the initial image (<highlight><bold>12</bold></highlight>) which are adapted to automatically generate a dynamic list (<highlight><bold>22</bold></highlight>) of all marks in the initial image (<highlight><bold>12</bold></highlight>), each mark of that list (<highlight><bold>22</bold></highlight>) being formed by a single set of adjacent pixels, selected according to their coordinates and have a color code which satisfies at least one predetermined condition. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>/ &mdash;Device of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, comprising the tools for analyzing the initial image (<highlight><bold>12</bold></highlight>) which incorporate means sorting and/or filtering adapted to automatically generate an image (<highlight><bold>23</bold></highlight>) from the initial image (<highlight><bold>12</bold></highlight>), in which the colors are members of a palette with a predetermined number of colors, one of those colors corresponding to the background color of the image, and each mark in the list (<highlight><bold>22</bold></highlight>) being a set of adjacent pixels that have a color code which is different from the background color. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>/ &mdash;Device of one of the claims <highlight><bold>11</bold></highlight> or <highlight><bold>12</bold></highlight>, comprising the step of each mark in list (<highlight><bold>22</bold></highlight>) being formed by a set of adjacent pixels which have the same color code. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>/ &mdash;Device according to one of <dependent-claim-reference depends_on="CLM-00011">claims 11</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00013">13</dependent-claim-reference>, comprising a computer which is configured to automatically compare the coordinates of the pixels in each mark of list (<highlight><bold>22</bold></highlight>) with those of pixels within a edition-frame (<highlight><bold>20</bold></highlight>), in order to automatically determine if one of them is within that edition-frame (<highlight><bold>20</bold></highlight>), and, if that is the case, to automatically determine if there exist pixels of that same mark, which have coordinates exceeding predetermined limits&mdash;usually outside the edition-frame (<highlight><bold>20</bold></highlight>)&mdash;in a way that this mark is identified as invariable graphical subset (M<highlight><bold>1</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>/ &mdash;Device of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, comprising a computer that is configured to automatically compare the coordinates of the pixel in each mark of list (<highlight><bold>22</bold></highlight>) with those of pixels contained in a edition-frame (<highlight><bold>20</bold></highlight>), in order to automatically determine if one of them is part of the edition-frame (<highlight><bold>20</bold></highlight>), and, if the case, to determine automatically if all the pixels of that mark have coordinates included within predefined limits&mdash;usually those of the edition-frame (<highlight><bold>20</bold></highlight>)&mdash;in order to identify that mark as being an initial character (M<highlight><bold>2</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>/ &mdash;Device of the claims <highlight><bold>14</bold></highlight> and <highlight><bold>15</bold></highlight>, comprising a computer that is configured to automatically examine each mark of list (<highlight><bold>22</bold></highlight>), and, 
<claim-text>if it is identified as being an invariable graphical subset (M<highlight><bold>1</bold></highlight>), not applying any character recognition program to this mask </claim-text>
<claim-text>if it is identified as initial character (M<highlight><bold>2</bold></highlight>), applying automatically a program of character recognition. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00011">claims 11</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00016">16</dependent-claim-reference>, comprising a computer which is configured to automatically conserve or incorporate the pixels of the marks in list (<highlight><bold>22</bold></highlight>) that correspond to invariable graphical subsets (M<highlight><bold>1</bold></highlight>) and initial characters (M<highlight><bold>2</bold></highlight>) that have not been edited to the filled image (<highlight><bold>80</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00017">17</dependent-claim-reference>, comprising a computer, which is configured to automatically calculate the dimensions of each edited character, in order to render them compatible with the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) and the edition-frame (<highlight><bold>20</bold></highlight>) and in order to place it correctly into the filled image (<highlight><bold>80</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00018">18</dependent-claim-reference>, comprising a computer that is configured and programmed to activate tools for character edition upon command from a pointer-program (mouse driver) which is guided by the user to a predetermined point in a edition-frame (<highlight><bold>20</bold></highlight>) of the initial image (<highlight><bold>12</bold></highlight>), used to place at least one edited character. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00019">19</dependent-claim-reference>, comprising a computer being configured and programmed to allow the definition of each edition-frame (<highlight><bold>20</bold></highlight>) by the user using a pointer-program and a graphical user interface. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>/ &mdash;Device of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00020">20</dependent-claim-reference>, comprising a computer being configured to allow the reproduction of the filled image (<highlight><bold>80</bold></highlight>) in stable form&mdash;usually by printing or writing to read-only storage-media. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>/ &mdash;In a device comprising a computer with at least one screen (<highlight><bold>5</bold></highlight>) for electrical display, a method for automated, computer-aided filling of printed documents which contain marks, usually containing frames, borders, lines, columns, patterns, markers, signs, alphanumerical or graphical signs, . . . and in which the characters are to be edited, this method containing the steps: 
<claim-text>display of the image, called initial image (<highlight><bold>12</bold></highlight>), on a screen (<highlight><bold>5</bold></highlight>), representing a printed document, </claim-text>
<claim-text>identifying automatically, in each edition-frame (<highlight><bold>20</bold></highlight>) that has at least one character requiring edit, each individual subset of the initial image, which are called invariable graphical subsets, </claim-text>
<claim-text>defining, within this initial image (<highlight><bold>12</bold></highlight>), at least one frame, called edition-frame, covering a partial zone of the printed document, in which at least one character is to be edited, </claim-text>
<claim-text>and identifying automatically, within each edition-frame (<highlight><bold>20</bold></highlight>), each of the subsets of the initial image, that are called invariable graphical subsets (M<highlight><bold>1</bold></highlight>), corresponding to the marks which extend into the edition-frame (<highlight><bold>20</bold></highlight>) and has at least one dimension which is superior to a predetermined value and/or inferior to another predetermined value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>/ &mdash;Method of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, comprising the steps of the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) corresponding to mark which are superior to the size of the edition-frame in at least one dimension (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>/ &mdash;Method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, comprising invariable graphical subsets (M<highlight><bold>1</bold></highlight>) corresponding to marks which extend over the limits of the edition-frame (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00024">24</dependent-claim-reference>, comprising the steps of: 
<claim-text>activation of character-editing tools, which are configured to allow the edition of at least one character, called edited character, and able to place it on a predetermined point of at least one edition-frame (<highlight><bold>20</bold></highlight>) of the initial image (<highlight><bold>12</bold></highlight>), </claim-text>
<claim-text>automatically modifying each part of the initial image (<highlight><bold>12</bold></highlight>) within the edition-frame (<highlight><bold>20</bold></highlight>) covered by at least one edited character, with the exception of the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) that remain unchanged, and thereby generation of the image called filled image (<highlight><bold>80</bold></highlight>), of the printed document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00025">25</dependent-claim-reference>, comprising a step where the marks of the initial image, which are parts of the initial image (<highlight><bold>12</bold></highlight>) having a distinct and predetermined color, called background color, are automatically identified. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00026">26</dependent-claim-reference>, comprising the steps of: 
<claim-text>automated identification of each part of the initial image (<highlight><bold>12</bold></highlight>) within the edition-frame (<highlight><bold>20</bold></highlight>), which is called initial character (M<highlight><bold>2</bold></highlight>), corresponding to a mark which fits entirely into the edition-frame (<highlight><bold>20</bold></highlight>), and that is not identified to be an invariable graphical subset (M<highlight><bold>1</bold></highlight>). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>/ &mdash;Method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, comprising the steps of automated modification of each portion of the initial image (<highlight><bold>12</bold></highlight>) in which the edition-frame (<highlight><bold>20</bold></highlight>) by eliminating the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) while preserving the initial characters (M<highlight><bold>2</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>/ &mdash;Method of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference> and of one of the claims <highlight><bold>27</bold></highlight> or <highlight><bold>28</bold></highlight>, comprising the steps of consisting of modifying the initial image (<highlight><bold>12</bold></highlight>) in the edition-frame (<highlight><bold>20</bold></highlight>) in order to create the filled image (<highlight><bold>80</bold></highlight>) and to erase at least each of the initial characters (M<highlight><bold>2</bold></highlight>) from the edition-frame (<highlight><bold>20</bold></highlight>), which would have been partially covered by the edited character. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00026">claims 26</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00029">29</dependent-claim-reference>, comprising the step of a recognition being able to attribute each initial character (M<highlight><bold>2</bold></highlight>) with a identification code, that has been memorized from one of the form of one the objects in the family of known objects, depending on its form, in a way that this step of recognition is executed for at least the initial characters (M<highlight><bold>2</bold></highlight>) identified in at least one edition-frame (<highlight><bold>20</bold></highlight>). </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00030">30</dependent-claim-reference>, comprising the steps: 
<claim-text>processing data that has been selected with a spreadsheet or text-editor, and a program for digital image processing, configured according to the predetermined conditions that are defined by the printed document that has to be filled, </claim-text>
<claim-text>associating to each edition-frame (<highlight><bold>20</bold></highlight>) an input and/or an output interface of a digital data processing program, </claim-text>
<claim-text>defining the data obtained from that program as edited characters. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00031">31</dependent-claim-reference>, comprising the steps of: 
<claim-text>memorization of the initial image (<highlight><bold>12</bold></highlight>) as digital pixelised image, </claim-text>
<claim-text>analyzing the initial image (<highlight><bold>12</bold></highlight>) and automatically generating a dynamic list (<highlight><bold>22</bold></highlight>) of all the marks in that initial image (<highlight><bold>12</bold></highlight>), where each mark in that list (<highlight><bold>22</bold></highlight>) is formed by a single set of adjacent pixels, selected according to their coordinates and having a color code satisfying to at least one predetermined condition. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>/ &mdash;Method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, comprising the steps of 
<claim-text>sorting and/or filtering the initial image (<highlight><bold>12</bold></highlight>) in order to automatically generate, based of this initial image (<highlight><bold>12</bold></highlight>), an image (<highlight><bold>23</bold></highlight>) with colors that are part of a palette that contains a predetermined number of colors, among which is one color that corresponds to the background color of the image, </claim-text>
<claim-text>sorting each mark in the list (<highlight><bold>22</bold></highlight>) as a set of adjacent pixels having the same color code, which is unequal to the background color. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00032">claims 32</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00033">33</dependent-claim-reference>, comprising the fact that each element of the list (<highlight><bold>22</bold></highlight>) is being formed of an adjacent set of pixels, having the same color. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00032">claims 32</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00034">34</dependent-claim-reference>, comprising the steps of: 
<claim-text>automated comparing of the coordinates of pixels from each mark in the list (<highlight><bold>22</bold></highlight>) with those of the pixels within the edition-frame (<highlight><bold>20</bold></highlight>), </claim-text>
<claim-text>determining automatically if one them is part of that edition-frame (<highlight><bold>20</bold></highlight>), </claim-text>
<claim-text>and, if so, determining automatically if pixels exist within that same mark, which are outside of predetermined bounds&mdash;usually outside of the bound of the edition-frame (<highlight><bold>20</bold></highlight>)&mdash;, in a way that enables to identify that mark as being an invariable graphical subset (M<highlight><bold>1</bold></highlight>). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00032">claims 32</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00035">35</dependent-claim-reference>, comprising the steps: 
<claim-text>automatically comparing the coordinates of the pixels of each mark in the list with those of the pixels within an edition-frame (<highlight><bold>20</bold></highlight>), </claim-text>
<claim-text>determining automatically if all pixels of that mark have coordinates, which are within, predetermined limits&mdash;usually those of the edition-frame (<highlight><bold>20</bold></highlight>)&mdash;, in a way that enables to identify these marks as being initial characters (M<highlight><bold>2</bold></highlight>). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>/ &mdash;Method of the claims <highlight><bold>35</bold></highlight> and <highlight><bold>36</bold></highlight>, comprising the steps of: 
<claim-text>automated examination of each mark in the list (<highlight><bold>22</bold></highlight>), and, </claim-text>
<claim-text>if it is identified as being a invariable graphical subset (M<highlight><bold>1</bold></highlight>), not applying a character recognition program to that mark, </claim-text>
<claim-text>if it is identified as being an initial character (M<highlight><bold>2</bold></highlight>) however, applying automatically a character recognition program on that mark. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00032">claims 32</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00037">37</dependent-claim-reference>, comprising the steps: 
<claim-text>automated conservation or incorporation of the pixels from marks, which correspond to invariable graphical subsets (M<highlight><bold>1</bold></highlight>) and to initial characters (M<highlight><bold>2</bold></highlight>) therefore not being subject of any editing, in the list (<highlight><bold>22</bold></highlight>) into the filled image (<highlight><bold>80</bold></highlight>). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00038">38</dependent-claim-reference>, comprising the steps: 
<claim-text>automated calculation of the dimension of each edited character, in order to render them compatible to the invariable graphical subsets (M<highlight><bold>1</bold></highlight>) and to the edition-frame (<highlight><bold>20</bold></highlight>), and in a way that the edited character is correctly positioned in the filled image (<highlight><bold>80</bold></highlight>). </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00039">39</dependent-claim-reference>, comprising the steps of: 
<claim-text>activation of tools that enable to edit the characters up command from a pointer-program, guided by a user, at a predetermined point of the edition-frame (<highlight><bold>20</bold></highlight>) of the original image (<highlight><bold>12</bold></highlight>), starting from which at least one edited character should be positioned. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00040">40</dependent-claim-reference>, comprising the steps of : 
<claim-text>allowing defining each edition-frame (<highlight><bold>20</bold></highlight>) by the user, using a pointer-program and a graphical user interface. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>/ &mdash;Method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00041">41</dependent-claim-reference>, comprising at least one step in which the filled image (<highlight><bold>80</bold></highlight>) is reproduced under a stable form&mdash;usually by printing or writing to read-only storage-media. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>/ &mdash;Software product able to be loaded into the random access memory of a computer in order to realize a method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00042">42</dependent-claim-reference>, in a way that a device and method of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00021">21</dependent-claim-reference> is created. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>/ &mdash;Storage support that is adapted to be read by a drive that is connected to a computer, comprising the steps of containing a stored program that is configured to be loaded into the random access memory of a computer and program to be a method of one of the <dependent-claim-reference depends_on="CLM-00022">claims 22</dependent-claim-reference> to <highlight><bold>45</bold></highlight>, in a way that a device and method of one of the <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00021">21</dependent-claim-reference> is created.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004989A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004989A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004989A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004989A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004989A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004989A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004989A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004989A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004989A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004989A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004989A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004989A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004989A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004989A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004989A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004989A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
