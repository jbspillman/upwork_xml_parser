<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005264A1-20030102-D00000.TIF SYSTEM "US20030005264A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005264A1-20030102-D00001.TIF SYSTEM "US20030005264A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005264A1-20030102-D00002.TIF SYSTEM "US20030005264A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005264</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10169229</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020628</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>199636133</doc-number>
</priority-application-number>
<filing-date>19991229</filing-date>
<country-code>DE</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F009/30</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>712</class>
<subclass>218000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Device and method for control of the data stream</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Wolfram</given-name>
<family-name>Drescher</family-name>
</name>
<residence>
<residence-non-us>
<city>Dresden</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Matthias</given-name>
<family-name>Weiss</family-name>
</name>
<residence>
<residence-non-us>
<city>Dresden</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BAKER &amp; BOTTS</name-1>
<name-2></name-2>
<address>
<address-1>30 ROCKEFELLER PLAZA</address-1>
<city>NEW YORK</city>
<state>NY</state>
<postalcode>10112</postalcode>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/DE00/04641</doc-number>
<document-date>20001229</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The invention relates to an apparatus to control data flow for a processing unit having a plurality of data paths and a plurality of parallel processing units. Each computer unit of a data path is connected to an evaluating unit, which controls the acceptance of the results into the results register by setting a flag. The output of the evaluating unit is connected to one input of a logic gate, and the other input of the logic gate to the control output of the central program control unit. The output of the logic gate is connected to the control input of the output register. In this way, each evaluating unit can check the calculation by comparing the result of computation by the parallel processing unit with a preassigned value. Upon identification of nonsense values, or upon coincidence with a preassigned value, the results register may be cleared or blocked to prevent wrong or nonsense results. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates to an apparatus to control data flow for a processing unit having a plurality of data paths, each with its register/memory, each with its corresponding processing unit and a results register, each of the processing units operating according to the same algorithm and each containing a computing unit, and each data path as well as each results register being connected to the control output of a central program control unit. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> It is known that the requirements for processing speed of digital signal processors have increased steadily of recent years. To satisfy these requirements, chiefly two approaches have been taken. In one, it has been attempted to design new computers that operate at a higher timing frequency. For this, firstly the advances in semiconductor technology have been utilized, permitting smaller transistor sizes, and secondly the critical paths in the computers have been shortened by &ldquo;pipelining&rdquo; &lsqb;M. Nomurh et al., &ldquo;A 300 Mhz 16-b 0.5 &mgr;m BiCMOS Digital Signal Processor Core LSI,&rdquo; IEEE Journal of Solid State Circuits, Vol. 29, No. 3, March 1994, pages 290-297&rsqb;; &lsqb;J. Goto et al., &ldquo;250-Mhz BiCMOS Super-High-Speed Video Signal Processor (S-VSP) ULSI,&rdquo; IEEE Journal of Solid State Circuits, Vol. 26, No. 12, December 1991, pages 1876-1884&rsqb;. Secondly, there are approaches combining several computing units with each other in such manner that they operate in parallel &lsqb;J. Kneip, M. Berekovic, J. P. Wittenberg, W. Hinrichs and P. Pirsch, &ldquo;An Algorithm Adapted Autonomous Controlling Concept for a Parallel Single-Chip Digital Signal Processor,&rdquo; Journal of VLSI Signal Processing 16, Kluwer Academic Publishers, pages 31-40, 1997&rsqb;; &lsqb;M. Toyokura et al., &ldquo;A Video DSP with a Macroblock-Level Pipeline and a SIMD Type Vector Pipeline Architecture for MPEG-2 CODEC,&rdquo; IEEE Journal of Solid State Circuits, vol. 29, no. 12, December 1994, pages 1474-1481&rsqb;. By the distribution over several units, the speed of the system as a whole is to be increased. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The first approach is problematical for the reason that high-rhythm computers exhibit a high power take-up. In particular for service in mobile units, systems containing such computers are of limited suitability. The combination of several lower-rhythm computers is less problematical from this aspect. Furthermore, this approach is always dependent on the available technology, whereas the combination of parallel-operating processing units makes possible an almost arbitrary sizing of the system power, and hence the total power of the system can be uncoupled from the timing frequency. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> For parallel systems, generally two approaches can be distinguished. On the one hand, there is the &ldquo;multiple-instruction multiple-data&rdquo; (MIMD) approach. This means that in a system of parallel-operating processing units, each of these processing units at a certain time can execute a different machine command than all the others can execute. Besides, each of the processing units can compute with different data. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> On the other hand, there is the &ldquo;single-instruction multiple-data&rdquo; (SIMD) approach, which means that while all processing units process different data, they each do so in the same mode and manner. Hence only one machine command is needed to control all the processing units. The SIMD approach is favored primarily by the fact that it permits the building of very small and simple systems of parallel computing units. This is because here only one central program control unit is required to control the processing units. By contrast, each processing unit in the MIMD approach requires its own decoder. In systems of any size, this leads to higher power uptake. On the other hand, the MIMD approach offers more effective utilization of the processing units for certain applications. Beyond the pure SIMD and MIMD approaches, there are also combined systems in which the advantages and disadvantages of the two methods can be balanced against each other. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In other publications (&lsqb;1&rsqb; J. Kneip, M. Berekovic, J. P. Wittenberg, W. Hinrichs and P. Pirsch, &ldquo;An Algorithm Adapted Autonomous Controlling Concept for a Parallel Single-Chip Digital Signal Processor,&rdquo; Journal of VLSI Signal Processing 16, Kluwer Academic Publishers, pages 31-40, 1997; &lsqb;2&rsqb; W. Gehrke and K. Gaedke, &ldquo;Associative Controlling of Monolithic Parallel Processor Architectures,&rdquo; IEEE Transactions on Circuits and Systems for Video Technology, Vol. 5, No. 5, pages 453-464, October 1995; &lsqb;3&rsqb; W. Gehrke and K. Gaedke, DE 195 32 527 A1, Letters of Disclosure, German Patent Office 1997; &lsqb;5&rsqb; M. Toyokura et al., &ldquo;A Video DSP with a Macroblock-Level Pipeline and a SIMD Type Vector Pipeline Architecture for MPEG-2 CODEC,&rdquo; IEEE Journal of Solid State Circuits, Vol. 29, No. 12, December 1994, pages 1474-1481; &lsqb;8&rsqb; C. J. Zarowski, &ldquo;Parallel Implementation of the Schur-Berlekamp-Massey Algorithm on a Linearly Connected Processor Array,&rdquo; IEEE Transactions on Computers, Vol. 44, No. 7, July 1995), similar structures have been proposed. These structures deal with the control of program flow. In &lsqb;3&rsqb;, it is set forth in detail what is to be controlled (loops, subprograms, distributors). The approach there pursued functions in that to each of the processing units, several machine commands are delivered, while ultimately, depending on certain control signals, only one machine command is executed. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Control of program flow for many applications with parallel processors, particularly in digital signal processing, however, is only of subordinate importance. More important, rather, is the control of data flow. The approach here described is distinguished primarily by the control object. One possibility for control of data flow in a special hardware apparatus is described in &lsqb;8&rsqb;. This apparatus, however, is not part of a programmable processor. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> An example of the need for effective data flow control, particularly for parallel processors for digital signal processing, is the Berlekamp-Massey algorithm. There, in each loop passage, the same operations are performed, only with different operands. Effective control of the operand selection (of the data flow) is therefore of paramount importance. A similar algorithm from this aspect is the Viterbi algorithm, in which, in each iteration, two or more sums are formed, one of them, on the basis of a comparison decision, providing the input value for the next iteration. Here again, the operation to be performed is always the same, but an operand selection (data flow control) must be made. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The object of the invention is to create an apparatus and a process to control data flow for a processing unit having a plurality of parallel data paths, by means of which it is possible to control the function of the processing units, i.e. acceptance of the result of computation into the corresponding results register, directly by way of the data flow. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The object to which the invention is addressed, in an apparatus of the kind initially mentioned, is accomplished in that each computing unit of a data path is connected to an evaluating unit that controls the acceptance of the result of computation by the computing unit into the proper results register by setting a flag or by a simple IF query. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In an advantageous modification of the invention, the output of the evaluating unit is connected to one input of a logic gate, and the other input of the logic gate to the control output of the central program control unit, and the output of the logic gate to the control input of the results register. The logic gate may for example be an AND gate. An OR gate may also be employed without problems in this place. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Thus, in simple manner, it becomes possible to ascertain whether the control signal of the central program control unit triggers a write operation in the results register, or clears the result of computation by the computer unit as written in the results register. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The object to which the invention is addressed is further accomplished by a method of data flow control in that each evaluating unit checks the result of computation by the processing unit of the particular data path for plausibility, by comparing the result of computation with a preassigned value, and clears the results register upon identifying nonsense values or coincidence with a preassigned value. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> A special variant of the process is characterized in that the evaluating unit checks the result of computation by the current data path for plausibility by comparing the result of computation with a preassigned value, and upon identification of nonsense values or upon coincidence with a preassigned value, blocks acceptance of the result of computation into the results register. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> By virtue of the invention, it becomes possible, without intervention by the central control unit, that is, without additional software outlay, to bring it about that individual results of computation from individual data paths can be excluded from further processing if the result of computation by the computer yields a nonsense result. The data flow is thus controlled by the result of computation by the processing unit itself. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> This results check, implemented hardware-wise in each data path, can be accomplished simply by an IF query or by setting a &ldquo;flag.&rdquo; That is, there is no program control here, only data flow control.</paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The invention will now be illustrated in more detail in terms of an embodiment by way of example. In the accompanying drawings, </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a conventional circuit apparatus for a &ldquo;single instruction data control&rdquo; unit; and, </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a circuit apparatus according to the invention to control data flow for a data path.</paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> To clarify the starting condition, <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a circuit diagram of a conventional SIMD signal process. This SIMD unit consists of a processing unit PVE having a plurality of parallel processing units VE each forming a data path DP. Each of these parallel processing units VE contains a computer ALU (&ldquo;Arithmetic Logic Unit&rdquo;) preceded by a register REG, whose result of calculation is written into a results register/memory ACCU. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The parallel processing units are controlled by a central program control unit PCU, in which all parallel processing units VE are controlled with the same machine command Crtl. In like manner, the writing into the results register/memory ACCU of the current parallel processing units is controlled by the same machine command Crtl. Thus, all parallel processing units VE can process different data according to the same algorithm. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> This SIMD signal processing is enlarged by the invention into an apparatus for control of data flow. The diagram of a corresponding circuit arrangement may be seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Each computer unit ALU of a data path DP is connected to an evaluating unit AWE, which controls the acceptance of the computer ALU&apos;s result into the results register ACCU by setting a flag. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The output of the evaluating unit AWE is connected for this purpose to one input of a logic gate LGT, and the other input of the logic gate LGT to the control output of the central program control unit PCU. The output of the logic gate LGT, which may be an AND or alternatively an OR gate, is connected to the control input of the results/memory ACCU. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In this way, each evaluating unit AWE can check the result of computation by the parallel processing unit VE of the current data path DP for plausibility, in that the result of computation by the parallel processing unit VE is compared with a preassigned value. Upon identification of nonsense values, or upon coincidence with a preassigned value, the results register ACCU is cleared. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In a special variant, the evaluating unit AWE checks the result of computation by the computer ALU of the parallel processing unit VE of the current data path DP for plausibility. This may be done simply in that the result of computation of the parallel processing unit VE is compared with a preassigned value. Upon identification of nonsense values, or upon coincidence with a preassigned value, acceptance of the result of computation by the parallel processing unit VE into the results register ACCU is blocked. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The invention prevents wrong or nonsense results of computation from being written into the results register ACCU of the corresponding data path DP. That is, the data path DP is barred for one cycle in event of a nonsense result. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The advantage of data flow control over program flow control lies in that only a single instruction need be forwarded to all processing units VE of like kind. Here, however, the instruction must contain information about the alternative data sources. Such data sources may be either busses or else registers. By the forwarding of a single instruction to each parallel processing unit VE, wiring outlay and consequently area are saved on the chip. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Another advantage lies in the fact that a central program control PCU to control the program flow at each point in time to the like parallel processing units VE need issue only one word of command, and may therefore be of simpler structure. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> This in turn leads to a saving of chip area. Therefore, costs of production are reduced and so is the power uptake of the chip. </paragraph>
<section>
<heading lvl="1">List of References </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number>  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="28PT" align="left"/>
<colspec colname="1" colwidth="49PT" align="left"/>
<colspec colname="2" colwidth="140PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>DP</entry>
<entry>data path</entry>
</row>
<row>
<entry></entry>
<entry>PVE</entry>
<entry>parallel processing unit</entry>
</row>
<row>
<entry></entry>
<entry>REG</entry>
<entry>register</entry>
</row>
<row>
<entry></entry>
<entry>ACCU</entry>
<entry>results register</entry>
</row>
<row>
<entry></entry>
<entry>VE</entry>
<entry>processing unit</entry>
</row>
<row>
<entry></entry>
<entry>PCU</entry>
<entry>central program control</entry>
</row>
<row>
<entry></entry>
<entry>ALU</entry>
<entry>computer (&ldquo;Arithmetic Logic Unit&rdquo;)</entry>
</row>
<row>
<entry></entry>
<entry>LGT</entry>
<entry>logic gate</entry>
</row>
<row>
<entry></entry>
<entry>AWE</entry>
<entry>evaluating unit</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. Apparatus to control data flow for a processing unit (PVE) having a plurality of parallel data paths (DP) each with its register/memory (REG), each with its corresponding processing unit (VE) and a results register (ACCU), the processing units (VE) operating according to the same algorithm and each containing a computing unit (ALU) and each data path (DP) as well as each results register (ACCU) being connected to the control output of a central program control unit (PCU), characterized in that each computing unit (ALU) of a data path (DP) is connected to an evaluating unit (AWE) that controls acceptance of the result of computation by the computing unit (ALU) into the corresponding results register (ACCU) by setting a flag or by an IF inquiry. </claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. Apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, characterized in that the output of the evaluating unit (AWE) is connected to one input of a logic gate (LGT) and the other input of the logic gate (LGT) to the control output of the central program control unit (PCU), as well as the output of the logic gate (LGT) to the control input of the results register (ACCU). </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. Apparatus according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, characterized in that the logic gate (LGT) is an AND gate. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. Process for control of data flow in an apparatus according to any of <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00003">3</dependent-claim-reference>, characterized in that each evaluating unit (AWE) checks the result of computation by the processing unit (VE) of the current data path (DP) for plausibility, in that the result of computation is compared with a preassigned value, and upon identification of nonsense values or coincidence with a preassigned value, clears the results register (ACCU). </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. Process to control data flow in an apparatus according to any of <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00003">3</dependent-claim-reference>, characterized in that the evaluating unit (AWE) checks the result of computation by the processing unit (VE) of the current data path (DP) for plausibility, in that the result of computation is compared with a preassigned value, and upon identification of nonsense values or upon coincidence with a preassigned value, acceptance of the result of computation into the results register (ACCU) is blocked.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005264A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005264A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005264A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
