<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005048A1-20030102-D00000.TIF SYSTEM "US20030005048A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005048A1-20030102-D00001.TIF SYSTEM "US20030005048A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005048A1-20030102-D00002.TIF SYSTEM "US20030005048A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005048A1-20030102-D00003.TIF SYSTEM "US20030005048A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005048A1-20030102-D00004.TIF SYSTEM "US20030005048A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005048A1-20030102-D00005.TIF SYSTEM "US20030005048A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005048</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10170931</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020613</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for integrated web-based software code environment</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60297446</doc-number>
<document-date>20010613</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Vincent</given-name>
<family-name>Risalvato</family-name>
</name>
<residence>
<residence-us>
<city>Tampa</city>
<state>FL</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Rivar Technologies, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Alan M. Weisberg</name-1>
<name-2>Christopher &amp; Weisberg, P.A.</name-2>
<address>
<address-1>Suite 2040</address-1>
<address-2>200 East Las Olas Boulevard</address-2>
<city>Fort Lauderdale</city>
<state>FL</state>
<postalcode>33301</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and system for a web-based application in which integrated source code is prepared. The integrated source code includes source code in a first programming language and source code in a second programming language. The integrated source code is processed to create compilable homogenous source code in the first programming language. The homogeneous source code is compiled into a natively executable web-based program. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is related to and claims priority to U.S. Provisional Application Serial No. 60/297,446, filed Jun. 13, 2001, entitled CODE NEO, the entirety of which is incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> n/a </paragraph>
</section>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to a system and method for providing web-based applications using integrated software, and in particular, to a system and method for the development and serving of web-based applications using a processing software language such as C&plus;&plus; in combination with a traditional web coding language such as the hypertext mark-up language (&ldquo;HTML&rdquo;). </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> As the proliferation of network-based computing increases, so to does the need for the increasingly sophisticated network-based applications and services. Whether on an intranet or the Internet, users of client computing devices typically access applications using a web browser such as MICROSOFT&apos;s INTERNET EXPLORER, NETSCAPE&apos;s NAVIGATOR, and the like. These browsers are typically arranged to receive data from a web server using a standard protocol such as the Transmission Control Protocol/Internet Protocol (&ldquo;TCP/IP&rdquo;). Contemporary web programming languages like Java, Java Server Page (&ldquo;JSP&rdquo;), Active Server Page (&ldquo;ASP&rdquo;) and Cold Fusion run slower on a given processor as compared with traditional object oriented languages such as C&plus;&plus;. For example, Java requires a virtual machine to execute Java applications; JSP must be converted into a Java servelet which is then executed within the Java virtual machine; ASP requires an interpreter to execute each instruction, one at a time; and Cold Fusion requires a software system to parse the Cold Fusion tags and link them to functionality within their application server. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Typically, web servers are designed to support a set number of simultaneous users. Exceeding that number results in the prevention of users from accessing all or a portion of a web site. This occurs, for example, when many users to attempt to access a web site to buy just-released concert tickets. As more customers attempt to access data-rich, dynamic content sites, such as to order products, fill out a form, or query a database, the potential for bottlenecks increases. To minimize these bottlenecks, businesses typically expand their networking infrastructure by adding expensive additional hardware, typically in the form of servers, to overcome these performance problems. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> It is therefore advantageous to have a programming language which results in executable code that runs faster than contemporary web programming languages. As a result of their inefficiency, contemporary web programming languages require higher speed processors and additional memory as compared with the execution of traditional object-oriented programming languages. In other words, it is desirable to have an application development environment which allows the compilation of the code into a highly optimized native binary code which requires no interpretation or software abstraction layer to be executed. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Further, businesses are moving non-commerce-related software programs for sales force automation, customer relationship management and the like to the Internet. Because many existing backend software applications are written in traditional programming languages such as C and C&plus;&plus;, they are incompatible with contemporary web application platforms. As such, it takes a vast amount of time and money to rewrite these applications for the Internet as &ldquo;web enabling&rdquo;. These applications often include porting the entire code base from the traditional programming language to the contemporary web application platform. It is therefore desirable to have a web application development and server environment which does not require software applications written in traditional programming languages such as C and C&plus;&plus; to be rewritten using a contemporary web application language. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Contemporary web application environments such as those which use Java, ASP and Cold Fusion are arranged such that the source code is left in a state which can be easily acquired. This is the case because these application environments require that the source code be stored on the web server which is accessed by the browser enabled client computer or because the web server must read and execute one source code instruction at a time based on a request for data received from the client computing device. The result is that software component developers who create programs for the web risk intellectual property theft, because they can not secure their products from reverse engineering when these products are deployed. It is therefore also desirable to have a web-based computing environment which allows software component developers to release development libraries without being afraid of giving away trade secrets due to unauthorized access or authorized access coupled with subsequent unauthorized use of the acquired source code. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> As the choices for web-based software developers increase with respect to the available development environments, so too does developers&apos; frustrations. Typically, a new web-based development application requires the software developer to learn to navigate within yet another development environment using new development tools, methodologies, etc. It is therefore also desirable to provide a development environment in which developers can continue to use the tools that they prefer to use by allowing easy integration with existing tools. Further, rather than provide yet another programming language, it is desirable to provide a development environment in which existing Java, PERL, or ASP programs can be enhanced to execute faster than these contemporary languages can execute on their own on a web server. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The present invention advantageously provides a method and system for providing web-based application programs. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to an aspect, the present invention provides a method for a web-based application in which integrated source code is prepared. The integrated source code includes source code in a first programming language and source code in a second programming language. The integrated source code is processed to create compilable homogenous source code in the first programming language. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In accordance with another aspect, the first programming language is C&plus;&plus;. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In accordance with still another aspect, the present invention provides a system for providing web data to a web client which the system includes a development server. The development server has a memory and a central processing unit operably coupled to the memory. The memory stores integrated source code. The integrated source code includes source code in a first programming language and source code in a second programming language. The central processing unit processes the integrated source code to create compilable homogenous source code in the first programming language. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In accordance with yet another aspect, the present invention provides computing device for developing a web application, in which the computing device has a memory and a central processing unit operatively coupled to the memory. The memory stores a first source code for a program, the first source code for the program is written in a plurality of programming languages. The central processing unit processes the first source code to create a second source code corresponding to the source code. The second source code is in one of the plurality of programming languages.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> A more complete understanding of the present invention, and the attendant advantages and features thereof, will be more readily understood by reference to the following detailed description when considered in conjunction with the accompanying drawings wherein: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a diagram of a system constructed in accordance with the principles of the invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart of the overall process of the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart of the process of creating a source joint from a rivet; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of the compilation process of the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart of the application server execution process; and </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart showing the rivet creation and compilation process in a development environment such as MICROSOFT&apos;s FRONT PAGE Environment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Initially, it is noted that as used herein, the term &ldquo;traditional programming language&rdquo; refers to programming languages not specifically designed for web-based implementation such as C and C&plus;&plus;. As used herein, the term &ldquo;contemporary web programming language&rdquo; or &ldquo;contemporary web-based programming language&rdquo; refers to programming languages and environments specifically intended for web implementation such as Java, Cold Fusion, ASP and the like. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Referring now to the drawing Figures in which like reference designators refer to like elements, there is shown in <cross-reference target="DRAWINGS">FIG. 1 a</cross-reference> system constructed in accordance with the principles of the present invention and designated generally as <highlight><bold>10</bold></highlight>. System <highlight><bold>10</bold></highlight> includes an application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight>, development server <highlight><bold>16</bold></highlight> and web client <highlight><bold>18</bold></highlight> coupled to communication network <highlight><bold>20</bold></highlight> through communication links <highlight><bold>22</bold></highlight>. Although a single application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight>, development server <highlight><bold>16</bold></highlight> and web client <highlight><bold>18</bold></highlight> are shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, it is understood that a plurality of one or more of these devices can be implemented in accordance with the present invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Further, although each of application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight>, development server <highlight><bold>16</bold></highlight> and web client <highlight><bold>18</bold></highlight> are shown coupled to communication network <highlight><bold>20</bold></highlight>, it is also understood that one or more of these devices can be coupled directly together through a data communication link such as a serial data connection, local area network connection and the like. Also, although application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight> and development server <highlight><bold>16</bold></highlight> are shown as separate devices, it is further understood that the below-described functions and programs for the application server, web server and development server can be implemented on fewer than three discrete computing platforms. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Application server <highlight><bold>12</bold></highlight> can be any computing platform suitable for implementing network-based application service functions. For example, application server <highlight><bold>12</bold></highlight> is preferably arranged to include suitable random access memory, non-volatile storage devices, network interface hardware and central processing unit suitable to perform application service functions via communication network <highlight><bold>20</bold></highlight>. For example, an application server <highlight><bold>12</bold></highlight> intended to support a few simultaneous users is likely to be configured by one or ordinary skill in the art to have a smaller capacity central processing unit, less random access memory (&ldquo;RAM&rdquo;) and smaller non-volatile storage capacity than an application server intended to support a large number of users and/or a large database. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The application server <highlight><bold>12</bold></highlight> runs an application server program which provides the logic for an application program, such as DSO executable files under UNIX or DLL executable files in the MICROSOFT operating environment. The application server program interoperates with a web server program executed by web server <highlight><bold>14</bold></highlight>, discussed below in detail. The web server <highlight><bold>12</bold></highlight> executes a web server program that uses a suitable communication protocol such as the hypertext transfer protocol (&ldquo;HTTP&rdquo;) to serve the files that form web pages to web client <highlight><bold>18</bold></highlight>. Exemplary web server programs are MICROSOFT&apos;s INTERNET INFORMATION SERVER (&ldquo;IIS&rdquo;) and APACHE </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In operation, the web server program forwards requests received from web client <highlight><bold>18</bold></highlight> to application server <highlight><bold>12</bold></highlight> such that the application server program executing on application server <highlight><bold>12</bold></highlight> provides appropriate data back to the web server <highlight><bold>14</bold></highlight> so that web server <highlight><bold>14</bold></highlight> can forward the modified or new web page to the web client <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Like application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight> includes substantially the same components as those discussed above with respect to application server <highlight><bold>12</bold></highlight> such that the components are sized to provide capacities and capabilities suitable for the expected demands to be placed thereon. Development server <highlight><bold>16</bold></highlight> is arranged to include substantially similar components to those discussed above with respect to application server <highlight><bold>12</bold></highlight>, with the capacities of the components of development server <highlight><bold>16</bold></highlight> sized to accommodate the expected demands placed thereon. As discussed below in detail, development server <highlight><bold>16</bold></highlight> is accessed by software developers to aid their development efforts for the creation of integrated code, the compilation of integrated code into executable format, the placement of the executable files on application server <highlight><bold>12</bold></highlight> along with the updating of these executable files as may be necessary from time to time. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Application server <highlight><bold>12</bold></highlight>, web server <highlight><bold>14</bold></highlight> and development server <highlight><bold>16</bold></highlight> can vary in size and capacity from a small personal computer to a large multi-processor mainframe computer, depending on the expected operating environment. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Web client <highlight><bold>18</bold></highlight> is any computing device capable of running web browser software and having a communications network connection. For example, web client <highlight><bold>18</bold></highlight> can be a personal digital assistant (&ldquo;PDA&rdquo;), personal computer, workstation, handheld computer and the like equipped with a web browser such as MICROSOFT&apos;s INTERNET EXPLORER or NETSCAPE&apos;s NAVIGATOR. Web client <highlight><bold>18</bold></highlight> also includes the network interface hardware required to allow web client <highlight><bold>18</bold></highlight> to communicate using communication network <highlight><bold>20</bold></highlight> via link <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Links <highlight><bold>22</bold></highlight> can take the form of any suitable data communication link, such as serial connections, wide area network links, local area network links, frame relay links, asynchronous transfer mode (&ldquo;ATM&rdquo;) links, fiber optic links, wireless communication links, and the like in any desired combination. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In operation, a user of web-client <highlight><bold>18</bold></highlight> inputs the desired address, typically in a uniform resource locator (&ldquo;URL&rdquo;) format for a desired website. Through the communication network communication software stack on web client <highlight><bold>18</bold></highlight>, the web browser causes a request for web site information to be transmitted to web server <highlight><bold>14</bold></highlight> via communication network <highlight><bold>20</bold></highlight>. Web server <highlight><bold>14</bold></highlight> initializes the appropriate application from application server <highlight><bold>12</bold></highlight> and formats and transmits a response back to web client <highlight><bold>18</bold></highlight>, typically in HTML format, so that the web browser executing on web client <highlight><bold>18</bold></highlight> can format the requested information into a form observable by the user on the web client. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As is discussed below in detail, the present invention advantageously provides a method and system by which application server <highlight><bold>12</bold></highlight> executes binary modules in order to quickly provide data to web server <highlight><bold>14</bold></highlight> to serve web pages to web client <highlight><bold>18</bold></highlight>. The binary modules have been found to execute an order of magnitude faster on a given computing platform than when contemporary web-based solutions are executed on application server <highlight><bold>12</bold></highlight>. In order to accomplish this performance increase, the present invention advantageously allows developers to insert code written in traditional programming language such as C or C&plus;&plus; directly in the web page source by using their preferred development environment, such as text editor, CODE:NEO web development environment, MICROSOFT FRONT PAGE and the like. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The present invention also advantageously allows the reuse of existing programmatic software code bases such as those which may have been previously been written in a traditional computer language. A result is that the present invention advantageously decreases development time for new web-based applications by reusing existing programs written in traditional programming languages. The increased performance of the subject invention allows more users per web server <highlight><bold>14</bold></highlight>, thereby decreasing ownership costs for implementing entities. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The process of the present invention is described with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Initially, a developer, such as a web site developer creates a source code rivet (Step S<highlight><bold>100</bold></highlight>). A source code rivet is a text file which contains native web site source code such as HTML and traditional source code such as C&plus;&plus; source code delineated by custom tags which document where the HTML and C&plus;&plus; start and stop. An exemplary tag list is shown with its accompanying descriptions in Table 1.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="OFFSET" colwidth="14PT" align="left"/>
<colspec colname="1" colwidth="91PT" align="left"/>
<colspec colname="2" colwidth="112PT" align="left"/>
<thead>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
<entry></entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry></entry>
<entry>TAG</entry>
<entry>DESCRIPTION</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
<entry>&lt;%Cn&gt;</entry>
<entry>Begin a C&plus;&plus; inline block</entry>
</row>
<row>
<entry></entry>
<entry>&lt;/Cn%&gt;</entry>
<entry>End any C&plus;&plus; code block</entry>
</row>
<row>
<entry></entry>
<entry>&lt;%Cn scope&equals;&ldquo;global&rdquo;&gt;</entry>
<entry>Begin a C&plus;&plus; global code block</entry>
</row>
<row>
<entry></entry>
<entry namest="OFFSET" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The created integrated source code rivet is processed into a source joint (Step S<highlight><bold>102</bold></highlight>). A source joint is a file purely in the traditional software language, such as C&plus;&plus;, which conforms to a specification that can be compiled using a compiler for the traditional language to produce a &ldquo;binary joint&rdquo; which can be executed by application server <highlight><bold>12</bold></highlight>. The source joint is therefore homogeneous source code. The source joint is compiled into a binary joint (Step S<highlight><bold>104</bold></highlight>). A binary joint is the binary code that can be natively executed by application server <highlight><bold>12</bold></highlight>. For example, a binary joint can be a dynamic shared object (&ldquo;DSO&rdquo;) under the Unix operating system or a dynamic link library (&ldquo;DLL&rdquo;) under the WINDOWS operating system. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> When called by web server <highlight><bold>14</bold></highlight>, the binary joint is executed by application server <highlight><bold>12</bold></highlight> with the results provided to web server <highlight><bold>14</bold></highlight> for inclusion in the web page data provided to web client <highlight><bold>18</bold></highlight>. Web client <highlight><bold>18</bold></highlight> receives the resultant web page data, for example in HTML form, and formats the HTML code into the corresponding web page for display to the user of web client <highlight><bold>18</bold></highlight> (not shown). </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Each of Steps S<highlight><bold>100</bold></highlight>-S<highlight><bold>106</bold></highlight> are now discussed in detail. Referring to Step S<highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the first step in creating an application using the present invention is creating the source files that will be used to create a binary executable that can be executed by application server <highlight><bold>12</bold></highlight>. Any traditional method of creating text source files can be used to create a source code rivet. For example, a developer can use a web development environment (&ldquo;WDE&rdquo;) which provides an online web-based mechanism for development. The WDE, the WDE allows the developer to create source code rivets as well as maintain the configuration of application server <highlight><bold>12</bold></highlight> and web server <highlight><bold>14</bold></highlight>. The WDE can be provided, for example, on development server <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Also in accordance with the present invention, the developer can develop the source code rivet on their local machine and publish the pages using a known development tool such as MICROSOFT&apos;s FRONT PAGE. This arrangement is discussed below in detail. Using this arrangement, development server <highlight><bold>16</bold></highlight> &ldquo;catches&rdquo; the FRONT PAGE publishing mechanism and triggers the generation and compilation of the source code rivet into a binary joint. Other mechanisms contemplated for use in creating the source code rivet are to create the source code rivet on the developer&apos;s local computing platform and then transfer the source code rivet using a suitable file transfer mechanism such as the file transfer protocol (&ldquo;FTP&rdquo;). In the alternative, users may &ldquo;log on&rdquo; to development server <highlight><bold>16</bold></highlight> and create source code rivets directly on development server <highlight><bold>16</bold></highlight> such as by using WINDOWS TERMINAL SERVER, telenet, and the like. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> An example of a source code rivet is as follows: &lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;. This simple example is a valid source code rivet. While this example does not have any C&plus;&plus; code or functionality, it is still convertible into a source joint and binary joint which is executable by application server <highlight><bold>12</bold></highlight>. The resultant output would simply be the same as the example. A more complex example is as follows: </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> &lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&lt;%Cn&gt;</paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> for(int x&equals;1;x&lt;&equals;10;x&plus;&plus;)swritef(&ldquo;%d&lt;br&gt;&rdquo;,x); </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> &lt;/Cn%&gt;&lt;/body&gt;&lt;/html&gt;. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> After conversion into a source joint and subsequent compilation into a binary joint, the output would be &ldquo;count to ten&rdquo;, then the number <highlight><bold>1</bold></highlight>-<highlight><bold>10</bold></highlight>, each appearing on its own line. As shown in this example, the C&plus;&plus; and HTML is separated by the integrated code tags shown in Table 1. For example, the &ldquo;&lt;%Cn&gt;&rdquo; tag demarks the beginning of the C&plus;&plus; source code and is referred to as the integrated code opening tag. The &ldquo;&lt;/Cn%&gt;&rdquo; tag demarks the end of the C&plus;&plus; source code and is referred to as the integrated code close tag. Additionally, the opening tag can specify the type of language to follow, such as &ldquo;&lt;%Cn lang&equals;&ldquo;C&plus;&plus;&rdquo;&gt;&rdquo;. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Tags implemented in accordance with the present invention preferably have one of two scopes, global and in-line. By default, scope is established as in-line, but can be changed to global by specifying it as &ldquo;&lt;%Cn scope&equals;&ldquo;global&rdquo;&gt;&rdquo;. Global sections can be closed with the integrated close tag. The scope controls how the development tool on development server <highlight><bold>16</bold></highlight> places code in the resultant source joint file processed in accordance with Step S<highlight><bold>102</bold></highlight>. Code blocks which are in-line are placed in the order that they are found in the source code rivet file. Code blocks which are global are placed in the order they are found in the beginning of the source joint in the C&plus;&plus; global space. An example of a source code rivet which implements the &ldquo;global&rdquo; tag is as follows: </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> &lt;%Cn scope&equals;&ldquo;global&rdquo;&gt;int x;&lt;/Cn%&gt;</paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> &lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&lt;%Cn&gt;</paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> for(x&equals;1;x&lt;&equals;10;x&plus;&plus;)swritef(&ldquo;%d&lt;br&gt;&rdquo;,x); </paragraph>
<paragraph id="P-0049" lvl="2"><number>&lsqb;0049&rsqb;</number> &lt;/Cn%&gt;&lt;/body&gt;&lt;/html&gt;. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In accordance with the present invention, traditional source code such as C&plus;&plus; code, is easily integrated with HTML code. This arrangement allows a developer to reuse existing traditional language source code to create the desired web application. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The processing of a source code rivet into a source joint in accordance with Step S<highlight><bold>102</bold></highlight> is described. If the developer has developed a source code rivet, the source code rivet needs to be converted into a source joint before it can be compiled into a binary joint. This process is preferably performed by development server <highlight><bold>16</bold></highlight>. In a case where source code rivets are created on a computing platform other than development server <highlight><bold>16</bold></highlight>, such as the developer&apos;s personal computing device, the source code rivet is transferred to development server <highlight><bold>16</bold></highlight>. In the case where a WDE is used or where the source code rivet is created directly on development server <highlight><bold>16</bold></highlight>, no such transfer is required. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The processing of the source code rivet into the source joint by development server <highlight><bold>16</bold></highlight> is described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Initially, the integrated code development application reads the source code rivet file (Step S<highlight><bold>108</bold></highlight>). The C&plus;&plus; source code is encapsulated into functions (Step S<highlight><bold>110</bold></highlight>). The in-line HTML is encapsulated in HTML output statements (Step S<highlight><bold>112</bold></highlight>). C&plus;&plus; source code tagged as global, C&plus;&plus; code is integrated (Step S<highlight><bold>114</bold></highlight>), the joint infrastructure is created (Step S<highlight><bold>116</bold></highlight>) and the resultant source joint is written into a file and saved by development server <highlight><bold>16</bold></highlight> (Step S<highlight><bold>118</bold></highlight>). </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> It is presumed that one of ordinary skill in the art of writing software development tools can prepare the above-described integrated code development application based on the descriptions herein. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> An example of processing a source code rivet into a source joint using the integrated code development application is as follows. The source code rivet: </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> &lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&lt;%Cn&gt;</paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> for(int x&equals;1;x&lt;&equals;10;x&plus;&plus;)swritef(&ldquo;%d&lt;br&gt;&rdquo;,x); </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> &lt;/Cn%&gt;&lt;/body&gt;&lt;/html&gt;</paragraph>
<paragraph id="P-0058" lvl="7"><number>&lsqb;0058&rsqb;</number> is processed into the following source joint by the integrated code development application: </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> &num;include &lt;CnJoint.h&gt;</paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> &num;include &lt;CnHtmlServer.h&gt;</paragraph>
<paragraph id="P-0061" lvl="2"><number>&lsqb;0061&rsqb;</number> using namespace CodeNeo; </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> class CnJoint : public CodeNeo::CnHtmlServer </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> &lcub;</paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> public: </paragraph>
<paragraph id="P-0065" lvl="3"><number>&lsqb;0065&rsqb;</number> CnJoint(CodeNeo::CnRequest *pCnRequest): </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> CodeNeo::CnHtmlServer(pCnRequest) &lcub; &rcub;</paragraph>
<paragraph id="P-0067" lvl="3"><number>&lsqb;0067&rsqb;</number> void main( ); </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> private: </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> &rcub;; </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> CNJOINT_ENTRYPOINT(CnJoint) </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> void CnJoint::main( ) </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> &lcub;</paragraph>
<paragraph id="P-0073" lvl="3"><number>&lsqb;0073&rsqb;</number> swrite(&ldquo;&lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&rdquo;); </paragraph>
<paragraph id="P-0074" lvl="3"><number>&lsqb;0074&rsqb;</number> for(int </paragraph>
<paragraph id="P-0075" lvl="2"><number>&lsqb;0075&rsqb;</number> x&equals;1;x&lt;&equals;10;x&plus;&plus;)swritef(&ldquo;%d&lt;br&gt;&rdquo;,x);swrite(&ldquo;&lt;/body&gt;&lt;/h </paragraph>
<paragraph id="P-0076" lvl="2"><number>&lsqb;0076&rsqb;</number> tml&gt;&bsol;n&rdquo;); </paragraph>
<paragraph id="P-0077" lvl="2"><number>&lsqb;0077&rsqb;</number> &rcub;</paragraph>
<paragraph id="P-0078" lvl="7"><number>&lsqb;0078&rsqb;</number> As shown in this example, the term &ldquo;Code Neo&rdquo; corresponds to the name of a system constructed in accordance with the principles of the present invention and made available by Rivar Technologies, Inc. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> As still a more complex example, the source code rivet: </paragraph>
<paragraph id="P-0080" lvl="2"><number>&lsqb;0080&rsqb;</number> &lt;%Cn scope&equals;&ldquo;global&rdquo;&gt;int x;&lt;/Cn%&gt;</paragraph>
<paragraph id="P-0081" lvl="2"><number>&lsqb;0081&rsqb;</number> &lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&lt;%Cn&gt;</paragraph>
<paragraph id="P-0082" lvl="2"><number>&lsqb;0082&rsqb;</number> for(x&equals;1;x&lt;&equals;10;x&plus;&plus;)&lcub;</paragraph>
<paragraph id="P-0083" lvl="3"><number>&lsqb;0083&rsqb;</number> swritef(&ldquo;%d&lt;br&gt;&rdquo;,x); </paragraph>
<paragraph id="P-0084" lvl="3"><number>&lsqb;0084&rsqb;</number> if(x&equals;&equals;5) </paragraph>
<paragraph id="P-0085" lvl="4"><number>&lsqb;0085&rsqb;</number> &lt;/Cn%&gt;We are half way to </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> ten&lt;br&gt;&lt;%Cn&gt;</paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> &rcub;</paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> &lt;/Cn n%&gt;&lt;/body&gt;&lt;/html&gt;</paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> is processed into the following source joint by the integrated code development application executing on development server <highlight><bold>16</bold></highlight>: </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> &num;include &lt;CnJoint.h&gt;</paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> &num;include &lt;CnHtmlServer.h&gt;</paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> using namespace CodeNeo; </paragraph>
<paragraph id="P-0093" lvl="2"><number>&lsqb;0093&rsqb;</number> int x; </paragraph>
<paragraph id="P-0094" lvl="2"><number>&lsqb;0094&rsqb;</number> class CnJoint : public CodeNeo::CnHtmlServer </paragraph>
<paragraph id="P-0095" lvl="2"><number>&lsqb;0095&rsqb;</number> &lcub;</paragraph>
<paragraph id="P-0096" lvl="2"><number>&lsqb;0096&rsqb;</number> public: </paragraph>
<paragraph id="P-0097" lvl="3"><number>&lsqb;0097&rsqb;</number> CnJoint(CodeNeo::CnRequest *pCnRequest) </paragraph>
<paragraph id="P-0098" lvl="2"><number>&lsqb;0098&rsqb;</number> CodeNeo::CnHtmlServer(pCnRequest) &lcub; &rcub;</paragraph>
<paragraph id="P-0099" lvl="3"><number>&lsqb;0099&rsqb;</number> void main( ); </paragraph>
<paragraph id="P-0100" lvl="2"><number>&lsqb;0100&rsqb;</number> private: </paragraph>
<paragraph id="P-0101" lvl="2"><number>&lsqb;0101&rsqb;</number> &rcub;; </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> CNJOINT_ENTRYPOINT(CnJoint) </paragraph>
<paragraph id="P-0103" lvl="2"><number>&lsqb;0103&rsqb;</number> void CnJoint::main( ) </paragraph>
<paragraph id="P-0104" lvl="2"><number>&lsqb;0104&rsqb;</number> &lcub;</paragraph>
<paragraph id="P-0105" lvl="3"><number>&lsqb;0105&rsqb;</number> swrite(&ldquo;&bsol;n&rdquo;); </paragraph>
<paragraph id="P-0106" lvl="3"><number>&lsqb;0106&rsqb;</number> swrite(&ldquo;&lt;html&gt;&lt;body&gt;Count to ten&lt;br&gt;&rdquo;); </paragraph>
<paragraph id="P-0107" lvl="3"><number>&lsqb;0107&rsqb;</number> for(x&equals;1;x&lt;&equals;10;x&plus;&plus;)&lcub;</paragraph>
<paragraph id="P-0108" lvl="4"><number>&lsqb;0108&rsqb;</number> swritef(&ldquo;%d&lt;br&gt;&rdquo;,x); </paragraph>
<paragraph id="P-0109" lvl="4"><number>&lsqb;0109&rsqb;</number> if(x&equals;&equals;5) </paragraph>
<paragraph id="P-0110" lvl="3"><number>&lsqb;0110&rsqb;</number> swrite(&ldquo;We are half way to ten&lt;br&gt;&rdquo;); </paragraph>
<paragraph id="P-0111" lvl="3"><number>&lsqb;0111&rsqb;</number> &rcub;</paragraph>
<paragraph id="P-0112" lvl="2"><number>&lsqb;0112&rsqb;</number> swrite(&ldquo;&lt;/body&gt;&lt;/html&gt;&rdquo;); </paragraph>
<paragraph id="P-0113" lvl="2"><number>&lsqb;0113&rsqb;</number> &rcub;</paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> In the above example the &ldquo;&num; include&rdquo; s, such as &ldquo;&num; include &lt;CnJoint.h&gt;&rdquo; include infrastructure which defines the resources the joint has available. The source joint examples declare that the corresponding source joint will use the name space CodeNeo which the integrated code environment application programming interface (&ldquo;API&rdquo;) is coded to be present in. These source joint files define an object which extends &ldquo;CnHtmlServer&rdquo; which is the base class for HTML joints. A macro hooks the newly defined joint to an entry point that application server <highlight><bold>12</bold></highlight> can call. A main function that will be called after the object is created and prepared by application server <highlight><bold>12</bold></highlight> is implemented. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The source joint file is preferably assigned a predetermined file extension. Although any extension can be used, the description of the present invention herein describes the source code file as having a &ldquo;.CnSrc&rdquo; extension. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Although the present invention is described in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> as including a source code rivet creation step (Step S<highlight><bold>100</bold></highlight>) and the processing of that source code rivet into a source joint (Step S<highlight><bold>102</bold></highlight>), it is contemplated that a developer proficient with the present invention may elect to directly create or use a source joint. Because the source joint is source code in the traditional programming language, such as C&plus;&plus;, it is not necessary that the integrated source code rivet first be created and processed into the source joint by development server <highlight><bold>16</bold></highlight>. In other words, instead of creating a file which contains C&plus;&plus; and HTML, the developer may create a pure C&plus;&plus; source file which conforms to the above-described joint specifications. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> The compilation of a source joint into a binary joint as set forth in Step S<highlight><bold>104</bold></highlight> is described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart of the compilation process of the present invention. Initially, the source joint such as the C&plus;&plus; source joint file having the .CnSrc file extension is loaded into the corresponding developer&apos;s native compiler (Step S<highlight><bold>120</bold></highlight>). </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> The source joint is then compiled using the developer&apos;s native compiler (Step <highlight><bold>122</bold></highlight>). Of note, an advantage with the present invention over previous systems is that the present invention allows the developer to continue to use his or her own preferred native compiler, for example, the developer&apos;s native C&plus;&plus; compiler. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The resultant output of the native compiler is the creation of object code (Step S<highlight><bold>124</bold></highlight>). Examples of compilers suitable for use with C&plus;&plus; code include MICROSOFT&apos;s VISUAL C&plus;&plus;, GNU GCC, and the like. The developer&apos;s native linker uses the object code created in Steps S<highlight><bold>122</bold></highlight> and S<highlight><bold>124</bold></highlight> to link the object code with various libraries such as the developer&apos;s own libraries <highlight><bold>22</bold></highlight>, third party libraries <highlight><bold>24</bold></highlight>, system libraries <highlight><bold>26</bold></highlight>, and libraries associated with the integrated code environment such as integrated code environment libraries <highlight><bold>28</bold></highlight>. For example, integrated code environment libraries <highlight><bold>28</bold></highlight> might contain the header files discussed above with respect to the &ldquo;&num;include&rdquo; files (Step S<highlight><bold>126</bold></highlight>). </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The resultant binary joint is output as an integrated code environment binary application object (Step S<highlight><bold>128</bold></highlight>). The binary joint can use any suitable file extension, for example &ldquo;.CnBin&rdquo;. The resultant binary joint created on development server <highlight><bold>16</bold></highlight> is transferred to application server <highlight><bold>12</bold></highlight>. The transfer can be manual, such as by FTP, downloaded to a floppy disk or CD-ROM and physically taken to and installed on application server <highlight><bold>12</bold></highlight> or can be automatically initiated as part of the compilation process of Step S<highlight><bold>104</bold></highlight>. The web server program, through its extension application program interface (&ldquo;API&rdquo;), has an association between files with extensions of the integrated code environment binary application object, for example, &ldquo;.CnBin&rdquo; with the application server of the present invention. When the web server receives one of these requests, it passes control of execution to application server <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> The execution of the binary joint, i.e. integrated code environment binary application object, by application server <highlight><bold>12</bold></highlight> as set forth in set Step S<highlight><bold>106</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is described with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. In operation, web server <highlight><bold>14</bold></highlight> receives an HTTP request from web client <highlight><bold>18</bold></highlight> (Step S<highlight><bold>130</bold></highlight>). The web server program executing in web server <highlight><bold>14</bold></highlight> resolves the URL received as part of the HTTP request to determine the requested web page/file (Step S<highlight><bold>132</bold></highlight>). The web server program then evaluates the file to determine whether the extension corresponding to the requested file corresponds to a binary joint, i.e. is an integrated code environment binary application object having, for example, a .CnBin extension (Step S<highlight><bold>134</bold></highlight>). If the file extension does not correspond to an integrated code environment binary application object, the process of the present invention ends. However, if the integrated code environment binary application object file extension is detected, the application server program is loaded and executed if it is not already loaded and executed, on application server <highlight><bold>12</bold></highlight> (Step S<highlight><bold>136</bold></highlight>). When the application server program begins, it determines whether the corresponding binary joint has been loaded and cached (Step S<highlight><bold>138</bold></highlight>). If the binary joint has not been loaded, it loads the binary joint into memory (Step S<highlight><bold>140</bold></highlight>), for example using the DSO or DLL load function of the corresponding operating system. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The application server program on application server <highlight><bold>12</bold></highlight> also prepares an object named CnHttpRequest (Step S<highlight><bold>142</bold></highlight>). This object encapsulates all of the specific information about the web request received from web client <highlight><bold>18</bold></highlight>. The entry point of the binary joint is called, passing a pointer to the CnHttpRequest (Step S<highlight><bold>142</bold></highlight>) object so that binary joint can determine which request it should be processing (Step S<highlight><bold>144</bold></highlight>). The binary joint is natively executed by application server <highlight><bold>12</bold></highlight> (Step S<highlight><bold>146</bold></highlight>). The results of the processing is such that the executed binary joint creates a response object, named for example CnHttpResponse (Step S<highlight><bold>148</bold></highlight>). The entry point of the executed joint exits (Step S<highlight><bold>150</bold></highlight>). The response object is sent to web server <highlight><bold>14</bold></highlight> and the application server program &ldquo;cleans up&rdquo;, i.e. resets variables, pointers, etc. (Step S<highlight><bold>152</bold></highlight>). The response object contains the data, i.e. payload which is provided to web server <highlight><bold>14</bold></highlight> for transmission to the requesting web client <highlight><bold>18</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Because the binary joint is natively executed in Step S<highlight><bold>146</bold></highlight>, the execution speed and resources consumed by application server <highlight><bold>12</bold></highlight> is much faster, for example an order of magnitude faster, than applications written in contemporary web-based languages such as JSP, ASP, Cold Fusion, and the like. Further, because the integrated code environment binary application object is stored in its natively executable form on application server <highlight><bold>12</bold></highlight>, with only the results being provided to web server <highlight><bold>14</bold></highlight>, the present invention inherently adds a level of security not found in known web environments. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> As a result of the speed increases and added security, performance for demanding applications such as transaction processing, interactive form generation, security and authentication procedures, access to complex databases and the like are supported with improved performance over known systems. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In describing Step S<highlight><bold>100</bold></highlight> above with respect to source code rivet creation, it was noted that web publishing or development environments such as MICROSOFT&apos;s FRONT PAGE and MACROMEDIA&apos;s DREAMWEAVER are easily integrated with the present invention to provide a developer with an efficient way to create binary joints. An example of a development environment using an environment similar to MICROSOFT&apos;s FRONT PAGE is described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The developer creates the source rivet using the environment (Step S<highlight><bold>154</bold></highlight>). Once the source with the integrated source code, for example HTML and C&plus;&plus;, is created, the developer triggers the environment to &ldquo;publish&rdquo; the source code rivet (Step S<highlight><bold>156</bold></highlight>). The environment, such as the FRONT PAGE tool, creates a post request and collects the source code file (Step S<highlight><bold>158</bold></highlight>). </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> An API associated with the integrated code environment of the present invention intercepts the file collection (Step S<highlight><bold>160</bold></highlight>) and determines whether the created source code is that described above, namely includes tags identifying embedded code as traditional language source code (Step S<highlight><bold>162</bold></highlight>). In other words, development server <highlight><bold>16</bold></highlight> determines whether the resultant source code is a source code rivet. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> If the source code is not integrated source code i.e., is not a source code rivet, the normal FRONT PAGE response occurs (Step S<highlight><bold>164</bold></highlight>). If the source code is a source code rivet, the generation tool described above on development server <highlight><bold>16</bold></highlight> with respect to Step S<highlight><bold>102</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is triggered (Step S<highlight><bold>166</bold></highlight>), a source joint is created and the compilation process described above with respect to Step S<highlight><bold>104</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Step S<highlight><bold>168</bold></highlight>) is triggered. The result is the creation of a binary rivet, i.e. an integrated code environment binary application object having a .CnBin file extension (Step S<highlight><bold>170</bold></highlight>). Any errors resultant during the process are logged for future evaluation and debugging (Step S<highlight><bold>172</bold></highlight>) and the development environment then provides a normal response associated with that environment, for example, a normal FRONT PAGE response (Step S<highlight><bold>164</bold></highlight>). </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In accordance with the process shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the present invention advantageously allows the combination of the integrated source code with a typical development environment. The result facilitates development and minimizes the need for experienced developers to have to receive training on a new web development environment tool. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Yet another example of developing with the integrated code environment is as follows. A developer, presumably on a web client, accesses a web browser on his local machine. A URL is requested that points to the locate on the harddrive of the webserver for the web development environment. The webserver authenticates the user through standard http negotiation and, in the case of MICROSOFT IIS, checks the username and password against the SAM or in the case of APACHE on UNIX, the application server authenticates the user against /etc/passwd and /etc/shadow. If the user is authenticated successfully; in the case of WINDOWS IIS, the process begins running as that user. In the case of APACHE on UNIX, the application server changes the process using a kernel module to be running as the authenticated user. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Execution is passed to the application server to run the binary objects for the web development environment. These are a collection of joints which allow the user, web client, to create solutions. These binary objects execute and produce an interactive HTML environment for editing text files, maintaining project settings, etc. After the developer has created an application he may build it from the by choosing a &lsquo;BUILD&rsquo; menu option in a BUILD menu. This converts rivets to source joints, compiles source joints to binary joints, links appropriate libraries, and produces the result binary file. Any errors during the process are logged and displayed to the developer through the HTML interface and binary WDE objects. The developer may then execute the application by using the &lsquo;execute&rsquo; option in the &lsquo;BUILD&rsquo; menu. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> It will be appreciated by persons skilled in the art that the present invention is not limited to what has been particularly shown and described herein above. In addition, unless mention was made above to the contrary, it should be noted that all of the accompanying drawings are not to scale. A variety of modifications and variations are possible in light of the above teachings without departing from the scope and spirit of the invention, which is limited only by the following claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for a web-based application, the method comprising: 
<claim-text>preparing integrated source code, the integrated source code including source code in a first programming language and source code in a second programming language; and </claim-text>
<claim-text>processing the integrated source code to create compilable homogenous source code in the first programming language. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first programming language is C&plus;&plus;. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second programming language is hypertext mark-up language. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising compiling the homogenous source code into a natively executable program. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising storing the natively executable program on an application server. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising executing the natively executable program if a predetermined file extension corresponding to the natively executable program is detected. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising: 
<claim-text>receiving a web page request; </claim-text>
<claim-text>executing an application server program; </claim-text>
<claim-text>loading the stored natively executable program; </claim-text>
<claim-text>preparing a request object; </claim-text>
<claim-text>executing the stored natively executable program and creating a response object based at least in part on the request object, the response object including response object data; and </claim-text>
<claim-text>sending a response to a web server program, the response including at least a part of the response object data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the web page request is an HTTP request, and wherein the response includes HTML instructions. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the source code in the first programming language includes global source code, and wherein processing the integrated source code includes: 
<claim-text>encapsulating the source code in the first programming language into at least one function; </claim-text>
<claim-text>encapsulating the source code in the second programming language into at least one output statement; and </claim-text>
<claim-text>integrating the global source code in the first programming language into at least one function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system for providing web data to a web client, the system comprising: 
<claim-text>a development server, the development server having a first memory storing integrated source code, the integrated source code including source code in a first programming language and source code in a second programming language; and </claim-text>
<claim-text>a central processing unit operably coupled to the first memory, the central processing unit processing the integrated source code to create compilable homogenous source code in the first programming language. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the source code in the first programming language is isolated from the source code in the second programming language in the integrated source code by a set of predetermined tags. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the first programming language is C&plus;&plus;. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the second programming language is HTML. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein central processing unit in the development server further compiles the homogenous source code into a natively executable program. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the development server further includes a network interface operably coupled to the first memory and the development server central processing unit, the system further including: 
<claim-text>a communication network coupled to the development server network interface; and </claim-text>
<claim-text>an application server, the application server including: 
<claim-text>an application server network interface couplable to the communication network and adapted to receive the natively executable program from the development server; and </claim-text>
<claim-text>a second memory operably coupled to the application server network interface, the second memory storing the natively executable program. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the application server further includes a central processing operably coupled to the second memory and the application server network interface, the application server central processing unit executing the natively executable program if a predetermined file extension corresponding to the natively executable program is detected. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the application server further includes a central processing operably coupled to the second memory and the application server network interface, the system further comprising: 
<claim-text>a web server program, the web server program: 
<claim-text>being executable to receive a web page request via the communication network; and </claim-text>
<claim-text>issuing an instruction to the application server to load the stored natively executable program; </claim-text>
</claim-text>
<claim-text>the application server central processing unit further: 
<claim-text>preparing a request object in accordance with the issued instruction from the web server program; </claim-text>
<claim-text>executing the stored natively executable program and creating a response object based at least in part on the request object, the response object including response object data; and </claim-text>
<claim-text>sending a response to the web server program, the response including at least a part of the response object data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the web page request is an HTTP request, and wherein the response includes HTML instructions. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the source code in the first programming language includes global source code, and wherein the central processing unit processes the integrated source code to: 
<claim-text>encapsulate the source code in the first programming language into at least one function; </claim-text>
<claim-text>encapsulate the source code in the second programming language into at least one output statement; and </claim-text>
<claim-text>integrate the global source code in the first programming language into at least one function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the first memory further stores a web development environment application and wherein the development server central processing unit executes the web development environment application to allow a user to remotely access the development server to develop the integrated source code and to initiate the processing of the integrated source code into the homogeneous source code. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The system according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the first memory further stores a web publishing environment application and wherein the development server central processing unit executes the web publishing environment application to allow a user to remotely access the development server to develop the integrated source code, and to initiate the processing of the integrated source code into the natively executable code by issuing a publication trigger. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A computing device for developing a web application, the computing device comprising: 
<claim-text>a memory, the memory storing a first source code for a program, the first source code for the program being written in a plurality of programming languages; and </claim-text>
<claim-text>a central processing unit operatively coupled to the memory, the central processing unit processing the first source code to create a second source code corresponding to the source code, the second source code being in one of the plurality of programming languages. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computing device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the plurality of programming languages includes C&plus;&plus; and HTML. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The computing device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the one of the plurality of programming languages is C&plus;&plus;. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computing device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the central processing unit further compiles the second source code into a natively executable program. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computing device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the first source code includes traditional programming language source code and contemporary programming language source code, the traditional programming language source code having global source code, and wherein processing the first source code includes: 
<claim-text>encapsulating the traditional programming language source code into at least one function; </claim-text>
<claim-text>encapsulating the contemporary programming language source code into at least one output statement; and </claim-text>
<claim-text>integrating the global source code into at least one function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computing device of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the source code in the one of the plurality of programming languages is isolated from the source code in the other of the plurality of programming languages a set of predetermined tags.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005048A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005048A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005048A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005048A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005048A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005048A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
