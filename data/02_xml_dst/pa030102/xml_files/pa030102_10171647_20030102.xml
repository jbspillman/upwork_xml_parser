<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002743A1-20030102-D00000.TIF SYSTEM "US20030002743A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00001.TIF SYSTEM "US20030002743A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00002.TIF SYSTEM "US20030002743A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00003.TIF SYSTEM "US20030002743A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00004.TIF SYSTEM "US20030002743A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00005.TIF SYSTEM "US20030002743A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00006.TIF SYSTEM "US20030002743A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00007.TIF SYSTEM "US20030002743A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00008.TIF SYSTEM "US20030002743A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00009.TIF SYSTEM "US20030002743A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00010.TIF SYSTEM "US20030002743A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00011.TIF SYSTEM "US20030002743A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00012.TIF SYSTEM "US20030002743A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00013.TIF SYSTEM "US20030002743A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00014.TIF SYSTEM "US20030002743A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00015.TIF SYSTEM "US20030002743A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00016.TIF SYSTEM "US20030002743A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00017.TIF SYSTEM "US20030002743A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00018.TIF SYSTEM "US20030002743A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00019.TIF SYSTEM "US20030002743A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00020.TIF SYSTEM "US20030002743A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00021.TIF SYSTEM "US20030002743A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00022.TIF SYSTEM "US20030002743A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00023.TIF SYSTEM "US20030002743A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00024.TIF SYSTEM "US20030002743A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00025.TIF SYSTEM "US20030002743A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00026.TIF SYSTEM "US20030002743A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00027.TIF SYSTEM "US20030002743A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030002743A1-20030102-D00028.TIF SYSTEM "US20030002743A1-20030102-D00028.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002743</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10171647</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020617</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>184129/2001</doc-number>
</priority-application-number>
<filing-date>20010618</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>315670/2001</doc-number>
</priority-application-number>
<filing-date>20011012</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06K009/36</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>382</class>
<subclass>239000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>382</class>
<subclass>251000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>358</class>
<subclass>426040</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Image processing method and apparatus, computer program, and storage medium</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ken-ichi</given-name>
<family-name>Ohta</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Tadayoshi</given-name>
<family-name>Nakayama</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Hidefumi</given-name>
<family-name>Osawa</family-name>
</name>
<residence>
<residence-non-us>
<city>Saitama</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Shinichi</given-name>
<family-name>Kato</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Naoki</given-name>
<family-name>Ito</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FITZPATRICK CELLA HARPER &amp; SCINTO</name-1>
<name-2></name-2>
<address>
<address-1>30 ROCKEFELLER PLAZA</address-1>
<city>NEW YORK</city>
<state>NY</state>
<postalcode>10112</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">This invention is designed to effectively generate encoded data within a set size by inputting image data once. For this purpose, the image input through an input unit (<highlight><bold>101</bold></highlight>) is compressed by an encoding unit (<highlight><bold>102</bold></highlight>) and stored in first and second memories (<highlight><bold>104, 106</bold></highlight>). A first counter (<highlight><bold>107</bold></highlight>) counts the data in its code amount. When the amount of encoded data generated reaches a predetermined size, an encoding sequence control unit (<highlight><bold>108</bold></highlight>) sets quantization steps in the encoding unit (<highlight><bold>102</bold></highlight>) and an re-encoding unit (<highlight><bold>109</bold></highlight>) to increase compression ratios. In addition, the encoding sequence control unit (<highlight><bold>108</bold></highlight>) clears the first memory (<highlight><bold>104</bold></highlight>), causes the re-encoding unit (<highlight><bold>109</bold></highlight>) to re-encode the encoded data stored in the second memory, and stores the resultant data in the first memory (<highlight><bold>104</bold></highlight>). Since the encoding unit (<highlight><bold>102</bold></highlight>) continues encoding data with the set quantization step, the encoded data are stored in the first memory (<highlight><bold>104</bold></highlight>) from the start of the image. Subsequently, every time the data amount stored in the first memory reaches a predetermined amount, the quantization step is increased, and the processing is repeated. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to an image processing apparatus having a function of compression-encoding image data within a predetermined code amount. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Conventionally, as still image compression schemes, a JPEG scheme using discrete cosine transform and a scheme using Wavelet transform are used in many cases. An encoding scheme of this type is a variable-length encoding scheme, and hence the code amount changes for each image to be encoded. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> According to the JPEG scheme as an internal standardization scheme, only one quantization matrix can be defined for an image. If, therefore, this scheme is applied to a system which cannot adjust a code amount without prescan and stores codes in a limited memory, a memory overflow may occur. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In order to prevent this, conventional schemes used a method of re-reading an original upon changing the compression ratio when the actual code amount exceeds an expected code amount, a method of estimating a code amount in advance by prescan and re-setting quantization parameters to adjust the code amount, and the like. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> As a code amount control scheme using prescan, for example, a scheme of storing pre-compressed data in an internal buffer memory, decompressing the data, full-compressing it upon changing the compression parameter, and outputting the resultant data to an external memory is available. In this case, the compression ratio in full-compression is higher than that in pre-compression. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Another scheme is known, in which an allowable code amount for each pixel block is obtained, and the coefficients obtained by level-shifting DCT coefficients n times are Huffman-encoded to reduce the code amount. This shift amount n is determined from the allowable code amount. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Conventionally, however, a compression buffer with a capacity larger than a target compression capacity is required as a compression buffer, and a buffer having a capacity large enough to record original image data is inevitably required to prevent an overflow in an intermediate buffer. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In addition, in the method of repeating encoding operation, since decoding and re-compression operations are performed for the overall compressed data, an increase in the speed of continuous processing cannot be expected. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention has been made in consideration of the above prior art, and has as its object to provide an image processing apparatus which can effectively generate encoded data within a set size by inputting image data once, a control method for the apparatus, a computer program, and a storage medium. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> According to the present invention, the foregoing object is attained by providing an image processing apparatus for inputting image data and compression-encoding the data, comprising: first compressing means which can change a parameter for determining a compression ratio; second compressing means which can change a parameter for determining a compression ratio, decodes encoded data compressed by the first compressing means, and re-compresses the data; monitoring means for monitoring a code data amount while image data of an input page is compressed by the first compressing means, and determining whether the code data amount has reached a predetermined amount; setting means for, when the monitoring means detects that the code data amount has reached the predetermined amount during compression of the page, setting a parameter for increasing a compression ratio in the first and second compressing means; and control means for, when the parameter is changed by the setting means, causing the second compressing means to re-encode encoded data generated by the first compressing means before the parameter is changed, storing the re-encoded data as encoded data after the parameter in the first compressing means is changed, and storing the encoded data generated by the first encoding means after the parameter is changed as succeeding encoded data. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In order to achieve the above object, the image processing apparatus of the present invention has the following arrangement. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the figures thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing the arrangement of an image processing apparatus according to the first embodiment; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing the arrangement of an image processing apparatus according to the second embodiment; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flow chart simply showing the processing in the first embodiment; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a view showing a data flow and the contents of memories in an encoding phase in the initial state in the first embodiment; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a view showing a data flow and the contents of the memories in an encoding/re-encoding phase in the first embodiment; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a view showing a data flow and the contents of the memories in a transfer phase in the first embodiment; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a view showing a data flow and the contents of the memories in an encoding phase after the transfer phase in the first embodiment; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart showing the details of the processing in the first embodiment; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a view showing a data flow and the contents of the memories in an encoding/re-encoding phase in a modification of the first embodiment; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a view showing a data flow and the contents of the memories in a transfer phase in the modification of the first embodiment; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a view showing a data flow and the contents of the memories in an encoding phase after the transfer phase in the modification of the first embodiment; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flow chart showing a procedure in the second embodiment; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a view showing a data flow and the contents of memories in an encoding phase in the initial state in the second embodiment; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a view showing a data flow and the contents of the memories in a transfer phase in the second embodiment; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a view showing a data flow and the contents of the memories in an encoding/re-encoding phase in the second embodiment; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a view showing a data flow and the contents of the memories in an encoding phase after the encoding/re-encoding phase in the second embodiment; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a block diagram showing the arrangement of an image processing apparatus according to the third embodiment; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a block diagram showing the arrangement of an image processing apparatus according to the fourth embodiment; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a block diagram showing the detailed arrangement of an image processing apparatus to which the third embodiment is applied; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a view showing the contents of a scenario table at the time of a memory overflow in the third embodiment; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a graph showing the transition of a code amount in the third embodiment; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 22A</cross-reference> to <highlight><bold>22</bold></highlight>D are view for explaining the operation of a structure for encoding direct current components in the third embodiment; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> is a view showing a procedure for processing alternating current components in the third embodiment; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a view showing a zigzag scan for DCT coefficients; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> is a view showing a table for grouping alternating current components; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a view showing part of a Huffman code table to be looked up with a run length and size; and </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a graph showing the relationship between the progress of encoding and the memory occupancy ratio in the second embodiment. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The embodiments of the present invention will be described in detail below with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a functional block diagram of an image processing apparatus <highlight><bold>100</bold></highlight> according to an embodiment. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The image processing apparatus <highlight><bold>100</bold></highlight> in this embodiment includes an input unit <highlight><bold>101</bold></highlight> for inputting an image from an image scanner. In this embodiment, in particular, a scanner designed to continuously read images is assumed to be used. However, the input unit <highlight><bold>101</bold></highlight> may input image data by page description language rendering or read image files stored in a storage medium. In some case, the input unit <highlight><bold>101</bold></highlight> may receive image data from a network. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> An encoding unit <highlight><bold>102</bold></highlight> encodes the input image data on a frame (page) basis. Note that in this embodiment, a known JPEG encoding scheme is used as an encoding scheme. In addition, the image data is subjected to orthogonal transformation on an 8&times;8 pixel basis, and the resultant data is subjected to quantization using an quantization step (to be described later) and Huffman encoding processing. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> A first memory control unit <highlight><bold>103</bold></highlight> and second memory control unit <highlight><bold>105</bold></highlight> perform control so as to store the above encoded data (identical encoded data) output from the encoding unit <highlight><bold>102</bold></highlight> in a first memory <highlight><bold>104</bold></highlight> and second memory <highlight><bold>106</bold></highlight>, respectively. In this case, the first memory <highlight><bold>104</bold></highlight> is a memory for holding the finally confirmed (compressed within a target data amount) encoded data to allow it to be output to a network device, image output apparatus, large-capacity storage apparatus, and the like externally connected to the basic arrangement shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The second memory <highlight><bold>106</bold></highlight> is a work memory for aiding in compression encoding to form the encoded data in the first memory. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> A counter <highlight><bold>107</bold></highlight> counts the data amount of image data compression-encoded by the encoding unit <highlight><bold>102</bold></highlight>, and holds the count value. The counter <highlight><bold>107</bold></highlight> also outputs the count result to an encoding sequence control unit <highlight><bold>108</bold></highlight> for controlling an encoding sequence. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The encoding sequence control unit <highlight><bold>108</bold></highlight> detects on a page basis whether the count value of the counter <highlight><bold>107</bold></highlight> has reached a set value (target value). Upon detecting that the count value has reached (exceeded) the set value of the encoded data length of one page, the encoding sequence control unit <highlight><bold>108</bold></highlight> outputs a control signal to the first memory control unit <highlight><bold>103</bold></highlight> so as to discard the data stored in the first memory <highlight><bold>104</bold></highlight>. The first memory control unit <highlight><bold>103</bold></highlight> discards the stored data by clearing the memory address counter or encoded data management table on the basis of this control signal. At this time, the encoding sequence control unit <highlight><bold>108</bold></highlight> clears the counter <highlight><bold>107</bold></highlight> to zero (continuously inputting data from the input unit <highlight><bold>101</bold></highlight>), and also controls the encoding unit <highlight><bold>102</bold></highlight> to encode data at a higher compression ratio. That is, the encoding sequence control unit <highlight><bold>108</bold></highlight> performs control to finally reduce the data amount of encoded data generated by encoding processing in this apparatus to &frac12;. Obviously, this value can be set to an arbitrary value other than &frac12;. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The encoded data (portion of (0&tilde;100)% of one page) obtained after the compression ratio is changed is also stored in the first and second memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> through the first and second memory control units <highlight><bold>103</bold></highlight> and <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Furthermore, the encoding sequence control unit <highlight><bold>108</bold></highlight> causes the second memory control unit <highlight><bold>105</bold></highlight> to read out the encoded data (portion of (0&tilde;n )% of one page) stored in the second memory <highlight><bold>106</bold></highlight>, and outputs a control signal to a re-encoding unit <highlight><bold>109</bold></highlight> serving as an encoded data converting means so as to output the encoded data. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The re-encoding unit <highlight><bold>109</bold></highlight> decodes (performs only entropy decoding) the input encoded data and performs re-quantization (deletion of lower bits of each quantized value) to reduce the data amount. The re-encoding unit <highlight><bold>109</bold></highlight> then performs encoding processing (entropy encoding) again and outputs a data amount with the same compression ratio as that of the encoding unit <highlight><bold>102</bold></highlight>, which has been changed, to a second counter <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The encoded data output from this re-encoding unit <highlight><bold>109</bold></highlight> is stored in the first and second memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> through the first and second memory control units <highlight><bold>103</bold></highlight> and <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The second memory control unit <highlight><bold>105</bold></highlight> detects whether re-encoding processing is terminated. More specifically, when there is no data to be read out for re-encoding processing, the second memory control unit <highlight><bold>105</bold></highlight> notifies the encoding sequence control unit <highlight><bold>108</bold></highlight> of the end of the re-encoding processing. In practice, the encoding processing is completed when the processing by the re-encoding unit <highlight><bold>109</bold></highlight> is terminated as well as the read processing by the second memory control unit <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The count value obtained by the second counter <highlight><bold>110</bold></highlight> is added to the counter value held in the counter <highlight><bold>107</bold></highlight> upon completion of the re-encoding processing. This addition result indicates the sum of data amounts in the first memory <highlight><bold>104</bold></highlight> immediately after the completion of the re-encoding processing. That is, when the encoding processing for one frame (page) is completed by the encoding unit <highlight><bold>102</bold></highlight> and re-encoding unit <highlight><bold>109</bold></highlight>, the counter value held in the first counter <highlight><bold>107</bold></highlight> after the above addition indicates the total amount of data generated when this apparatus encoded 1-frame data (to be described in detail later). </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The encoding unit <highlight><bold>102</bold></highlight> continuously performs encoding processing as long as image data from the input unit <highlight><bold>101</bold></highlight>, which should be encoded, is left, regardless of whether re-encoding processing is terminated or not terminated. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Whether the count value of the first counter <highlight><bold>107</bold></highlight> has reached a given set value is repeatedly checked until encoding processing (encoding and re-encoding) of 1-frame (page) image data input from the input unit <highlight><bold>101</bold></highlight> is terminated. The above encoding/re-encoding processing is executed in accordance with control operation corresponding to the detection result obtained in this operation. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart showing the flow of processing in the arrangement shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. For the sake of descriptive convenience, this processing will be described first with reference to the simplified flow chart of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As has already been described, the image processing apparatus <highlight><bold>100</bold></highlight> of the present invention is designed to compression-encode 1-frame (page) image data input from input unit <highlight><bold>101</bold></highlight> such as a scanner into data of a predetermined data amount or less. In order to realize this encoding processing, the apparatus includes the encoding unit <highlight><bold>102</bold></highlight>, re-encoding unit <highlight><bold>109</bold></highlight>, first memory <highlight><bold>104</bold></highlight>, second memory <highlight><bold>106</bold></highlight>, and the like as well as the input unit <highlight><bold>101</bold></highlight>. Encoding processing is performed by using these functional blocks in accordance with the flow chart shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The flow chart of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is roughly divided into the following three processing phases: </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> (1) an encoding phase, </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> (2) an encoding/re-encoding phase, and </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> (3) a transfer phase. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight> to <highlight><bold>7</bold></highlight> visually and simply show how image data, encoded data, and the like flow and are processed and how they are stored in the memories in the respective processing phases. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows the initial state of the encoding phase corresponding to steps S<highlight><bold>303</bold></highlight> and S<highlight><bold>305</bold></highlight> in the flow chart of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows the processing state of the encoding/re-encoding phase corresponding to steps S<highlight><bold>307</bold></highlight> to S<highlight><bold>315</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows the processing state of the transfer phase corresponding to step S<highlight><bold>317</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows the processing state of the encoding phase after the transfer phase. Each phase will be described below. </paragraph>
</section>
<section>
<heading lvl="1">Encoding Phase </heading>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Encoding processing of 1-page image data starts from the initialization of encoding parameters (step S<highlight><bold>301</bold></highlight>). In this case, parameters to be set include the upper limit of an encoded data amount which is uniquely determined from the size of an image subjected to encoding processing (the size of a paper sheet read from the input unit <highlight><bold>101</bold></highlight>) and a quantization step (Q<highlight><bold>1</bold></highlight>) applied to the encoding unit <highlight><bold>102</bold></highlight> (assume that in this embodiment, the unit <highlight><bold>102</bold></highlight> uses a known JPEG encoding scheme) are set, and the like. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In step S<highlight><bold>303</bold></highlight>, actual encoding processing (JPEG compression on an 8&times;8 pixel basis) is performed, and the first counter <highlight><bold>107</bold></highlight> cumulatively counts the data amounts of encoded data output. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In step S<highlight><bold>305</bold></highlight>, it is checked whether the count value of the data amounts has exceeded the above upper limit. If NO in step S<highlight><bold>305</bold></highlight>, the JPEG encoding processing in step S<highlight><bold>303</bold></highlight> is continued. This is the encoding phase in the initial state. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The encoded data output from the encoding unit <highlight><bold>102</bold></highlight> is stored in both the first and second memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The areas indicated by the vertical stripes express the stored codes. </paragraph>
</section>
<section>
<heading lvl="1">Encoding/Re-encoding Phase </heading>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> As encoding processing by the encoding unit <highlight><bold>102</bold></highlight> proceeds and the count value of the data amounts exceeds the set upper limit, the encoded data in the first memory <highlight><bold>104</bold></highlight> is discarded in step S<highlight><bold>307</bold></highlight>. In addition, the quantization step of the encoding unit <highlight><bold>102</bold></highlight> is changed to Q<highlight><bold>2</bold></highlight> in step S<highlight><bold>309</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> That the count value of the data amounts of encoded data exceeds the set upper limit indicates that the data amount after compression falls outside a target value. Since it is useless to continue encoding processing by using the same quantization step, the quantization step is changed to the quantization step Q<highlight><bold>2</bold></highlight>, which is larger in quantization step width than the quantization step Q<highlight><bold>1</bold></highlight>, so as to further reduce the data amount. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> After the quantization step is changed, the encoding processing by the encoding unit <highlight><bold>102</bold></highlight> is resumed in step S<highlight><bold>311</bold></highlight>, and the encoded data is stored only in the second memory <highlight><bold>106</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Concurrently with this operation, the re-encoding processing in step S<highlight><bold>313</bold></highlight> is performed. If a plurality of pages are to be continuously processed, parallel processing in steps S<highlight><bold>311</bold></highlight> and S<highlight><bold>313</bold></highlight> becomes a very important feature of the present invention. This makes it possible to generate encoded data constituted by the (0&tilde;n) % portion (re-encoded data) and (n&tilde;100) % portion (non-re-encoded data) of one page at high speed. In the re-encoding processing, the encoded data that has already been stored in the second memory <highlight><bold>106</bold></highlight> is read out, and the re-encoding unit <highlight><bold>109</bold></highlight> re-encodes the data and stores the encoded data in the two memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight>. The encoding processing and re-encoding processing are continuously performed until all the codes indicated by vertical stripes I are re-encoded. The re-encoded data output from the re-encoding unit <highlight><bold>109</bold></highlight> is the same encoded data as that obtained by encoding with the same quantization step as that for the encoded data output from the encoding unit <highlight><bold>102</bold></highlight> after the quantization step is changed. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> More specifically, in this re-encoding processing, bit shift processing is performed for each quantized value obtained by temporarily Huffman-decoding encoded data so as to obtain the same result as that obtained by dividing each value by 2<highlight><superscript>n</superscript></highlight>. After this operation, Huffman encoding is performed again. This method allows high-speed re-encoding processing because the quantization step is changed by bit shift alone and neither inverse orthogonal transformation nor re-orthogonal transformation is performed. The end of the re-encoding processing is detected in step <highlight><bold>315</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Since the data amount after re-encoding becomes smaller than the data amount of encoded data before re-encoding, the re-encoded data can be overwritten on the memory area where the codes before re-encoding are stored. At the end of the re-encoding processing, the data amount of encoded data indicated by the vertical stripes I is reduced to the data amount of encoded data indicated by oblique stripes I in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Steps S<highlight><bold>307</bold></highlight> to S<highlight><bold>315</bold></highlight> described above are processing performed in the encoding/re-encoding phase. </paragraph>
</section>
<section>
<heading lvl="1">Transfer Phase </heading>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> When re-encoding processing is terminated, transfer processing is performed in step S<highlight><bold>317</bold></highlight>. In this transfer processing, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the encoded data indicated by oblique stripes II which is stored only in the second memory <highlight><bold>106</bold></highlight> in the encoding/re-encoding phase is transferred to an address where the data is concatenated to the encoded data indicated by the oblique stripes I in the first memory <highlight><bold>104</bold></highlight>, and stored at the address. Meanwhile, the encoded data indicated by the oblique stripes II is transferred into the second memory <highlight><bold>106</bold></highlight> to be concatenated such that the encoded data indicated by the oblique stripes I and the encoded data indicated by the oblique stripes II, which are scattered in the second memory <highlight><bold>106</bold></highlight>, are continuously stored in the first memory <highlight><bold>104</bold></highlight>. This processing is done in the transfer phase. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> When the above transfer phase is terminated, the flow returns to the encoding phase in steps S<highlight><bold>303</bold></highlight> and S<highlight><bold>305</bold></highlight> to output the codes indicated by oblique stripes IV in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> from the encoding unit <highlight><bold>102</bold></highlight> and store the codes in the two memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight>. In this encoding phase, unlike in the encoding phase in the initial state (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>), the quantization step is changed from Q<highlight><bold>1</bold></highlight> to Q<highlight><bold>2</bold></highlight> in encoding data by using the encoding unit <highlight><bold>102</bold></highlight>, and the encoded data stored in the two memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> are a set of codes processed in various phases. If these differences are neglected, the encoding phase immediately after the transfer phase can be regarded identical to the encoding phase in the initial state. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> By repeating the three phases, i.e., the encoding phase, encoding/re-encoding phase, and transfer phase, the codes obtained by compressing 1-page image data into a set data amount or less can be stored in the first memory. In addition, the input unit <highlight><bold>101</bold></highlight> only continues input operation until the end of a series of operations. That is, an image need not be input again from the beginning. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The flow chart shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> describes only processing corresponding to the respective phases shown in <cross-reference target="DRAWINGS">FIGS. 4, 5</cross-reference>, and <highlight><bold>6</bold></highlight>. In practice, however, inputting of 1-page image data comes to an end in some phase. Depending on the phase where the inputting operation comes to an end, the subsequent processing slightly differs. The flow chart of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows the flow of processing in consideration of this. The flow chart shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is based on the relationship between the completion of inputting of 1-page image data and each kind of processing described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. In this case, steps S<highlight><bold>801</bold></highlight>, S<highlight><bold>803</bold></highlight>, S<highlight><bold>805</bold></highlight>, and S<highlight><bold>807</bold></highlight> are added to the flow chart of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> In steps S<highlight><bold>801</bold></highlight>, S<highlight><bold>803</bold></highlight>, and S<highlight><bold>805</bold></highlight>, it is checked whether inputting of 1-page image data from the input unit <highlight><bold>101</bold></highlight> is completed in the encoding phase, encoding/re-encoding phase, and transfer phase. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> If it is detected that inputting of 1-page image data is completed in the encoding phase and transfer phase (steps S<highlight><bold>801</bold></highlight> and S<highlight><bold>805</bold></highlight>), the flow advances to step S<highlight><bold>807</bold></highlight> to terminate compression encoding processing for the page. If there is 1-page image data or more to be processed next, compression encoding processing for the next 1-page image data is started. If there is no data to be processed, a halt condition is set. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> If the end of inputting of 1-page image data is detected in the encoding/re-encoding phase (step S<highlight><bold>803</bold></highlight>), the operation of the encoding unit <highlight><bold>102</bold></highlight> needs to be stopped until there is no image data to be re-encoded. For this reason, the encoding processing in step S<highlight><bold>311</bold></highlight> is passed, and only the re-encoding processing is continued in step S<highlight><bold>313</bold></highlight> to suppress the image data that has already been encoded by the encoding unit <highlight><bold>102</bold></highlight> within a predetermined encoded data amount. If the subsequent transfer processing is not terminated after all the re-encoding processing is terminated, the overall encoded data of 1-page image data is not collected in the first memory, re-encoding processing and subsequent transfer processing must be continuously performed after the end of inputting of 1-page image data. In this case, if it is detected in step S<highlight><bold>315</bold></highlight> that all the re-encoding processing is terminated, the encoded data stored only in the second memory <highlight><bold>106</bold></highlight> is transferred to the first memory during the encoding/re-encoding phase (step S<highlight><bold>317</bold></highlight>). Thereafter, in step S<highlight><bold>805</bold></highlight>, the end of inputting of 1-page image data is detected. The flow then advances to step S<highlight><bold>807</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> The above description has been made on operation in this embodiment and the operation in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
</section>
<section>
<heading lvl="1">Modification of Memory Storage Method </heading>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9 and 10</cross-reference> are views showing a modification of the memory storage method indicated by the conceptual views of <cross-reference target="DRAWINGS">FIGS. 5 and 6</cross-reference>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Referring to the conceptual view of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, in the encoding/re-encoding phase, the encoded data output from the encoding unit <highlight><bold>102</bold></highlight> is stored only in the second memory <highlight><bold>106</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, however, in the encoding/re-encoding phase, the encoded data output from the encoding unit <highlight><bold>102</bold></highlight> is directly stored in both the first and second memories. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> When viewed from the encoding unit <highlight><bold>102</bold></highlight>, the data encoded in any phase and output is stored in the two memories. Unlike the conceptual view of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, there is no need to perform data transfer between the memories in the transfer phase, as shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. In addition, according to this modification, in the encoding/re-encoding phase, encoded data and re-encoded data are sequentially stored in the first memory <highlight><bold>104</bold></highlight> in the order in which they are transferred. For this reason, two types of data are mixed. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In this modification, in order to solve this problem, encoded data is divided into certain unit data to be managed as files or packets. More specifically, such unit data are managed by separately forming, for example, a file management table or packet management table. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> According to one technique, when data from the encoding unit <highlight><bold>102</bold></highlight> is to be stored in the first memory <highlight><bold>104</bold></highlight>, management numbers are assigned to the image data from the start per appropriate unit data (for example, 8&times;i (i&equals;integers 1, 2, . . . )-line data because the unit of orthogonal transformation is 8&times;8 blocks), and a management table is formed, which can store the storage start addresses of encoded data corresponding to the respective management numbers and the corresponding encoded data amounts in the management number order. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The encoding unit <highlight><bold>102</bold></highlight> and re-encoding unit <highlight><bold>109</bold></highlight> hold the management numbers of data under processing and write the storage start address of the encoded data and the encoded data amounts in the management table on the basis of the management numbers. With this operation, even if the encoded data processed by the encoding unit <highlight><bold>102</bold></highlight> and re-encoding unit <highlight><bold>109</bold></highlight> are stored at random, the encoded data can be sequentially read out from the first memory <highlight><bold>104</bold></highlight> from the start of the image by accessing the management table in the management number order and reading out the data on the basis of the start addresses and encoded data amount read out at this time. Such a management mechanism will eliminate the necessity to store the continuous data of an image in a memory in the continuous order. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The encoding phase after the transfer phase in the conceptual view of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is almost the same as the two encoding phases described above (<cross-reference target="DRAWINGS">FIGS. 4 and 7</cross-reference>) except that the stored state of codes in the first memory slightly differs from that shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. Therefore, the preceding description and this modification are the same in terms of repeating the three phases. </paragraph>
</section>
<section>
<heading lvl="1">Second Embodiment </heading>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The second basic arrangement for performing encoding processing characteristic to the present invention will be described below with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing an image processing apparatus <highlight><bold>200</bold></highlight> according to the second embodiment. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The image processing apparatus <highlight><bold>200</bold></highlight> greatly differs from the image processing apparatus <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in that two encoding units for performing encoding first are connected in parallel with each other. The image processing apparatus <highlight><bold>200</bold></highlight> generates two types of encoded data with different compression ratios by making first and second encoding units <highlight><bold>202</bold></highlight> and <highlight><bold>205</bold></highlight> concurrently encode the image data input from an input unit <highlight><bold>201</bold></highlight>. In this embodiment as well, a known JPEG encoding scheme is used as an encoding scheme, image data is subjected to orthogonal transformation on an 8&times;8 pixel basis, and the resultant data is subjected to quantization using a quantization step (to be described later) and Huffman encoding processing. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Note that the second embodiment will exemplify the case wherein a higher compression ratio is set for the second encoding unit <highlight><bold>205</bold></highlight> than for the first encoding unit <highlight><bold>202</bold></highlight>. More specifically, let Q<highlight><bold>1</bold></highlight> be the quantization step in the first encoding unit <highlight><bold>202</bold></highlight>, and Q<highlight><bold>2</bold></highlight> (&equals;2&times;Q<highlight><bold>1</bold></highlight>) be the quantization step in the second encoding unit <highlight><bold>205</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The encoded data output from the first encoding unit <highlight><bold>202</bold></highlight> is stored in a first memory <highlight><bold>204</bold></highlight> through a first memory control unit <highlight><bold>203</bold></highlight>. At this time, a first counter <highlight><bold>208</bold></highlight> counts the data amount of encoded data output from the first encoding unit <highlight><bold>202</bold></highlight> and stores it, and outputs it to an encoding sequence control unit <highlight><bold>209</bold></highlight>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The data encoded by the second encoding unit <highlight><bold>205</bold></highlight> is stored in a second memory <highlight><bold>207</bold></highlight> through a second memory control unit <highlight><bold>206</bold></highlight>. At this time, a second counter <highlight><bold>210</bold></highlight> counts the data amount of encoded data output from the second encoding unit <highlight><bold>205</bold></highlight> and holds it. When the encoded data stored in the second memory <highlight><bold>207</bold></highlight> is transferred to the first memory <highlight><bold>204</bold></highlight>, the second counter <highlight><bold>210</bold></highlight> transfers the above count value to the first counter <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> When the count value of the first counter <highlight><bold>208</bold></highlight> reaches a certain set value while the counter <highlight><bold>208</bold></highlight> is counting the data amount of the encoded data output from the first encoding unit <highlight><bold>202</bold></highlight>, the encoding sequence control unit <highlight><bold>209</bold></highlight> outputs a control signal to the first memory control unit <highlight><bold>203</bold></highlight> so as to discharge the data stored in the first memory <highlight><bold>204</bold></highlight> as in the first embodiment. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The encoding sequence control unit <highlight><bold>209</bold></highlight> then outputs control signals to the memory control unit <highlight><bold>206</bold></highlight> and memory control unit <highlight><bold>203</bold></highlight> so as to read out the encoded data stored in the second memory <highlight><bold>207</bold></highlight> and transfers it to the first memory <highlight><bold>204</bold></highlight>. As a consequence, the count value of the second counter <highlight><bold>210</bold></highlight> is transferred to the first counter <highlight><bold>208</bold></highlight>, and the value is loaded (overwritten) as the count value of the first counter. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In short, since the count value of the second counter <highlight><bold>210</bold></highlight> represents the data amount of encoded data stored in the second memory <highlight><bold>207</bold></highlight>, it can be considered that the count value and encoded data are directly copied to the first counter and first memory without changing their correspondence. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In addition, the encoding sequence control unit <highlight><bold>209</bold></highlight> outputs control signals to the first encoding unit <highlight><bold>202</bold></highlight> and second encoding unit <highlight><bold>205</bold></highlight> to encode data so as to reduce the data amount. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> For example, a quantization step S in the first encoding unit <highlight><bold>202</bold></highlight> and second encoding unit <highlight><bold>205</bold></highlight> is doubled. As a result, the first encoding unit <highlight><bold>202</bold></highlight> uses the quantization step Q<highlight><bold>2</bold></highlight> (&equals;2&times;Q<highlight><bold>1</bold></highlight>) in the second encoding unit <highlight><bold>205</bold></highlight>, whereas the second encoding unit <highlight><bold>205</bold></highlight> performs encoding processing with a high compression ratio in consideration of the next overflow by using a larger quantization step Q<highlight><bold>2</bold></highlight>&times;2. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In this case, the magnification ratio between the two quantization steps is set to two. Obviously, however, the magnification ratio can be set to an arbitrary value. The encoded data output from the respective encoding units <highlight><bold>202</bold></highlight> and <highlight><bold>205</bold></highlight> upon switching of quantization steps are respectively stored in the corresponding memories <highlight><bold>204</bold></highlight> and <highlight><bold>207</bold></highlight> through the corresponding memory control units <highlight><bold>203</bold></highlight> and <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> The encoding sequence control unit <highlight><bold>209</bold></highlight> outputs a control signal to the memory control unit <highlight><bold>206</bold></highlight> to read out the encoded data that has already been stored in the second memory and send it to a re-encoding unit <highlight><bold>211</bold></highlight>. The re-encoding unit <highlight><bold>211</bold></highlight> performs re-encoding processing for the encoded data as in the same manner as the re-encoding unit <highlight><bold>109</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> A third counter <highlight><bold>212</bold></highlight> counts the amount of data output from the re-encoding unit <highlight><bold>211</bold></highlight>. The third counter <highlight><bold>212</bold></highlight> is reset to zero immediately before re-encoding processing is started, and counts the amount of output data during re-encoding processing. Upon completion of the re-encoding processing, the third counter <highlight><bold>212</bold></highlight> transfers the obtained count value to the second counter <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> The second counter <highlight><bold>210</bold></highlight> calculates the total data amount of encoded data and re-encoded data stored in the second memory <highlight><bold>207</bold></highlight> by adding the transferred data amount count value and the count value held in the second counter <highlight><bold>210</bold></highlight>. That is, the data amount stored in the memory <highlight><bold>207</bold></highlight> coincides with the count value of the counter <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> If there is image data from the input unit <highlight><bold>201</bold></highlight> which is to be encoded, the encoding processing by the two encoding units <highlight><bold>202</bold></highlight> and <highlight><bold>205</bold></highlight> is continued regardless of whether the re-encoding processing is terminated or not terminated. Whether the count value of the counter <highlight><bold>208</bold></highlight> has reached a certain set value is repeatedly monitored until encoding processing (encoding and re-encoding) for 1-page image data input from the input unit <highlight><bold>201</bold></highlight> is completed. The above encoding/re-encoding processing is executed in accordance with control operation corresponding to the detection result obtained in this operation. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flow chart showing the flow of processing in the arrangement shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> If there are two encoding units as described with reference to <cross-reference target="DRAWINGS">FIG. 2, </cross-reference>1-page image data is encoded on the basis of the flow chart of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. Note that most of the description made with reference to <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is similar to that made with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference> which is a flow chart for the case wherein one encoding unit is used, and those skilled in the art can satisfactorily understand the characteristic feature of the second embodiment from the above description. Therefore, the processing will be described in three phases as in the case wherein one encoding unit is used, and points different from those in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> will be mainly described below. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The largest difference between the flow in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> and that in this embodiment is that the transfer processing in step S<highlight><bold>317</bold></highlight> is moved between steps S<highlight><bold>307</bold></highlight> and S<highlight><bold>309</bold></highlight>. That is, it can be regarded that the encoding/re-encoding phase and the transfer phase are interchanged (except for discarding processing of encoded data in step S<highlight><bold>307</bold></highlight>). </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> In initializing encoding parameters in step S<highlight><bold>301</bold></highlight>, the quantization step Q<highlight><bold>1</bold></highlight> and quantization step (&equals;2&times;Q<highlight><bold>1</bold></highlight>) are respectively set in the first encoding unit <highlight><bold>202</bold></highlight> and second encoding unit <highlight><bold>205</bold></highlight>. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> In the encoding phase, steps S<highlight><bold>801</bold></highlight>, S<highlight><bold>303</bold></highlight>, and S<highlight><bold>305</bold></highlight> are repeatedly executed. Although the processing in steps S<highlight><bold>801</bold></highlight> and S<highlight><bold>305</bold></highlight> is the same as that in the case with one encoding unit, only the encoding processing in step S<highlight><bold>303</bold></highlight> differs, as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> In order to increase the compression ratio of encoded data to be stored stepwise, the data encoded with the quantization step Q<highlight><bold>1</bold></highlight> corresponding to the lowest compression ratio is stored as the first encoded data in the first memory <highlight><bold>204</bold></highlight>, and the data encoded with the quantization step Q<highlight><bold>2</bold></highlight> is stored in the second memory. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> If the data amount of data stored in the first memory <highlight><bold>204</bold></highlight> exceeds a set upper limit (step S<highlight><bold>305</bold></highlight>), the encoded data held in the first memory <highlight><bold>204</bold></highlight> is immediately discarded (step S<highlight><bold>307</bold></highlight>), and the encoded data with the high compression ratio held in the second memory <highlight><bold>207</bold></highlight> is transferred to the first memory <highlight><bold>204</bold></highlight> (see step S<highlight><bold>317</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>). This makes it possible to quickly store the second appropriate candidate encoded data, which does not exceed the upper limit, in the first memory <highlight><bold>204</bold></highlight> without waiting for the end of the first re-encoding processing described in the first embodiment (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). This is the greatest merit in using the arrangement shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> which has the two encoding units as compared with the arrangement shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> The second embodiment is based on the idea that it is useless to have encoded data with the same compression ratio in the two memories <highlight><bold>204</bold></highlight> and <highlight><bold>207</bold></highlight>, and hence encoded data with a compression ratio higher than that of encoded data stored in the first memory <highlight><bold>204</bold></highlight> is stored in the second memory <highlight><bold>207</bold></highlight>. The subsequent processing is therefore performed on the basis of this idea. Upon completion of transfer of the encoded data in the second memory <highlight><bold>207</bold></highlight> to the first memory <highlight><bold>204</bold></highlight> (transfer phase), the encoded data in the second memory <highlight><bold>207</bold></highlight> is re-encoded to hold encoded with a compression ratio further increased by one step. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> More specifically, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, in the encoding/re-encoding phase after the transfer phase, the quantization steps Q<highlight><bold>1</bold></highlight> and Q<highlight><bold>2</bold></highlight> set in the two encoding unit <highlight><bold>202</bold></highlight> and <highlight><bold>205</bold></highlight> are changed to Q<highlight><bold>2</bold></highlight> and Q<highlight><bold>3</bold></highlight>, respectively, prior to re-encoding (step S<highlight><bold>309</bold></highlight>). If 1-page image data is continuously input without being stopped (step S<highlight><bold>803</bold></highlight>), the subsequent image data as input data are encoded by the two encoding units in which the new quantization steps are set (step S<highlight><bold>311</bold></highlight>), and the resultant data are respectively stored in the corresponding memories <highlight><bold>204</bold></highlight> and <highlight><bold>207</bold></highlight>. Concurrently with the above encoding processing, the encoded data stored in the second memory (the data transferred to the first memory <highlight><bold>204</bold></highlight>) is re-encoded (step S<highlight><bold>313</bold></highlight>) by the re-encoding unit <highlight><bold>211</bold></highlight> to change the data into encoded data with a compression ratio higher than that of the encoded data in the first memory by one step so as to obtain data encoded with the quantization step Q<highlight><bold>3</bold></highlight>. The re-encoded data is then stored in the second memory <highlight><bold>207</bold></highlight>. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In the second embodiment, as in the first embodiment, in this re-encoding processing, bit shift processing is performed for each quantized value obtained by temporarily Huffman-decoding encoded data so as to obtain the same result as that obtained by dividing each value by <highlight><bold>2</bold></highlight><highlight><superscript>n</superscript></highlight>. After this operation, Huffman encoding is performed again. This method allows high-speed re-encoding processing because the quantization step is changed by bit shift alone and neither inverse orthogonal transformation nor re-orthogonal transformation is performed. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Note that if there are two encoding units as in the second embodiment, encoded data and re-encoded data may be mixed and stored in the second memory <highlight><bold>207</bold></highlight>, as shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. As described above, therefore, encoded data must be divided into certain units to be managed as files or packets in the second memory <highlight><bold>207</bold></highlight> as well. For this purpose, the same arrangement as that in the modification of the first embodiment may be provided. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, when the end of re-encoding processing is detected in step S<highlight><bold>315</bold></highlight>, the flow shifts to the encoding phase (steps S<highlight><bold>801</bold></highlight> and S<highlight><bold>303</bold></highlight>). Note that in the encoding phase after the encoding/re-encoding phase, the encoded data held in the two memories <highlight><bold>204</bold></highlight> and <highlight><bold>207</bold></highlight> differ in their compression ratios and in their manners (addresses) in which encoded data are mixed, as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. If, therefore, the amount of data to be stored in the first memory <highlight><bold>204</bold></highlight> exceeds a set value, the encoded data (codes in the area indicated by horizontal stripes VI &plus;VIII) held in the second memory <highlight><bold>207</bold></highlight> needs to be transferred to the first memory <highlight><bold>204</bold></highlight>. In consideration of them, encoded data must be managed as files or packets in the first memory <highlight><bold>204</bold></highlight> as well as the second memory <highlight><bold>207</bold></highlight>. The first memory <highlight><bold>204</bold></highlight> therefore requires a management mechanism using the above management table. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The state of the encoded phase shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is the same as the initial state of the encoded phase (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>) except that the quantization steps and the manners in which encoded data are mixed differ before and after re-encoding processing. By repeating the encoding phase, transfer phase, and encoding/re-encoding phase, therefore, the encoded data obtained by compressing 1-page image data to a set upper limit or less can be reliably stored in the first memory <highlight><bold>204</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Since the transfer phase and encoding/re-encoding phase are performed in the reverse order to that in the first embodiment, detection of the end of inputting of 1-page image data (step S<highlight><bold>805</bold></highlight>), which is performed after transfer processing in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, is done at almost the same timing as the detection of the end of inputting of 1-page image data, which is performed in the encoding/re-encoding phase (step S<highlight><bold>803</bold></highlight>). The two detecting operations are almost the same as step S<highlight><bold>805</bold></highlight> in terms of function and almost the same as step S<highlight><bold>803</bold></highlight> in terms of timing. These two steps are therefore integrated into a new step of detecting the end of inputting of 1-page image data. This step is written as step S<highlight><bold>1201</bold></highlight>. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In the first and second embodiments, the first and second memories are described as physically different memories. This makes it possible to independently access the two memories. This merit is characteristic to the present invention. However, the present invention incorporates even a case wherein the first and second memories are not physically different memories. Assume that two areas corresponding to the above first and second memories are ensured on physically one memory. In this case, it is obvious from the above description with the first and second memories being replaced with the first and second memory areas that the present invention can be realized by one memory. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> If each embodiment described above is realized one memory, some of the data transfer operations described with reference to the transfer phase become unnecessary. The details of each of such cases can be easily expected, and hence a description thereof will be omitted. When the above two areas are strictly separated from each other and used, data transfer processing is required as in the case wherein physically two memories are used. If, however, identical data are shared between the two areas, no data transfer processing is required, and a reduction in storage capacity can be attained. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Assume that the encoded data held in the second memory area is to be transferred to the first memory area. In this case, the same effect as transferring the encoded data can be obtained by only transferring two pieces of information, i.e., the start address at which the encoded data is stored and its data size, from the second memory control unit to the first memory control unit. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> If the encoded data is stored in a file or packet form, the amount of information to be transferred between the memory control units slightly increases; management table information associated with the encoded data must be transferred. Even in this case, higher efficiency can be obtained by the above operation than by transferring the encoded data. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> As described above, according to the first and second embodiments, encoded data within a set size can be effectively generated by inputting an image once. </paragraph>
</section>
<section>
<heading lvl="1">Premise on Which Third and Fourth Embodiments Are Based </heading>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> In the first and second embodiments described above, it does not matter whether an input image is a monochrome or color image. If, however, an input image is a color image, encoding suitable for a color image can be done. Since a color image contains a plurality of color components, an independent quantization step can be applied to each color component. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a functional block diagram of an image processing apparatus <highlight><bold>100</bold></highlight> to which the third embodiment is applied. This arrangement is the same as that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> except that a selector <highlight><bold>111</bold></highlight> is added. The same reference numerals therefore denote the same parts. Note, however, that both an encoding unit <highlight><bold>102</bold></highlight> and a re-encoding unit <highlight><bold>109</bold></highlight> are designed to encode color images. Assume that each of the encoding unit <highlight><bold>102</bold></highlight> and re-encoding unit <highlight><bold>109</bold></highlight> in the third embodiment includes a conversion circuit for temporarily converting input color image data into a luminance signal and color difference signals, and compression-encodes the converted data. As luminance and color difference signals, signals defined in the Y-Cr-Cb color space or YIQ color space may be used. For the sake of convenience, therefore, in this embodiment, luminance data is represented by Y, and color difference signals are represented by C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> The overall arrangement will be described below. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> The image processing apparatus <highlight><bold>100</bold></highlight> includes the input unit <highlight><bold>101</bold></highlight> for inputting an image from an image scanner. Note that the input unit <highlight><bold>101</bold></highlight> may input image data by page description language rendering or read image files stored in a storage medium. In some case, the input unit <highlight><bold>101</bold></highlight> may receive image data from a network. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> The encoding unit <highlight><bold>102</bold></highlight> encodes the input image data. Note that in this embodiment, a known JPEG encoding scheme is used as an encoding scheme. In addition, the image data is subjected to orthogonal transformation on an 8&times;8 pixel basis, and the resultant data is subjected to quantization using an quantization step (to be described later) and Huffman encoding processing. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> A first memory control unit <highlight><bold>103</bold></highlight> and second memory control unit <highlight><bold>105</bold></highlight> perform control so as to store the above encoded data (identical encoded data) output from the encoding unit <highlight><bold>102</bold></highlight> in a first memory <highlight><bold>104</bold></highlight> and second memory <highlight><bold>106</bold></highlight>, respectively. In this case, the first memory <highlight><bold>104</bold></highlight> is a memory for holding the finally confirmed (compressed within a target data amount) encoded data to allow it to be output to a network device, image output apparatus, large-capacity storage apparatus, and the like externally connected to the basic arrangement shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The second memory <highlight><bold>106</bold></highlight> is a work memory for aiding in compression encoding to form the encoded data in the first memory. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> A counter <highlight><bold>107</bold></highlight> counts the data amount of image data compression-encoded by the encoding unit <highlight><bold>102</bold></highlight>, and holds the count value. The counter <highlight><bold>107</bold></highlight> also outputs the count result to an encoding sequence control unit <highlight><bold>108</bold></highlight> for controlling an encoding sequence. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> The encoding sequence control unit <highlight><bold>108</bold></highlight> detects whether the count value of the counter <highlight><bold>107</bold></highlight> has reached a set value. Upon detecting that the count value has reached the set value (exceeded the target value), the encoding sequence control unit <highlight><bold>108</bold></highlight> outputs a control signal to the first memory control unit <highlight><bold>103</bold></highlight> so as to discard the data stored in the first memory <highlight><bold>104</bold></highlight>. The first memory control unit <highlight><bold>103</bold></highlight> discards the stored data by clearing the memory address counter or encoded data management table on the basis of this control signal. At this time, the encoding sequence control unit <highlight><bold>108</bold></highlight> clears the counter <highlight><bold>107</bold></highlight> to zero (continuously inputting data from the input unit <highlight><bold>101</bold></highlight>), and also controls the encoding unit <highlight><bold>102</bold></highlight> to encode data at a higher compression ratio. That is, the encoding sequence control unit <highlight><bold>108</bold></highlight> performs control to finally reduce the data amount of encoded data generated by encoding processing in this apparatus to &frac12;. Obviously, this value can be set to an arbitrary value other than &frac12;. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> The encoded data obtained after the compression ratio is changed is also stored in the first and second memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> through the first and second memory control units <highlight><bold>103</bold></highlight> and <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Furthermore, the encoding sequence control unit <highlight><bold>108</bold></highlight> causes the second memory control unit <highlight><bold>105</bold></highlight> to read out the encoded data stored in the second memory <highlight><bold>106</bold></highlight>, and outputs a control signal to a re-encoding unit <highlight><bold>109</bold></highlight> serving as an encoded data converting means so as to output the encoded data. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> The re-encoding unit <highlight><bold>109</bold></highlight> decodes the input encoded data and performs re-quantization to reduce the data amount. The re-encoding unit <highlight><bold>109</bold></highlight> then performs encoding processing (entropy encoding) again and outputs a data amount with the same compression ratio as that of the encoding unit <highlight><bold>102</bold></highlight>, which has been changed, to a second counter <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The encoded data output from this re-encoding unit <highlight><bold>109</bold></highlight> is stored in the first and second memories <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> through the first and second memory control units <highlight><bold>103</bold></highlight> and <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> The second memory control unit <highlight><bold>105</bold></highlight> detects whether re-encoding processing is terminated. More specifically, when there is no data to be read out for re-encoding processing, the second memory control unit <highlight><bold>105</bold></highlight> notifies the encoding sequence control unit <highlight><bold>108</bold></highlight> of the end of the re-encoding processing. In practice, the encoding processing is completed when the processing by the re-encoding unit <highlight><bold>109</bold></highlight> is terminated as well as the read processing by the second memory control unit <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> The count value obtained by the second counter <highlight><bold>110</bold></highlight> is added to the counter value held in the counter <highlight><bold>107</bold></highlight> upon completion of the re-encoding processing. This addition result indicates the sum of data amounts in the first memory <highlight><bold>104</bold></highlight> immediately after the completion of the re-encoding processing. That is, when the encoding processing for one frame is completed by the encoding unit <highlight><bold>102</bold></highlight> and re-encoding unit <highlight><bold>109</bold></highlight>, the counter value held in the first counter <highlight><bold>107</bold></highlight> after the above addition indicates the total amount of data generated when this apparatus encoded 1-frame data (to be described in detail later). </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> The encoding unit <highlight><bold>102</bold></highlight> continuously performs encoding processing as long as image data from the input unit <highlight><bold>101</bold></highlight>, which should be encoded, is left, regardless of whether re-encoding processing is terminated or not terminated. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Whether the count value of the first counter <highlight><bold>107</bold></highlight> has reached a given set value is repeatedly checked until encoding processing (encoding and re-encoding) of 1-page image data input from the input unit <highlight><bold>101</bold></highlight> is terminated. The above encoding/re-encoding processing is executed in accordance with control operation corresponding to the detection result obtained in this operation. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> The switching signal output from the encoding sequence control unit <highlight><bold>108</bold></highlight> is supplied to the selector <highlight><bold>111</bold></highlight>. The selector <highlight><bold>111</bold></highlight> then switches between sending data to be encoded to the re-encoding unit <highlight><bold>109</bold></highlight> and returning it to the memory control units <highlight><bold>103</bold></highlight> and <highlight><bold>105</bold></highlight> without any change. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> As in the first embodiment described above, the processing contents in this arrangement have </paragraph>
<paragraph id="P-0141" lvl="2"><number>&lsqb;0141&rsqb;</number> (1) an encoding phase, </paragraph>
<paragraph id="P-0142" lvl="2"><number>&lsqb;0142&rsqb;</number> (2) an encoding/re-encoding phase, and </paragraph>
<paragraph id="P-0143" lvl="2"><number>&lsqb;0143&rsqb;</number> (3) a transfer phase. </paragraph>
<paragraph id="P-0144" lvl="7"><number>&lsqb;0144&rsqb;</number> Procedures for storage of data into the first and second memories are the same as those shown in FIGS. <highlight><bold>4</bold></highlight> to <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> The third embodiment differs from the first and second embodiments in that an image to be compression-encoded is a color image. The third embodiment relates to a method of coping with a case wherein a code amount exceeding a set value is counted by the first counter <highlight><bold>107</bold></highlight>. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Although described in detail later, as shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, when encoded data is generated in an amount exceeding a set value for the first time since compression encoding of an input image is started, the encoding unit <highlight><bold>102</bold></highlight> continues encoding data while increasing the quantization step higher than the quantization step in the initial state with respect to the alternating current components (AC) of color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight>. Since the color image data encoded with the quantization step in the initial state has already been stored in the second memory, the alternating current components of the color difference signals C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> are selected by the selector <highlight><bold>111</bold></highlight> and re-encoded by the re-encoding unit <highlight><bold>109</bold></highlight>. The resultant data are then stored in the first and second memories. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> If it is determined that the code amount exceeds the set value next, the quantization step for an alternating current component AC of a luminance data Y is increased in accordance with the table shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> As described above, the third embodiment can finely adjust the code amount of data generated by selecting a luminance data or color difference data for which the quantization step is to be changed and also selecting an alternating current or direct current component upon DCT processing, instead of simply increasing the quantization step for all color components. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> The above description is about an outline of the third embodiment (<cross-reference target="DRAWINGS">FIG. 17</cross-reference>) corresponding to the first embodiment (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). The fourth embodiment corresponding to the second embodiment (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) has an arrangement like that shown in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>. The arrangement in <cross-reference target="DRAWINGS">FIG. 18</cross-reference> differs from that in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> in that the selector <highlight><bold>111</bold></highlight> is added. Therefore, the remaining components are denoted by the same reference numerals. With regard to processing contents in a case wherein the code amount of data generated exceeds a set value, the manner in which data are stored in the first and second memories is the same as that in the second embodiment. The difference from the second embodiment is that a target component for which the quantization step is increased is determined in accordance with the scenario shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> An application example of the third embodiment will be described in detail below in accordance with the above outline. Note that the fourth embodiment (<cross-reference target="DRAWINGS">FIG. 18</cross-reference>) is the same as the second embodiment except that color images are processed, and components for which the quantization step is changed when the code amount exceeds a set value are the same as those in the third embodiment to be described below. Therefore, a description of the fourth embodiment will be omitted. </paragraph>
</section>
<section>
<heading lvl="1">Third Embodiment </heading>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a block diagram showing the arrangement of a digital image processing apparatus to which the third embodiment is applied. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>, reference numeral <highlight><bold>1000</bold></highlight> denotes an input port for color image data (including image area information and color image data). As shown in <cross-reference target="DRAWINGS">FIG. 19, a</cross-reference> selector <highlight><bold>1023</bold></highlight> is connected to the input port <highlight><bold>1000</bold></highlight>. The selector <highlight><bold>1023</bold></highlight> selects an image scanner <highlight><bold>1020</bold></highlight> or a rendering engine <highlight><bold>1021</bold></highlight> based on the print data output from a host computer (selects through an operation panel (not shown) or automatically selects in accordance with input operation). Assume that color image data <highlight><bold>1031</bold></highlight> and <highlight><bold>1032</bold></highlight> and pieces of image area information <highlight><bold>1033</bold></highlight> and <highlight><bold>1034</bold></highlight> (information for identifying whether each pixel exists in a character/line image area or halftone area and is a color or monochrome pixel) are output from both the scanner and the rendering engine. The rendering engine <highlight><bold>1021</bold></highlight> can generate image area information on the basis of print data (a halftone image is transferred as image data from the host computer, and a character/line image is drawn in accordance with a draw command). The image scanner <highlight><bold>1020</bold></highlight> basically reads an original image and needs to determine on the basis of the read image whether the image exists in a character/line image area or halftone area and is a color or monochrome image. Assume therefore that the image scanner <highlight><bold>1020</bold></highlight> incorporates a circuit for generating such image area information. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Reference numeral <highlight><bold>1001</bold></highlight> denotes a line buffer having a plurality of lines of an input image (capacity large enough to extract tiles); and <highlight><bold>1002</bold></highlight>, a color image encoder corresponding to the encoding unit <highlight><bold>102</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The color image encoder <highlight><bold>1002</bold></highlight> in this embodiment, however, includes a conversion circuit for temporarily converting input color image data into a luminance signal and color difference signals, and compression-encodes the converted data. As luminance and color difference signals, signals defined in the Y-Cr-Cb color space or YIQ color space may be used. For the sake of convenience, therefore, in this embodiment, luminance data is represented by Y, and color difference data is represented by C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Reference numeral <highlight><bold>1003</bold></highlight> denotes an internal buffer for storing encoded data temporarily. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> Reference numeral <highlight><bold>1004</bold></highlight> denotes an external memory (e.g., a hard disk) for storing encoded color image data; <highlight><bold>1005</bold></highlight>, a decoding buffer for temporarily storing read encoded image data to decode it; <highlight><bold>1006</bold></highlight>, a decoder; <highlight><bold>1007</bold></highlight>, a line buffer for storing a decoded image temporarily; and <highlight><bold>1008</bold></highlight>, an output port for outputting the image stored in the output port <highlight><bold>1008</bold></highlight> to a printer unit <highlight><bold>1009</bold></highlight> connected to the port. Assume that the printer unit <highlight><bold>1009</bold></highlight> incorporates a conversion circuit for converting the data Y, C<highlight><bold>1</bold></highlight>, and C<highlight><bold>2</bold></highlight> into print color components Y, M, and C (or Y, M, C, and Bk). In addition, the printer unit <highlight><bold>1009</bold></highlight> is not limited to any specific printing scheme. For example, a laser beam printer or a printer designed to discharge ink droplets may be used. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> Reference numeral <highlight><bold>1010</bold></highlight> denotes a code amount monitoring unit for monitoring the code amount of data stored in an internal buffer <highlight><bold>1003</bold></highlight>; and <highlight><bold>1011</bold></highlight>, a code converting unit for performing re-encoding. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> In relation to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, the internal buffer <highlight><bold>1003</bold></highlight> serves as both the first and second memories in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In addition, the encoding sequence control unit <highlight><bold>108</bold></highlight>, first counter <highlight><bold>107</bold></highlight>, second counter <highlight><bold>110</bold></highlight>, and selector <highlight><bold>111</bold></highlight> correspond to the code amount monitoring unit <highlight><bold>1010</bold></highlight>, and the re-encoding unit <highlight><bold>109</bold></highlight> corresponds to the code converting unit <highlight><bold>1011</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> The color image encoder <highlight><bold>1002</bold></highlight> divides the image data stored in the line buffer <highlight><bold>1001</bold></highlight> into tiles each having a size of 8&times;8 pixels (each tile is not limited to 8&times;8 pixels and may have M&times;M pixels), and encodes color information on an 8&times;8 pixel basis. A color image is encoded by discrete cosine transform (JPEG), whereas image area information is encoded by run-length encoding. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> Image are a information is attached to each pixel. When, however, data is to be processed by DCT for each 8&times;8 pixel block, an image area flag is representatively attached to each block. Image areas are classified according to the character and photographic areas of an image and whether a given area is color or monochrome. However, another method may be used or other components may be added. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The code amount monitoring unit <highlight><bold>1010</bold></highlight> monitors the code amount of data generated by the color image encoder <highlight><bold>1002</bold></highlight>. When expecting that the code amount will exceed a set amount, the code amount monitoring unit <highlight><bold>1010</bold></highlight> causes the encoder <highlight><bold>1002</bold></highlight> to encode subsequent input color image (and attribute information) with higher encoding efficiency, and also causes the code converting unit <highlight><bold>1011</bold></highlight> to re-encode the previously encoded data with higher encoding efficiency. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> In the third embodiment, in order to gradually increase the encoding efficiency every time a code amount exceeds the set value, the following operation is performed. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> As described above, the third embodiment is configured to encode a color image. Color image data is expressed in a color space form defined by the luminance data Y and color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> When determining the code amount of data generated by the encoding unit <highlight><bold>102</bold></highlight> has exceeded a target value after the start of encoding of a given page, the code amount monitoring unit <highlight><bold>1010</bold></highlight> (the encoding sequence control unit <highlight><bold>108</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>) causes the encoding unit <highlight><bold>102</bold></highlight> to encode the alternating current component (AC) obtained by orthogonal transformation of the color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> while setting a quantization step higher than before. With this operation, color images input after it is determined that the code amount has exceeded the target value are encoded with a higher compression ratio. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> In addition, since the data encoded until it is determined that the code amount has exceeded the target value is stored in the second memory, the re-encoding unit <highlight><bold>109</bold></highlight> is caused to output only the encoded color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> to the second memory control unit <highlight><bold>105</bold></highlight>, and a control command is issued to the selector <highlight><bold>111</bold></highlight> to output the data to the re-encoding unit <highlight><bold>109</bold></highlight>. In addition, the encoding sequence control unit <highlight><bold>108</bold></highlight> causes the re-encoding unit <highlight><bold>109</bold></highlight> to decode the encoded color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> and encode their alternating current components (AC components) upon increasing their quantization step. The re-encoded color difference data are stored in the first memory <highlight><bold>104</bold></highlight> and second memory <highlight><bold>106</bold></highlight>. With this operation, even the data encoded before the code amount has exceeded the target value can be encoded with a high compression ratio. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> In brief, when the code amount exceeds the target value for the first time in inputting and encoding the color image data of a given page, the alternating current components of the color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> are continuously encoded with a higher quantization step. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> If the code amount exceeds the target value again during the above processing, the alternating current component of the luminance data Y is determined as a target for which the quantization step is to be changed. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> In this manner, every time the code amount exceeds the target value, the quantization steps for the alternating current components and direct current components of the luminance data Y and color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> are changed (set higher) to gradually increase the compression ratio. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> For this purpose, the encoding sequence control unit <highlight><bold>108</bold></highlight> has a scenario table like the one shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, and performs control to gradually increase the compression ratio in the order of the first scenario, second scenario, third scenario, . . . as the number of times the code amount exceeds the target value for a given page is counted. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> When, therefore, the code amount exceeds the target value for the first time while a given page is encoded, the alternating current components AC of the color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> become targets to be selected in accordance with the table shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, and hence the above processing is performed. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a graph for explaining the relationship between the progress of encoding and the memory occupancy ratio. An operation sequence will be briefly described below with reference to <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, coded data has overflowed at the time point of {fraction (2/8)} under the condition of initial values (with encoding parameters in the initial stage). According to this embodiment, after this time point, the quantization step for the alternating current components of the color difference data C<highlight><bold>1</bold></highlight> and C<highlight><bold>2</bold></highlight> is increased, and color image data is continuously encoded. With regard to the data that has already been encoded, the color difference data of the data are decoded, and the quantization step for the alternating current components is increased, thus starting re-encoding processing. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> At the time point of &frac38;, re-encoding processing before it is determined that the code amount has exceeded the target value is completed, and transfer processing to the first memory <highlight><bold>104</bold></highlight> is completed. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> At the time point of {fraction (4/8)}, coded data overflows again, and hence re-encoding processing is started. Since this overflow is the second overflow, the alternating current component of the luminance data is selected and processed according to the table shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. At the time point of &frac58;, this en-coding processing is terminated, and transfer processing is completed. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> At the time point of {fraction (8/8)}, 1-page image data is completely encoded. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> In the above case, at the time point of &frac38;, the encoded data has overrun about 25%. This value is determined by a compression ratio and re-encoding time. In an actual apparatus, such a value needs to be ensured as a design parameter, i.e., a margin of the buffer memory. However, this value does not become very large. As is obvious from <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, the processing time ends within the time required to encode a 1-page image. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> As is also obvious from the above description, in the third embodiment, since quantization steps for the direct current components and alternating current components of color difference data and luminance data can be independently set, the values of the quantization steps for the alternating current components and direct current components of luminance and color difference data are stored in the first memory <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 22A</cross-reference> to <highlight><bold>22</bold></highlight>D are views for explaining the direct current coefficients (DC coefficients) of DCT coefficients. <cross-reference target="DRAWINGS">FIG. 22B</cross-reference> is a view for explaining DC coefficient encoding. The differences between a DC coefficient value (the small square at the upper left in <cross-reference target="DRAWINGS">FIG. 22B</cross-reference>) having undergone 8&times;8 DCT transformation and the DC coefficient values of the adjacent blocks are obtained and variable-length encoded. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22A</cross-reference> is a block diagram showing an arrangement for encoding. A difference calculator <highlight><bold>1202</bold></highlight> calculates the difference between a DC coefficient <highlight><bold>1205</bold></highlight> and the DC coefficient of an immediately preceding block which is delayed by a block delay device <highlight><bold>1201</bold></highlight>. The differential value is converted into a group number SSSS by grouping processing. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> A grouping unit determines the number of additional bits in accordance with a DC differential value, as shown in <cross-reference target="DRAWINGS">FIG. 22C</cross-reference>. The group number SSSS is Huffman-encoded by a one-dimensional Huffman encoder <highlight><bold>1204</bold></highlight> according to the table shown in <cross-reference target="DRAWINGS">FIG. 22D</cross-reference>. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> As is obvious from these tables, as the group number decreases, the Huffman code and the number of additional bits decrease (they are equal to each other in some cases). </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> When, therefore, the DC differential value decreases to &frac12;, the group number decreases by one, and the variable-length code portion obtained by combining a Huffman code and additional bits decreases by 1 to 2 bits. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a view for explaining a scheme of encoding the alternating current coefficients (AC coefficients) of DCT coefficients. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> AC coefficients <highlight><bold>1301</bold></highlight> are rearranged in a zigzag order. When a determining device <highlight><bold>1302</bold></highlight> determines 0, a run length counter <highlight><bold>1303</bold></highlight> counts the number of consecutive coefficients of 0 (run length), and outputs the a run length NNNN <highlight><bold>1306</bold></highlight>. With regard to a coefficient value other than <highlight><bold>0</bold></highlight>, a grouping device <highlight><bold>1304</bold></highlight> outputs a group number <highlight><bold>1307</bold></highlight> and additional bit <highlight><bold>1302</bold></highlight> as in the case shown in <cross-reference target="DRAWINGS">FIG. 22A</cross-reference>. A two-dimensional Huffman encoder <highlight><bold>1305</bold></highlight> performs Huffman encoding by combining the run length NNNN and group number SSSS (see <cross-reference target="DRAWINGS">FIG. 23</cross-reference>). </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> If the run length NNNN exceeds 15, ZRLs each indicating a run length of 16 are output by a necessary number. For example, a run length of 35 is converted into ZRL&plus;ZRL&plus; run length of 3 to be encoded. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> In addition, EOB (End of Block) is added after the last effective coefficient (a coefficient other than 0). </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> In this embodiment, 8&times;8 blocks are subjected to DCT processing, zigzag scanning is performed in the order shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> shows part of a Huffman code table to be looked up with a run length and size. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> Obviously, as an AC coefficient value decreases to &frac12;, the group number decreases by one, and the variable-length code portion obtained by combining a Huffman code and additional bits decreases by 1 or 2 bits. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> In addition, since the coefficient value becomes zero and the run length increases, the number of dominant symbols to be encoded also decreases. As a consequence, the code length further decreases. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> A case wherein an index is set in a color signal selection table in accordance with the start point of re-encoding will be described next. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a graph for explaining the relationship between the progress of encoding and the memory occupancy ratio. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 27</cross-reference>, at the time point of {fraction (6/8)}, an encoding overflow occurs in the quantization step for an initial value, and re-encoding processing is started. In addition, encoding is continuously performed by changing the quantization step. In this case, the overflow occurs at the time point of {fraction (6/8)} near the end of processing. If, therefore, all the color components are re-encoded, the code amount is reduced to about &frac12;. That is, it is expected that the code amount may be excessively compressed below a predetermined code amount. In this case, therefore, only the AC components of color difference data in a color selection table are re-encoded, and the encoding sequence control unit performs index control on the basis of the count of the processing amount of a 1-page image. This makes it possible to prevent overcompression afterward. </paragraph>
</section>
<section>
<heading lvl="1">Application Example </heading>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> The above embodiment has exemplified the apparatus designed to read an image through the image scanner, and the functional operation of the apparatus has been described. Most of the functions of this apparatus (including encoding processing) can be implemented by computer programs, as described above. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> The present invention can therefore be applied to an application program running on a general-purpose information processing apparatus such as a personal computer. When the present invention is to be applied to an application program, a GUI may be provided to allow the user to, for example, designate an image file as an compression source and select a target size. This target value can be arbitrarily set by the user. However, it is cumbersome for the user to set a target value by inputting a numerical value. It is therefore preferable to allow the user to determine a target value by selecting it from an intuitively perceivable menu with original sizes and image quality (e.g., high, medium, and low) being taken into consideration. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> Although a quantization step has been exemplified as an encoding parameter in the encoding unit, other parameters can be used as long as they are used to prevent the development of a sense of incongruity in terms of image quality between data with different compression ratios when they are mixed. For example, in the arrangement shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in order to make re-encoded data from the re-encoding unit <highlight><bold>109</bold></highlight> substantially identical to encoded data from the encoding unit <highlight><bold>102</bold></highlight> after a parameter is changed, the technique of increasing the quantization step is preferably used as in the above embodiments. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> As described above, according to the third and fourth embodiments, a multilevel color image can be encoded within a target size without performing reinput operation, and a deterioration in the image quality of the color image can be minimized. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> The above embodiments have exemplified the case wherein a color image is compression-encoded as luminance and color difference data. However, a color space for expressing color components is not limited to luminance and color differences. For example, the L*a*b* color space may be used. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> Although the compression parameter is changed every time a memory overflow occurs, it is preferable that the quantization step be increased with priority being given to a color component that is difficult to discriminate by the human vision. For this reason, it is preferable to use a color space suitable for a color appearance model, e.g., luminance and color differences (hue and saturation) rather than the RGB color space. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> As described above, the present invention can also be implemented by an application program running on a general-purpose information processing apparatus. The present invention therefore incorporates the computer program. In addition, in general, the computer program is copied or installed in the apparatus through a storage medium such as a floppy disk or CD-ROM set in the apparatus, and executed. As is obvious, therefore, such a storage medium is also incorporated in the present invention. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> In the above embodiments, image data is input from the scanner. However, the present invention can also be applied to a printer driver operating on a computer. Assume that the present invention is to be applied to the printer driver. In this case, when data to be printed is received from upper processing (an application or the like), the data can be discriminated as a halftone image or character/line image, the arrangement for image area information generation can be omitted or simplified. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> Furthermore, the present invention can be applied to a combination of a computer program and appropriate hardware (an encoding circuit and the like). </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof, it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>first compressing means which can change a parameter for determining a compression ratio; </claim-text>
<claim-text>second compressing means which can change a parameter for determining a compression ratio, decodes encoded data compressed by said first compressing means, and re-compresses the data; </claim-text>
<claim-text>monitoring means for monitoring a code data amount while image data of an input page is compressed by said first compressing means, and determining whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>setting means for, when said monitoring means detects that the code data amount has reached the predetermined amount during compression of the page, setting a parameter for increasing a compression ratio in said first and second compressing means; and </claim-text>
<claim-text>control means for, when the parameter is changed by said setting means, causing said second compressing means to re-encode encoded data generated by said first compressing means before the parameter is changed, storing the re-encoded data as encoded data after the parameter in said first compressing means is changed, and storing the encoded data generated by said first encoding means after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein when said second compressing means executes re-encoding, said first and second compressing means operate concurrently in at least part of an interval. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the parameter is a quantization step in quantization processing. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the encoded data generated by said first compressing means is simultaneously written in said first and second memories, and </claim-text>
<claim-text>when said monitoring means detects that the code data amount has reached the predetermined data amount, said control means clears said first memory, causes said second compressing means to re-encode the encoded data stored in said second memory, and stores the encoded data in said first memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A control method for an image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>the first compressing step in which a parameter for determining a compression ratio can be changed; </claim-text>
<claim-text>the second compressing step in which a parameter for determining a compression ratio can be changed, encoded data compressed in the first compressing step is decoded, and the data is re-encoded; </claim-text>
<claim-text>the monitoring step of monitoring a code data amount while image data of an input page is compressed in the first compressing step, and detecting whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>the setting step of, when it is detected in the monitoring step that the code data amount has reached the predetermined amount during compression of the page, setting a parameter for increasing a compression ratio in the first and second compressing step; and </claim-text>
<claim-text>the control step of, when the parameter is changed in the setting step, re-encoding encoded data, generated in the first compressing step before the parameter is changed, in the second compressing step, storing the re-encoded data as encoded data after the parameter in the first compressing step is changed, and storing the encoded data generated in the first encoding step after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein when re-encoding is executed in the second compressing step, the first and second compressing steps are concurrently executed in at least part of an interval. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A computer program functioning as an image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>a program code for the first compressing step in which a parameter for determining a compression ratio can be changed; </claim-text>
<claim-text>a program code for the second compressing step in which a parameter for determining a compression ratio can be changed, encoded data compressed in the first compressing step is decoded, and the data is re-encoded; </claim-text>
<claim-text>a program code for the monitoring step of monitoring a code data amount while image data of an input page is compressed in the first compressing step, and determining whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>a program code for the setting step of, when it is determined in the monitoring step that the code data amount has reached the predetermined amount during compression of the page, setting a parameter for increasing a compression ratio in the first and second compressing step; and </claim-text>
<claim-text>a program code for the control step of, when the parameter is changed in the setting step, re-encoding encoded data, generated in the first compressing step before the parameter is changed, in the second compressing step, storing the re-encoded data as encoded data after the parameter in the first compressing step is changed, and storing the encoded data generated in the first encoding step after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The program according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein when re-encoding is executed in the second compressing step, the first and second compressing steps are concurrently executed in at least part of an interval. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A storage medium storing the computer program defined by <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>first and second compressing means which can change a parameter for determining a compression ratio; </claim-text>
<claim-text>third compressing means which can change a parameter for determining a compression ratio, decodes encoded data compressed by said second compressing means, and re-compresses the data; </claim-text>
<claim-text>setting means for setting different parameters to make a compression ratio of said second compressing means higher than a compression ratio of said first compressing means; </claim-text>
<claim-text>monitoring means for monitoring a code data amount generated by said first compressing means while image data of an input page is compressed by said first and second compressing means, and detecting whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>updating means for, when said monitoring means determines that the code data amount has reached the predetermined amount, updating the parameter set in said second compressing means as a parameter for said first compressing means during compression of the page, and updating the parameter in said second compressing means to further increase the compression ratio of said second compressing means; and </claim-text>
<claim-text>control means for, when the parameter is updated by said updating means, causing said third compressing means to re-encode the encoded data generated by said second compressing means before the parameter is changed, storing the encoded data generated by said second compressing means as encoded data generated by said first compressing means after the parameter is changed, and storing the encoded data generated by said first compressing means as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein when said third compressing means executes re-encoding, said third compressing means and said first and second compressing means operate concurrently in at least part of an interval. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A control method for an image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>the first and second compressing steps in which a parameter for determining a compression ratio can be changed; </claim-text>
<claim-text>the third compressing step in which a parameter for determining a compression ratio can be changed, encoded data compressed in the second compressing step is decoded, and the data is re-compressed; </claim-text>
<claim-text>the setting step of setting different parameters to make a compression ratio in the second compressing step higher than a compression ratio in the first compressing step; </claim-text>
<claim-text>the monitoring step of monitoring a code data amount generated in the first compressing step while image data of an input page is compressed in the first and second compressing step, and detecting whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>the updating step of, when it is determined in the monitoring step that the code data amount has reached the predetermined amount, updating the parameter set in the second compressing step as a parameter in the first compressing step during compression of the page, and updating the parameter in the second compressing step to further increase the compression ratio in the second compressing step; and </claim-text>
<claim-text>the control step of, when the parameter is updated in the updating step, re-encoding, in the third compressing step, the encoded data generated in the second compressing step before the parameter is changed, storing the encoded data generated in the second compressing step as encoded data generated in the first compressing step after the parameter is changed, and storing the encoded data generated in the first compressing step as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein when said third compressing means executes re-encoding, said third compressing means and said first and second compressing means operate concurrently in at least part of an interval. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer program functioning as an image processing apparatus for inputting image data and compression-encoding the data, comprising: 
<claim-text>a program code for the first and second compressing steps in which a parameter for determining a compression ratio can be changed; </claim-text>
<claim-text>a program code for the third compressing step in which a parameter for determining a compression ratio can be changed, encoded data compressed in the second compressing step is decoded, and the data is re-compressed; </claim-text>
<claim-text>a program code for the setting step of setting different parameters to make a compression ratio in the second compressing step higher than a compression ratio in the first compressing step; </claim-text>
<claim-text>a program code for the monitoring step of monitoring a code data amount generated in the first compressing step while image data of an input page is compressed in the first and second compressing step, and determining whether the code data amount has reached a predetermined amount; a program code for the updating step of, when it is determined in the monitoring step that the code data amount has reached the predetermined amount, updating the parameter set in the second compressing step as a parameter in the first compressing step during compression of the page, and updating the parameter in the second compressing step to further increase the compression ratio in the second compressing step; and </claim-text>
<claim-text>a program code for the control step of, when the parameter is updated in the updating step, re-encoding, in the third compressing step, the encoded data generated in the second compressing step before the parameter is changed, storing the encoded data generated in the second compressing step as encoded data generated in the first compressing step after the parameter is changed, and storing the encoded data generated in the first compressing step as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A storage medium storing the computer program defined by <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An image processing apparatus for compression-encoding multilevel color image data constituted by a plurality of color components, comprising: 
<claim-text>storage means for storing compression-encoded data; </claim-text>
<claim-text>first compression-encoding means which can change a parameter associated with a quantization step; </claim-text>
<claim-text>second compression-encoding means which can change a parameter associated with a quantization step, decodes the data compression-encoded by said first compression-encoding means, and re-encodes the data; </claim-text>
<claim-text>code amount monitoring means for monitoring a code amount generated by said first compression-encoding means, and determining whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>parameter setting means for, when said code amount monitoring means determines that the code data amount has reached the predetermined amount, determining a color component for which the quantization steps are to be changed in said first and second compression-encoding means; and </claim-text>
<claim-text>control means for, when said parameter setting means changes the parameters, causing said second compression-encoding means to re-encode the encoded data generated by said first compression-encoding means before the parameters are changed, storing the re-encoded data, in said storage means, as encoded data after the parameter changed in said first compression-encoding means, and causing said storage means to store the encoded data generated by said first compression-encoding means after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein said parameter setting means further determines which one of quantization steps for an alternating current component and a direct current component is to be changed. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein 
<claim-text>the color component is luminance information and color difference information, and </claim-text>
<claim-text>said parameter setting means increases a quantization step in the order of an alternating current component of color difference information, an alternating current component of luminance information, a direct current component of a color difference data, and a direct current component of luminance information every time said code amount monitoring means determines that the code amount exceeds a predetermined amount. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, wherein said parameter setting means makes a setting by looking up a table indicating a relationship between an order in which said code amount monitoring means determines that the code amount exceeds the predetermined amount and corresponding setting contents. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A control method for an image processing apparatus for compression-encoding multilevel color image data constituted by a plurality of color components, comprising: 
<claim-text>the first compression-encoding step in which a parameter associated with a quantization step can be changed; </claim-text>
<claim-text>the second compression-encoding step in which a parameter associated with a quantization step can be changed, the data compression-encoded in the first compression-encoding step is decoded, and the data is re-encoded; </claim-text>
<claim-text>the code amount monitoring step of monitoring a code amount generated in the first compression-encoding step, and determining whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>the parameter setting step of, when it is determined in the code amount monitoring step that the code data amount has reached the predetermined amount, determining a color component for which the quantization steps are to be changed in the first and second compression-encoding step; and </claim-text>
<claim-text>the control step of, when the parameters are changed in the parameter setting step, re-encoding the encoded data, generated in the first compression-encoding step before the parameters are changed, in the second compression-encoding step, storing the re-encoded data, in the storage step, as encoded data after the parameter changed in the first compression-encoding step, and storing, in the storage step, the encoded data generated in the first compression-encoding step after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer program functioning as an image processing apparatus for compression-encoding multilevel color image data constituted by a plurality of color components, comprising: 
<claim-text>a program code for the first compression-encoding step in which a parameter associated with a quantization step can be changed; </claim-text>
<claim-text>a program code for the second compression-encoding step in which a parameter associated with a quantization step can be changed, the data compression-encoded in the first compression-encoding step is decoded, and the data is re-encoded; </claim-text>
<claim-text>a program code for the code amount monitoring step of monitoring a code amount generated in the first compression-encoding step, and determining whether the code data amount has reached a predetermined amount; </claim-text>
<claim-text>a program code for the parameter setting step of, when it is determined in the code amount monitoring step that the code data amount has reached the predetermined amount, determining a color component for which the quantization steps are to be changed in the first and second compression-encoding step; and </claim-text>
<claim-text>a program code for the control step of, when the parameters are changed in the parameter setting step, re-encoding the encoded data, generated in the first compression-encoding step before the parameters are changed, in the second compression-encoding step, storing the re-encoded data, in the storage step, as encoded data after the parameter changed in the first compression-encoding step, and storing, in the storage step, the encoded data generated in the first compression-encoding step after the parameter is changed as succeeding encoded data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A computer-readable storage medium storing the computer program defined in claim <highlight><bold>21</bold></highlight>.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002743A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002743A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002743A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002743A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002743A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002743A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002743A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002743A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002743A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002743A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002743A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002743A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002743A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002743A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002743A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002743A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002743A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002743A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002743A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002743A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002743A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030002743A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030002743A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030002743A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030002743A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030002743A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030002743A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030002743A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030002743A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
