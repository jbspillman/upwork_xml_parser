<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004688A1-20030102-D00000.TIF SYSTEM "US20030004688A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00001.TIF SYSTEM "US20030004688A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00002.TIF SYSTEM "US20030004688A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00003.TIF SYSTEM "US20030004688A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00004.TIF SYSTEM "US20030004688A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00005.TIF SYSTEM "US20030004688A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00006.TIF SYSTEM "US20030004688A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00007.TIF SYSTEM "US20030004688A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00008.TIF SYSTEM "US20030004688A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00009.TIF SYSTEM "US20030004688A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00010.TIF SYSTEM "US20030004688A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00011.TIF SYSTEM "US20030004688A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00012.TIF SYSTEM "US20030004688A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00013.TIF SYSTEM "US20030004688A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00014.TIF SYSTEM "US20030004688A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00015.TIF SYSTEM "US20030004688A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00016.TIF SYSTEM "US20030004688A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00017.TIF SYSTEM "US20030004688A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030004688A1-20030102-D00018.TIF SYSTEM "US20030004688A1-20030102-D00018.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004688</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10171805</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020613</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>702</class>
<subclass>188000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Virtual intrusion detection system and method of using same</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60298220</doc-number>
<document-date>20010613</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Ramesh</given-name>
<middle-name>M.</middle-name>
<family-name>Gupta</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Parveen</given-name>
<middle-name>K.</middle-name>
<family-name>Jain</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Keith</given-name>
<middle-name>E.</middle-name>
<family-name>Amidon</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Fengmin</given-name>
<family-name>Gong</family-name>
</name>
<residence>
<residence-us>
<city>Livermore</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Srikant</given-name>
<family-name>Vissamsetti</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Steve</given-name>
<middle-name>M.</middle-name>
<family-name>Haeffele</family-name>
</name>
<residence>
<residence-us>
<city>Los Gatos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ananth</given-name>
<family-name>Raman</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>COOLEY GODWARD, LLP</name-1>
<name-2></name-2>
<address>
<address-1>3000 EL CAMINO REAL</address-1>
<address-2>5 PALO ALTO SQUARE</address-2>
<city>PALO ALTO</city>
<state>CA</state>
<postalcode>94306</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of forming a virtual intrusion detection system includes the step of positioning a set of sensors in a network environment, each sensor supporting multiple logical traffic paths. The method also includes the step of providing a set of sensor management systems corresponding to the set of sensors. This set of sensor management systems enforces a set of virtual intrusion detection systems, wherein each virtual intrusion detection system corresponds to a predetermined logical traffic path through the set of sensors, each virtual detection system providing sensor traffic information solely to authorized parties. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority to provisional patent application 60/298,220, which was filed on Jun. 13, 2001.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates generally to computer networks. More particularly, this invention relates to network security sensors and distributed network security sensor architectures used to implement intrusion detection and protection. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The prevalence of computer vulnerabilities and malicious computer hackers is well documented. Thus, there are ongoing concerns about computer security. Computer security anxieties span a spectrum of computer configurations, including individual computers, local area networks, and wide area networks. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> There are a number of problems associated with current computer security technologies. For example, while there is available information on different computer attacks and countermeasures, there are inadequate techniques for developing, deploying, and managing this information. Another computer security problem relates to the distribution of evolving network security information, such as new computer attack profiles and signatures. It would be highly desirable to provide an efficient and rapid mechanism for distributing this information throughout a network. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> As computer network traffic continues to grow, there are increasing demands to improve the processing efficiency of computer security tasks. In order to achieve gigabit and higher intrusion detection speeds, new methods and techniques are required for packet inspection and processing. Ideally, such methods and techniques would be scalable and support dynamic signature set updates. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Another problem with current computer security technologies is that they require a single organization to own, maintain and control their own computer security equipment. It would be highly desirable to allow different organizations to share computer security resources through a subscription-based intrusion detection platform. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Distributed denials of service attacks are a common problem in networked environments. A distributed denial of service attack may take many forms. One common form of a distributed denial of service attack is for a single computer to send a message to a group of computers instructing the computers to access a target computer. The group of computers then forwards the same message on to a supplemental group of computers. Ultimately, the target computer is inundated with access requests and effectively shuts down. It would be highly desirable to identify a technique for detecting, tracing, and countering distributed denial of service attacks. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In order to provide effective protection for existing computers and computer networks, it is necessary to address these numerous computer security problems. Ideally, a single platform and architecture could be deployed to address these problems. Such a system should be easy to deploy and manage, thereby providing a low cost of ownership. Notwithstanding these cost considerations, the system must have high performance, including the capacity to efficiently detect and protect against known and unknown computer attacks. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> A method of forming a virtual intrusion detection system includes the step of positioning a set of sensors in a network environment, each sensor supporting multiple logical traffic paths. The method also includes the step of providing a set of sensor management systems corresponding to the set of sensors. This set of sensor management systems enforces a set of virtual intrusion detection systems, wherein each virtual intrusion detection system corresponds to a predetermined logical traffic path through the set of sensors, each virtual detection system providing sensor traffic information solely to authorized parties. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The invention provides a single platform and architecture to address a variety of network security problems. The system of the invention is easy to deploy and manage, and thereby provides a low cost of ownership. However, the system of the invention also has high performance, including the capacity to efficiently detect and protect against known and unknown computer attacks.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE FIGURES </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The invention is more fully appreciated in connection with the following detailed description taken in conjunction with the accompanying drawings, in which: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer network environment implementing the network security techniques of the invention. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a network security sensor implemented in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates processing steps performed by an embodiment of the network security sensor of the invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> illustrates an embodiment of a hardware sensor management module utilized in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> illustrates a specific hardware implementation of a network security sensor of the invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates input and output information associated with the protocol parsing state machine of the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates general state machine processing operations performed in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a state machine transition table implemented in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a transition operation specification format utilized in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a signature processing architecture utilized in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an example of state machine processing performed in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A &amp; 11B</cross-reference> illustrate exemplary state machine instructions to be carried out in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates an exemplary hardware configuration for carrying out signature processing operations in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates a sensor control system utilized in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates a global sensor management system implemented in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> illustrates an update server implemented in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> illustrates a hierarchical attack categorization structure constructed and utilized in accordance with an embodiment of the invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates processing steps performed in accordance with a hierarchical attack categorization process utilized in accordance with an embodiment of the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Like reference numerals refer to corresponding parts throughout the several views of the drawings. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates an exemplary computer network <highlight><bold>20</bold></highlight> incorporating network security devices and processes associated with the invention. The network <highlight><bold>20</bold></highlight> includes a set of network security sensors <highlight><bold>22</bold></highlight> configured in accordance with the invention. Each sensor <highlight><bold>22</bold></highlight> operates as a platform to implement local and distributed security operations performed in accordance with the invention. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a set of primary sensors <highlight><bold>22</bold></highlight> and redundant sensors <highlight><bold>24</bold></highlight>. Preferably, a dedicated link <highlight><bold>25</bold></highlight> is positioned between the primary sensors <highlight><bold>22</bold></highlight> and the redundant sensors <highlight><bold>24</bold></highlight>. As discussed below, the primary sensor <highlight><bold>22</bold></highlight> updates the redundant sensor <highlight><bold>24</bold></highlight> with changes in the configuration data. This ensures that the primary sensor <highlight><bold>22</bold></highlight> and the redundant sensor <highlight><bold>24</bold></highlight> are synchronized and that the redundant sensor <highlight><bold>24</bold></highlight> can be activated in the event of the failure of the primary sensor <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A sensor management system <highlight><bold>26</bold></highlight> is associated with a sensor <highlight><bold>22</bold></highlight> or set of sensors <highlight><bold>22</bold></highlight> and <highlight><bold>24</bold></highlight>. The sensor management system provides supervisory control of a sensor <highlight><bold>22</bold></highlight>. The sensor management system <highlight><bold>26</bold></highlight> may be used to implement a shared-resource virtual intrusion detection system, as discussed below. A single sensor management system <highlight><bold>26</bold></highlight> may be used to control multiple sets of primary sensors <highlight><bold>22</bold></highlight> and redundant sensors <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The combination of the sensor <highlight><bold>22</bold></highlight>, redundant sensor <highlight><bold>24</bold></highlight>, and sensor management system <highlight><bold>26</bold></highlight> is referred to as a local sensor security module <highlight><bold>27</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, local sensor security modules <highlight><bold>27</bold></highlight> may be distributed throughout a network. In this example, local sensor security modules <highlight><bold>27</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>27</bold></highlight>_N are positioned between an enterprise network <highlight><bold>30</bold></highlight> and Internet service providers <highlight><bold>28</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>28</bold></highlight>_N. In addition, a local sensor security module <highlight><bold>27</bold></highlight>_<highlight><bold>0</bold></highlight> is positioned between the enterprise network <highlight><bold>30</bold></highlight> and a protected server <highlight><bold>32</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The operations of the local sensor security modules <highlight><bold>27</bold></highlight> may be coordinated through a global sensor management system <highlight><bold>34</bold></highlight>. The global sensor management system <highlight><bold>34</bold></highlight> performs distributed system management operations and provides a global consolidated view of all sensors and all the traffic these sensors are monitoring. In addition, the global sensor management system <highlight><bold>34</bold></highlight> supports the implementation of a global shared-resource virtual intrusion detection system. In addition, the global sensor management system <highlight><bold>34</bold></highlight> tracks information from the local sensor security modules <highlight><bold>22</bold></highlight> to identify and respond to distributed denial of service attacks. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates that the network <highlight><bold>20</bold></highlight> includes an update server <highlight><bold>38</bold></highlight>. The update server <highlight><bold>38</bold></highlight> is used to coordinate the delivery of signature and software updates to the local sensor security modules <highlight><bold>27</bold></highlight>, as discussed below. Preferably, the update server <highlight><bold>38</bold></highlight> is protected by a firewall <highlight><bold>36</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The overall architecture of an embodiment of the invention has been described. Attention is now directed toward a more particular description of the individual components of the architecture. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a sensor <highlight><bold>22</bold></highlight> configured in accordance with an embodiment of the invention. Preferably, the sensor <highlight><bold>22</bold></highlight> includes a set of processor <highlight><bold>40</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>40</bold></highlight>_N, with each processor optimized to perform a different function, as discussed below. The processors <highlight><bold>40</bold></highlight> are connected to a system bus <highlight><bold>42</bold></highlight> or a set of buses or a switching fabric, which are represented by the single system bus <highlight><bold>42</bold></highlight>. Also connected to the system bus <highlight><bold>42</bold></highlight> is a set of input/output ports <highlight><bold>44</bold></highlight>. The ports <highlight><bold>44</bold></highlight> provide interfaces for routing network traffic. In addition, they include interfaces for the sensor management system <highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In one configuration, the system bus <highlight><bold>42</bold></highlight> is also connected to a memory <highlight><bold>50</bold></highlight>, which includes primary and/or secondary memory. The memory <highlight><bold>50</bold></highlight> stores a set of executable programs utilized to implement functions of the invention. In an alternate embodiment of the invention, the executable programs are stored in memory associated with each processor that executes a program. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In the embodiment of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the memory <highlight><bold>50</bold></highlight> stores a sensor management module <highlight><bold>52</bold></highlight>, which coordinates overall sensor operations. Alternately, the sensor management module <highlight><bold>52</bold></highlight> may be implemented in a separate processor or processor board used to coordinate overall sensor operations. In the embodiment of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the memory <highlight><bold>50</bold></highlight> stores a response module <highlight><bold>54</bold></highlight> for coordinating responses to processing exceptions. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> A packet decoder <highlight><bold>56</bold></highlight> is also stored in memory <highlight><bold>50</bold></highlight>. The packet decoder <highlight><bold>56</bold></highlight> coordinates the decoding of network packets and performs protocol conformance verification. Alternately, the functionality of the packet decoder <highlight><bold>56</bold></highlight> is implemented with a dedicated processor <highlight><bold>40</bold></highlight>. A load balancer <highlight><bold>58</bold></highlight> is preferably used to distribute processing responsibilities across the processors <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> also illustrates a statistical analysis and distributed denial of service detection module <highlight><bold>60</bold></highlight>. This executable program analyzes statistical patterns associated with processed traffic. In addition, it identifies distributed denial of service attacks. A path marker insertion module <highlight><bold>61</bold></highlight> is used to insert path markers into network traffic. The path markers are used to identify the actual path traversed by the distributed denial of service attacks, as discussed below. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The memory <highlight><bold>50</bold></highlight> also stores an anomaly detector <highlight><bold>62</bold></highlight>, which is used to identify network traffic anomalies indicative of an attack. A fixed-field detector <highlight><bold>63</bold></highlight> and a protocol parser <highlight><bold>64</bold></highlight> are also stored in the memory <highlight><bold>50</bold></highlight>. The protocol parser <highlight><bold>64</bold></highlight> is implemented with a set of state machines <highlight><bold>66</bold></highlight> and associated tables <highlight><bold>67</bold></highlight>. As discussed below, the state machines process a data stream by generating intrusion detection information with each state transition. In combination, the fixed-field detector <highlight><bold>63</bold></highlight> and the protocol parser <highlight><bold>64</bold></highlight> operate as a signature processing system, as discussed below. Supporting this signature processing system is a stream orderer <highlight><bold>51</bold></highlight> that organizes data streams for a token detector <highlight><bold>53</bold></highlight>. In turn, this token detector <highlight><bold>53</bold></highlight> transmits tokens containing state information and other instructions for the protocol parser <highlight><bold>64</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The memory <highlight><bold>50</bold></highlight> also stores a classification and pattern-matching module <highlight><bold>68</bold></highlight>. This module has an associated set of intrusion signatures <highlight><bold>70</bold></highlight>. The module is used to compare incoming network traffic with the set of intrusion signatures <highlight><bold>70</bold></highlight>, as discussed below. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The memory <highlight><bold>50</bold></highlight> also stores an encrypted session monitoring module <highlight><bold>72</bold></highlight>. This module <highlight><bold>72</bold></highlight> allows the sensor <highlight><bold>22</bold></highlight> to decrypt otherwise secure network traffic in a non-intrusive manner. As discussed below, protected key information <highlight><bold>76</bold></highlight> stored within the sensor <highlight><bold>22</bold></highlight> is used to implement the operations performed by the encrypted session monitoring module <highlight><bold>72</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The memory <highlight><bold>50</bold></highlight> also stores a data stream processor <highlight><bold>74</bold></highlight>. The data stream processor <highlight><bold>74</bold></highlight> reassembles IP fragments and sends the reassembled IP fragments back to the load balancer. In addition, the data stream processor <highlight><bold>74</bold></highlight> reassembles TCP streams and forwards the reassembled streams to the signature and anomaly detection module <highlight><bold>62</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The memory <highlight><bold>50</bold></highlight> also stores a fail-over switch module <highlight><bold>78</bold></highlight>. The fail-over switch module <highlight><bold>78</bold></highlight> is used to synchronize information between a primary sensor <highlight><bold>22</bold></highlight> and a redundant sensor <highlight><bold>24</bold></highlight> and to switch control from the primary sensor <highlight><bold>22</bold></highlight> to the redundant sensor <highlight><bold>24</bold></highlight> in the event that the primary sensor <highlight><bold>22</bold></highlight> fails. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The processing performed by the sensor <highlight><bold>22</bold></highlight> is more fully appreciated in connection with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates processing steps performed by the sensor <highlight><bold>22</bold></highlight>. Incoming traffic to the sensor <highlight><bold>22</bold></highlight> is processed for packet decoding, protocol conformance verification and load balancing <highlight><bold>81</bold></highlight>. The packet decoder <highlight><bold>56</bold></highlight> and load balancer <highlight><bold>58</bold></highlight> are used for this operation. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The traffic is then processed for statistical analysis and distributed denial of service detection <highlight><bold>82</bold></highlight>. These operations may be performed by module <highlight><bold>60</bold></highlight>. Stream processing is then performed <highlight><bold>83</bold></highlight>. This operation may be implemented with the data stream processor <highlight><bold>74</bold></highlight>. Signature and anomaly detection <highlight><bold>84</bold></highlight> is then performed. The anomaly detector <highlight><bold>62</bold></highlight> may perform these anomaly detection operations. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The overall processing is supervised through sensor management <highlight><bold>86</bold></highlight>, which is implemented with the sensor management module <highlight><bold>52</bold></highlight>. A response module handles response processing <highlight><bold>85</bold></highlight>. In particular, the response processor <highlight><bold>54</bold></highlight> determines the response actions for the specific attack. The response processor <highlight><bold>54</bold></highlight> is configured by the system administrator. Once configured, the response processor <highlight><bold>54</bold></highlight> responds to specific attacks. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As previously indicated, the sensor <highlight><bold>22</bold></highlight> may be implemented with a set of processors. The different software modules stored in memory <highlight><bold>50</bold></highlight> run on selected processors of the set of processors. Thus, for example, the sensor management module <highlight><bold>52</bold></highlight> has been implemented to run on a &times;86 single board computer, an example of which is illustrated in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. The packet decoder and load balancer have been implemented to run on two network processors (Sitera Prism IQ2000). The response processor <highlight><bold>54</bold></highlight> has been implemented to run on a set of high performance CPUs (e.g., the SiByte Mercurian SB-1250). The statistical analysis and distributed denial of service (DDOS) detection module has been implemented to run on a co-processor (e.g., the FastChip PolicyEdge processor). The classification and pattern-matching module has been implemented with a co-processor (e.g., the Switch-On PM2329). The anomaly detector <highlight><bold>62</bold></highlight> has been implemented to run on a set of high performance CPUs (e.g., the Sitera Prism Connect 821308). <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> illustrates a specific circuit topology used to implement an embodiment of the sensor <highlight><bold>22</bold></highlight>. In this embodiment, software modules executed by a processor are stored in the primary memory associated with the processor. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, after packet decoding and load balancing <highlight><bold>80</bold></highlight>, statistical analysis and DDOS detection <highlight><bold>84</bold></highlight> is performed. The statistical analysis and DDOS detection module <highlight><bold>60</bold></highlight> operates in connection with a path marker insertion module <highlight><bold>61</bold></highlight>. The path marker insertion module <highlight><bold>61</bold></highlight> inserts DDOS identification information into the network traffic processed by the sensor <highlight><bold>22</bold></highlight>. The module <highlight><bold>60</bold></highlight> also monitors the DDOS identification information received from other upstream sensors in the network. When violations of DDOS detection profiles are observed, appropriate DDOS attack flags are set. This can result in remedial action performed at the sensor <highlight><bold>22</bold></highlight>. In addition, the attack flag signal is transported across the network to the protected computer <highlight><bold>32</bold></highlight>, which takes additional remedial actions to prevent the DDOS attack. Various techniques for implementing these operations are discussed below. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the anomaly detector <highlight><bold>62</bold></highlight> is used to identify computer attacks. In this context, anomaly means any event, state, or behavior that is considered to be abnormal by certain pre-defined standards. For example, the existence of a remote root shell on a system that only expected console root login is an anomaly. Seeing large numbers of successive small IP fragments is an anomaly. A web server suddenly seeing a lot of requests from new IP addresses may also be considered an anomaly. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Anomaly-based intrusion detection approaches complement the signature-based approaches by offering a means to detect attacks whose signatures are not yet known or attacks that exhibit modified behavior (e.g., intentionally stealthy attacks or variants of existing attacks in new environments). The term system refers to any entity whose relevant state or behavior is under observation. For example, it can be a host or server, a given network application, or a person. The anomaly detector <highlight><bold>62</bold></highlight> is typically implemented in accordance with a number of operations. First, measures (or observations) of normalcy are defined for a given system. Next, a characterization of the normalcy of the system is created. This characterization is generally in a form of distributions for these measures or their derivatives. This may require a learning or training process. Next, an algorithm for building a run-time characterization of the system is defined. Measures of discrepancy between the normalcy and the run-time characterization are then defined. Once again, this may require learning or training. The measure of discrepancy and the way the actual measurement is obtained can introduce inherent differences that are accounted for in the threshold determination step. Finally, anomaly thresholds for generating appropriate alarms are defined. This approach can be implemented using multiple techniques, including statistical, neural nets, and other forms of learning mechanisms. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The anomaly detector <highlight><bold>62</bold></highlight> creates a characterization of the normal behavior of the system in order to achieve accurate anomaly detection (i.e., with low false positive and low false negative rates). Since different systems have different behaviors, a new characterization needs to be created for each new system to be protected through anomaly detection. In one embodiment of the invention, the anomaly detector <highlight><bold>62</bold></highlight> operates in two phases. In a training phase the target system needs to be in an attack-free state. Depending on the resource availability, training can be conducted either online or offline. In the online case, training data comes directly from the real-time traffic captured while the system is in operation. In the offline case, training data comes from previously captured traffic traces, which are stored in a file. The length of the training phase will typically depend on the inherent variability of the system. Training can stop automatically when certain stability criteria have been met. However, the user should be able to turn on the training mode at any time. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> After the conclusion of training, the anomaly detector <highlight><bold>62</bold></highlight> operates in a detection phase. The detection phase produces anomaly scores for the observed packets based on the characteristic similarity between the observed and normal profile. A higher score will indicate a higher degree of deviation from the normalcy and thus a stronger intrusion alert. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> While the training accounts for the difference in characteristics from system to system, there is also variability in time (e.g., the time of day) that may be significant enough to require new profiles for effective detection. The anomaly detection module supports the following general means for adaptation. First, an interface for human analysts is supplied to allow the input of final alert assessment results and to keep track of the false alarm rate changes. In the case where the false alarm rate increases and stays at a higher level, this is a good indication of a system/environment change that can be accounted for by re-training the anomaly detector <highlight><bold>62</bold></highlight>. In the case where false alarm rates fluctuate periodically with time, it is a good indication that a new set of profiles with a different periodicity is required. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Another adaptive technique that can be implemented by the anomaly detection module <highlight><bold>62</bold></highlight> is to support multiple profiles that can be dynamically updated with time, or equivalently one profile that adapts continuously but more quickly. To better support creation of new profiles dynamically, the anomalous packets should be kept in a log file until it is determined that they were normal, or to be moved to long-term archive. At that time, these logged packets can be used to create the new profiles or to re-train existing profiles. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The anomaly detector <highlight><bold>62</bold></highlight> has been implemented to detect two types of anomalies. The first type of anomaly is identified based upon a normal profile of non-attack Internet packets. This method helps detect those attacks that are realized through specially crafted packets or other attack packets, such as denial of service or DDOS attacks. The second type of anomaly is identified based upon the normal traffic profile of a target domain, which may be a single host/sever, a sub-net, or an enterprise network. The detection is based on the change of traffic patterns over network links. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The first technique of profiling typical non-attack packets relies upon the occurrence or co-occurrence of values in a selected set of fields. That is, in the absence of active attacks, there are generally defined patterns or ranges of values taken by the header fields of a packet. These patterns can be identified through statistical analysis or learned by artificial neural networks. These patterns can then be compared against the actual field values of a packet on the wire to detect abnormal packets. In one embodiment, this comparison is carried out by establishing a threshold at one extreme of the range or pattern in question, and checking to see if a packet&apos;s field value exceeds this threshold. In addition, some &ldquo;forbidden&rdquo; rules are manually introduced to ensure that certain packets are always flagged due to their potential damaging impact. For example, a ping packet (ICMP ECHO REQ) with multicast/broadcast destinations is a cause for concern, and is thus an anomaly. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Advantageously, such normal profiles can be created from packet traces generated entirely from known non-attack implementations of the protocols. Thus, it is not necessary to learn the profiles during a guaranteed attack free session. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> By way of example, three types of packets can be characterized: TCP, UDP, and ICMP. In the case of TCP and UDP packets, one embodiment of the invention establishes normal profiles characterizing the contents of (or, in some cases, simply checking certain values of) one or more packet fields. The first of such fields, which can also be thought of as variables, is IP packet length. This embodiment of the invention establishes a normal profile, or range, of packet lengths. Any packets with lengths outside this range, or beyond some upper or lower threshold, can be considered abnormal and marked as anomalous. Those of skill in the art will recognize that the invention includes the determination of thresholds from such ranges through any known means, for example choosing a percentile value of the range. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The next variable concerns fragment bits. In the case where the &ldquo;don&apos;t fragment&rdquo; bit is set, one expects a corresponding offset equal to zero. If the &ldquo;more fragment&rdquo; bit is set, all fragments except the last should have offset values from a finite set, as determined by MTUs of the known network switches/routers. These offsets should also never be more than the maximum IP datagram length. A violation of any of these conditions can be considered as an anomaly. A related variable concerns the IP fragmentation identifier field. If multiple packets with overlapping fragmentation offsets are detected, this condition is also considered an anomaly. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Another variable compares the protocol identification field to the finite set of known IP protocols; if the new protocol identifier is not recognized, this signals an anomaly. Yet another variable examines the set of TCP code bits to determine whether they contain legal bit combinations. Combinations other than legal ones signal an anomaly. For example, OS scanners are known to use strange combinations of code bits (e.g., SYN and FIN) to determine the target OS type. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> One variable specific to UDP concerns protocol data unit (PDU) length. A normal range for the PDU length of UDP packets can be established, with packets exceeding this range, or a threshold at the upper end of the range, being marked as anomalous. The set of configured services (e.g., VOIP or other packet audio/video applications) can assist in establishing initial values for such a range, as various applications typically transmit UDP packets with characteristic PDU length ranges. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> A range can also be established characterizing the various destination addresses of IP packets received. Here, the range can characterize the destination address in any known manner. For instance, the range can be a numerical range characterizing the numerical values of the various destination addresses. It can also be a range of address/mask pairs. Depending on the size of the secured domain, an accurate profile of destination addresses may require capturing multiple networks and/or subnets. A different yet related range characterizes the range of IP packet destination ports. Here, for instance, the finite set of ports corresponding to legally configured services can be characterized. Packets with destination ports outside this set cam be designated as anomalous. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> With respect to ICMP packets, a different set of variables may be considered. As in the TCP/UDP case, IP packet length can be profiled, as there is a well-defined set of known ICMP messages that can be used to define a normal range. As this range is different from TCP/UDP packets, ICMP packet length can be maintained as a separate variable from TCP/UDP packet length. Another variable concerns packet fragmentation. This fragmentation can simply be profiled as in the TCP/UDP case above or, because fragmentation in ICMP packets is rare, its occurrence can automatically be considered as an anomaly. For example, large pings on limited occasions can generate fragmentation, and are also often a cause for alarm. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The range of protocol identifications can also be considered a variable and characterized as above. Finally, the range of ICMP type and code combinations can be characterized, as there exists a well-defined set of ICMP type and ICMP code combinations. Any combinations outside this set can therefore be considered anomalous. In addition, a given domain is made aware of the transmission of an ICMP redirect packet by one of its routers. This behavior can also be considered as outside this range, and thus anomalous. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> It should be noted that various embodiments of the invention simply include profile generation without limiting themselves to generating profiles by any particular method. Indeed, any method can be used. For example, variables such as IP packet length can be characterized statistically by sampling a significant number of packets. As another example, a novel approach to profiling data rates is also disclosed in a co-pending U.S. patent application entitled &ldquo;Method and Apparatus for Detecting a Distributed Denial of Service Attack,&rdquo; filed on Jun. 13, 2002 with docket no. ITRU-001/00US, hereby incorporated in its entirety. This approach can be extrapolated to variables besides data rate, and also provides a method of updating such a characterization. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The second anomaly detection technique of traffic profiling characterizes the normal behavior of the target system. This behavior can be termed connectivity behavior, as it describes traffic flowing over the target system&apos;s connection to a network. The target system can be a whole enterprise network, an individual server or host machine, a class of services on a machine, or a particular user on a machine. Packet length and packet rate are the two most basic measures on a link. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In order to use these two measures to more effectively characterize the normal connectivity profile, the basic measures can be further broken down according to several attributes. For instance, packet length and packet rate can be categorized or profiled according to external link group. Where a domain is connected through multiple parallel links to the Internet or another network, inherent factors such as physical link speed and MTUs for the networking devices in each link group all affect packet rate and packet length for each link. Similarly, dynamic and asymmetric routing makes it likely that packets between a given pair of hosts may actually take different paths, or links, at various times. Aggregating traffic across all links in the link group thus provides a more complete traffic profile. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Packet length and packet rate can also be profiled according to time of day. Time of day is known to affect the type of networking applications, and thus traffic levels, invoked over a network link. For example, enterprise applications often schedule automated batch processing at after-hours times, raising network traffic. Time of day thus has an effect on both packet rate and length distribution on such links, so such a breakdown helps reduce the complexity of the normal profile with respect to time. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Basic measures can also be profiled according to packet destination. As different destinations generally offer different protocols and applications, utilize different service platforms, and have different network connectivity attributes, their basic traffic measures will vary. Subdividing basic measures according to destination thus represents further profile refinement. The same reasoning also supports the profiling of basic measures by source. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Such basic measures can also be subdivided according to service, i.e., application protocol. For example, packet length and rate profiles can be made specific to the http, ftp, or telnet protocols. Those of skill in the art will realize that not only do these protocols have very different but stable profiles in terms of measures such as PDU length, but they also exhibit very different packet rates (or, equivalently, packet arrival intervals) depending on whether human interaction is involved. Per protocol measures are thus useful in distinguishing among human users, client/server processes, or tunneling Trojans. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Depending on the domain to be protected and the categories of attacks to be protected against, detailed measures from one or more of the above categories may be appropriate, all combinations and permutations of which are encompassed by the invention. Practicing the invention thus allows users the choice of profiling network traffic according to any of the above fields or ranges, further subdivided by any of the aforementioned subdivisions. Flexibility in choosing such fields and subdivisions thereof also affords users maximum attack protection within their limited resources. Different destinations generally offer different kinds of service (thus a different portfolio of network protocols and applications). Different destinations may be using different service platforms and may have different network connectivity (different transport networks, different link bandwidths). These all have an impact on the basic traffic measures. However, when the destinations are remote domains (outgoing traffic), keeping per destination measures may be too expensive due to potentially large number of destination hosts and sub-nets. It may be reasonable for extra-net types of deployment. Again, per destination breakdown represents further refinement of profile measures. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The same reasoning applies for keeping per source measures. Similarly, per source measures may be too expensive to keep for incoming traffic, except for extra-net deployments. Assuming that one is expecting denial of service attacks from outside and that the sources are easily spoofed, refinement of measures based on source address is not very desirable. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The anomaly detector <highlight><bold>62</bold></highlight> also identifies application anomalies through system connectivity profile checking. Two types of connectivity profiles have been identified to capture the normal connectivity behavior of the target computer. The first type consists of a set of activity vectors. It is aimed at detecting general changes in the connectivity pattern to or from the target system/domain. The following vectors may be defined: incoming protocol, outgoing protocol, incoming destination port seen, incoming source port seen, incoming destination IP address seen, incoming source IP address seen, outgoing destination port seen, outgoing source port seen, outgoing destination IP address seen, and outgoing source IP address seen. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Take the incoming protocol vector, IN&equals;&lt;p<highlight><bold>1</bold></highlight>, p<highlight><bold>2</bold></highlight>, p<highlight><bold>3</bold></highlight>, p<highlight><bold>4</bold></highlight>, p<highlight><bold>5</bold></highlight>, p<highlight><bold>6</bold></highlight>&gt; as an example. Pi can be TCP, UDP, ICMP, HTTP, FTP, or DNS. The elements in the vector (Pi&apos;s) are ordered from the most often seen to the least often seen protocols. Basic statistics are collected on the number of packets seen that are of these protocol types or carrying those types. Although the update of the vector can be as frequent as one for each packet arrival, the comparison of the run-time vector to the normal profile will typically happen at larger time intervals. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The ordering of the elements in the vector can be based on a number of different criteria, for example, the number of packets related to it, the total number of bytes related to it, length of the flow/session related to it, number of fragmented packets related to it, etc. In general, each element in the vector represents a separate security event and our profile captures the distribution of this set of events. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The length of the vector can be adjusted based on what measure is being used and at what granularity. For example, active incoming destination IP address seen vector can be based on network prefix or sub-net address, depending on which level the deployment environment is at (top level ISP versus local access ISP). There are only four classes of Ipv4 addresses currently used but there will be a lot more network prefix and even more sub-nets. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> For the cases where the range of possible values is large, it is reasonable to define the vector with a small length N so that the first N-1 elements capture the most active specific category while the last element captures the aggregate of all the rest. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Another form of application anomaly that is identified by the anomaly detector <highlight><bold>62</bold></highlight> is the request-response anomaly. There are a significant number of denial of service attacks that exploit the fact that the design and or implementation of many network applications do not handle exceptions well during operation. For example, CVE-1999-0274 documents a denial of service attack on NT DNS, which is based on sending a response to a query that was never made. CVE-2000-0041 documents a Macintosh vulnerability where the Macintosh generates a large number of ICMP data-grams in response to malformed data-grams. This makes the Macintosh a packet amplifier for flood attacks. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> By identifying the set of commonly used request-response packet pairs and creating a simple balance profile, the anomaly detector <highlight><bold>62</bold></highlight> detects most attacks. This is accomplished by: (1) keeping a run-time count of request and response packets separately, (2) establishing a rate profile for the occurrence of these individual packets and generate an alert if the threshold of deviation is crossed, and then (3) correlate the request and response by simply checking the balances. Request-response examples include: TCP SYN-TCP SYN &amp; ACK; TCP FIN&mdash;TCP FIN &amp; ACK; CIMP ECHO REQ&mdash;ICMP ECHO REPLY, ARP request-ARP response, DNS query-query response, HTTP request-response. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In order to support these profiles, statistics must be collected on protocol fields beyond the TCP/UDP/IP header. Bi-directional traffic needs to be examined and correlated based on information fields that are dependent upon the application protocol. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The anomaly detector <highlight><bold>62</bold></highlight> is one mechanism utilized by the invention to prevent attacks. Another mechanism utilized in accordance with the invention is signature processing. The signature processing system detects attacks by looking for signatures that are specific combinations of patterns (e.g., numerical field values, string matches, and the like) existing in monitored network traffic. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In one embodiment of the invention, signature processing is implemented with the fixed-field detector <highlight><bold>63</bold></highlight> and the protocol processor <highlight><bold>64</bold></highlight>. The fixed-field detector <highlight><bold>63</bold></highlight> performs per-packet analysis of protocols in which numeric fields can be located by simple offset/mask specifications. It is not intended to process protocols that require string matching or state to be kept between packets. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The protocol processor <highlight><bold>64</bold></highlight> performs complex protocol processing for protocols requiring string matching or state maintenance for up to the duration of a flow. Preferably, the protocol processor <highlight><bold>64</bold></highlight> has an associated functionality that ensures that all packets for a particular flow are presented to the next stage in the system in order, and with enough overlapping packet information to ensure detection of matches crossing packet boundaries. An associated token detector is preferably used to examine an in-order stream of packets for string matches indicating protocol delimiters or attacks. The token detector presents these in order of occurrence to the protocol parsing state machine <highlight><bold>66</bold></highlight> as tokens indicating the string that matched along with the position and length of the match. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Both the fixed-field detector and the protocol parser <highlight><bold>64</bold></highlight> generate Signature Sub-IDs (SSIDs) that indicate the presence of subsets of the patterns required for detection of a particular signature. The classification and pattern matching module <highlight><bold>68</bold></highlight> accepts the SSIDs in the order in which they occur and determines if all the SSIDs required to form the complete pattern of a signature occurred. The pattern signatures are stored as intrusion signatures <highlight><bold>70</bold></highlight>. For each complete signature, the classification and pattern matching module <highlight><bold>68</bold></highlight> raises an AttackID (AID) that indicates the attack that was found in the communications being monitored. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The response processor <highlight><bold>54</bold></highlight> responds to AIDs. The response processor <highlight><bold>54</bold></highlight> generates alerts that provide notification of an attack. The response processor <highlight><bold>54</bold></highlight> also attempts to prevent the attack. Short-term responses include terminating TCP connections. Long-term responses include packet logging for further analysis to improve detection and response. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> The protocol parser <highlight><bold>64</bold></highlight> is implemented using a generic state machine that is configured for each protocol parsed. The generic state machine allows changes to protocol parsing without the introduction of new code onto the sensor. In signature detection, where only a subset of the fields of any given protocol is known to have vulnerabilities in various implementations, this allows performance optimization without limiting the future detection capability of the sensor. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Those skilled in the art will appreciate that the generic state machine approach of the invention has a number of other advantages. For example, this approach allows the separation of signature development and code development, allowing intrusion detection specialists to do the former, while software engineers focus on the latter, with fewer dependencies between them. This approach also facilitates improved customization, since the sensor management system <highlight><bold>26</bold></highlight> can customize the protocol parsing mix per sensor through the state machine configuration tables rather than through different code images. The generic state machine approach also facilitates rapid implementations to support new protocols. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The protocol parser <highlight><bold>64</bold></highlight> allows one to specify the parsing of application layer protocols in a table-driven manner. This allows new or updated parsing to be introduced without requiring any new code (e.g., a new software image), which in turn allows real-time dynamic updates of the entire signature detection engine without interruption to current processing. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The protocol parser <highlight><bold>64</bold></highlight> is implemented to use generic operations executed on each state transition in order to collect information from the data stream carrying the protocol under analysis. The collected information is stored and is subsequently used in order to modify the future behavior of the state machine. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates the inputs and outputs for the state machine <highlight><bold>66</bold></highlight>. The inputs that drive the protocol parsing state machine include the current state, the configured state transition table, the configured field comparison tables, and information derived from the token detection engine <highlight><bold>69</bold></highlight>, which includes information derived from the in-order application layer data sent between hosts during a monitored connection. The derived information includes a stream of detected string matches in the data (tokens), information on the current progress of the connection between the hosts (connection state), and the set of initially empty generic data locations that are used during processing (data locations). </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The tokens detected within the data stream are provided to the state machine in order from the beginning of the stream. Since the sensor only sees the stream as a set of inter-related non-overlapping, possibly out-of-order packets, the token matching system must order the data and ensure that matches are made across packet boundaries. Provided to the state machine along with the token are the offset of the token in the packet in which it was found, and the length of the token match. In addition to the string match tokens, the following protocol tokens are given to the state machine in protocol events: start of processing of packet from client to server, start of processing of packet from server to client, processing reached end of packet from client to server, processing reached end of packet from server to client, close of connection from client to server, and close of connection from server to client. The connection information includes: the stream offset of the beginning of the packet being processed, which allows calculation of stream offsets of token matches; stream offset transition triggers; and a single stream processing suspend offset, which can be set to &minus;1 to indicate processing should be suspended for the remainder of the stream. The data locations all start out cleared to zero when a new instance of a state machine is created. During processing, the generic state machine can modify the values of data in these locations and makes tests on them. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> At the highest level, the state machine output is a Boolean value indicating if an attack signature (Signature SubIds) has been found in the application data sent on a monitored connection up to the time of processing. If no Signature SubIds was found, no other information is needed or given. If one was found, the following information may be provided: the current state, the token being processed, including packet offset, the transition operation specification that was being processed, the packet being processed, and the state of the data locations. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The general operation of the state machine is illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. There is an initial wait for a token (block <highlight><bold>87</bold></highlight>). Once received, the token is delivered to the state machine (block <highlight><bold>88</bold></highlight>). The transition operation pointer is then set to the first transition operation for the token (block <highlight><bold>89</bold></highlight>). The transition operation is then loaded (block <highlight><bold>90</bold></highlight>) by referring to the transition table (block <highlight><bold>91</bold></highlight>). The transition operation is then executed (block <highlight><bold>92</bold></highlight>) with reference to the current state (block <highlight><bold>93</bold></highlight>) and the data locations (block <highlight><bold>94</bold></highlight>). If an SSID is found (block <highlight><bold>95</bold></highlight>&mdash;Yes), it is delivered to an attack detector (e.g., the classification and pattern matching module <highlight><bold>68</bold></highlight>) for processing (block <highlight><bold>96</bold></highlight>). If an SSID is not found (block <highlight><bold>95</bold></highlight>&mdash;No), a decision is made regarding whether the flow is completed (block <highlight><bold>97</bold></highlight>). If the flow is completed (block <highlight><bold>97</bold></highlight>&mdash;Yes), then processing is done. If the flow is not completed (block <highlight><bold>97</bold></highlight>&mdash;No), a decision is made regarding whether there are more transition operations (block <highlight><bold>98</bold></highlight>). If there are more transition operations (block <highlight><bold>98</bold></highlight>&mdash;Yes), the transition operation pointer is set to the next transition operation (block <highlight><bold>99</bold></highlight>) and a transition operation is loaded (block <highlight><bold>90</bold></highlight>). If no more transition operations exist (block <highlight><bold>98</bold></highlight>&mdash;No), there is a wait for the next token (block <highlight><bold>87</bold></highlight>). </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The state machine <highlight><bold>66</bold></highlight> may rely upon field comparison tables that specify comparisons and corresponding signature subIDs for the various types of comparisons that can be done on protocol fields. The default comparison is a sub-string search, which does not require any field comparison table, since it is implicitly carried out by the token matching engine. Exact match and matches anchored at the start and end of a field are handled as special cases of this mechanism with operations in the transition table, an example of which is provided below. Comparisons for specific values, ranges of values, and regular expressions require field comparison tables. Each field for which a comparison of a type is required will have its own comparison table referred to by a sensor tag that starts the search. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Example field comparison tables utilized in accordance with an embodiment of the invention include a numerical equal field comparison table, a numerical range field comparison table, and a regular expression field comparison table. In one embodiment, the numerical equal field comparison has the following columns: match value (unsigned 32 bit integer) and SSID (Signature SubID, an unsigned 32 bit integer). In one embodiment, the numerical range field comparison. table has: a low value (unsigned 32 bit integer), a high value (unsigned 32 bit integer), and an SSID (Signature SubID, an unsigned 32 bit integer). In one embodiment, the regular expression field comparison table includes: a regular expression (null-terminated string) and an SSID (Signature SubID, an unsigned 32 bit integer). </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> An example of the transition table format is provided in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. The transition table is a two-dimensional array where the dimensions are the allowable states and the set of detectable tokens. Each location in the array contains a list of one to n transition operation specifications, which are actions to be taken when the transition is activated. The last transition operation in the list either switches to a new state or the state machine remains in the current state. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Transition operations fall into four basic categories: (1) change state; (2) modify some value in the data locations; (3) test against the values in the data locations, signaling for further action when certain results are obtained; and (4) compare field values. In one embodiment, each transition operation specification is a 64-bit value configured as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. The 16 least significant bits are the operation code indicating the operations to be run. Each operation uses some combination of the remaining fields as operands. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Signature processing is more easily understood with reference to the following example, which illustrates the payload of an exemplary IP packet and the processing steps involved in parsing it. Assume that a sensor <highlight><bold>22</bold></highlight> receives a packet containing the following http GET request in its body: </paragraph>
<paragraph id="P-0102" lvl="2"><number>&lsqb;0102&rsqb;</number> GET/dir1/dir2/dvwssr.dll&quest; Param1&equals;value1 &amp; Param2&equals;value2 HTTP 1.0 </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates an architecture for processing this packet in accordance with an embodiment of the invention. Once the packet is received by the sensor <highlight><bold>22</bold></highlight>, it is cached while its contents are analyzed. The packet is first analyzed by the fixed-field detector <highlight><bold>63</bold></highlight>, which examines both fields within the packet header and fixed locations within the packet payload. Conceptually, the fixed-field detector <highlight><bold>63</bold></highlight> scans the packet for attacks that leave characteristic traces in certain specific fields. One example is the LAND attack, which consists of streams of TCP SYN packets whose source IP address and TCP port number are set equal to the destination IP address and TCP port number, respectively. The fixed-field detector <highlight><bold>63</bold></highlight> thus scans the source and destination address fields, which always occur in fixed or predictable locations, and transmits an SSID if they are equal. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> The stream orderer <highlight><bold>51</bold></highlight> simultaneously arranges the contents of IP packets in their proper order, so that attacks spanning multiple packet payloads can be detected. The token detector <highlight><bold>53</bold></highlight> parses the packets including their ordered streams of data, searches for traces of an attack, then transmits tokens summarizing its findings and instructing the protocol parser <highlight><bold>64</bold></highlight> accordingly. The token detector <highlight><bold>53</bold></highlight> scans the contents of each field (e.g., the various header fields, and then the body), compares each to a set of tables containing strings indicating portions of an attack, and transmits any matches in the form of tokens to the protocol parser <highlight><bold>64</bold></highlight>. In this manner, the token detector <highlight><bold>53</bold></highlight> notifies the protocol parser <highlight><bold>64</bold></highlight> of strings that match an attack signature, what field or portion thereof (i.e., what state) the string is located in, and any instructions for manipulating the packet contents. The protocol parser next <highlight><bold>64</bold></highlight> executes the token instructions to determine whether any SSIDs exist and, if so, passes them on to the attack detector <highlight><bold>55</bold></highlight>. If the attack detector <highlight><bold>55</bold></highlight> assembles a complete set of SSIDs indicating an attack, the appropriate AID is passed to the response module <highlight><bold>54</bold></highlight>, which can discard the packet from cache, raise an alert, or take other remedial actions. If no attack is detected, the attack detector <highlight><bold>55</bold></highlight> can simply pass the packet on from the cache to its final destination. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> The operation of the protocol parser <highlight><bold>64</bold></highlight> is more easily understood in connection with the http GET request shown above. This request is an http-protocol request to get the file dvwssr.dll, a restricted-access file. A GET request for this file is one signature of an attack. Upon parsing the packet(s) containing this statement, the token detector <highlight><bold>53</bold></highlight> compares its contents to tabulated strings, some of which (as this is a well-known form of attack) includes the GET request. The token detector <highlight><bold>53</bold></highlight> thus sends a token indicating the presence of a GET request and the presence of the string &ldquo;dvwssr.dll&rdquo; in the URI field. It also sends tokens indicating transitions to the next state. Here, for instance, it sends a token indicating the presence of a &ldquo;&quest;&rdquo; denoting a state transition to the beginning of a parameter field, and a token indicating the &ldquo;&amp;&rdquo; character for transitioning state to the next parameter field. Also sent is a token indicating that the payload is written in protocol http 1.0. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates the protocol parser <highlight><bold>64</bold></highlight> acting on the tokens it receives. As mentioned previously, the protocol parser <highlight><bold>64</bold></highlight> contains a number of generalized states, shown as circles in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. It moves among these states, and executes instructions, according to tokens it receives indicating the presence of various string matches, which are shown as boxes in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. At each state, the protocol parser <highlight><bold>64</bold></highlight> executes various instructions to manipulate the information within that state if necessary, and compare it with attack information stored in the tables <highlight><bold>67</bold></highlight>. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> In the present example, the protocol parser <highlight><bold>64</bold></highlight> would begin at the start circle. Upon receiving the GET token, it would proceed to the URI state and compare the GET and &ldquo;dvwssr.dll&rdquo; tokens to its list of tabulated attacks, which may or may not result in the generation of an SSID. Note here that the protocol parser <highlight><bold>64</bold></highlight> can be instructed to perform a simple comparison operation, essentially matching strings, or it can perform more complex logical or arithmetic operations, such as bit shifting, ANDs, adds, length checking, and the like, depending on what may be required to identify an attack signature. In the present example, the GET request is an HTTP string amenable to a simple comparison, so no arithmetic or other types of operations are required. Other forms of attacks, however, may have signatures that require more complex processing to identify. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Once processing of the URI strings is complete, receipt of the &ldquo;&quest;&rdquo; token causes the protocol parser <highlight><bold>64</bold></highlight> to shift states to the first parameter state, where it executes further instructions according to the &ldquo;&quest;&rdquo; token. These instructions seek to identify those attacks that have the characteristic of simply possessing a Param1 field at this location. If any are identified, the appropriate SSID is sent to the attack detector <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Receipt of an &ldquo;&equals;&rdquo; token shifts the protocol parser <highlight><bold>64</bold></highlight> to the next state, which examines the actual content of the Param1 field. Here, value1 would be parsed to determine whether it matches any of the strings in the tables <highlight><bold>67</bold></highlight>. If so, the corresponding SSID is transmitted to the attack detector <highlight><bold>55</bold></highlight>. Subsequent receipt of an &ldquo;&amp;&rdquo; token shifts the protocol parser back to the parameter state, where this comparison is repeated for the Param2 field. The lack of any other tokens terminates the comparison process. Note that the HTTP token does not play a role in the processes of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> other than to indicate to the protocol parser <highlight><bold>64</bold></highlight> that HTTP is the appropriate protocol, indicating which tables of the tables <highlight><bold>67</bold></highlight> to use. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference> illustrate exemplary instructions contained within tokens according to an embodiment of the invention. Many of the instructions shown direct the protocol parser <highlight><bold>64</bold></highlight> to compare values within packet states to tabulated attack signatures. Note that this is not an exhaustive list and, while only comparison operations are shown, many other operations exist. More specifically, certain attacks leave signatures that can only be recognized upon mathematical, logical, or other manipulations on packet fields or states. Such operations, while not shown in <cross-reference target="DRAWINGS">FIGS. 11A and 11B</cross-reference>, are nonetheless encompassed by the scope of the present invention. Thus, assuming complete implementation, the state machine of <cross-reference target="DRAWINGS">FIG. 10</cross-reference> can detect attack signatures in any request method, detecting situations where a signature may be obscured by quoting and requesting further processing in that case. The same state machine can calculate the length of the entire request URI and compare it to a threshold. It can also calculate the length of each URI query parameter name and value and compare it to a threshold. The state machine can detect attack signatures in any HTTP header field. It can also calculate the length of each HTTP header field and compare it to a threshold. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates one hardware configuration in which the various components are located on one or more processors and information flows among them as shown by the arrows. This is, however, but one possible configuration. An alternate configuration is shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, where a SiByte processor acts as a common bus and processor, carrying out operations as commanded by the other components and moving information among them as shown. One of skill in the art can see that many other configurations are both possible and encompassed by the present invention. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> The protocol parser <highlight><bold>64</bold></highlight> has now been fully described. Accordingly, attention now returns to <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and the remaining executable modules stored in memory <highlight><bold>50</bold></highlight>. The classification and pattern-matching module <highlight><bold>68</bold></highlight> coordinates the comparison between the profiles of incoming and known intrusion signatures <highlight><bold>70</bold></highlight>. As previously discussed, this module receives data from the fixed-field detector <highlight><bold>63</bold></highlight> and the protocol parser <highlight><bold>64</bold></highlight> and operates as an attack detector. In particular, the module receives Sub-Signature Identifications (SSIDs) </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> and determines if all the SSIDs required to form a complete pattern of a signature exist. The technique for distributing and updating the intrusion signatures <highlight><bold>70</bold></highlight> is discussed below. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> also illustrates an encrypted session monitoring module <highlight><bold>72</bold></highlight> stored in memory <highlight><bold>50</bold></highlight>. The encrypted session monitoring module <highlight><bold>72</bold></highlight> decrypts communications between a client computer and a server computer in accordance with public and private key information. In one embodiment, the decrypted information is clear text that can then be inspected for intrusions. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The encrypted session monitoring module <highlight><bold>72</bold></highlight> facilitates the complete monitoring of Secured Socket Layer (SSL) sessions so that it is possible to detect attacks launched through encrypted channels, such as HTTPS connections. The module <highlight><bold>72</bold></highlight> facilitates a non-intrusive method in that it is not visible to the normal SSL client and server applications and that a failure in the monitor will not interfere with normal SSL operation. The method also provides a means to avoid introducing any new security exposure to the SSL server. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The encrypted session monitoring module <highlight><bold>72</bold></highlight> addresses the problem of the increasing number of attacks launched through HTTPS connections. These attacks are not visible to current network based IDS solutions because the data is encrypted. The monitoring module <highlight><bold>72</bold></highlight> allows a network intrusion detection system to see attacking packets. In the absence of this feature, one must install host based intrusion detection systems on each server. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> To decrypt the SSL traffic, the sensor <highlight><bold>22</bold></highlight> uses the web server&apos;s public/private key information. If the sensor <highlight><bold>22</bold></highlight> is used to protect several web servers, it needs public/private keys from each server. Since the sensor <highlight><bold>22</bold></highlight> saves public/private keys from several servers, it stores the keys in a tamper proof storage, illustrated as protected key information <highlight><bold>80</bold></highlight>. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> The sensor monitors the key exchange protocol between the client and the server to derive the symmetric encryption key, the encryption initialization vectors (IV) and the message authentication code (MAC) key. The sensor can monitor the key exchange protocol because it has the server&apos;s public and private key. Once the key exchange is done, the sensor uses the symmetric encryption key and the encryption IV associated with the traffic flow to perform the decryption. Once decrypted, it is able to inspect the traffic for intrusions. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The sensor <highlight><bold>22</bold></highlight> preferably has a secure channel to the sensor management system <highlight><bold>26</bold></highlight> through which the sensor obtains the server&apos;s public and private keys. The sensor management system <highlight><bold>26</bold></highlight> does not store the public/private keys, although it provides an interface through which the key information can be supplied. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The protected key information <highlight><bold>80</bold></highlight> may be attacked in several manners. One form of attack is through the programmatic access of the keys by a normal administrator. A second form of attack is the physical security of the key storage. In the event that someone either obtains access to the unit or physically takes the unit, it should not be possible to read the keys, either programmatically or by probing of the electrical interface. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> The encrypted session monitoring module <highlight><bold>72</bold></highlight> operations may be more fully characterized as follows. The sensor management system <highlight><bold>26</bold></highlight> sends the public/private key information of the server along with the server&apos;s Internet protocol address. The information is encrypted with the shared key of the sensor by the sensor management system <highlight><bold>26</bold></highlight>. The sensor <highlight><bold>22</bold></highlight> decrypts the information and passes the public/private key to identify a unique KEY identifier. Every time the sensor sees key management requests for a particular server, it will send the session key exchange packets along with the KEY identifier to the encrypted session monitoring module <highlight><bold>72</bold></highlight>. The module <highlight><bold>72</bold></highlight> derives the symmetric session encryption key, the encryption IV and the MAC key. Any encrypted traffic seen by the sensor is processed along with the KEY identifier. The module <highlight><bold>72</bold></highlight> decrypts the traffic using the symmetric encryption key, the encryption Ivs and returns the decrypted traffic. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The sensor <highlight><bold>22</bold></highlight> also includes a fail-over switch module <highlight><bold>78</bold></highlight>. The fail-over switch module <highlight><bold>78</bold></highlight> supervises the operations performed by a sensor <highlight><bold>22</bold></highlight>. In the event of the failure of that sensor <highlight><bold>22</bold></highlight>, it switches control to a redundant sensor <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> In order for the redundant sensor <highlight><bold>24</bold></highlight> to be in a position to operate, it must be synchronized with the primary sensor <highlight><bold>22</bold></highlight>. The fail-over switch module <highlight><bold>78</bold></highlight> synchronizes the information contained on the primary sensor <highlight><bold>22</bold></highlight> and the redundant sensor <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> The fail-over switch module <highlight><bold>78</bold></highlight> can operate in three configurations. One configuration is an active-standby state without load sharing. In this scenario, one sensor (e.g., sensor <highlight><bold>22</bold></highlight>) is deployed as the active sensor and the other is deployed as the standby sensor (e.g., redundant sensor <highlight><bold>26</bold></highlight>). The active unit passes state information to the standby unit every time it changes. After the fail-over, the new active unit has the same connection information as the failed unit. Preferably, the active and standby sensors are connected with a dedicated fail-over link <highlight><bold>25</bold></highlight>, which is used to exchange state information. In one embodiment of the invention, the state information passed to the standby unit includes configuration information, TCP state information, UDP application information, SSL key data and other information necessary for the standby unit to take over processing if the active unit fails. If a standby unit powers up while the active unit is already operational, the standby unit will copy all the state information from the active unit. While the standby unit is copying the state information from the active unit, any updates to the copied state information are synchronized. When the active unit fails, the standby unit obtains the IP and MAC addresses of the active unit and starts accepting and forwarding traffic. When the active sensor and the standby sensor power up at the same time, the two sensor use a handshake protocol to figure out which will be the active unit and which will be the standby unit. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> Another mode of operation is active/standby with load balancing. In this mode, both sensors receive traffic, although the primary link will have most of the network traffic. The secondary link will typically have control traffic. Each sensor will copy its per flow state information to the other sensor so any sensor can take over the responsibility of the other sensor when there is a fail-over. The two sensors exchange state information in real time. After the fail-over, the working sensor assumes the responsibility for the flows that were handled by the failed sensor. In addition to providing redundancy, this model facilitates load balancing so both sensors can be utilized to provide advanced intrusion capabilities. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> Since traffic can come to both sensors, the sensors use a load-balancing algorithm to determine which one processes the packets that belong to a particular flow. A flow is identified by the 5-tuple information that exists in each packet. In order to provide state-current intrusion detection, it is required that the packets directed to a flow are always processed where the flow was originally created. The load-balancing algorithm uses a hashing mechanism to determine which sensor will process the packet. Irrespective of which sensor sees the packets, based on the hash, the packets are assigned to one of the sensors. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> A third redundant sensor configuration operates in an active/active with load balancing mode. In this mode, the two sensors are deployed to perform intrusion detection on four links. The traffic for a particular flow can come on any of the four links. Instead of monitoring one full duplex link, this configuration monitors four full duplex links. The two sensors are connected by four full links so each sensor can move packets to the other sensor. Each sensor has two line cards. The first line cards in each sensor are configured as a first pair and the second line cards in each sensor are configured as a second pair. To provide redundancy in this configuration, if a card in the base sensor <highlight><bold>22</bold></highlight> or if the entire sensor <highlight><bold>22</bold></highlight> goes down, the redundant sensor <highlight><bold>24</bold></highlight> is invoked. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> When any line card in either sensor receives packets, the line cards use a hash algorithm to send packets to one of the line cards to process the packet. For a particular flow, irrespective of which line card receives a packet, the packets will always be sent to the same line card. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> To implement redundancy, the first line cards in each sensor exchange state information. Similarly, the second line cards in each sensor exchange state information. In addition to maintaining its own information, each sensor maintains the state information for its counterpart line card in the other sensor. If the first line card in the first sensor goes down, all traffic meant for the first line card is delivered to the first line card in the redundant sensor. Similarly, if the second line card in the first sensor goes down, all traffic meant for the second line card is diverted to the second line card in the redundant sensor. If the base sensor <highlight><bold>22</bold></highlight> goes down, the traffic from the first line card and second line card in the base sensor is directed to the corresponding line cards in the redundant sensor. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Thus, the fail-over switch module <highlight><bold>78</bold></highlight> coordinates state redundancy for intrusion detection systems. In addition, it provides load balancing. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> The features of an embodiment of the sensor <highlight><bold>22</bold></highlight> have now been fully described. Attention now turns to a description of the sensor management system <highlight><bold>26</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates an embodiment of a sensor management system <highlight><bold>26</bold></highlight>. This implementation is in the form of a general-purpose computer, including a central processing unit <highlight><bold>100</bold></highlight> and a set of input/output devices <highlight><bold>102</bold></highlight>, which communicate with one another over a system bus <highlight><bold>104</bold></highlight>. The input/output devices <highlight><bold>102</bold></highlight> may include a keyboard, mouse, video monitor, printer, and the like. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Also connected to the system bus <highlight><bold>104</bold></highlight> is a memory <highlight><bold>106</bold></highlight>, which may be primary and/or secondary memory. The memory <highlight><bold>106</bold></highlight> stores a set of executable programs utilized to implement features of the invention. In particular, the memory <highlight><bold>106</bold></highlight> stores a sensor control module <highlight><bold>108</bold></highlight>, which performs general supervisory operations over one or more sensors <highlight><bold>22</bold></highlight> </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> The sensor management system <highlight><bold>26</bold></highlight> also includes a virtual intrusion detection system (VIDS) provisioning module <highlight><bold>110</bold></highlight>. This module performs local virtual VIDS operations as coordinated by the corresponding VIDS provisioning module <highlight><bold>130</bold></highlight> associated with the global sensor management system <highlight><bold>34</bold></highlight>. The operation of VIDS provisioning module <highlight><bold>110</bold></highlight> is discussed below in connection with the VIDS provisioning module <highlight><bold>130</bold></highlight> of the global sensor management system <highlight><bold>34</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The sensor management system <highlight><bold>26</bold></highlight> also stores a real-time signature update module <highlight><bold>112</bold></highlight>. This module coordinates the delivery of intrusion signatures <highlight><bold>70</bold></highlight> to sensors <highlight><bold>22</bold></highlight>. This module is responsive to control signals from the update server <highlight><bold>38</bold></highlight>, as discussed below. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> illustrates an embodiment of a global sensor management system <highlight><bold>34</bold></highlight>. This implementation is in the form of a general-purpose computer, including a central processing unit <highlight><bold>120</bold></highlight> and a set of input/output devices <highlight><bold>122</bold></highlight>, which communicate with one another over a system bus <highlight><bold>124</bold></highlight>. The input/output devices <highlight><bold>122</bold></highlight> may include a keyboard, mouse, video monitor, printer, and the like. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Also connected to the system bus <highlight><bold>124</bold></highlight> is a memory <highlight><bold>126</bold></highlight>, which may be primary and/or secondary memory. The memory <highlight><bold>126</bold></highlight> stores a set of executable programs utilized to implement features of the invention. In particular, the memory <highlight><bold>126</bold></highlight> stores a system management module <highlight><bold>128</bold></highlight>, which performs general supervisory operations. The memory also stores a VIDS provisioning module <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> The VIDS provisioning module <highlight><bold>130</bold></highlight> operating with the provisioning module <highlight><bold>110</bold></highlight> of the sensor management system <highlight><bold>26</bold></highlight> enables service providers (e.g., Internet Service Providers or Managed Security Service Providers) to supply intrusion protection to multiple subscribers with one integrated platform. More particularly, the VIDS provisioning module <highlight><bold>130</bold></highlight> allows different subscribers to view designated traffic information associated with their logical traffic paths, as defined in the sensors. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> The VIDS provisioning module <highlight><bold>130</bold></highlight> facilitates protection for multiple traffic streams for different subscribers using a single sensor platform while maintaining security separation. The module <highlight><bold>130</bold></highlight> supports different security policies, protection objectives, and security management preferences effectively and efficiently. The module <highlight><bold>130</bold></highlight> reduces the management task and total cost of providing intrusion detection security services. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> The VIDS module <highlight><bold>130</bold></highlight> allows a user to specify a subscriber&apos;s view and a subscriber configuration. A VIDS view restricts the intrusion information shared with a subscriber to the subset related to the subscriber configuration. A subscriber is allowed to use VIDS interfaces to configure the VIDS as if it were a physical device. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> The VIDS provisioning module <highlight><bold>130</bold></highlight> operates in conjunction with a sensor <highlight><bold>22</bold></highlight> and the update server <highlight><bold>38</bold></highlight>. As discussed below, the update server <highlight><bold>38</bold></highlight> is used to notify customers of new software or network intrusion signature updates. The update server <highlight><bold>38</bold></highlight> also provides the software images and signature files for download. As previously discussed, the sensor <highlight><bold>22</bold></highlight> performs signature matching against network traffic and generates responses in case of intrusions. A sensor <highlight><bold>22</bold></highlight> accepts configuration and control messages and sends intrusion alerts and/or events to the sensor management system <highlight><bold>26</bold></highlight>. The requirement for a sensor to support VIDS is simple. Since each VIDS can customize the response in the face of an intrusion, a sensor must be able to generate VIDS specific responses. In addition, the sensor <highlight><bold>22</bold></highlight> labels all alerts and events sent to the sensor management system <highlight><bold>34</bold></highlight> with VIDS identifiers so that the sensor management system <highlight><bold>34</bold></highlight> does not have to spend extra computer resources in filtering VIDS events. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> The VIDS provisioning module <highlight><bold>130</bold></highlight> operating on the sensor management system <highlight><bold>34</bold></highlight> is central to the VIDS implementation. It stores VIDS definitions and enforces VIDS view, configuration, and access control restrictions using a role-based system. The VIDS module <highlight><bold>130</bold></highlight> provides a window into the sensor management system <highlight><bold>34</bold></highlight> for the IDS service provider&apos;s customer, also referred to as the subscriber. The service provider has made available a part of the sensor for subscriber use and the virtual IDS provides the subscriber with the capability to manage the allocated resources. Virtual IDS resource allocation is based on one of the following: (1) sensor identification and port number; (2) VLAN ID for traffic belonging to a subscriber; and (3) IP address range that belongs to the subscriber. There are several major IDS components involved in supporting the VIDS features: user and security management, user interface, intrusion signature and response configuration, and real-time VIDS recognition in the sensor. These components are discussed below. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The VIDS provisioning module <highlight><bold>130</bold></highlight> implements a role based management system. A user role is defined as a group of actions that can be performed on a given device. It is the basis of the authorization framework. Roles must be tied to a resource. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> There are two kinds of resources in the sensor management system: the sensor management system itself and the VIDS. Anyone with a sensor management system role is automatically mapped to all system-wide operations, since the sensor management systems <highlight><bold>34</bold></highlight> in the network <highlight><bold>20</bold></highlight> mirror one another. Each VIDS has a unique identifier (ID). The VIDS provisioning module <highlight><bold>130</bold></highlight> enforces security. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In one embodiment of the invention, there are five role types: system administrator, analysis/operator, user management, intrusion expert, and monitoring. A system administrator is allowed to perform simple administrative tasks, such as start/stop processes and database configuration. An analysis/operator is allowed to perform routine maintenance tasks. A user management role allows certain management tasks, such as adding or deleting role assignments. An intrusion expert is a person responsible for configuration and monitoring of intrusion related matters. A monitoring role provides read-only access. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Preferably, the VIDS provisioning module <highlight><bold>130</bold></highlight> implements a graphical user interface (GUI). The GUI enables the subscriber to access the sensor management system <highlight><bold>34</bold></highlight> to manage and monitor the VIDS. The GUI can be implemented within a browser, either as an applet or using HTML. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Those skilled in the art will recognize a number of advantages associated with the VIDS provisioning module <highlight><bold>130</bold></highlight>. First, it supports flexible delegation of administrative tasks in a scalable manner. In a large-scale service provider environment, this is of particular importance considering the large number of potential intrusion events that could easily overwhelm a centrally managed system. Second, the VIDS opens a window for subscribers to view information related to their own systems that is otherwise unavailable. Third, it reduces the total cost of ownership for the service provider and its subscribers. Fourth, it provides an easy to deploy and manage solution for a large number of subscribers. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> The global sensor management system <highlight><bold>34</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 14</cross-reference> also stores a DDOS tracking monitor <highlight><bold>132</bold></highlight>. The concept of a distributed denial of service (DDOS) attack has been previously introduced and discussed in connection with the sensor <highlight><bold>22</bold></highlight>. The DDOS tracking monitor <highlight><bold>132</bold></highlight> includes executable code to implement multi-sensor collaborative techniques in identifying DDOS attacks. The operation of the DDOS tracking monitor <highlight><bold>132</bold></highlight> is more fully appreciated in connection with <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Sensor <highlight><bold>27</bold></highlight>_<highlight><bold>0</bold></highlight> monitors traffic on the physical link connecting the protected server <highlight><bold>32</bold></highlight> to the enterprise network <highlight><bold>30</bold></highlight>. Sensors <highlight><bold>27</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>27</bold></highlight>_N monitor the links that connect the enterprise network <highlight><bold>30</bold></highlight> to Internet service providers <highlight><bold>28</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>28</bold></highlight>_N. Although the sensors <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> may be deployed to monitor links on the outside of firewalls, on the inside of firewalls, or both, this fact is not distinguished in this example. As previously indicated, the sensors <highlight><bold>22</bold></highlight> are managed by a hierarchy of sensor management systems <highlight><bold>26</bold></highlight> and the global sensor management system <highlight><bold>34</bold></highlight>. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> The DDOS tracking monitor <highlight><bold>132</bold></highlight> implements multi-sensor collaboration as follows. All sensors <highlight><bold>22</bold></highlight> are controlled by the global sensor management system <highlight><bold>34</bold></highlight>. The sensors may be deployed initially by the management system <highlight><bold>34</bold></highlight> or, when activated, they can register with the management system <highlight><bold>34</bold></highlight>. The sensors are identified by their topological location with respect to the target of protection (i.e., protected server <highlight><bold>32</bold></highlight>). Sensor <highlight><bold>27</bold></highlight>_<highlight><bold>0</bold></highlight> sees the aggregate of all traffic passing through sensors <highlight><bold>27</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>27</bold></highlight>_N that is destined for the protected server <highlight><bold>32</bold></highlight>. The global management system <highlight><bold>34</bold></highlight> pushes statistical profiles to all of the upstream sensors <highlight><bold>27</bold></highlight>_<highlight><bold>1</bold></highlight> through <highlight><bold>27</bold></highlight>_N. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> Each sensor <highlight><bold>22</bold></highlight> or <highlight><bold>24</bold></highlight> inserts probe packets or path markers in the traffic it processes. The DDOS tracking monitor <highlight><bold>132</bold></highlight> specifies the frequency for generating these markers. The frequency is dependent upon the characteristics of the target, such as the information it stores and the vulnerability to attack. The frequency is also dependent upon the relative distance between the sensor and the target. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> In one embodiment, the DDOS tracking monitor <highlight><bold>132</bold></highlight> correlates sensor information to detect a DDOS attack (in other embodiments, DDOS detection can be performed remotely and the results transmitted to the tracking monitor <highlight><bold>132</bold></highlight>). The correlation rules utilized by the DDOS tracking monitor to detect an attack may consider any number of factors. For example, a rate increase of greater than X Mbps/sec observed by Y active sensors comprising greater than Z % of the total contributing links characterizes a pending DDOS attack on the target coming from the links crossing the threshold. In this example, the selection of X, Y, and Z is based on the tolerable load at the target as well as the latency to respond to the threat (e.g., activation of rate limiting at the corresponding boundaries). Another example correlation rule tracks every active sensor and generate an alert when traffic exceeds a predetermined high water mark for a given zone, such as a single server, a sub-net, an enterprise network, and the like. As yet another example, a novel attack detection method is also disclosed in the co-pending U.S. patent application referenced previously. These and other methods of DDOS attack detection are encompassed by the present invention, which in this aspect simply discloses the detection of DDOS attacks. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Thus, the DDOS tracking monitor <highlight><bold>132</bold></highlight> operates in conjunction with a set of provisioned sensors that insert path markers into network traffic directed toward a protected computer. The DDOS tracking monitor <highlight><bold>132</bold></highlight> identifies when the path markers and network traffic match a distributed denial of service attack profile. In response to this situation, the DDOS tracking monitor <highlight><bold>132</bold></highlight> initiates measures to deny access to the protected computer. The DDOS tracking monitor <highlight><bold>132</bold></highlight> may subsequently be used to analyze the path markers to identify a source of a distributed denial of service attack. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> The components of the sensor management system <highlight><bold>34</bold></highlight> have now been fully described. Therefore, attention turns to a description of the update server <highlight><bold>38</bold></highlight>, which is depicted in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. The update sever <highlight><bold>38</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 15</cross-reference> includes standard computer components of a central processing unit <highlight><bold>140</bold></highlight> and a set of input/output devices <highlight><bold>142</bold></highlight>, which communicate over a system bus <highlight><bold>144</bold></highlight>. A memory <highlight><bold>146</bold></highlight> is also connected to the system bus <highlight><bold>144</bold></highlight>. The memory stores a set of executable programs to implement the functions of the update server. In particular, the memory stores a secure update download module <highlight><bold>148</bold></highlight> and a hierarchical attack categorization module <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> The secure update download module <highlight><bold>148</bold></highlight> includes executable code to download an attack file <highlight><bold>149</bold></highlight> to a sensor management system <highlight><bold>26</bold></highlight>. The attack file <highlight><bold>149</bold></highlight> specifies attacks and counter measures. Preferably, the file also identifies unknown attacks and suggests responses for such attacks. The attack file <highlight><bold>149</bold></highlight> includes information forming the intrusion signatures <highlight><bold>70</bold></highlight> processed by the classification and pattern-matching module <highlight><bold>68</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> The attack file <highlight><bold>149</bold></highlight> can be downloaded using different approaches. The secure update download module <highlight><bold>148</bold></highlight> can periodically download the attack file <highlight><bold>149</bold></highlight>. Alternately, the secure update download module can download the attack file <highlight><bold>149</bold></highlight> in response to a request from a sensor management system <highlight><bold>26</bold></highlight>. Alternately, email alerts may also be used to deliver updated attack files <highlight><bold>149</bold></highlight>. The SMS alert notification module <highlight><bold>152</bold></highlight> may be used to send alerts by secure e-mail (e.g., SMIME) when a new signature update is available for download. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> In one embodiment of the invention, the sensor management system <highlight><bold>26</bold></highlight> uses HTTP/SSL to communicate with the secure update download module <highlight><bold>148</bold></highlight>. Since the sensor management system <highlight><bold>26</bold></highlight> resides behind the firewall <highlight><bold>36</bold></highlight>, it is easier to utilize a PULL methodology to download the rules. A PUSH methodology requires opening holes in the firewall. The sensor management system <highlight><bold>26</bold></highlight> authenticates itself to the update server <highlight><bold>38</bold></highlight> prior to receiving an attack file <highlight><bold>149</bold></highlight>. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> The attack file <highlight><bold>149</bold></highlight> may be formed utilizing the hierarchical attack categorization module <highlight><bold>150</bold></highlight> of the invention. The hierarchical attack categorization module <highlight><bold>150</bold></highlight> is used to develop, deploy and manage information on different computer attacks and countermeasures. In one embodiment of the invention, potential attack space is defined in terms of a set of categories, for example, including probes and port scans, compromise of confidentiality, compromise of authentication, compromise of data integrity, denial of services, and direct violation of security policies. Dividing the potential attack space in this manner allows one to have greater insight into the nature of the attack and its manifestations. Accordingly, it is easier to tailor a response to the attack. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> Probes and port scan attacks represent reconnaissance efforts from an attacker in preparation for additional attacks. Examples of this category include pings for live hosts, tests for operating system types, and TCP port scans for active Internet services. Compromise of confidentiality attacks cause direct expose to sensitive information, such as certain system files, director structures, or other user files. Examples in this category include sniffing of a sub-net, transmitting confidential information via stealthy (e.g., HTTP tunneled) channels, or forcing system core dumps. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> Compromise of authentication/authorization attacks entail an attacker obtaining unauthorized access privileges. There are often more serious consequences from such attacks if they are not dealt with quickly. For example, that attacker can install backdoors to allow easy access for future attacks. Examples of this category include the well-known send mail attack to obtain illegal shells on a local machine, TCP connection hijacking, and the set of buffer-overflow related attacks. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> A compromise of data integrity entails the corruption of sensitive data. It can also have secondary impact if not detected or rectified quickly. For example, a successful &ldquo;binmail&rdquo; attack can result in an altered &ldquo;.rhosts&rdquo; file, which gives the attacker future logins without a password. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> A direct violation of security policy is another form of attack. Although this category most often produces an impact characterized by one of the previous five categories, sometimes the misuse may not produce any observable impact, or at least not immediately. If one recognizes this special category and recognizes that there are well-defined policies governing the use of privileges, one can detect the misuse as soon at it occurs, even in the absence of a serious impact. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> A final form of attack associated with this example is the denial of service attack. This type of attack is discussed above. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> In addition to defining attack categories, it is useful to define attack target platforms. In one embodiment of the invention, the following hierarchy is identified: (1) vendor (e.g., SUN, IBM, HP, SGI, CISCO), (2) device (e.g., workstation, server, router, firewall), (3) operating system (e.g., Solaris, Linux, MAC OS), and (4)version/revisions. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> Attack target services can also be categorized. By way of example, target services may include: HTTP, DNS, SMTP, FTP, telnet, NFS, and the like. Attack launch platforms may also be categorized. The same hierarchical structure can be used as in the case of an attack target. Monitoring points may also be defined. Monitoring points refer to the places or platforms from which any event related to an attack can be observed. The same general hierarchy for describing the attack target can be used for describing the monitoring points, except that for attacks launched across the network (as opposed to a local user from the console) any link on the path should be considered a viable monitoring point. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> Each identified attack is assigned a serial number, called a sigID. Anomaly-based detection mechanisms can also be assigned a unique sigID so that they can be assigned to a coverage map. The coverage map can be viewed as an attack categorization tree with detection sigIDs attached to the nodes of the tree, as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. The tree is created using categorization dimensions of the type discussed above. At the top level all attacks are mapped according to the attack impact. At the next level, the attacks are further categorized based on the attack target platform, which is itself a hierarchy. Any attack is only attached to one node of the tree. For example, attack al is attached to the denial of service node because it is a general denial of service attack that applies to all the platforms. Attack a<highlight><bold>3</bold></highlight> is only attached to the leaf node v2.6 because it only affects SUN Solaris 2.6 </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Detected signature identifications (with anomaly detection mechanisms treated as special signatures) are also attached to the tree node. Again, a more general signature will be attached to nodes closer to the root because they cover larger numbers of specific target platforms, while the most specific signature is attached to a leaf node, such as sig<highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates processing steps performed by an embodiment of the hierarchical attack categorization module <highlight><bold>150</bold></highlight> of the invention. The module initially constructs a hierarchy characterizing different computer attacks and countermeasures (block <highlight><bold>160</bold></highlight>). This operation results in a structure of the type shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. The hierarchy is then traversed to identify computer attacks and countermeasures relevant to the target platform (block <highlight><bold>162</bold></highlight>). Detection and protection measures for the target platform are then collected (block <highlight><bold>164</bold></highlight>). This can result in an attack file <highlight><bold>149</bold></highlight>. A sensor is then supplied, through a download, with the protective software (e.g., the attack file) for the target platform (block <highlight><bold>166</bold></highlight>). </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> The hierarchical approach of the invention allows one to clearly describe, in one data structure, what attacks a given environment is vulnerable to, what protection means (mechanisms and signatures) are available, and how detection alerts are correlated. Processes for utilizing this representation constitute effective methods for deployment and operation of the solution, for analysis of alerts, and for security management. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> It should be recognized that the various novel components of the architectures described above can be combined to afford users maximum protection against attacks. For instance, DDOS source detection, anomaly-based intrusion detection, and signature-based intrusion detection can be implemented on a redundant sensor architecture to make them more robust. Similarly, the update server <highlight><bold>38</bold></highlight> can be configured to update both sensors <highlight><bold>22</bold></highlight> and redundant sensors <highlight><bold>24</bold></highlight> with updated attack signatures, anomaly profiles, and the like. The various attack detection methods (i.e., anomaly-based, signature-based, etc.) can also be performed on information decrypted by the various decryption methods of the invention. These and other combinations should be apparent from the previous discussion. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> The foregoing description, for purposes of explanation, used specific nomenclature to provide a through understanding of the invention. However, it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus, the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed; obviously, many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, the thereby enable other skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It in intended that the following claims and their equivalents define the scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of forming a virtual intrusion detection system, comprising: 
<claim-text>positioning a set of sensors in a network environment, each sensor supporting multiple logical traffic paths; and </claim-text>
<claim-text>providing a set of sensor management systems corresponding to said set of sensors, said set of sensor management systems enforcing a set of virtual intrusion detection systems, wherein each virtual intrusion detection system corresponds to a predetermined logical traffic path through said set of sensors, each virtual detection system providing sensor traffic information solely to authorized parties.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004688A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004688A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004688A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004688A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004688A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004688A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004688A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004688A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004688A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004688A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004688A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004688A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004688A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004688A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004688A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004688A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004688A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030004688A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030004688A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
