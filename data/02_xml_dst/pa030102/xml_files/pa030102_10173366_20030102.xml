<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002432A1-20030102-D00000.TIF SYSTEM "US20030002432A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002432A1-20030102-D00001.TIF SYSTEM "US20030002432A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002432A1-20030102-D00002.TIF SYSTEM "US20030002432A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002432</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10173366</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020617</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>0116116.5</doc-number>
</priority-application-number>
<filing-date>20010630</filing-date>
<country-code>GB</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L005/20</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>370</class>
<subclass>200000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Receiver apparatus and method</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Steven</given-name>
<family-name>Morris</family-name>
</name>
<residence>
<residence-non-us>
<city>Taipei</city>
<country-code>TW</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Octavius</given-name>
<middle-name>J.</middle-name>
<family-name>Morris</family-name>
</name>
<residence>
<residence-non-us>
<city>Redhill</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>KONINKLIJKE PHILIPS ELECTRONICS N.V.</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>Corporate Patent Counsel</name-1>
<name-2>U.S. Philips Corporation</name-2>
<address>
<address-1>580 White Plains Road</address-1>
<city>Tarrytown</city>
<state>NY</state>
<postalcode>10591</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In a DSM-CC receiver (<highlight><bold>12</bold></highlight>), a signal comprising a periodically repeated plurality of data sections is received. Storage means (<highlight><bold>14</bold></highlight>) is provided for caching the data sections included in the signal, and said storage means incorporates a file management mechanism based on file names. Each data section is received (<highlight><bold>100</bold></highlight>) under a corresponding file name, and the received file names are modified (<highlight><bold>140</bold></highlight>) within the receiver to distinguish between previous or subsequent versions of the same data sections of the signal that are stored in said storage means. Files currently in use are not overwritten, but are marked (<highlight><bold>135</bold></highlight>) for later deletion (<highlight><bold>155</bold></highlight>). Individual files can be extracted from DSM-CC modules and cache. In this case, individual file names are modified by reference to version information received for the module as a whole. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to communications systems and in particular those employing multiplex signals comprising a periodically repeated plurality of modules. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Interactive digital television applications such as tele-banking, tele-shopping or electronic newspapers are typically broadcast in a carousel like fashion where the corresponding data sections are repeated periodically in the transport stream. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> DSM-CC (Digital Storage Media-Command and Control) object carousels are such a type of broadcast file system used in interactive digital TV. These have been specified as the delivery system for content in several standards, including the UK Digital Terrestrial Group guidelines and the DVB Multimedia Home Platform (MHP). See for example ISO/IEC 13818-6A. DSM-CC object carousel consists of a number of &lsquo;modules&rsquo;, each of which contains part of a larger directory structure, either as several small files (in which case the maximum module size is 64 Kbytes) or a single large file (where the module can be any size). These modules are then broadcast with the digital TV signal, with some modules possibly being repeated to improve access times. Once all modules have been broadcast, the broadcaster returns to the beginning and starts broadcasting the modules again. This process bears a close resemblance to the way that teletext pages are broadcast, with DSM-CC modules replacing individual teletext pages as the basic unit. EP 1022901 A, for example, describes an information server for providing DSM-CC carousels in an information stream. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Digital TV receivers that use DSM-CC typically cache at least some DSM-CC modules, to avoid the long delays in accessing modules encountered with systems like teletext which are caused by having to wait for the requested module&apos;s turn to be broadcast. As some new set-top boxes include hard disk units to provide some local storage, it becomes possible for a set-top box that needs to support DSM-CC broadcast file systems to use a part of the local hard disk as a cache, rather than having to perform this caching in memory. Using the hard disk for this caching is known for example from International patent application WO99/65229 (commonly assigned with the present application) which proposes a system for caching data sections on a hard drive (for instance) in such a way that the information for a complete set of multiplex signals is contained in a single information section. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Using the hard disk for caching in this manner has several benefits. Storing the cached modules on disk frees memory that would otherwise be used for storing these modules. The set-top box, therefore, has a reduced memory footprint in comparison with other boxes. Furthermore, the platform can now cache considerably more modules, due to the extremely low relative cost of hard disk capacity. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Many present systems usually require only a simple DSM-CC cache because of the relatively simple nature of the applications that are possible, and the fact that they cannot access the broadcast file system directly. However, on an MHP platform, an application broadcast using DSM-CC can access the object carousel and load files from it, and may indeed choose to connect to and use any number of other object carousels as well. This adds a further level of complexity to cache management. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Every DSM-CC module has a version number, indicating when it was last updated, and DSM-CC allows the broadcaster to dynamically update elements of the file system and broadcast the changed module(s) with a new version number. In this way, the application and the DSM-CC cache can detect that the file has been updated. The old version cannot simply be replaced, however, because it is possible that an application is accessing the file. If the contents of the file were to change halfway through being read, the application would be badly affected. Yet at the same time any new requests for the file should get the updated version. Thus, it is potentially necessary to keep multiple versions of the same file in the cache. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The prior application mentioned above does not, however, teach any way of differentiating between different versions of the same module. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In the case where the cache is stored on a local hard disk, one solution would be to add a version number to the structure of the file system to cope with this, but this is not a built-in facility of common file systems, and would require changes to the file system design. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In order to address the cache management problems highlighted above, it is proposed to append the version of the module containing a file to the name of the file automatically when caching the file on a local disk. This has several advantages since it permits any current file system used in the industry to be used without modification. This saves developer effort since no change or testing of the file system structure is required. Also, as the cache is file system-independent, porting to a new file system type or operating system is made significantly easier. The addition of version numbers within filenames also prevents inconsistent information from being presented to an application. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In a first embodiment of the invention there is provided a method of cache management in a receiver, for receiving a signal comprising a periodically repeated plurality of data sections, said receiver including storage means for caching the data sections included in the signal, wherein said storage means incorporates a file management mechanism based on file names, each data section being received under a corresponding file name, and wherein the received file names are modified within the receiver to distinguish between previous or subsequent versions of the same data sections of the signal that are stored in said storage means. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In one embodiment, a version number of the data section is appended to the received file name of the data section before it is added to the cache. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The data section may be received with associated version information, said information being used to determine the modification of the file name. Version numbers are defined within DSM-CC specifications. Alternatively, the receiver may generate a time stamp or other version information locally. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The storage means may comprise a local hard drive. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The data sections may be modules, each module comprising of group of one or more files, or the data sections may be the files contained in the modules. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In one embodiment, files may be extracted and stored individually, using version information received for the group as a whole. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Where the data sections are made of modules, manipulation of the groups of files can be simplified by using sub-directories. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The file name of the data section may be used to mark for deletion a redundant version of a data section. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The invention yet further provides an apparatus comprising storage means and file management means arranged for caching periodically received data sections by a method as set forth above, and as further set forth in the appended claims.</paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Embodiments of the invention will now be described, by way of example only, with reference to the accompanying drawings, in which: </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a generalised block diagram of apparatus embodying the invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a flowchart depicting an example of a method according to the invention in operation.</paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Referring to the block diagram of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> there is provided a transmitter <highlight><bold>10</bold></highlight> for transmitting a signal <highlight><bold>13</bold></highlight>, such as a digital television signal. This signal comprises of a number of modules that are repeated periodically. A receiver <highlight><bold>12</bold></highlight>, such as the type commonly referred to as a &ldquo;set top box&rdquo;, receives said signal. The receiver <highlight><bold>12</bold></highlight> consists of means for extracting files <highlight><bold>11</bold></highlight> and modules from the signal and a cache memory <highlight><bold>14</bold></highlight> which, in this example, is part of a hard disk. The cache memory <highlight><bold>14</bold></highlight> is used to store certain modules where necessary, such that they can be accessed quickly. The extractor <highlight><bold>11</bold></highlight> includes file management means for adding and deleting files from the cache memory in an orderly fashion. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Where an advanced set-top box for interactive digital television has an integrated hard disk, this hard disk can be used as a DSM-CC cache in those cases where DSM-CC is used, e.g. DVB MHP. A certain amount of hard disk space is reserved for use as a DSM-CC cache, in the same way that current set-top boxes reserve a certain area of memory for this purpose. The advantage of this is that a disk cache can be much larger without seriously compromising performance of the hard disk for other applications. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Referring to the flowchart of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the preferred method comprises the following steps: </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> At step <highlight><bold>100</bold></highlight>, when the platform detects the arrival of a DSM-CC module from the broadcast network, it can choose, at step <highlight><bold>105</bold></highlight>, whether to cache this module. If it does choose to cache the module then the platform examines the current cache to see if the module is already present, at step <highlight><bold>110</bold></highlight>. Otherwise, at <highlight><bold>107</bold></highlight>, the module is processed and displayed in the normal manner. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> If the check at step <highlight><bold>110</bold></highlight> shows the module is not already present then it is simply cached with its version number (step <highlight><bold>140</bold></highlight>). If, however that module is already present then, at <highlight><bold>115</bold></highlight>, it is determined whether that module already in the cache is an older version or a current or later version. This is done by checking the version number of the newly arrived module against that of the module stored in cache. If the module already cached is a current or later version then, at <highlight><bold>120</bold></highlight>, the newly loaded module is discarded. If it is older, the platform checks, at <highlight><bold>125</bold></highlight>, whether any of the cached module is currently in use (i.e. whether an application has a file in that module open for reading). If it is not, the old module is deleted, at <highlight><bold>130</bold></highlight>, from the disk cache. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> At step <highlight><bold>140</bold></highlight>, the new module is cached on disk with the version number appended as part of the file name. If the older version of the module is in use, the platform will, at step <highlight><bold>135</bold></highlight>, mark this older version for deletion. Any new operations that open a file in that module will be directed to the version of the file in the cache with the highest version number. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> When an application closes a file handle (and thus stops accessing the file), the platform checks whether the module is marked for deletion, at step <highlight><bold>145</bold></highlight>, and whether any other applications are accessing the module, at step <highlight><bold>150</bold></highlight>. In the case where no other file handles are open to files in that module and the module is marked for deletion, the module is deleted from the cache, at <highlight><bold>155</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Therefore, the module version and other information such as whether the module is marked for deletion (and possibly the number of currently open file handles) can be appended to the file name of the cached module. This makes version comparisons easier and avoids changes to the design of the file systems or the use of separate module version databases. Most standard programming libraries allow the manipulation of file systems using regular expressions to identify a set of filenames. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The skilled reader will appreciate that numerous variations are possible within the principles of the method and apparatus described above. The method can also be applied to caching individual files within DSM-CC modules by unpacking the files into the cache. In this case, every file name will have the version number of their containing DSM-CC module appended. This allows the application of the module replacement strategy described above to be carried out either at the file level (to ensure timely updates of files wherever possible) or at the module level (to ensure the consistency between all files broadcast in the same module). Caching at the module level in this way is more complex, but sub-directories can be used to make the manipulation of groups of files easier. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Accordingly it will be understood that the embodiments illustrated herein are presented as examples to aid understanding, and are not intended to be limiting on the spirit and scope of the invention claimed. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of cache management in a receiver, for receiving a signal comprising a periodically repeated plurality of data sections, said receiver including storage means for caching the data sections included in the signal, wherein said storage means incorporates a file management mechanism based on file names, each data section being received under a corresponding file name, and wherein the received file names are modified within the receiver to distinguish between previous or subsequent versions of the same data sections of the signal that are stored in said storage means. </claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein a version number of the data section is appended to the received file name of the data section before it is added to the cache. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein data sections are received with associated version information, said information being used to determine the modification of the file name. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the data sections are received in the form of modules, each module comprising a group of one or more files. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein manipulation of the groups of files is simplified by using sub-directories. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein said file name modification is performed at a module level. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference> wherein individual files are extracted from said modules and individual file names are modified by reference to version information received for the module as a whole. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the file name of a data section is used to mark for deletion a redundant version of a data section. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said receiver is a broadcast receiver and the received data comprises DSM-CC (Digital Storage Media-Command and Control) standard modules. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A receiver apparatus for receiving a signal comprising a periodically repeated plurality of data sections, said receiver including storage means for caching the data sections included in the signal, wherein said storage means incorporates a file management mechanism based on file names, each data section being received under a corresponding file name, the receiver further including means comprises means for modifying received file names to distinguish between previous or subsequent versions of the same data sections of the signal that are stored in said storage means. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said modifying means is arranged to append a version number of the data section to the received file name of the data section before it is added to the cache. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein data sections are received with associated version information, said information being used by the modifying means to determine the modification of the file name. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein the storage means comprises a local hard drive. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> arranged to receive the data sections in the form of modules, each module comprising a group of one or more files. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the storage means is arranged to manipulate groups of files using sub-directories. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said modifying means is arranged to perform said file name modification at a module level. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said file means is arranged to extract individual files from said modules and said modifying means is arranged to modify individual file names by reference to version information received for the module as a whole. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein the file name of a data section is used to mark for deletion a redundant version of a data section. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said receiver is a broadcast receiver and the received data comprises DSM-CC (Digital Storage Media-Command and Control) standard modules.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002432A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002432A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002432A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
