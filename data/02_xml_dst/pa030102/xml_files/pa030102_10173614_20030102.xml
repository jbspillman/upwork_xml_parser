<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005228A1-20030102-D00000.TIF SYSTEM "US20030005228A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00001.TIF SYSTEM "US20030005228A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00002.TIF SYSTEM "US20030005228A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00003.TIF SYSTEM "US20030005228A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00004.TIF SYSTEM "US20030005228A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00005.TIF SYSTEM "US20030005228A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00006.TIF SYSTEM "US20030005228A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005228A1-20030102-D00007.TIF SYSTEM "US20030005228A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005228</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10173614</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020619</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>121000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>130000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Dynamic multi-level cache manager</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60298913</doc-number>
<document-date>20010619</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Frankie</given-name>
<middle-name>Chibun</middle-name>
<family-name>Wong</family-name>
</name>
<residence>
<residence-non-us>
<city>Pickering</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Thomas</given-name>
<middle-name>Teiping</middle-name>
<family-name>Liu</family-name>
</name>
<residence>
<residence-non-us>
<city>Markham</city>
<country-code>CA</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Gowling Lafleur Henderson LLP</name-1>
<name-2></name-2>
<address>
<address-1>Commerce Court West, Suite 4900,</address-1>
<city>Toronto</city>
<state>ON</state>
<postalcode>M5L 1J3</postalcode>
<country>
<country-code>CA</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of caching data in a multi-processor computing environment, involves the steps of receiving from one of a plurality of network clients a request for a data item; establishing a private cache uniquely associating with the network client; associating the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and updating the private cache with the requested data item. In one aspect, the shared cache includes a subset of a store of dynamically-variable data, and the method also involves storing in the shared cache a data update received from one of the network clients; receiving from another of the network clients a request for an item of the variable data; and updating the private cache of the one network client with the update data and the requested data item. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a multiprocessor caching system. In particular, the present invention relates to a method and apparatus for caching dynamically-changing data in a multiprocessor environment. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Multiprocessor computing systems typically use a caching server disposed between the processors and a common file server to improve system performance. For instance, to improve access by client terminals to HTML servers in a World Wide Web environment, an enterprise uses a web server for caching HMTL data requested by all of the enterprise&apos;s client terminals. In addition, each client terminal is equipped with a dedicated software cache which caches the HTML data requested by the client terminal. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This approach increases system performance since a subsequent request by a client terminal for static HTML data previously requested from an HTML server can be satisfied locally by accessing either the terminal&apos;s dedicated cache or the web server cache, without having to request the data again from the HTML server. However, the conventional caching server cannot offer improved system performance for client queries based on dynamically-changing data, since the caching server cannot determine if the data upon which a previous query was based has changed. Instead, the conventional web caching server accesses web search engines to satisfy client data queries based on dynamically changing data. Still, web search engines typically satisfy search queries by maintaining and periodically updating a database of web server content. Consequently, web search engines frequently return search results which consists of pointers to data which has long since expired. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Attempts have been made to improve the performance of multi-processor computing systems in respect of dynamically-changing data. For instance, Gannon (U.S. Pat No. 5,265,232) discloses a multiple processor caching system which includes a storage controller, a cross-invalidate directory stored in the storage controller, and a number of processors in communication with the storage controller. Each processor has its own private L1 store-through cache and associated L1 cache directory. The system also includes a shared L2 cache and/or a main memory. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The cross-invalidate directory has entries each associated with a respective data unit of the L2 cache and main memory. Each cross-invalidate directory entry includes a processor identifier field identifying which processor owns the associated data, and indicates whether the ownership is exclusive or public. Exclusive ownership means that only one of the processors has ownership over the data unit (ie. the identified processor can write to the data unit). Public ownership means that all of the processors have ownership over the data unit (ie. all processors can read from but not write to the data unit). </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> If one of the processors requests a change in ownership over a data unit (eg. to overwrite the data unit), the request identifies the data unit to be changed, the requesting processor and the ownership type requested. The storage controller queries the directory for the processors which have ownership over the data unit, and transmits a request to the identified processors to terminate their respective ownerships over the data unit, both in the L1 and the L2 cache. Each processor which receives the request updates their respective L1 cache directory to indicate that the data unit is no longer available in their respective L1 cache, and then signals the storage controller that the processor has terminated its ownership over the data unit. Once all ownership over the data unit has terminated, the storage controller updates the cross-invalidate directory to reflect the new ownership of the data unit, and then modifies the data unit in the L2 cache and main memory as requested by the requesting processor. The other processors must then access the L2 cache or main memory to obtain a copy of the modified data unit (copying same into their respective L1 cache). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Mackenthun (U.S. Pat. No. 6,122,711) discloses a dual cluster multi-processing system which includes a pair of multi-processing clusters interconnected with a main memory and a system controller over a local area network. Each cluster includes a number of processors each having a dedicated store-through cache. Each cluster also includes a storage controller connected to the processors. The storage controller includes a second level cache, and a database of tags. The tags include copies of the data in the first level caches of the processors which are connected to the respective storage controller. The tags also include flags which identify thc status of each cache clement (valid, modified), and the processor which &ldquo;owns&rdquo; the cache element. If a processor intends to write to its second level cache, the processor must be designated as the owner of the cache element. Only one processor can be designated as the owner of a cache element, although the owner can change. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> If a processor (eg. of the first cluster) requests access to a data element, the first storage controller checks its tag database to determine if the element is cached in the second level cache and, if so, if the data in the cached element is valid. If the cached element is present and valid, the first storage controller retrieves the cached element for the processor from the second level cache. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> However, if the cached element is not present, or is not valid, the second storage controller checks its tag database to determine if it has a valid cached copy of the data element. If the second storage controller does not have a cached copy of the data element, the data is retrieved from the main memory and stored in the second level cache of the first storage controller. The first storage controller then updates its tag database to indicate that the first storage controller is the owner of the cache element, and provides the processor with the cached element. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> On the other hand, if the second storage controller does have a valid cached copy of the data element, the second storage controller transmits the cached element to the first storage controller, and then invalidates its own copy of the cached element by updating the appropriate flag in its tag database. The first storage controller then updates its tag database to indicate that the first storage controller is the owner of the cache element, and provides the processor with the cached element. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> If the processor of the first cluster subsequently modifies the cached element, the first storage controller keeps a copy of the modified cached element in its second level cache, and then updates its tag database to indicate that the cached data is different from the data stored in the main memory. If an operator subsequently decides to remove one of the clusters from the system, the system controller retrieves from the first storage controller all second level cache elements which are owned by the first storage controller and whose corresponding tag indicates that the cached data is different from the data stored in the main memory. The system controller then stores the retrieved data in the main memory. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Although both Gannon and Mackenthun are able to offer some improvement in system performance in respect of dynamically-changing data, the performance improvement is limited by the need for a centralized storage controller which controls access by the processors to the shared data. In both solutions, a write request must be acted upon by the storage controller before access to the shared data is granted. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Further, both solutions are unable to provide any improvement in system performance for network clients making similar data queries based on the dynamically-changing data, since the caches can only mirror the contents of the main system memory. These limitations render both solutions inadequate for widely-distributed multi-processing environments, such as World Wide Web computing. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Accordingly, there remains a need for a computing solution which can enhance system performance in respect of dynamically-changing data in a widely-distributed multi-processing environment. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to a first aspect of the present invention, there is provided a method of caching data, which involves the steps of: </paragraph>
<paragraph id="P-0016" lvl="2"><number>&lsqb;0016&rsqb;</number> receiving from one of a number of network clients a request for a data item; </paragraph>
<paragraph id="P-0017" lvl="2"><number>&lsqb;0017&rsqb;</number> creating a private cache uniquely associated with the network client; </paragraph>
<paragraph id="P-0018" lvl="2"><number>&lsqb;0018&rsqb;</number> initiating association of the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and </paragraph>
<paragraph id="P-0019" lvl="2"><number>&lsqb;0019&rsqb;</number> updating the private cache with the requested data item. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to a second aspect of the present invention, there is provided a caching server which includes: </paragraph>
<paragraph id="P-0021" lvl="2"><number>&lsqb;0021&rsqb;</number> receiving means for receiving from one of a number of network clients a request for a data item; </paragraph>
<paragraph id="P-0022" lvl="2"><number>&lsqb;0022&rsqb;</number> cache establishing means in communication with the receiving means for creating a private cache uniquely associated with the one network client; </paragraph>
<paragraph id="P-0023" lvl="2"><number>&lsqb;0023&rsqb;</number> cache associating means in communication with the cache establishing means for initiating association of the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and </paragraph>
<paragraph id="P-0024" lvl="2"><number>&lsqb;0024&rsqb;</number> updating means for updating the private cache with the requested data item. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> According to a third aspect of the present invention, there is provided a method of caching dynamically-variable data, which involves the steps of: </paragraph>
<paragraph id="P-0026" lvl="2"><number>&lsqb;0026&rsqb;</number> maintaining a store of dynamically-variable data and a shared cache, the shared cache being associated with a plurality of network clients and including a subset of the data store; </paragraph>
<paragraph id="P-0027" lvl="2"><number>&lsqb;0027&rsqb;</number> receiving from one of the network clients a data update to the shared cache, and storing the updated data in at least the shared cache; </paragraph>
<paragraph id="P-0028" lvl="2"><number>&lsqb;0028&rsqb;</number> receiving from one other of the network clients a request for an item of the variable data; and </paragraph>
<paragraph id="P-0029" lvl="2"><number>&lsqb;0029&rsqb;</number> initiating updating of a private cache associated with the one other network client, the private cache being uniquely associated with the one other network client and including a respective portion of the data subset, the data portion including the requested data item and cache data corresponding to the updated data. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to a fourth aspect of the present invention, there is provided a caching server which includes: </paragraph>
<paragraph id="P-0031" lvl="2"><number>&lsqb;0031&rsqb;</number> a shared cache associated with a plurality of network clients; </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> data update means in communication with the shared cache for receiving from one of the network clients a data update to the shared cache, and storing the updated data in at least the shared cache; </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> receiving means for receiving from one other of the network clients a request for an item of the variable data; and </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> updating means for updating a private cache associated with the one other network client, the private cache being uniquely associated with the one other network client and including a respective portion of the data subset, the data portion including the requested data item and cache data corresponding to the updated data. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> According to a fifth aspect of the present invention, there is provided a method of caching dynamically-variable data, which involves the steps of: </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> maintaining a store of dynamically-variable data, the data store including one of application data, and user session data; </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> dynamically establishing a first level cache and a second level cache in response to a request for the stored data, the caches caching data comprising a subset of the stored data; and </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> dynamically removing at least one of the caches after invalidation thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The present invention will now be described, by way of example only, with reference to the accompanying drawings, in which: </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic view of the multi-processor computer system, according to a first aspect of thc present invention, depicting the application server, the network clients, the primary caching servers and the secondary caching server; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schematic view of one of the primary caching servers depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic view of the secondary caching server depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart which provides a general overview of the method of operation of the multi-processor computing system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart which depicts the method for allocating private and shared caches with the multi-processor computing system, and for reading data from the caches; and </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>together comprise a flowchart which depicts the method for updating and refreshing data in the private and shared caches. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> One embodiment of a multi-processor computing system is shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown, the multi-processor computing system, denoted generally as <highlight><bold>100</bold></highlight>, comprises an application server <highlight><bold>102</bold></highlight>, a number of network clients <highlight><bold>104</bold></highlight>, a pair of primary caching servers <highlight><bold>200</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>200</bold></highlight><highlight><italic>b</italic></highlight>, a secondary caching server <highlight><bold>300</bold></highlight>, and a network <highlight><bold>106</bold></highlight> interconnecting the application server <highlight><bold>102</bold></highlight>, the network clients <highlight><bold>104</bold></highlight> and the caching servers <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight>. Although the multi-processor computing system <highlight><bold>100</bold></highlight> is shown comprising a single application server <highlight><bold>102</bold></highlight>, a pair of primary caching servers <highlight><bold>200</bold></highlight>, and a single secondary caching server <highlight><bold>300</bold></highlight>, the computing system <highlight><bold>100</bold></highlight> may include any number of application servers <highlight><bold>102</bold></highlight> and caching servers <highlight><bold>200</bold></highlight>, <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Typically, the network <highlight><bold>106</bold></highlight> is a wide-area network, such as the Internet, however the network <highlight><bold>106</bold></highlight> may also be an enterprise local area network. Further, the network <highlight><bold>106</bold></highlight> typically comprises a wired network, however the network <highlight><bold>106</bold></highlight> may also comprise a wireless network or a combination of wired and wireless networks. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The application server <highlight><bold>102</bold></highlight> is implemented as a computer server, and is configured with application software and associated application data accessible by the network clients <highlight><bold>104</bold></highlight> over the network <highlight><bold>106</bold></highlight>. Typically, the application server <highlight><bold>102</bold></highlight> is implemented as an HTML server which is configured with HTML pages and associated data, accessible by the network clients <highlight><bold>104</bold></highlight> over the Internet <highlight><bold>106</bold></highlight>. However, it should be understood that the application server <highlight><bold>102</bold></highlight> need not be implemented as an HTML server, but may be configured to provide the network clients <highlight><bold>104</bold></highlight> with other forms of data. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Each primary caching server <highlight><bold>200</bold></highlight> is shown connecting a number of the network clients <highlight><bold>104</bold></highlight> to the network <highlight><bold>106</bold></highlight>. Typically, the network clients <highlight><bold>104</bold></highlight> associated with each primary caching server <highlight><bold>200</bold></highlight> are related. For instance, the network clients <highlight><bold>104</bold></highlight> associated with the first primary caching server <highlight><bold>200</bold></highlight><highlight><italic>a </italic></highlight>are typically affiliated with one enterprise, and the network clients <highlight><bold>104</bold></highlight> associated with the second primary caching server <highlight><bold>200</bold></highlight> are affiliated with another enterprise. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Preferably, each primary caching server <highlight><bold>200</bold></highlight> is configured as a web server, and is connected to the network <highlight><bold>106</bold></highlight> via an enterprise firewall (not shown) or proxy server, to thereby provide the associated network clients <highlight><bold>104</bold></highlight> with secure access to the HTML server <highlight><bold>102</bold></highlight> via the Internet. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the primary caching server <highlight><bold>200</bold></highlight> includes a data processing system <highlight><bold>202</bold></highlight>, and a network interface <highlight><bold>204</bold></highlight> for interfacing the data processing system <highlight><bold>202</bold></highlight> to the network <highlight><bold>106</bold></highlight>. The data processing system <highlight><bold>202</bold></highlight> includes a non-volatile memory (ROM) <highlight><bold>206</bold></highlight>, a volatile memory (RAM) <highlight><bold>208</bold></highlight>, and a central processing unit (CPU) <highlight><bold>210</bold></highlight> interconnecting the ROM <highlight><bold>206</bold></highlight> and the RAM <highlight><bold>208</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The ROM <highlight><bold>206</bold></highlight> may be implemented as a magnetic memory, an optical memory and/or an electronic memory. The ROM <highlight><bold>206</bold></highlight> includes processing instructions for the CPU <highlight><bold>210</bold></highlight> which, when loaded into the RAM <highlight><bold>208</bold></highlight>, comprises client/server connectivity software <highlight><bold>212</bold></highlight>, and primary data caching software <highlight><bold>214</bold></highlight>. The connectivity software <highlight><bold>212</bold></highlight> maintains communications channels between each network client <highlight><bold>104</bold></highlight> and the application server <highlight><bold>102</bold></highlight> in a manner well known to those of ordinary skill in the art. The connectivity software <highlight><bold>212</bold></highlight> establishes and maintains each communications channel for the life of the session between the respective network client <highlight><bold>104</bold></highlight> and the application server <highlight><bold>102</bold></highlight>, and then removes the communications channel after the respective session is terminated. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The primary data caching software <highlight><bold>214</bold></highlight> is configured to establish, maintain and manage individual private caches <highlight><bold>218</bold></highlight> for the network clients <highlight><bold>104</bold></highlight> associated with the primary caching server <highlight><bold>200</bold></highlight>. For enhanced performance preferably the primary caching software <highlight><bold>214</bold></highlight> maintains the private caches <highlight><bold>218</bold></highlight> in the RAM <highlight><bold>208</bold></highlight>, although the private caches <highlight><bold>218</bold></highlight> may also be maintained in the ROM <highlight><bold>206</bold></highlight>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Each private cache <highlight><bold>218</bold></highlight> is uniquely associated with one of the network clients <highlight><bold>104</bold></highlight>, and includes user data associated with each client-server session. Typically, the user data includes sort/filter/query meta-data defining parameters for sort, filter and/or query commands/operations issued by the user of the network client <highlight><bold>104</bold></highlight> during the life of the client-server session. Additionally, the user data typically includes the results of such commands/operations. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> As shown, the primary data caching software <highlight><bold>214</bold></highlight> includes receiving means <highlight><bold>220</bold></highlight>, cache establishing means <highlight><bold>222</bold></highlight>, and updating means <highlight><bold>224</bold></highlight>. The receiving means <highlight><bold>220</bold></highlight> is configured to receive from the network clients <highlight><bold>104</bold></highlight> a request for application data. The cache establishing means <highlight><bold>222</bold></highlight> is in communication with th receiving means <highlight><bold>220</bold></highlight>, and is configured to create a private cache <highlight><bold>218</bold></highlight> uniquely associated with each network client <highlight><bold>104</bold></highlight> requesting application data. The updating means <highlight><bold>224</bold></highlight> is configured to update the private cache <highlight><bold>218</bold></highlight> with the requested application data. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The secondary caching server <highlight><bold>300</bold></highlight> is a computer server, and is in communication with the application server <highlight><bold>102</bold></highlight> over the network <highlight><bold>106</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the secondary caching server <highlight><bold>300</bold></highlight> includes a data processing system <highlight><bold>302</bold></highlight>, and a network interface <highlight><bold>304</bold></highlight> for interfacing the data processing system <highlight><bold>302</bold></highlight> to the network <highlight><bold>106</bold></highlight>. The data processing system <highlight><bold>302</bold></highlight> includes a non-volatile memory (ROM) <highlight><bold>306</bold></highlight>, a volatile memory (RAM) <highlight><bold>308</bold></highlight>, and a central processing unit (CPU) <highlight><bold>310</bold></highlight> interconnecting the ROM <highlight><bold>306</bold></highlight> and the RAM <highlight><bold>308</bold></highlight>. The ROM <highlight><bold>306</bold></highlight> may be implemented as a magnetic memory, an optical memory and/or an electronic memory. The ROM <highlight><bold>306</bold></highlight> includes processing instructions for the CPU <highlight><bold>310</bold></highlight> which, when loaded into the RAM <highlight><bold>308</bold></highlight>, comprises secondary data caching software <highlight><bold>314</bold></highlight>, and optionally a data comparator <highlight><bold>316</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The secondary data caching software <highlight><bold>314</bold></highlight> establishes, maintains and manages one or more shared caches <highlight><bold>320</bold></highlight> for the network clients <highlight><bold>104</bold></highlight> accessing data from the application server <highlight><bold>102</bold></highlight>. Each shared cache <highlight><bold>320</bold></highlight> is associated with the private caches <highlight><bold>216</bold></highlight> managed by a respective one of the primary caching servers <highlight><bold>200</bold></highlight>, and includes a subset of the application data maintained in the application server <highlight><bold>102</bold></highlight>. The shared cache data also includes sort/filter/query meta-data defining parameters for sort, filter and/or query commands/operations issued by the users of the network clients <highlight><bold>104</bold></highlight> of the associated primary caching server <highlight><bold>200</bold></highlight>. Additionally, the shared cache data includes the results of the commands/operations. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Typically, the secondary data caching software <highlight><bold>314</bold></highlight> establishes a separate shared cache <highlight><bold>320</bold></highlight> for each sort/filter/query command. Accordingly, to assist in the management of the shared caches <highlight><bold>320</bold></highlight>, the secondary data caching software <highlight><bold>314</bold></highlight> groups together the shared caches <highlight><bold>320</bold></highlight> associated with each primary caching server <highlight><bold>200</bold></highlight>, and maintains link lists <highlight><bold>322</bold></highlight> each pointing to a separate group of the shared caches <highlight><bold>320</bold></highlight>. By associating each primary caching server <highlight><bold>200</bold></highlight> with a respective one of the link lists <highlight><bold>322</bold></highlight>, different primary caching servers <highlight><bold>200</bold></highlight> can use the same &ldquo;name&rdquo; for different shared caches <highlight><bold>320</bold></highlight>, without conflict. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> As shown, for enhanced performance preferably the secondary caching software <highlight><bold>314</bold></highlight> maintains the shared caches <highlight><bold>320</bold></highlight> and the link lists <highlight><bold>322</bold></highlight> in the RAM <highlight><bold>308</bold></highlight>, although the shared caches <highlight><bold>320</bold></highlight> and the link lists <highlight><bold>322</bold></highlight> may also be maintained in the ROM <highlight><bold>306</bold></highlight>. As will be discussed below, the secondary caching server <highlight><bold>300</bold></highlight> uses the shared data cached in the shared caches <highlight><bold>320</bold></highlight> to enhance system performance for similar or identical sort/filter/query commands issued to the application server <highlight><bold>102</bold></highlight> by different network clients <highlight><bold>104</bold></highlight>. Also, to further enhance system performance, the primary caching server <highlight><bold>200</bold></highlight> copies from the shared caches <highlight><bold>320</bold></highlight> into each private cache <highlight><bold>218</bold></highlight> the son/filter/query commands previously issued by the associated network client <highlight><bold>104</bold></highlight>, in addition to the results of these commands. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> As shown, the secondary data caching software <highlight><bold>314</bold></highlight> includes receiving means <highlight><bold>324</bold></highlight>, data update means <highlight><bold>326</bold></highlight>, cache associating means <highlight><bold>328</bold></highlight>, and updating means <highlight><bold>330</bold></highlight>. The receiving means <highlight><bold>324</bold></highlight> is configured to receive a request initiated by the network clients <highlight><bold>104</bold></highlight> for application data. The data update means <highlight><bold>326</bold></highlight> is configured to receive from the network clients <highlight><bold>104</bold></highlight> a data update for one of the shared caches <highlight><bold>320</bold></highlight>, and to store the updated data in the shared cache <highlight><bold>320</bold></highlight> and optionally in the application server <highlight><bold>102</bold></highlight>. The cache associating means <highlight><bold>328</bold></highlight> is in communication with the primary caching server <highlight><bold>200</bold></highlight>, and is configured to associate each private cache <highlight><bold>218</bold></highlight> created by the primary caching server <highlight><bold>200</bold></highlight> with one of the shared caches <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The updating means <highlight><bold>330</bold></highlight> is configured to copy application data from the application server <highlight><bold>102</bold></highlight> into the shared cache <highlight><bold>320</bold></highlight>, and to signal the primary caching server <highlight><bold>200</bold></highlight> to copy the data from he shared cache <highlight><bold>320</bold></highlight>, to thereby update tie private caches <highlight><bold>218</bold></highlight> with the data requested by the associated network client <highlight><bold>104</bold></highlight>. Preferably, the updating means <highlight><bold>330</bold></highlight> includes a data copier <highlight><bold>318</bold></highlight> which maintains an archive of each sort/filter/query command issued to the secondary data caching software <highlight><bold>314</bold></highlight>. Since the data copier <highlight><bold>318</bold></highlight> is optional, the shared cache <highlight><bold>320</bold></highlight> optionally includes a data copier interface to make use of the data copier <highlight><bold>318</bold></highlight>. The secondary caching server <highlight><bold>300</bold></highlight> uses the data copier <highlight><bold>318</bold></highlight> to perform partial or fall refreshes of the data stored in the shared cache <highlight><bold>330</bold></highlight>. Further, in the event that the shared cache <highlight><bold>320</bold></highlight> is destroyed inadvertently (eg. as a result of a system failure) or deliberately (eg. as a result of a termination command issued by the applications software), the secondary caching server <highlight><bold>300</bold></highlight> invokes the data copier <highlight><bold>318</bold></highlight> to rebuild the contents of the shared cache <highlight><bold>320</bold></highlight> by re-issuing the commands previously issued </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The data comparator <highlight><bold>316</bold></highlight> is an optional applications program interface (API) to an external software routine which defines the mechanism by which the secondary caching server <highlight><bold>300</bold></highlight> can process sort/filter/query commands issued by the network clients <highlight><bold>104</bold></highlight> over the application data. For instance, although the mechanism by which sort commands can be implemented in respective to text data is well known, the mechanism by which sort or filter commands can be implemented in respect to audio or visual data files will vary in accordance with the form of the data files. The data comparator <highlight><bold>316</bold></highlight> allows the secondary caching server <highlight><bold>300</bold></highlight> to make calls to software routines (developed by applications programmers) tailored to the application data contained in the application server <highlight><bold>102</bold></highlight>. As will be apparent, the use of the data comparator <highlight><bold>316</bold></highlight> allows the secondary caching server <highlight><bold>300</bold></highlight> to process sort/filter/query commands without requiring that the routines necessary for processing these command be defined at the time the secondary caching server <highlight><bold>300</bold></highlight> is deployed. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The operation of the multi-processor computing system <highlight><bold>100</bold></highlight> will now be described generally with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, and then in detail with reference to <cross-reference target="DRAWINGS">FIGS. 5 and 6</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, at step <highlight><bold>400</bold></highlight> the application server <highlight><bold>102</bold></highlight> maintains a store of dynamically-variable application data. The primary caching server <highlight><bold>200</bold></highlight> also allocates a dedicated private cache <highlight><bold>218</bold></highlight> for each network client <highlight><bold>104</bold></highlight> as needed, and the secondary caching server <highlight><bold>300</bold></highlight> creates a shared cache <highlight><bold>320</bold></highlight> for the private caches <highlight><bold>218</bold></highlight>. The shared cache <highlight><bold>320</bold></highlight> includes a subset of the dynamically-variable application data, and each private cache <highlight><bold>218</bold></highlight> includes a portion of the data cached in the shared cache <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> If the primary caching server <highlight><bold>200</bold></highlight> receives a data update from one of the network clients <highlight><bold>104</bold></highlight>, the primary caching server <highlight><bold>200</bold></highlight> passes the data update to the secondary caching server <highlight><bold>300</bold></highlight>. The secondary caching server <highlight><bold>300</bold></highlight> stores the data update in the application data store and in the shared cache <highlight><bold>320</bold></highlight>, at step <highlight><bold>402</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> If, at step <highlight><bold>404</bold></highlight>, the primary caching server <highlight><bold>200</bold></highlight> receives from one of the network clients <highlight><bold>104</bold></highlight> a request for the application data, at step <highlight><bold>406</bold></highlight> the primary caching server <highlight><bold>200</bold></highlight> determines whether a private cache <highlight><bold>218</bold></highlight> has been established for the network client <highlight><bold>104</bold></highlight> which requested the application data. If no private cache <highlight><bold>218</bold></highlight> exists for the network client <highlight><bold>104</bold></highlight>, the primary caching server <highlight><bold>200</bold></highlight> creates the private cache <highlight><bold>218</bold></highlight> for the network client <highlight><bold>104</bold></highlight>, at step <highlight><bold>408</bold></highlight>, and the secondary caching server <highlight><bold>300</bold></highlight> associates the private cache <highlight><bold>218</bold></highlight> with the shared cache <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> At step <highlight><bold>410</bold></highlight>, the primary caching server <highlight><bold>200</bold></highlight> determines whether the requested data is stored in the private cache <highlight><bold>218</bold></highlight> of the network client <highlight><bold>104</bold></highlight> which requested the application data. If the requested data is stored in the private cache <highlight><bold>218</bold></highlight>, and is not out of date, the primary caching server <highlight><bold>200</bold></highlight> signals the network client <highlight><bold>104</bold></highlight> to copy the requested data from the private cache <highlight><bold>218</bold></highlight>, at step <highlight><bold>412</bold></highlight>. On the other hand, if the requested data is not stored in the private cache <highlight><bold>218</bold></highlight>, or the data is out of date, at step <highlight><bold>414</bold></highlight> the secondary caching server <highlight><bold>300</bold></highlight> determines whether the shared cache <highlight><bold>320</bold></highlight> associated with the private cache <highlight><bold>218</bold></highlight> of the requesting network client <highlight><bold>104</bold></highlight> includes the requested application data. If the requested data is stored in the shared cache <highlight><bold>218</bold></highlight>, the secondary caching server <highlight><bold>300</bold></highlight> responds to the primary caching server <highlight><bold>200</bold></highlight> with the requested data from the shared cache <highlight><bold>320</bold></highlight>, at step <highlight><bold>416</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> On the other hand, if the requested data is not stored in the shared cache <highlight><bold>320</bold></highlight>, at step <highlight><bold>418</bold></highlight> the secondary caching server <highlight><bold>300</bold></highlight> requests the application data from the application server <highlight><bold>102</bold></highlight>. The secondary caching server <highlight><bold>300</bold></highlight> then stores the application data in the shared cache <highlight><bold>320</bold></highlight>, at step <highlight><bold>420</bold></highlight>. The secondary caching server <highlight><bold>300</bold></highlight> responds to the primary caching server <highlight><bold>200</bold></highlight> with the requested application data, at step <highlight><bold>422</bold></highlight>, including any data already stored in the private cache <highlight><bold>218</bold></highlight> which is out-of-date with respect to the corresponding data stored in the shared cache <highlight><bold>320</bold></highlight>. The primary caching server <highlight><bold>200</bold></highlight> then updates the private cache <highlight><bold>218</bold></highlight> of the requesting network client <highlight><bold>104</bold></highlight> with the data received from the secondary caching server <highlight><bold>300</bold></highlight>, and signals the network client <highlight><bold>104</bold></highlight> to copy the requested data from the private cache <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The method for allocating the private caches <highlight><bold>218</bold></highlight> and the shared caches <highlight><bold>320</bold></highlight> within the multi-processor computing system <highlight><bold>100</bold></highlight>, and for reading data from the caches <highlight><bold>218</bold></highlight>, <highlight><bold>320</bold></highlight> will now be described in detail with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. If at step <highlight><bold>500</bold></highlight>, a network client <highlight><bold>104</bold></highlight> passes to the receiving means <highlight><bold>220</bold></highlight> of the primary caching server <highlight><bold>200</bold></highlight> a request for application data from the application server <highlight><bold>102</bold></highlight>, at step <highlight><bold>502</bold></highlight> the primary caching server <highlight><bold>200</bold></highlight> determines whether a private cache <highlight><bold>218</bold></highlight> exists for the network client <highlight><bold>104</bold></highlight>. A private cache <highlight><bold>218</bold></highlight> for the network client <highlight><bold>104</bold></highlight> will not exist if the network client <highlight><bold>104</bold></highlight> had not previously initiated a session with the application server <highlight><bold>102</bold></highlight>, or if the session was terminated either intentionally or accidentally (eg. as a result of a failure of the primary caching server <highlight><bold>200</bold></highlight>). In the latter situation, the primary data caching software <highlight><bold>214</bold></highlight> removes the private cache <highlight><bold>218</bold></highlight> after the primary caching server <highlight><bold>200</bold></highlight> detects that user session has been terminated. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> If no private cache <highlight><bold>218</bold></highlight> exists for the network client <highlight><bold>104</bold></highlight>, at step <highlight><bold>504</bold></highlight> the cache establishing means <highlight><bold>222</bold></highlight> of the primary caching server <highlight><bold>200</bold></highlight> creates a private cache <highlight><bold>218</bold></highlight> in the RAM <highlight><bold>208</bold></highlight>, and uniquely associates the newly-created private cache <highlight><bold>218</bold></highlight> with the network client <highlight><bold>104</bold></highlight>. The primary caching server <highlight><bold>200</bold></highlight> then requests that the secondary caching server <highlight><bold>300</bold></highlight> associate a shared cache <highlight><bold>320</bold></highlight> with the newly-created private cache <highlight><bold>218</bold></highlight>, at step <highlight><bold>506</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> At step <highlight><bold>508</bold></highlight>, the cache associating means <highlight><bold>328</bold></highlight> of the secondary caching server <highlight><bold>300</bold></highlight> determines whether a shared cache <highlight><bold>320</bold></highlight> exists for the private cache <highlight><bold>218</bold></highlight> of the network client <highlight><bold>104</bold></highlight>. If no shared cache <highlight><bold>320</bold></highlight> exists, at step <highlight><bold>510</bold></highlight> the cache associating means <highlight><bold>328</bold></highlight> creates a shared cache <highlight><bold>320</bold></highlight> in the RAM <highlight><bold>308</bold></highlight>. To do so, the cache associating means <highlight><bold>328</bold></highlight> defines the data comparator <highlight><bold>316</bold></highlight> (if desired), and then defines the following meta-data variables: </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> Last Access Time (LAT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> Last Refresh Time (LRT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> Last Change Time (LCT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In addition to the foregoing meta-data variables, the cache associating means <highlight><bold>328</bold></highlight> sets the Keep Idle Time parameter and the Refresh Interval parameter. As will become apparent, the secondary data caching software <highlight><bold>314</bold></highlight> uses these variables and parameters to determine when the shared cache <highlight><bold>320</bold></highlight> and/or data contained therein has expired. For instance, to free up system resources which are no longer needed, the secondary data caching software <highlight><bold>314</bold></highlight> removes a shared cache <highlight><bold>320</bold></highlight> from the ROM <highlight><bold>308</bold></highlight> and the link list <highlight><bold>322</bold></highlight> if: </paragraph>
<paragraph id="P-0074" lvl="2"><number>&lsqb;0074&rsqb;</number> Last Access Time (LAT)&plus;Keep Idle Time&gt;Current Time (CT) </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> At step <highlight><bold>512</bold></highlight>, the cache associating means <highlight><bold>328</bold></highlight> assigns the shared cache <highlight><bold>320</bold></highlight> to one of the link lists <highlight><bold>322</bold></highlight>, and associates the shared cache <highlight><bold>320</bold></highlight> with the private cache <highlight><bold>218</bold></highlight> of the network client <highlight><bold>104</bold></highlight> which requested the application data. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> If at step <highlight><bold>508</bold></highlight> the secondary caching server <highlight><bold>300</bold></highlight> determined that a shared cache <highlight><bold>320</bold></highlight> existed for the private cache <highlight><bold>218</bold></highlight> of the network client <highlight><bold>104</bold></highlight>, at step <highlight><bold>514</bold></highlight> the primary data caching software <highlight><bold>214</bold></highlight> queries the private cache <highlight><bold>218</bold></highlight> associated with the network client <highlight><bold>104</bold></highlight> to determine whether the private cache <highlight><bold>218</bold></highlight> contains the requested application data and the application data in the private cache <highlight><bold>218</bold></highlight> is not out of date with respect to the shared cache data. Typically, the primary data caching software <highlight><bold>214</bold></highlight> will determine whether the private cache data is out of date by comparing the date and/or size and/or checksum values of the data stored in the shared cache <highlight><bold>320</bold></highlight> against the corresponding parameters of the data stored in the private cache <highlight><bold>218</bold></highlight>. However, other mechanisms can be used, including checking the data stored in the shared cache <highlight><bold>320</bold></highlight> for any set archive bits. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> If the private cache <highlight><bold>218</bold></highlight> contains the requested application data and the application data in the private cache <highlight><bold>218</bold></highlight> is not out of date, at step <highlight><bold>516</bold></highlight> the primary data caching software <highlight><bold>214</bold></highlight> responds to the query of the network client <highlight><bold>104</bold></highlight> with the requested data from the private cache <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> On other hand, if the private cache <highlight><bold>218</bold></highlight> does not contain the requested application data or the application data in the private cache <highlight><bold>218</bold></highlight> is out of date, the primary data caching software <highlight><bold>214</bold></highlight> queries the second caching server <highlight><bold>300</bold></highlight> for the requested application data. At step <highlight><bold>518</bold></highlight>, the secondary data caching software <highlight><bold>314</bold></highlight> (or the data comparator <highlight><bold>316</bold></highlight>, if defined) queries the shared cache <highlight><bold>320</bold></highlight> associated with the network client&apos;s private cache <highlight><bold>218</bold></highlight> for the requested application data, and then sets: </paragraph>
<paragraph id="P-0079" lvl="2"><number>&lsqb;0079&rsqb;</number> Last Access Time (LAT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> If the secondary data caching software <highlight><bold>314</bold></highlight> (or the data comparator <highlight><bold>316</bold></highlight>, if defined) determines that the shared cache <highlight><bold>320</bold></highlight> includes the requested application data, at step <highlight><bold>520</bold></highlight> the updating means <highlight><bold>330</bold></highlight> of the secondary data caching software <highlight><bold>314</bold></highlight> notifies the primary data caching software <highlight><bold>214</bold></highlight> that the requested data is stored in the shared cache <highlight><bold>320</bold></highlight>, thereby signaling the primary caching server <highlight><bold>200</bold></highlight> to copy of the requested data from the shared cache <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> If the network client <highlight><bold>104</bold></highlight> issued a command which involved more than a simple query for application data (eg. required filtering and/or sorting of the application data), the updating means <highlight><bold>330</bold></highlight> stores the command in the shared cache <highlight><bold>320</bold></highlight> as meta-data, together with the results of the command. By saving both the application data command and the resulting data in the shared cache <highlight><bold>320</bold></highlight>, the secondary cache <highlight><bold>300</bold></highlight> is able to re-use the saved data in satisfying queries issued subsequently by other network clients <highlight><bold>104</bold></highlight>. As a result, the secondary cache <highlight><bold>300</bold></highlight> is able to improve system performance for frequently-issued application data commands, even if the commands are issued by different network clients <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> If at step <highlight><bold>518</bold></highlight>, the secondary data caching software <highlight><bold>314</bold></highlight> determines that the shared cache <highlight><bold>320</bold></highlight> does not include the requested application data, at step <highlight><bold>522</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> (or the data comparator <highlight><bold>316</bold></highlight>, if defined) issues a query to the application server <highlight><bold>102</bold></highlight> for the requested application data. Upon receipt of the requested application data from the application server <highlight><bold>102</bold></highlight>, at step <highlight><bold>524</bold></highlight> the data copier <highlight><bold>318</bold></highlight> stores the returned application data in the shared cache <highlight><bold>320</bold></highlight>. As above, if the network client <highlight><bold>104</bold></highlight> issued a command which involved more than a simple query for application data, the data copier <highlight><bold>318</bold></highlight> stores the command in the shared cache <highlight><bold>320</bold></highlight> as meta-data, together with the results of the command. The updating means <highlight><bold>330</bold></highlight> then notifies the primary data caching software <highlight><bold>214</bold></highlight> that the requested data is stored in the shared cache <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> After the primary data caching software <highlight><bold>214</bold></highlight> is notified that the requested data is stored in the shared cache <highlight><bold>320</bold></highlight>, the updating means <highlight><bold>224</bold></highlight> of the primary data caching software <highlight><bold>214</bold></highlight> copies the requested data from the shared cache <highlight><bold>320</bold></highlight>, and saves a copy of the response and the command meta-data in the network client&apos;s private cache <highlight><bold>218</bold></highlight> at step <highlight><bold>526</bold></highlight>. The primary caching software <highlight><bold>214</bold></highlight> then responds to the query of the network client <highlight><bold>104</bold></highlight> with the saved data. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The method for updating and refreshing the data in the private caches <highlight><bold>218</bold></highlight> and the shared caches <highlight><bold>320</bold></highlight> will now be described in detail with reference to <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>6</bold></highlight><highlight><italic>b</italic></highlight>. If, at step <highlight><bold>600</bold></highlight>, a network client <highlight><bold>104</bold></highlight> passes to the receiving means <highlight><bold>220</bold></highlight> of the primary caching server <highlight><bold>200</bold></highlight> a data update for storing in the network client&apos;s private cache <highlight><bold>218</bold></highlight> and in the shared cache <highlight><bold>320</bold></highlight>, at step <highlight><bold>602</bold></highlight> the primary data caching software <highlight><bold>214</bold></highlight> of the primary caching server <highlight><bold>200</bold></highlight> saves the update data in the network client&apos;s private cache <highlight><bold>218</bold></highlight>, and then passes the update data to the secondary caching server <highlight><bold>300</bold></highlight>. Upon receipt of the update data at the secondary caching server <highlight><bold>300</bold></highlight>, at step <highlight><bold>604</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> saves the update data in the shared cache <highlight><bold>320</bold></highlight> associated with the network client&apos;s private cache <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The secondary data caching software <highlight><bold>314</bold></highlight> then updates the following meta-data variables: </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> Last Access Time (LAT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> Last Change Time (LCT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0088" lvl="7"><number>&lsqb;0088&rsqb;</number> and passes the update data over the network <highlight><bold>106</bold></highlight> for storage in the application server <highlight><bold>102</bold></highlight>. As will be apparent, a similar mechanism is followed if one of the network clients <highlight><bold>104</bold></highlight> passes a request to the secondary caching server <highlight><bold>300</bold></highlight> to remove one of the stored data items. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> If, at step <highlight><bold>606</bold></highlight>, the secondary data caching software <highlight><bold>314</bold></highlight> has received a cache refresh signal, at step <highlight><bold>608</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> determines if the shared cache <highlight><bold>320</bold></highlight> has expired. The cache refresh signal may be initiated manually by a user of one of the network clients <highlight><bold>104</bold></highlight>, automatically as a result of a refresh HTML meta-tag of a web page requested from the application server <highlight><bold>102</bold></highlight> by one of the network clients <highlight><bold>104</bold></highlight>, or automatically by the application server <highlight><bold>102</bold></highlight> when the application server <highlight><bold>102</bold></highlight> receives update data which renders the data stored in the shared cache <highlight><bold>320</bold></highlight> out of date. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The shared cache <highlight><bold>320</bold></highlight> is deemed to have expired if: </paragraph>
<paragraph id="P-0091" lvl="2"><number>&lsqb;0091&rsqb;</number> Last Change Time (LCT)&minus;Last Refresh Time (LRT)&gt;Refresh Interval, and </paragraph>
<paragraph id="P-0092" lvl="2"><number>&lsqb;0092&rsqb;</number> Last Change Time (LCT)&gt;Last Refresh Time (LRT). </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> If the shared cache <highlight><bold>320</bold></highlight> has expired, at step <highlight><bold>610</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> determines whether the shared cache <highlight><bold>320</bold></highlight> made use of the data copier <highlight><bold>318</bold></highlight>. If a data copier <highlight><bold>318</bold></highlight> was used, at step <highlight><bold>612</bold></highlight> the data copier <highlight><bold>318</bold></highlight> refreshes the shared cache <highlight><bold>320</bold></highlight> by updating any data stored therein which is out of date with respect to the data stored in the application server <highlight><bold>102</bold></highlight>. Typically, the data copier <highlight><bold>318</bold></highlight> updates the shared cache <highlight><bold>320</bold></highlight> by first comparing the date and/or size and/or checksum values of the data stored in the shared cache <highlight><bold>320</bold></highlight> against the corresponding parameters of the data stored in the application server <highlight><bold>102</bold></highlight> to determine whether the shared cache data is out of date, and then overwriting the out-of-date data in the shared cache <highlight><bold>320</bold></highlight> with the corresponding data from the application server <highlight><bold>102</bold></highlight>. Further, if the size of the stored data items is large, the data copier <highlight><bold>318</bold></highlight> can reduce the time and resources to complete an update by performing an incremental update, such as by updating only the bit sequences or records of each data item which have changed. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> On the other hand, if, at step <highlight><bold>610</bold></highlight>, the secondary data caching software <highlight><bold>314</bold></highlight> determines that the shared cache <highlight><bold>320</bold></highlight> did not make use of the data copier <highlight><bold>318</bold></highlight>, at step <highlight><bold>614</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> updates the shared cache <highlight><bold>320</bold></highlight> by overwriting the data stored in the shared cache <highlight><bold>320</bold></highlight> with the corresponding data stored in the application server <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> After the shared cache <highlight><bold>320</bold></highlight> is updated, at step <highlight><bold>616</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> updates the following meta-data variables: </paragraph>
<paragraph id="P-0096" lvl="2"><number>&lsqb;0096&rsqb;</number> Last Change Time (LCT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0097" lvl="2"><number>&lsqb;0097&rsqb;</number> Last Refresh Time (LRT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> If the shared cache <highlight><bold>320</bold></highlight> included out-of-date data which resulted from commands which involved more than a simple query for application data, at step <highlight><bold>618</bold></highlight> the secondary data caching software <highlight><bold>314</bold></highlight> re-executes the stored commands, to thereby update the saved query results. If the secondary data caching software <highlight><bold>314</bold></highlight> used the data comparator <highlight><bold>316</bold></highlight> to originally execute the data sort/filter/query command, the secondary data caching software <highlight><bold>314</bold></highlight> again makes use of the data comparator <highlight><bold>316</bold></highlight> in re-executing the stored commands. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> After the data sort/filter/query commands have been re-executed, the secondary data caching software <highlight><bold>314</bold></highlight> updates the following meta-data variable: </paragraph>
<paragraph id="P-0100" lvl="2"><number>&lsqb;0100&rsqb;</number> Last Access Time (LAT)&equals;Current Time (CT) </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> If the cache refresh was initiated at step <highlight><bold>606</bold></highlight> by an external event, such as an update to the application data, the private cache <highlight><bold>218</bold></highlight> is not updated at this time. However, if the cache refresh was initiated at step <highlight><bold>606</bold></highlight> either by a user of one of the network clients <highlight><bold>104</bold></highlight>, or as a result of a refresh HTML meta-tag of a web page requested from the application server <highlight><bold>102</bold></highlight> by one of the network clients <highlight><bold>104</bold></highlight>, the process proceeds to step <highlight><bold>622</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> At step <highlight><bold>622</bold></highlight>, the updating means <highlight><bold>330</bold></highlight> notifies the primary data caching software <highlight><bold>214</bold></highlight> that the shared cache <highlight><bold>320</bold></highlight> has been refreshed. Then, at step <highlight><bold>624</bold></highlight>, the updating means <highlight><bold>224</bold></highlight> of the primary data caching software <highlight><bold>214</bold></highlight> updates the data stored in the private cache <highlight><bold>218</bold></highlight> of the network client <highlight><bold>104</bold></highlight> which initiated the cache refresh. As above, the primary data caching software <highlight><bold>214</bold></highlight> typically updates the private cache <highlight><bold>218</bold></highlight> by comparing the date and/or size and/or checksum values of the data stored in the private cache <highlight><bold>218</bold></highlight> against the corresponding parameters of the data stored in the shared cache <highlight><bold>320</bold></highlight>, and then overwriting all of the out-of-date data in the private cache <highlight><bold>218</bold></highlight> with the corresponding data in the shared cache <highlight><bold>320</bold></highlight>. The primary caching software <highlight><bold>214</bold></highlight> then notifies the network client <highlight><bold>104</bold></highlight> that its private cache <highlight><bold>218</bold></highlight> has been updated, at step <highlight><bold>626</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Thus far in the discussion of the present invention, the secondary caching server <highlight><bold>300</bold></highlight> and the application server <highlight><bold>102</bold></highlight> have been depicted as separate computer servers. However, the secondary caching server <highlight><bold>300</bold></highlight> may be integrated with the application server <highlight><bold>102</bold></highlight> in a common computer server. Similarly, although the secondary caching server <highlight><bold>300</bold></highlight> and the primary caching server <highlight><bold>200</bold></highlight> are depicted as separate computer servers, the secondary caching server <highlight><bold>300</bold></highlight> may be integrated with the primary caching server <highlight><bold>200</bold></highlight> in a common computer server. Further, as part of a turnkey solution, the functions of the application server <highlight><bold>102</bold></highlight>, the primary caching server <highlight><bold>200</bold></highlight>, and the secondary caching server <highlight><bold>300</bold></highlight> may be provided on a single computer server. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Further, the private caches <highlight><bold>218</bold></highlight> and the shared caches <highlight><bold>320</bold></highlight> have been described thus far as including only user data, such as sort/filter/query meta-data defining parameters for sort, filter and/or query commands/operations. However, the present invention is not so limited. Rather, in one variation the primary caching server <highlight><bold>300</bold></highlight> includes session management software integrated with the primary data caching software <highlight><bold>214</bold></highlight>. The multi-processor computing system <highlight><bold>100</bold></highlight>, configured with session management middleware, operates in a manner substantially identical to that described above with reference to FIGS. <highlight><bold>4</bold></highlight> to <highlight><bold>6</bold></highlight>. However, each private cache <highlight><bold>218</bold></highlight> includes user and/or application session data unique to the session involving the associated network client <highlight><bold>104</bold></highlight>. The primary data caching software <highlight><bold>214</bold></highlight> removes session data from a private cache <highlight><bold>218</bold></highlight> if the session data has not been used for a predetermined period of time. Thc shared cache <highlight><bold>320</bold></highlight> includes a copy of all the user and application session data. If the session management middleware requires an item of session data for a user session of one of the network clients <highlight><bold>104</bold></highlight>, the primary data caching software <highlight><bold>214</bold></highlight> queries the network client&apos;s private cache <highlight><bold>218</bold></highlight> for the session data. If the session data was deleted from the network client&apos;s private cache <highlight><bold>218</bold></highlight>, the session obtains the session data from the secondary caching server <highlight><bold>300</bold></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> This variation is advantageous since it allows the size of session data normally stored on the application server <highlight><bold>102</bold></highlight> to be reduced. Consequently, resource contention within the application server <highlight><bold>102</bold></highlight> is also reduced. Furthermore, since the secondary caching server <highlight><bold>300</bold></highlight> maintains a copy of all the user and application session data, a user session can be redirected to an alternate or backup primary caching server <highlight><bold>200</bold></highlight> if one of the primary caching servers <highlight><bold>200</bold></highlight> becomes overloaded or fails. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> To assess the performance of the present invention, a benchmark test was developed which simulated a price catalog for approximately 20,000 products of a supplier. The application server <highlight><bold>102</bold></highlight> was collocated with the secondary caching server <highlight><bold>300</bold></highlight>. The application software on the application server <highlight><bold>102</bold></highlight> was configured to allow a customer to access a subset of the catalog data based on the different categories of the products (eg. price discount rates, product types, industry code). The product prices in the catalog were moderately volatile, so the catalog was refreshed every 5 to 10 minutes. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The response time of the application server <highlight><bold>1</bold></highlight>-<highlight><bold>2</bold></highlight> was measured for a non-cached system, and a system cached in accordance with the present invention. The non-cached system had a response time of 5.6 seconds for up to 250 users, and 11 seconds for up to 500 users. By interpolation, the threshold of 8 seconds would have been reached at about 375 users, when users would no longer wait for the information requested. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> In contrast, the system cached in accordance with the present invention had a response time of 0.023 seconds for up to 250 users, and 0.059 seconds for up to 500 users. The response time gains over the non-cached configuration were respectively 242&times; and 187&times;. The response time gain dropped to 15&times; at 750 users, at which time the application server <highlight><bold>102</bold></highlight> was found to be 99% busy. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> The present invention is defined by the claims appended hereto, with the foregoing description being illustrative of preferred embodiments of the invention. Those of ordinary skill may envisage certain modifications to the embodiments described herein which, although not explicitly suggested herein, do not depart from the scope of the invention, as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of caching data, which involves the steps of: 
<claim-text>receiving from one of a plurality of network clients a request for a data item; </claim-text>
<claim-text>creating a private cache uniquely associated with the one network client; </claim-text>
<claim-text>initiating association of the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and </claim-text>
<claim-text>updating the private cache with the requested data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the private cache updating step comprises the steps of initiating updating of the shared cache in accordance with one of a refresh request from the one network client, and an event invalidating the shared cache data, and then copying a portion of the updated shared cache data into the private cache. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the shared cache caches a subset of data from a data store, and the shared cache updating step comprises deriving the data subset from the data store. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the private cache includes cache meta-data, and the private cache updating step comprises the step of deriving the data portion in accordance with the meta-data prior to the data portion copying step. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the meta-data includes data sort criteria. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the invalidating event comprises one of an expiry date of the shared cache data, a checksum value of the shared cache data, and an update to the data store. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the cache associating step comprises the steps of determining an existence of the shared cache, and re-establishing the shared cache data after destruction of the shared cache. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the data portion comprises one of application data, and user session data. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A computer-readable medium for causing a programmable computer to perform the steps of: 
<claim-text>receiving from one of a plurality of network clients a request for a data item; </claim-text>
<claim-text>creating a private cache uniquely associated with the one network client; </claim-text>
<claim-text>initiating association of the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and </claim-text>
<claim-text>updating the private cache with the requested data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A caching server for caching data, the caching server comprising: 
<claim-text>receiving means for receiving from one of a plurality of network clients a request for a data item; </claim-text>
<claim-text>cache establishing means in communication with the receiving means for creating a private cache uniquely associated with the one network client; </claim-text>
<claim-text>cache associating means in communication with the cache establishing means for initiating association of the private cache with a shared cache, the shared cache including the requested data item and being associated with a number of the network clients; and </claim-text>
<claim-text>updating means for updating the private cache with the requested data item. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method of caching dynamically-variable data, which involves the steps of: 
<claim-text>maintaining a store of dynamically-variable data and a shared cache, the shared cache being associated with a plurality of network clients and including a subset of the data store; </claim-text>
<claim-text>receiving from one of the network clients a data update to the shared cache, and storing the updated data in at least the shared cache; </claim-text>
<claim-text>receiving from one other of the network clients a request for an item of the variable data; and </claim-text>
<claim-text>initiating updating of a private cache associated with the one other network client, the private cache being uniquely associated with the one other network client and including a respective portion of the data subset, the data portion including the requested data item and cache data corresponding to the updated data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the data update receiving step comprises the step of invalidating the corresponding data in the one other private cache. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the private cache includes cached meta-data, and the private cache updating step comprises the step of deriving the data portion in accordance with the meta-data. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the meta-data includes data sort criteria. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the private cache includes one of application data, and user session data. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the maintaining step comprises the steps of determining an existence of the shared cache, and re-establishing the shared cache data after destruction of the shared cache. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the maintaining step comprises the steps of updating the shared cache in accordance with one of a refresh request from one of tee network clients, and an event invalidating the shared cache data. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the invalidating event comprises one of an expiry date of the shared cache data, a checksum value of the shared cache data, and an update from one of the network clients to the data store. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer-readable medium for causing a programmable computer to perform the steps of: 
<claim-text>maintaining a store of dynamically-variable data and a shared cache, the shared cache being associated with a plurality of network clients and including a subset of the data store; </claim-text>
<claim-text>receiving from one of the network clients a data update to the shared cache, and storing the updated data in at least the shared cache; </claim-text>
<claim-text>receiving from one other of the network clients a request for an item of the variable data; and </claim-text>
<claim-text>updating a private cache associated with the one other network client, the private cache being uniquely associated with the one other network client and including a respective portion of the data subset, the data portion including the requested data item and cache data corresponding to the updated data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A caching server for caching data, the caching server comprising: 
<claim-text>a shared cache associated with a plurality of network clients; </claim-text>
<claim-text>data update means in communication with the shared cache for receiving from one of the network clients a data update to the shared cache, and storing the updated data in at lest the shared cache; </claim-text>
<claim-text>receiving means for receiving from one other of the network clients a request for an item of the variable data; and </claim-text>
<claim-text>updating means for updating a private cache associated with the one other network client, the private cache being uniquely associated with the one other network client and including a respective portion of the data subset, the data portion including the requested data item and cache data corresponding to the updated data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method of caching dynamically-variable data, which involves the steps of: 
<claim-text>maintaining a store of dynamically-variable data, the data store including one of application data, and user session data; </claim-text>
<claim-text>dynamically establishing a first level cache and a second level cache in response to a request for the stored data, the caches caching data comprising a subset of the stored data; and </claim-text>
<claim-text>dynamically removing at least one of the caches after invalidation thereof. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the cache establishing step comprises the steps of receiving the data request from one of a plurality of network clients, associating the second level cache with the plurality of network clients, uniquely allocating the first level cache with the one network client, and associating the first level cache with the second level cache, the first level cache including cache data comprising a portion of the second level cached data. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the first level cache includes cached meta-data, and the cache establishing step comprises the step of deriving the data subset in accordance with the meta-data. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the meta-data includes data sort criteria. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the invalidation occurs after one of an expiry date of the second level cache data, a checksum value of the second level cache data, and an update from one of the network clients to the data store.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005228A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005228A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005228A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005228A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005228A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005228A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005228A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005228A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
