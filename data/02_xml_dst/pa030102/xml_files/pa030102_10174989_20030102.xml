<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002082A1-20030102-M00001.NB SYSTEM "US20030002082A1-20030102-M00001.NB" NDATA NB>
<!ENTITY US20030002082A1-20030102-M00001.TIF SYSTEM "US20030002082A1-20030102-M00001.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00000.TIF SYSTEM "US20030002082A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00001.TIF SYSTEM "US20030002082A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00002.TIF SYSTEM "US20030002082A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00003.TIF SYSTEM "US20030002082A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00004.TIF SYSTEM "US20030002082A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00005.TIF SYSTEM "US20030002082A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00006.TIF SYSTEM "US20030002082A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00007.TIF SYSTEM "US20030002082A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00008.TIF SYSTEM "US20030002082A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00009.TIF SYSTEM "US20030002082A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00010.TIF SYSTEM "US20030002082A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00011.TIF SYSTEM "US20030002082A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00012.TIF SYSTEM "US20030002082A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00013.TIF SYSTEM "US20030002082A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00014.TIF SYSTEM "US20030002082A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00015.TIF SYSTEM "US20030002082A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00016.TIF SYSTEM "US20030002082A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00017.TIF SYSTEM "US20030002082A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00018.TIF SYSTEM "US20030002082A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00019.TIF SYSTEM "US20030002082A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00020.TIF SYSTEM "US20030002082A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00021.TIF SYSTEM "US20030002082A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00022.TIF SYSTEM "US20030002082A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00023.TIF SYSTEM "US20030002082A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00024.TIF SYSTEM "US20030002082A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030002082A1-20030102-D00025.TIF SYSTEM "US20030002082A1-20030102-D00025.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002082</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10174989</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020620</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-191844</doc-number>
</priority-application-number>
<filing-date>20010625</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N001/405</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>H04N001/52</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>358</class>
<subclass>003030</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>358</class>
<subclass>003210</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>358</class>
<subclass>003220</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>358</class>
<subclass>534000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Image processing apparatus and its control method</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Hiroshi</given-name>
<family-name>Kaburagi</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>FITZPATRICK CELLA HARPER &amp; SCINTO</name-1>
<name-2></name-2>
<address>
<address-1>30 ROCKEFELLER PLAZA</address-1>
<city>NEW YORK</city>
<state>NY</state>
<postalcode>10112</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">When input N-bit multi-valued image information having density information is converted into M-bit (N&gE;M) image information and the converted image information is output, information (S signal) indicating whether or not an image conversion process is executed for one line including a pixel of interest of the multi-valued image information is generated on the basis of the multi-valued image information. Only when the S signal indicating that the image conversion process is to be skipped successively appears for a number of times equal to or larger than &ldquo;the number of lines required for the process&rdquo;&plus;1, the control is made to forcibly set the processing result of the image conversion process to be a predetermined value, and to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image data. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to an image processing apparatus for receiving N-bit multi-valued image information having density information, converting it into M-bit (N&gE;M) image information, and outputting the converted image information, and its control method and, more particularly, to an image processing apparatus which executes an image conversion process such as an average density preservation process, error diffusion process, minimized error process, or the like and its control method. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Recent digital copying machines implement advanced functions by processing images as digital information. As functions other than those of a copying machine, such copying machine can also have a printer function by establishing connection to a network, a FAX function by establishing connection to a public line, and the like. For example, digital copying machines GP55F, GP215, and the like available from Canon inc. are known. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of the arrangement of a digital copying machine, which is connected to a host computer (to be abbreviated as a &ldquo;PC&rdquo; hereinafter) via a network. Referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, reference numeral <highlight><bold>101</bold></highlight> denotes a PC; and <highlight><bold>103</bold></highlight>, a digital copying machine. The PC <highlight><bold>101</bold></highlight> and digital copying machine <highlight><bold>103</bold></highlight> are connected via a network cable <highlight><bold>102</bold></highlight>. In the digital copying machine <highlight><bold>103</bold></highlight>, reference numeral <highlight><bold>104</bold></highlight> denotes an image processor, which includes an image memory (page memory) <highlight><bold>105</bold></highlight>. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The user launches so-called DTP (Desk Top Publishing) application software on the PC <highlight><bold>101</bold></highlight> and creates or edits various documents or figures. The created document or figure is converted into a page description language (PDL, e.g., PostScript available from Adobe Systems Incorporated), and is sent as image data to the copying machine <highlight><bold>103</bold></highlight> after it is rasterized. At this time, the image data is sent as RGB luminance data, and the copying machine <highlight><bold>103</bold></highlight> that has received the image data sometimes executes luminance-density conversion, an image conversion process, or the like in some cases. However, image data normally undergoes a luminance-density conversion process, image conversion process, or the like implemented by a software process of a driver on the PC <highlight><bold>101</bold></highlight>, and is then sent. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Of course, when the PC <highlight><bold>101</bold></highlight> sends PDL data, since the PDL data must be rasterized to bitmap data, an external controller (not shown) is connected between the PC <highlight><bold>101</bold></highlight> and copying machine <highlight><bold>103</bold></highlight> to execute the aforementioned process. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> However, the prior art suffers the following problem. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Normally, when the image conversion process is executed in the driver on the PC <highlight><bold>101</bold></highlight>, since processes of an average density preservation method, error diffusion method, and the like impose heavy loads, much time is required to process the entire image, and the user must wait until a desired output is obtained. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The present invention has been made to solve the aforementioned problem, and has as its object to provide an image processing apparatus which can execute a high-speed image process by omitting some of image conversion processes that require heavy loads in accordance with the feature of an image to be processed, and its control method. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In order to achieve the above object, according to one aspect of the present invention, there is provided an image processing apparatus for receiving N-bit multi-valued image information having density information, converting the input image information into M-bit (N&gE;M) image information, and outputting the converted image information, comprising: generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of the multi-valued image information, on the basis of the multi-valued image information; and control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Also, according to one aspect of the present invention, there is provided a method of controlling an image forming apparatus which receives N-bit multi-valued image information having density information, converts the input image information into M-bit (N&gE;M) image information, and outputs the converted image information, comprising the steps of: generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of the multi-valued image information, on the basis of the multi-valued image information; and controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to one aspect of the present invention, there is provided a program for making a computer function as: generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of multi-valued image information, on the basis of the multi-valued image information; and control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> According to one aspect of the present invention, there is provided a computer readable recording medium that records a program for making a computer function as: generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of multi-valued image information, on the basis of the multi-valued image information; and control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the figures thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of the arrangement of a digital copying machine connected to a host computer (PC) via a network; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a sectional view showing the structure of a color copying machine according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> are block diagrams respectively showing image processes executed on the PC and copying machine sides; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a view for explaining line information (S signal) of a line which includes the pixel of interest; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a diagram showing the arrangement of a PWM circuit in the embodiment of the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing an example of the arrangement of a PWM circuit for each color component; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a timing chart in the PWM circuit; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram showing the arrangement of an image conversion processing circuit in the first embodiment; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> describes an arithmetic operation of an adder <highlight><bold>810</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> using program language C; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram showing the arrangement of a binarization processor <highlight><bold>801</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a block diagram showing the arrangement of an error correction unit <highlight><bold>802</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a view for explaining a process in the error correction unit <highlight><bold>802</bold></highlight>; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram showing the arrangement of a binarization result delay unit <highlight><bold>803</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows binarization results Nmn for a plurality of lines by the binarization result delay unit <highlight><bold>803</bold></highlight>; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a block diagram showing the arrangement of an average density calculation unit <highlight><bold>804</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows an example of coefficients used upon executing the average density calculation process; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a diagram showing the arrangement of a random number generator <highlight><bold>806</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> describes random number generation by the random number generator <highlight><bold>806</bold></highlight> using program language C; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> describes a hysteresis control value calculation process using program language C; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> describes a threshold value calculation process using program language C; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows a binarization result layout state (pattern); </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a flow chart showing the processing sequence of a line-skip signal generator <highlight><bold>805</bold></highlight>; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 23A and 23B</cross-reference> show the differences between the arrangements of the image conversion processing circuits of the first and second embodiments; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows a process for diffusing errors generated upon binarization using an error diffusion processing method; and </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> shows a collection method of collecting errors in contrast to the error diffusion method that diffuses errors described in the second embodiment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A preferred embodiment of the present invention will be described in detail hereinafter with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0040" lvl="7"><number>&lsqb;0040&rsqb;</number> &lsqb;Outline of Apparatus&rsqb;</paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a sectional view showing the structure of a color copying machine according to this embodiment. As a preferred embodiment, the present invention is applied to a full-color copying machine which forms C, M, Y, and K images on four photosensitive drums using laser beams in the following description. Also, the present invention can be applied to a full-color copying machine which forms C, M, Y, and K images in turn using a single photosensitive drum, a copying machine which forms a color image using three colors, i.e., C, M, and Y, a two-color copying machine, a monochrome copying machine, ink-jet or thermal head color and monochrome copying machines, and the like. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The color copying machine shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> comprises an ADF <highlight><bold>200</bold></highlight> for feeding documents automatically picked up from a plurality of documents <highlight><bold>202</bold></highlight> to a document table <highlight><bold>201</bold></highlight> of a copying machine main body, and a sorter/stapler <highlight><bold>241</bold></highlight> for sorting and stapling printed sheets exhausted from the copying machine main body as option devices. Note that the ADF <highlight><bold>200</bold></highlight> can sequentially set the obverse and reverse faces of each document on the document table <highlight><bold>201</bold></highlight>. Also, the detailed arrangements of the ADF <highlight><bold>200</bold></highlight> and sorter/stapler <highlight><bold>241</bold></highlight> are known to those who are skilled in the art, and a detailed description thereof will be omitted. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> A document fed from a plurality of documents <highlight><bold>202</bold></highlight> set on the ADF <highlight><bold>200</bold></highlight> onto the document table <highlight><bold>201</bold></highlight> is illuminated with light coming from an illumination lamp <highlight><bold>203</bold></highlight>. Light reflected by the document is guided by mirrors <highlight><bold>204</bold></highlight>, <highlight><bold>205</bold></highlight>, and <highlight><bold>206</bold></highlight>, and reaches a CCD <highlight><bold>208</bold></highlight> via an optical system <highlight><bold>207</bold></highlight>, thus forming an image on the CCD <highlight><bold>208</bold></highlight>. Note that a mirror unit <highlight><bold>210</bold></highlight> includes the mirror <highlight><bold>204</bold></highlight> and illumination lamp <highlight><bold>203</bold></highlight>, and is mechanically moved at velocity V by a motor <highlight><bold>209</bold></highlight> in a direction (i.e., sub-scan direction) perpendicular to the array of elements on the CCD <highlight><bold>208</bold></highlight>. Also, a mirror unit <highlight><bold>211</bold></highlight> includes the mirrors <highlight><bold>205</bold></highlight> and <highlight><bold>206</bold></highlight>, and is moved at velocity V/2 by the motor <highlight><bold>209</bold></highlight> in the sub-scan direction, thus scanning the entire surface of a document. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> As will be described in detail later, an image processing circuit <highlight><bold>212</bold></highlight> electrically processes scanned image information, temporarily stores the information in an image memory, and then outputs the information as a print signal. Also, the image processing circuit <highlight><bold>212</bold></highlight> can receive image data from an external PC via a network cable <highlight><bold>102</bold></highlight> connected to the copying machine main body. The received data is temporarily stored in the image memory as in the scanned image information, and is then output as a print signal. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> A print signal output from the image processing circuit <highlight><bold>212</bold></highlight> is sent to a laser driver (not shown) to drive four semiconductor laser elements (not shown). Four laser beams output from the four semiconductor laser elements are reflected by a polygonal mirror <highlight><bold>213</bold></highlight>, and one of these lasers scans the surface of a photosensitive drum <highlight><bold>217</bold></highlight> via mirrors <highlight><bold>214</bold></highlight>, <highlight><bold>215</bold></highlight>, and <highlight><bold>216</bold></highlight>. Likewise, the second laser beam scans the surface of a photosensitive drum <highlight><bold>211</bold></highlight> via mirrors <highlight><bold>218</bold></highlight>, <highlight><bold>219</bold></highlight>, and <highlight><bold>220</bold></highlight>, the third laser beam scans the surface of a photosensitive drum <highlight><bold>225</bold></highlight> via mirrors <highlight><bold>222</bold></highlight>, <highlight><bold>223</bold></highlight>, and <highlight><bold>224</bold></highlight>, and the fourth laser beam scans the surface of a photosensitive drum <highlight><bold>229</bold></highlight> via mirrors <highlight><bold>226</bold></highlight>, <highlight><bold>227</bold></highlight>, and <highlight><bold>228</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> An electrostatic latent image formed on the photosensitive drum <highlight><bold>217</bold></highlight> is developed by yellow (Y) toner supplied from a developer <highlight><bold>230</bold></highlight> to obtain a toner image. Likewise, electrostatic latent images formed on the photosensitive drums <highlight><bold>221</bold></highlight>, <highlight><bold>225</bold></highlight>, and <highlight><bold>229</bold></highlight> are developed by magenta (M), cyan (C), and black (K) toners supplied from developers <highlight><bold>231</bold></highlight>, <highlight><bold>232</bold></highlight>, and <highlight><bold>233</bold></highlight> to obtain corresponding toner images. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> A print sheet fed from one of paper cassettes <highlight><bold>234</bold></highlight> and <highlight><bold>235</bold></highlight> and a manual insert tray <highlight><bold>236</bold></highlight> to an image forming unit is attracted by a transfer belt <highlight><bold>238</bold></highlight> via registration rollers <highlight><bold>237</bold></highlight>, and is conveyed at velocity V. The toner images of respective colors are formed on the photosensitive drums <highlight><bold>217</bold></highlight>, <highlight><bold>221</bold></highlight>, <highlight><bold>225</bold></highlight>, and <highlight><bold>229</bold></highlight> in synchronism with the supply &amp; convey timing of the print sheet, and are transferred onto the conveyed print sheet. The print sheet on which the toner images of respective colors have been transferred is separated from the transfer belt <highlight><bold>238</bold></highlight>, and is conveyed to a fixing device <highlight><bold>240</bold></highlight> by a conveyor belt <highlight><bold>239</bold></highlight>. After the toner images are fixed on the print sheet by the fixing device <highlight><bold>240</bold></highlight>, the print sheet is exhausted onto the sorter/stapler <highlight><bold>241</bold></highlight> in case of one-sided copy, or is fed to a two-sided path <highlight><bold>242</bold></highlight> in case of two-sided copy. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In case of two-sided copy, the print sheet which is fed to the two-sided path <highlight><bold>242</bold></highlight> is reversed by a reverse path <highlight><bold>243</bold></highlight>, and is held on a two-sided tray <highlight><bold>245</bold></highlight> via a convey path <highlight><bold>244</bold></highlight>. The print sheet held on the two-sided tray <highlight><bold>245</bold></highlight> is fed to the image forming unit again, and an image is formed on the obverse face of that print sheet in the same sequence as above. Then, the print sheet is exhausted onto the sorter/stapler <highlight><bold>241</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="7"><number>&lsqb;0049&rsqb;</number> &lsqb;Flow of Image Signal&rsqb;</paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The flow of image processes executed by the PC <highlight><bold>101</bold></highlight> and color copying machine <highlight><bold>103</bold></highlight> mentioned above will be explained below. The flow of image processes executed on the PC <highlight><bold>101</bold></highlight> side will be explained first. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> are block diagrams respectively showing image processes executed on the PC and copying machine sides. <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> is a block diagram showing image processes on the PC <highlight><bold>101</bold></highlight> side. On the PC <highlight><bold>101</bold></highlight>, after the aforementioned creation/edit process using DTP application software, PDL data of the created/edited data is rasterized to generate R, G, and B image signals. These image signals are output to a luminance-density conversion circuit <highlight><bold>312</bold></highlight> for respective pixels. At this time, original image data is held in a hard disk drive (to be abbreviated as &ldquo;HDD&rdquo; hereinafter) or memory, and line information of a pixel of interest is simultaneously output as an S signal. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Note that this S signal is data indicating if data on a line that includes the pixel of interest are &ldquo;all zeros&rdquo; or &ldquo;contains data other than zeros&rdquo;. For example, when pixels to be processed are arranged, as indicated by <highlight><bold>401</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, if <highlight><bold>402</bold></highlight> indicates the pixel of interest, a hatched portion <highlight><bold>403</bold></highlight> on that line is indicated by the S signal as line information. If &ldquo;data other than zeros&rdquo; for at least one pixel is present on the line of the hatched portion <highlight><bold>403</bold></highlight>, the S signal from an image input unit <highlight><bold>311</bold></highlight> changes to &ldquo;1&rdquo;; otherwise, i.e., if data on that line are &ldquo;all zeros&rdquo;, the S signal changes to &ldquo;0&rdquo;. Such discrimination may be implemented using adders, but is processed by a CPU (not shown) in this embodiment. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The luminance-density conversion circuit <highlight><bold>312</bold></highlight> is a lookup table comprising a RAM or ROM, and converts R, G, and B luminance signals output from the image input unit <highlight><bold>311</bold></highlight> into C, M, and Y density signals (cyan (C), magenta (M), and yellow (Y)) by: </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>C</italic></highlight>1<highlight><italic>&equals;&minus;V</italic></highlight>&middot;log(<highlight><italic>R</italic></highlight>/255) </in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>M</italic></highlight>1<highlight><italic>&equals;&minus;V&middot;</italic></highlight>log(<highlight><italic>G</italic></highlight>/255) </in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>Y</italic></highlight>1&equals;<highlight><italic>&minus;V&middot;</italic></highlight>log(<highlight><italic>B</italic></highlight>/255) </in-line-formula></paragraph>
<paragraph id="P-0054" lvl="7"><number>&lsqb;0054&rsqb;</number> where the base of logarithm is 10, and V is a constant. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Referring back to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A, an output masking/UCR circuit <highlight><bold>313</bold></highlight> converts C1, M1, and Y1 signals output from the luminance-density conversion circuit <highlight><bold>312</bold></highlight> into Y, M, C, and K signals as toner colors of the image forming apparatus by:  
<math-cwu id="MATH-US-00001">
<number>1</number>
<math>
<mtable>
  <mtr>
    <mtd>
      <mrow>
        <mrow>
          <mo>[</mo>
          <mtable>
            <mtr>
              <mtd>
                <mi>C</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>M</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>Y</mi>
              </mtd>
            </mtr>
            <mtr>
              <mtd>
                <mi>K</mi>
              </mtd>
            </mtr>
          </mtable>
          <mo>]</mo>
        </mrow>
        <mo>=</mo>
        <mrow>
          <munder>
            <mrow>
              <mo>[</mo>
              <mtable>
                <mtr>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>11</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>21</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>31</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>41</mn>
                    </msub>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>12</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>22</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>32</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>42</mn>
                    </msub>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>13</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>23</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>33</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>43</mn>
                    </msub>
                  </mtd>
                </mtr>
                <mtr>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>14</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>24</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>34</mn>
                    </msub>
                  </mtd>
                  <mtd>
                    <msub>
                      <mi>a</mi>
                      <mn>44</mn>
                    </msub>
                  </mtd>
                </mtr>
              </mtable>
              <mo>]</mo>
            </mrow>
            <mrow>
              <mi>K1</mi>
              <mo>=</mo>
              <mrow>
                <mi>min</mi>
                <mo>&af;</mo>
                <mrow>
                  <mo>(</mo>
                  <mrow>
                    <mi>C1</mi>
                    <mo>,</mo>
                    <mi>M1</mi>
                    <mo>,</mo>
                    <mi>Y1</mi>
                  </mrow>
                  <mo>)</mo>
                </mrow>
              </mrow>
            </mrow>
          </munder>
          <mo>&af;</mo>
          <mrow>
            <mo>[</mo>
            <mtable>
              <mtr>
                <mtd>
                  <mi>C1</mi>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <mi>M1</mi>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <mi>Y1</mi>
                </mtd>
              </mtr>
              <mtr>
                <mtd>
                  <mi>K1</mi>
                </mtd>
              </mtr>
            </mtable>
            <mo>]</mo>
          </mrow>
        </mrow>
      </mrow>
    </mtd>
    <mtd>
      <mrow>
        <mo>(</mo>
        <mn>1</mn>
        <mo>)</mo>
      </mrow>
    </mtd>
  </mtr>
</mtable>
</math>
<mathematica-file id="MATHEMATICA-00001" file="US20030002082A1-20030102-M00001.NB"/>
<image id="EMI-M00001" wi="216.027" he="52.07895" file="US20030002082A1-20030102-M00001.TIF" imf="TIFF" ti="MF"/>
</math-cwu>
</paragraph>
<paragraph id="P-0056" lvl="7"><number>&lsqb;0056&rsqb;</number> where a coefficient aij (i&equals;1, 2, 3, 4, j&equals;1, 2, 3, 4) is a constant unique to the apparatus in consideration of various toner tincture characteristics. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> An image conversion processing circuit <highlight><bold>314</bold></highlight> binarizes input multi-valued data by an average density preservation method (to be described later), and outputs binary data. In this case, colors C, M, Y, and K (cyan (C), magenta (M), yellow (Y), and black (K)) are independently processed, and the processing results are independently output as oC, oM, oY, and oK. As will be described in detail later, an operation skip signal oA is obtained from the S signal, and is output from the image conversion processing circuit <highlight><bold>314</bold></highlight> as in the above image signals. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The image signals oC, oM, oY, and oK, which have undergone the image processes on the PC <highlight><bold>101</bold></highlight> side, and the signal oA are sent to a printer (not shown) or the digital copying machine <highlight><bold>103</bold></highlight> via the network <highlight><bold>102</bold></highlight>. At this time, the image signals to be sent may be compressed. In this case, the signals must be compressed using a compression format that allows expansion on the receiving side. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The flow of image processes executed on the color copying machine <highlight><bold>103</bold></highlight> side will be explained below using <cross-reference target="DRAWINGS">FIG. 3B</cross-reference>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> An interface circuit <highlight><bold>321</bold></highlight> of the image processing circuit <highlight><bold>212</bold></highlight> receives signals sent from the PC <highlight><bold>101</bold></highlight> side via the network <highlight><bold>102</bold></highlight>, and generates write address cA of C, M, Y, and K data cC, cM, cY, and cK in an image memory <highlight><bold>322</bold></highlight> so as to write C, M, Y, and K rasterized image on the image memory <highlight><bold>322</bold></highlight> for respective colors. Note that the image memory <highlight><bold>322</bold></highlight> includes a control circuit (not shown) provided around the memory. The control circuit controls to store image signals sent from the interface circuit <highlight><bold>321</bold></highlight> in desired areas on the image memory <highlight><bold>322</bold></highlight>, and then outputs the image signals as cCo, cMo, cYo, and cKo to a pulse-width modulation (PWM) circuit <highlight><bold>323</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="7"><number>&lsqb;0061&rsqb;</number> &lsqb;PWM Circuit&rsqb;</paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The pulse-width modulation (PWM) circuit <highlight><bold>323</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> will be described below. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows the arrangement of the PWM circuit in this embodiment. The aforementioned image signals cCo cMo, cYo, and cKo are input to the PWM circuit <highlight><bold>323</bold></highlight>, and are converted into analog signals. Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, reference numeral <highlight><bold>501</bold></highlight> denotes a yellow (Y) PWM circuit, which receives a yellow (Y) digital image signal, generates an analog signal for driving a yellow (Y) semiconductor laser element in accordance with the image signal, and sends the analog signal to a laser driver. Likewise, reference numeral <highlight><bold>502</bold></highlight> denotes a magenta (M) PWM circuit; <highlight><bold>503</bold></highlight>, a cyan (C) PWM circuit; and <highlight><bold>504</bold></highlight>, a black (K) PWM circuit. These PWM circuits receive digital image signals of corresponding color components, generate analog signals for driving semiconductor laser elements, and send them to the laser driver. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing an example of the arrangement of the PWM circuit for each color component. Note that the PWM circuits have identical circuit arrangements irrespective of color components. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, reference numeral <highlight><bold>601</bold></highlight> denotes a D/A converter for converting an input digital image signal into an analog image signal. Reference numeral <highlight><bold>602</bold></highlight> denotes a triangular wave generator for generating a triangular wave for one pixel period. Reference numeral <highlight><bold>603</bold></highlight> denotes a comparator for comparing the analog image signal output from the D/A converter <highlight><bold>601</bold></highlight> and the triangular wave selected by the triangular wave generator <highlight><bold>602</bold></highlight>. Then, a pulse-width modulated (PWM) pulse signal is output. This pulse signal is sent to the laser driver (not shown). In this embodiment, since a binary signal is output, PWM halftone data is basically not used. However, halftone data may be output in place of a full-dot size so as to adjust a dot system upon outputting binary data. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> A high-definition output can be made by adjusting the dot system in this manner, while the solid black density lowers. This adjustment should be made depending on the ability of an output engine (printer). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Note that the period of the triangular wave is not limited to one pixel, but a 2-pixel period, 3-pixel period, or the like may be set in association with the resolution of the image forming unit. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a timing chart in the PWM circuit. As shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the comparator <highlight><bold>603</bold></highlight> compares an output <highlight><bold>701</bold></highlight> from the D/A converter <highlight><bold>601</bold></highlight> and a triangular wave <highlight><bold>702</bold></highlight> for one pixel period from the triangular wave generator <highlight><bold>602</bold></highlight>, and outputs a pulse signal <highlight><bold>703</bold></highlight> as a comparison result. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> After the aforementioned processes, an image to be printed on a print sheet is converted by an image conversion process (to be described below), and the print sheet is exhausted from the sorter/stapler <highlight><bold>241</bold></highlight>, thus obtaining a desired output. </paragraph>
<paragraph id="P-0070" lvl="7"><number>&lsqb;0070&rsqb;</number> &lsqb;First Embodiment&rsqb;</paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> An image conversion process according to the first embodiment, which is executed by the image conversion processing circuit <highlight><bold>314</bold></highlight> on the PC <highlight><bold>101</bold></highlight> side shown in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> will be explained below. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram showing the arrangement of the image conversion processing circuit according to the first embodiment. Prior to a description of points of the present invention, an image conversion processing method of the first embodiment will be described. This image conversion processing method is characterized in that image formation with stable image quality can be made on an arbitrary density region where image quality is not stable due to the influence of the printer characteristics. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Note that C, M, Y, and K image signals are independently processed, as described above, and only an arrangement for one color will be explained in this embodiment. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, reference numeral <highlight><bold>802</bold></highlight> denotes an error correction unit serving as error correction means, which receives a signal DR as the sum of an input image signal D (C, M, Y, K) and a random number (to be described later), and error data E generated by a binarization processor (to be described below), calculates an image signal DE that has undergone error correction, and outputs that signal to the binarization processor. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Reference numeral <highlight><bold>801</bold></highlight> denotes a binarization processor serving as binarization means, which receives the error-corrected image signal DE, a binarization slice value S (to be described later), and an average density calculation value m (to be described later), and obtains a binarization output N by comparing the image signal DE and binarization slice value S. Then, binarization error data E is calculated by a subtraction process between the image signal DE and average density calculation value m. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Reference numeral <highlight><bold>803</bold></highlight> denotes a binarization result delay unit serving as binarization result delay means, which receives the binarization output N, delays it a predetermined number of lines, and sends data as binarization results Nmn and B*ij for a plurality of lines to a threshold value calculation unit. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Reference numeral <highlight><bold>804</bold></highlight> denotes an average density calculation unit serving as average density calculation means, which receives the binarization results Nmn for a plurality of lines, makes product-sum operations using coefficients set in advance and the delayed binarization results, and outputs an average density calculation value m to the binarization processor <highlight><bold>801</bold></highlight> and an adder (to be described later). </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Reference numeral <highlight><bold>809</bold></highlight> denotes a threshold value calculation unit serving as threshold value calculation means, which receives outputs B*ij of the binarization result delay unit <highlight><bold>803</bold></highlight> except for a result immediately before the pixel of interest, an output T from a hysteresis control value calculation unit (to be described later), and the input image signal D, calculates a binarization threshold value S&prime; without referring to the (binarization) result immediately before the pixel of interest, and outputs that value to an adder (to be described below). </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Reference numeral <highlight><bold>810</bold></highlight> denotes an adder serving as addition means, which receives the binarization threshold value S&prime; calculated by the threshold value calculation unit <highlight><bold>809</bold></highlight>, and the average density calculation value m from the average density calculation unit <highlight><bold>804</bold></highlight>, and adds them to output a binarization slice value S. When the binarization threshold value S&prime; is &ldquo;255&rdquo;, the adder <highlight><bold>810</bold></highlight> outputs &ldquo;255&rdquo; as the binarization slice value S; otherwise, the adder <highlight><bold>810</bold></highlight> calculates S&equals;S&prime;&plus;m, and outputs the result. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> describes the above arithmetic operation using program language C. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Reference numeral <highlight><bold>806</bold></highlight> denotes a random number generator serving as random number generation means, which generates a random number of m-sequences ranging from &minus;17 to &plus;17, and outputs it to an adder (to be described below). Reference numeral <highlight><bold>807</bold></highlight> denotes an adder serving as addition means, which receive the random number from the random number generator <highlight><bold>806</bold></highlight> and the image signal D, and executes an addition process. Although not shown, a limiter process is done so that the sum DR falls within the range from 0 to 255. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Reference numeral <highlight><bold>808</bold></highlight> denotes a hysteresis control value calculation unit serving as hysteresis control value calculation means, which can make threshold value control according to the sum DR from the adder <highlight><bold>807</bold></highlight> by a method to be described later. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> The detailed arrangements of the respective processing units shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> will be described in turn. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The binarization processor <highlight><bold>801</bold></highlight> receives the aforementioned image signal DE, binarization slice value S, and average density calculation value m, and outputs a binarization output N and binarization error data E by comparing them. The binarization processor <highlight><bold>801</bold></highlight> has an arrangement shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The input image signal DE is branched into two routes; one signal is input to a comparison circuit <highlight><bold>1001</bold></highlight>, and the other signal is input to a subtraction circuit <highlight><bold>1002</bold></highlight>. The comparison circuit <highlight><bold>1001</bold></highlight> compares the image signal DE and the binarization slice value S, and outputs a binarization output N as follows: </paragraph>
<paragraph lvl="0"><in-line-formula>When <highlight><italic>DE&gt;S, N&equals;</italic></highlight>1 </in-line-formula></paragraph>
<paragraph lvl="0"><in-line-formula>When <highlight><italic>DE&lt;S, N&equals;</italic></highlight>0 </in-line-formula></paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The subtraction circuit <highlight><bold>1002</bold></highlight> subtracts the average density calculation value m from the value of the image signal DE, and outputs the difference as binarization error data E. </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>E&equals;DE&minus;m </italic></highlight></in-line-formula></paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The error correction unit <highlight><bold>802</bold></highlight> will be explained below. The error correction unit <highlight><bold>802</bold></highlight> calculates an error-corrected image signal DE by adding the binarization error data E to the image signal DR, and outputs it to the binarization processor <highlight><bold>801</bold></highlight>. The error correction unit <highlight><bold>802</bold></highlight> has an arrangement shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The input binarization error data E is halved by a division circuit <highlight><bold>1101</bold></highlight>. The quotient is branched into two routes; one signal is input to a subtraction circuit <highlight><bold>1102</bold></highlight>, and the other signal is input to a line buffer <highlight><bold>1103</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The subtraction circuit <highlight><bold>1102</bold></highlight> calculates a difference EB (&equals;E&minus;E/2) between the binarization error data E and E/2 output from the division circuit <highlight><bold>1101</bold></highlight>, and outputs that difference to an addition circuit <highlight><bold>1104</bold></highlight>. The addition circuit <highlight><bold>1104</bold></highlight> calculates the sum of an output EA delayed one line by the line buffer <highlight><bold>1103</bold></highlight> for one line consisting of a plurality of bits (8 bits in this embodiment), and the output EB from the subtraction circuit <highlight><bold>1102</bold></highlight>, and outputs the sum to an addition circuit <highlight><bold>1105</bold></highlight>. The addition circuit <highlight><bold>1105</bold></highlight> calculates the sum of the image signal DR and the sum of EA delayed one line and EB, and outputs that sum as the image signal DE. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> That is, the error correction unit <highlight><bold>802</bold></highlight> executes a process for adding, to the pixel of interest &ldquo;*&rdquo;, a binarization error EA obtained upon binarizing &ldquo;A&rdquo; on one line, and a binarization error EB obtained upon binarizing &ldquo;B&rdquo; one pixel before the pixel of interest, as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The binarization result delay unit <highlight><bold>803</bold></highlight> receives the binarization output N from the binarization processor <highlight><bold>801</bold></highlight>, delays it a predetermined number of lines, and sends data as binarization results Nmn and B*ij for a plurality of lines to the average density calculation unit <highlight><bold>804</bold></highlight> and threshold value calculation unit <highlight><bold>809</bold></highlight>. The binarization result delay unit <highlight><bold>803</bold></highlight> has an arrangement shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The input binarization output N is sent from a line buffer <highlight><bold>1301</bold></highlight> that delays 1 bit for one line to a line buffer <highlight><bold>1302</bold></highlight> to delay data for respective lines. At the same time, data is delayed one pixel in turn by each of delay circuits <highlight><bold>1303</bold></highlight> to <highlight><bold>1308</bold></highlight>. The outputs from the delay circuits <highlight><bold>1306</bold></highlight> and <highlight><bold>1307</bold></highlight> are respectively output as N14 and N15. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> The binarization output N delayed one line by the line buffer <highlight><bold>1301</bold></highlight> is delayed by delay circuits <highlight><bold>1309</bold></highlight> to <highlight><bold>1314</bold></highlight>, and the outputs from the delay circuits <highlight><bold>1309</bold></highlight> to <highlight><bold>1313</bold></highlight> are output as N21 to N25. The binarization output N delayed one more line by the line buffer <highlight><bold>1302</bold></highlight> is delayed by delay circuits <highlight><bold>1315</bold></highlight> to <highlight><bold>1320</bold></highlight>, and the outputs from the delay circuits <highlight><bold>1315</bold></highlight> to <highlight><bold>1319</bold></highlight> are output as N31 to N35. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> At the same time, the outputs from the delay circuits <highlight><bold>1306</bold></highlight> to <highlight><bold>1308</bold></highlight> are output as B10, B20, and B30, respectively. After the binarization output N delayed one line by the line buffer <highlight><bold>1301</bold></highlight> is delayed, it is output as B32 to B02 and Bi12 to Bi32. Also, after the binarization output N delayed one more line by the line buffer <highlight><bold>1302</bold></highlight> is delayed, it is output as B31 to B01 and Bi11 to Bi31. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> That is, the average density calculation unit <highlight><bold>804</bold></highlight> receives data obtained by binarizing a two-dimensional image as binarization results Nmn for a plurality of lines in a state shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> after that data has undergone delay processes for a plurality of lines and a plurality of pixels. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The average density calculation unit <highlight><bold>804</bold></highlight> receives the binarization results Nmn for a plurality of lines, makes product-sum operations using coefficients which are set in advance, and the delayed binarization results, and outputs an average density calculation value m, which are used in the binarization processor <highlight><bold>801</bold></highlight> and adder <highlight><bold>806</bold></highlight>. The average density calculation unit <highlight><bold>804</bold></highlight> has an arrangement shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> A multiplication circuit <highlight><bold>1501</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference> receives a binarization output N15 and coefficient M15 and outputs their product. A multiplication circuit <highlight><bold>1502</bold></highlight> receives a binarization output N14 and coefficient M14 and outputs their product. Likewise, multiplication circuits <highlight><bold>1503</bold></highlight> to <highlight><bold>1512</bold></highlight> make such arithmetic operations, and these products are added by an addition circuit <highlight><bold>1513</bold></highlight>. The sum is output as the average density calculation value m. <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows an example of coefficients used upon executing the average density calculation process. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> The random number generator <highlight><bold>806</bold></highlight> as a processing unit for generating a random number R will be explained below. Note that this embodiment uses a shift register code-sequence generator of m-sequences, as shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. If N represents the number of stages of a shift register used, a pseudo random number having 2N&minus;1 as a period can be easily generated by simple hardware. With this arrangement, a 1-bit shift register having 25 stages is used to prevent periodicity from appearing even upon processing an A3 document at 400 dpi. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows the arrangement of the random number generator <highlight><bold>806</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 18</cross-reference> describes random number generation by the random number generator <highlight><bold>806</bold></highlight> using program language C. A description will be given using <cross-reference target="DRAWINGS">FIG. 18</cross-reference> for the sake of convenience. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> As initialization, &ldquo;0&rdquo; is written in registers p&lsqb;ii&rsqb;: (0&lE;ii&lE;25), and &ldquo;1&rdquo; is set in register P&lsqb;12&rsqb; alone. Before outputting a random number value, an arithmetic operation </paragraph>
<paragraph lvl="0"><in-line-formula>&lsqb;0&rsqb;&equals;((<highlight><italic>p&lsqb;</italic></highlight>25&rsqb;&circ; <highlight><italic>p</italic></highlight>&lsqb;24&rsqb;&circ; <highlight><italic>p&lsqb;</italic></highlight>23&rsqb;&circ; <highlight><italic>p</italic></highlight><highlight><bold>&lsqb;22&rsqb;)&amp;</bold></highlight>1) </in-line-formula></paragraph>
<paragraph id="P-0100" lvl="7"><number>&lsqb;0100&rsqb;</number> is made for each pixel, and a random number value ranging from &minus;17 to &plus;17 is generated by: </paragraph>
<paragraph lvl="0"><in-line-formula>Random number&equals;(1&minus;2<highlight><italic>*p</italic></highlight>&lsqb;22&rsqb;)*(((<highlight><italic>p</italic></highlight>&lsqb;15&rsqb;*64&plus;<highlight><italic>p&lsqb;</italic></highlight>16&rsqb;*32&plus;<highlight><italic>p</italic></highlight>&lsqb;17&rsqb;*16<highlight><italic>&plus;p</italic></highlight>&lsqb;18&rsqb;*8&plus;<highlight><italic>p&lsqb;</italic></highlight>19&rsqb;*4&plus;<highlight><italic>p&lsqb;</italic></highlight>20&rsqb;*2&plus;<highlight><italic>p&lsqb;</italic></highlight>21&rsqb;)*17)/128) </in-line-formula></paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> In this embodiment, a random number ranging from &minus;17 to 17 is used. Alternatively, the random number generator may be modified to calculate: </paragraph>
<paragraph lvl="0"><in-line-formula>Random number&equals;(1&minus;2<highlight><italic>*p</italic></highlight>&lsqb;2&rsqb;)*(<highlight><italic>p&lsqb;</italic></highlight>18&rsqb;*8&plus;<highlight><italic>p&lsqb;</italic></highlight>19&rsqb;*4&plus;<highlight><italic>p&lsqb;</italic></highlight>20&rsqb;*2&plus;<highlight><italic>p&lsqb;</italic></highlight>21&rsqb;) </in-line-formula></paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> so as to output a random number value ranging from &minus;15 to 15, thus obtaining the same effect. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Of course, it is possible to set a random number value to be zero. However, in order to attain natural texture control by changing the binarization slice value, data added with an arbitrary random number is preferably used. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> The adder <highlight><bold>807</bold></highlight> adds the random number R generated by the random number generator <highlight><bold>806</bold></highlight> and the input image signal D. </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>DR&equals;D&plus;R </italic></highlight></in-line-formula></paragraph>
<paragraph id="P-0105" lvl="2"><number>&lsqb;0105&rsqb;</number> if (DR&gt;255) &lcub;DR&equals;255;&rcub; </paragraph>
<paragraph id="P-0106" lvl="2"><number>&lsqb;0106&rsqb;</number> if (DR&lt;0) &lcub;DR&equals;0;&rcub; </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Note that a limiter is applied so that the sum falls within the range from &ldquo;0&rdquo; to &ldquo;255&rdquo; (not shown). </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The hysteresis control value calculation unit <highlight><bold>808</bold></highlight> will be described below with reference to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. The hysteresis control value calculation unit <highlight><bold>808</bold></highlight> outputs a hysteresis control signal T by changing the value of a constant ALF (&equals;32) in accordance with the input signal DR. That is, texture control in an arbitrary density region can be implemented in this manner. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> describes the hysteresis control value calculation process using program language C. If the input signal DR is equal to or smaller than a constant LR1 (&equals;16), a process for setting II to be &ldquo;0&rdquo; is made; if the input signal DR is larger than the constant LR1 and is equal to or smaller than a constant LR2 (&equals;48), II is calculated by: </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>II</italic></highlight>&equals;((<highlight><italic>DR&minus;LR</italic></highlight>1)*(<highlight><italic>ALF*</italic></highlight>256/(<highlight><italic>LR</italic></highlight>2<highlight><italic>&minus;LR</italic></highlight>1)))/256 </in-line-formula></paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> With this arithmetic operation, as the value of the input signal DR increases from the constant LR1 to the constant LR2, the value II gradually approaches from &ldquo;0&rdquo; to the constant ALF (&equals;32). </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> On the other hand, if the input signal DR is larger than the constant LR2 and is equal to or smaller than a constant LR3 (&equals;233), II is output as the constant ALF. If the input signal DR is larger than the constant LR3 and is equal to or smaller than a constant LR4 (&equals;255), II is calculated by: </paragraph>
<paragraph lvl="0"><in-line-formula><highlight><italic>II&equals;ALF&minus;</italic></highlight>((<highlight><italic>DR&minus;LR</italic></highlight>3)*(<highlight><italic>ALF*</italic></highlight>256/(<highlight><italic>LR</italic></highlight>4<highlight><italic>&minus;LR</italic></highlight>3)))/256 </in-line-formula></paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> This indicates that the output II approaches from the constant ALF to &ldquo;0&rdquo; as the value of the input signal DR increases from LR3 to the constant LR4. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> On the other hand, if the input signal DR is larger than LR4, a process for setting II to be &ldquo;0&rdquo; is made. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> After the above process, the difference calculated by subtracting a constant ALFm (&equals;16) from II is output as an output signal T. The purpose of this subtraction is to change the signal T of the hysteresis control value calculation unit <highlight><bold>808</bold></highlight> from a negative value to a positive value. In this manner, texture control in an arbitrary density range can be controlled within a broad latitude range. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The threshold value calculation unit <highlight><bold>809</bold></highlight> will be described below. <cross-reference target="DRAWINGS">FIG. 20</cross-reference> describes a threshold value calculation process using program language C. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The threshold value calculation unit <highlight><bold>809</bold></highlight> divides the value of the signal T input from the hysteresis control value calculation unit <highlight><bold>808</bold></highlight> by constants LT1 (&equals;2), LT2 (&equals;4), LT3 (&equals;8), and LT4 (&equals;16) to obtain variables A (&equals;T/LT1), B (&equals;T/LT2), C (&equals;T/LT3), and D (&equals;T/LT4) to be used inside the unit. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> By a method to be described later, the value of the binarization threshold value S&prime; is controlled using variables A, B, C, and D and a constant in accordance with the binarization result layout state (pattern) of outputs B*ij from the binarization result delay unit <highlight><bold>803</bold></highlight>. Since the output m from the average density calculation unit <highlight><bold>804</bold></highlight> is not used, the arithmetic operation in the threshold value calculation unit <highlight><bold>809</bold></highlight> can start before the arithmetic result of the average density calculation unit <highlight><bold>804</bold></highlight> is obtained. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows the binarization result layout state (pattern). All these results are previous binarization results, and are characterized in that they do not refer to a pixel immediately before the pixel of interest. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> An actual process for controlling the binarization threshold value S&prime; in accordance with the binarization result layout (pattern) will be explained below. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> If the binarization state around the pixel of interest is described by: </paragraph>
<paragraph id="P-0121" lvl="2"><number>&lsqb;0121&rsqb;</number> B32&equals;&equals;0&amp;&amp;B22&equals;&equals;1&amp;&amp;B12&equals;&equals;0&amp;&amp;B21&equals;&equals;0&amp;&amp;B11&equals;&equals;1&amp;&amp;B01&equals;&equals;0 or </paragraph>
<paragraph id="P-0122" lvl="2"><number>&lsqb;0122&rsqb;</number> Bi12&equals;0&amp;&amp;Bi22&equals;&equals;1&amp;&amp;Bi32&equals;&equals;0&amp;&amp;B01&equals;&equals;0&amp;&amp;Bi11&equals;&equals;1&amp;&amp;Bi21&equals;&equals;</paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> the binarization threshold value S&prime; is forcibly set to be a max constant &ldquo;255&rdquo;, and is output. This is to forcibly make dots harder to print. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> If the binarization state around the pixel of interest is described by: </paragraph>
<paragraph id="P-0125" lvl="2"><number>&lsqb;0125&rsqb;</number> B12&equals;&equals;0&amp;&amp;B02&equals;&equals;0&amp;&amp;Bi12&equals;&equals;0&amp;&amp;Bi22&equals;&equals;0&amp;&amp;Bi32&equals;&equals;0&amp;&amp; </paragraph>
<paragraph id="P-0126" lvl="2"><number>&lsqb;0126&rsqb;</number> B11&equals;&equals;0&amp;&amp;B01&equals;&equals;0&amp;&amp;Bi11&equals;&equals;1&amp;&amp;Bi21&equals;&equals;0&amp;&amp;Bi31&equals;&equals;0&amp;&amp;B20&equals;&equals;0 </paragraph>
<paragraph id="P-0127" lvl="7"><number>&lsqb;0127&rsqb;</number> and input value data D is smaller than 31 (31 of 0 to 255), the binarization threshold value S&prime; is forcibly set to be a max constant &ldquo;255&rdquo;, and is output. This is also to forcibly make dots hard to print if the above condition is met. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> On the other hand, if the input multi-valued data D is equal to or larger than 31 (31 of 0 to 255) under the above condition, the binarization threshold value S&prime; is set to be &ldquo;0&rdquo; and is output. This is to inhibit texture control if the previous binarization results form a specific layout (pattern). Of course, the constant &ldquo;31&rdquo; is not a fixed value but a parameter, and can be set to be another value such as &ldquo;48&rdquo;, 64&rdquo;, or the like. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> At this time, if the constant is set to be larger than &ldquo;31&rdquo;, texture control becomes easier to apply; if the constant is set to be smaller than &ldquo;31&rdquo;, texture control becomes harder to apply. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> If the binarization state around the pixel of interest is described by: </paragraph>
<paragraph id="P-0131" lvl="2"><number>&lsqb;0131&rsqb;</number> B02&equals;&equals;0&amp;&amp;Bi12&equals;&equals;0&amp;&amp;B11&equals;&equals;0&amp;&amp;B01&equals;&equals;1&amp;&amp;Bi11&equals;&equals;1&amp;&amp;Bi21&equals;&equals;0&amp;&amp;B20&equals;&equals;0 </paragraph>
<paragraph id="P-0132" lvl="7"><number>&lsqb;0132&rsqb;</number> the binarization threshold value S&prime; is set to be negative variable A (S&prime;&equals;&minus;A), and is output. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> This is to forcibly make dots easier to print if the above condition is met. In this case as well, the process is made without referring to a binarization result immediately before the pixel of interest. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Likewise, the binarization threshold value S&prime; is controlled using internal variables A, B, C, and D and a constant in accordance with respective binarization result patterns without referring to the result immediately before the pixel of interest. As a result, if the calculated hysteresis control value T is positive, the control is made to make dots easier to print; if the calculated hysteresis control value T is negative, the control is made to make dots harder to print. In other words, the control is made to concentrate dots. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> When the aforementioned process is sequentially done for respective pixels, texture can be controlled to an arbitrary pattern in an arbitrary density region in accordance with the calculated hysteresis control value T and the output values B*ij of the binarization result delay means. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> The binarization threshold value S&prime; obtained in this way is input to the adder <highlight><bold>810</bold></highlight> together with the output m of the average density calculation unit <highlight><bold>804</bold></highlight>, and undergoes an addition process. If the binarization threshold value S&prime; is &ldquo;255&rdquo;, the binarization slice value S&equals;&ldquo;255&rdquo; is output; otherwise, the binarization slice value S is output by calculating S&equals;S&prime;&plus;m. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> describes the aforementioned arithmetic operation using program language C. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> As described above, the image conversion processing method according to this embodiment can attain image formation which can stabilize image quality in a density region where image quality cannot be stable due to the influence of the printer characteristics. For example, even in a printer output which looks noisy since one pixel cannot be stably output, the image conversion processing method of this embodiment can improve such noisy appearance. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> However, when the aforementioned processes are executed by the driver on the PC <highlight><bold>101</bold></highlight> side, the processing load is heavy, and much time is required. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Hence, this embodiment realizes high-speed processes by adding a line-skip signal generator <highlight><bold>805</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 8</cross-reference>) which serves as line-skip signal generation means. Speeding up of the aforementioned image conversion process as a point of this embodiment will be described below. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Normally, a blank portion makes up most of image data created on the PC <highlight><bold>101</bold></highlight> side. Especially, a blank portion makes up most of a photo&plus;document format normally used in an office. Hence, in this embodiment, the processes that impose a heavy load are skipped for a blank portion, and &ldquo;0&rdquo; is output as a processing result. Whether or not a portion of interest is a blank portion is determined using the S signal from the aforementioned image input unit <highlight><bold>311</bold></highlight>. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Normally, in a screen process such as simple binarization, dither, or the like, when it is determined that an input image signal is &ldquo;0&rdquo;, i.e., blank, an output result can be immediately replaced by &ldquo;0&rdquo;. In this manner, a high-speed process can be realized without any special process. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> However, such simple replacement cannot be made in the processes of the aforementioned image conversion processing method. This is because the previous binarization results are internally referred to, as has been explained in the paragraphs of the average density calculation unit <highlight><bold>804</bold></highlight>. Therefore, even if an input image signal is &ldquo;0&rdquo;, it is impossible to immediately abort the image conversion process that imposes a heavy load, and to replace its output by &ldquo;0&rdquo;. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> When an input image signal is &ldquo;0&rdquo;, if the internal arithmetic operation is simply aborted, and its output is replaced by &ldquo;0&rdquo;, the average density can no longer be preserved in a portion where the previous binarization results are referred to, and texture disturbance and nonuniform low or high density portions appear. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a flow chart showing the processing sequence of the line-skip signal generator <highlight><bold>805</bold></highlight>. The S signal of the line of interest obtained from the image input unit <highlight><bold>311</bold></highlight> is input in step S<highlight><bold>2201</bold></highlight>, and it is checked in step S<highlight><bold>2202</bold></highlight> if the S signal is zero. If NO in step S<highlight><bold>2202</bold></highlight>, the flow advances to step S<highlight><bold>2208</bold></highlight>, and a parameter count is set to be &ldquo;0&rdquo; to execute a normal output process. After that, the flow advances to step S<highlight><bold>2209</bold></highlight>, and a control signal &ldquo;1&rdquo; is output to declare &ldquo;cancel line skip&rdquo;. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> On the other hand, if it is determined in step S<highlight><bold>2202</bold></highlight> that the S signal is zero, the flow advances to step S<highlight><bold>2203</bold></highlight> to check the held result of the previous line (one line immediately above the pixel of interest). Note that this embodiment comprises a memory for holding the result of the S signal for the previous line. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> If the S signal of the previous line is also zero, it is determined that two zero lines successively appear, and the flow advances to step S<highlight><bold>2204</bold></highlight> to increment the parameter count by &ldquo;1&rdquo;. If the S signal of the previous line is not zero, the flow advances to step S<highlight><bold>2207</bold></highlight> to set the parameter count to be &ldquo;1&rdquo;. The value of the parameter count is checked in step S<highlight><bold>2205</bold></highlight>. If count &gE;3, it is determined that three or more blank lines successively appear, and a control signal &ldquo;0&rdquo; is output in step S<highlight><bold>2206</bold></highlight> to declare &ldquo;execute line skip&rdquo;. On the other hand, if the value of the parameter count is not equal to or larger than 3, the flow advances to step S<highlight><bold>2209</bold></highlight> to declare &ldquo;cancel line skip&rdquo;. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> The control signal output from the line-skip signal generator <highlight><bold>805</bold></highlight> is ANDed with the binarization output N from the binarization processor <highlight><bold>801</bold></highlight> by an AND gate <highlight><bold>811</bold></highlight>, and the AND is output from the image conversion processing circuit <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> When the control signal from the line-skip signal generator <highlight><bold>805</bold></highlight> is &ldquo;0&rdquo;, the output from the image conversion processing circuit <highlight><bold>314</bold></highlight> is also &ldquo;0&rdquo; irrespective of the AND process. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In this embodiment, when the output result of the line-skip signal generator <highlight><bold>805</bold></highlight> is &ldquo;0&rdquo;, the CPU is inhibited from executing an image conversion process (binarization process) that imposes a heavy load, a result which is not determined, and the signal from the line-skip signal generator <highlight><bold>805</bold></highlight> are ANDed. In this way, even when the CPU aborts a process that requires a heavy load, a correct output result can be obtained. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> A point of the above description is that the determination is made using &ldquo;the number of lines of processing results to be referred to by this image conversion process&plus;1&rdquo;. That is, in this embodiment, since a reference region is formed by two lines, as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, the value of the parameter count used to check if this process can be skipped is 3 by adding &ldquo;1&rdquo; to the number of lines. Hence, only when three or more blank lines continuously appear, a blank image can be determined, and the process that requires a heavy load can be skipped. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Of course, when the previous processing results to be referred to by the average density preservation processing method are those for n lines, the image conversion process can be skipped only when (n&plus;1) or more blank lines continuously appear. At this time, the threshold value of the parameter count in step S<highlight><bold>2204</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is n&plus;1. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> The threshold value of this parameter count is not limited to n&plus;1, but the same effect can be obtained if it is equal to or larger than n&plus;1. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> As described above, in a process for executing image conversion with reference to the pixel of interest and its surrounding pixels, the image conversion process can be appropriately skipped based on the line-skip signal while suppressing texture disturbance and density nonuniformity in a pseudo halftone process and, hence, a high-speed image conversion process can be realized. As a result, another process can be made in place of the skipped image conversion process, and image data sent from the PC can be output at high speed from a printer or digital copying machine. </paragraph>
<paragraph id="P-0154" lvl="7"><number>&lsqb;0154&rsqb;</number> &lsqb;Second Embodiment&rsqb;</paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> The second embodiment of the present invention will be described in detail below with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> The same reference numerals in the basic apparatus arrangement in the second embodiment denote the same parts as in the first embodiment, and a description thereof will be omitted. A characteristic feature of the second embodiment lies in that the average density preservation processing method used in the image conversion processing circuit <highlight><bold>314</bold></highlight> of the first embodiment is replaced by a general error diffusion processing method. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> Since the basic arrangement except for the image conversion processing circuit is the same as that in the first embodiment, only differences will be explained. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 23A and 23B</cross-reference> show the difference between the arrangements of the image conversion processing circuits of the first and second embodiments. <cross-reference target="DRAWINGS">FIG. 23A</cross-reference> is a block diagram showing the basic arrangement of the image conversion processing circuit <highlight><bold>314</bold></highlight> described in the first embodiment, which corresponds to the arrangement shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. <cross-reference target="DRAWINGS">FIG. 23A</cross-reference> illustrates an arrangement excluding the line-skip signal generator <highlight><bold>805</bold></highlight> and AND gate <highlight><bold>811</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> as an average density preservation processor <highlight><bold>2301</bold></highlight>. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> On the other hand, <cross-reference target="DRAWINGS">FIG. 23B</cross-reference> is a block diagram showing the basic arrangement of the second embodiment. Note that the line-skip signal generator <highlight><bold>805</bold></highlight> as the point of the first embodiment has the same arrangement as that described in the first embodiment, and a description thereof will be omitted. Also, since an error diffusion processor <highlight><bold>2302</bold></highlight>, which is different from the first embodiment, is technically known to those who are skilled in the art, a detailed description thereof will be omitted. However, a point of this embodiment will be explained below. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows a process for diffusing errors generated upon binarization by the error diffusion processing method. In <cross-reference target="DRAWINGS">FIG. 24</cross-reference>, &ldquo;*&rdquo; indicates the position of a pixel of interest, and numerical values around &ldquo;*&rdquo; are error diffusion coefficients. For example, assume that an input image signal is &ldquo;191&rdquo; and a binary output is &ldquo;255&rdquo;. A binarization error generated at that time is 64 (&equals;255&minus;191). In this case, an error value &ldquo;9&rdquo; is diffused to the right neighboring pixel position of the pixel of interest. The breakdown of this value is 64&times;7&plus;(7&plus;5&plus;3&plus;5&plus;7&plus;5&plus;3&plus;1&plus;3&plus;5&plus;3&plus;1)&equals;9. Likewise, an error value &ldquo;6&rdquo; (&equals;64&times;5&plus;(7&plus;5&plus;3&plus;5&plus;7&plus;5&plus;3&plus;1&plus;3&plus;5&plus;3&plus;1)) is diffused to its neighboring pixel position. Also, error values are diffused to other pixels positions at a ratio given by: </paragraph>
<paragraph lvl="0"><in-line-formula>64&times;n&divide;(7&plus;5&plus;3&plus;5&plus;7&plus;5&plus;3&plus;1&plus;3&plus;5&plus;3&plus;1) </in-line-formula></paragraph>
<paragraph id="P-0161" lvl="7"><number>&lsqb;0161&rsqb;</number> where n is the error diffusion coefficient shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> The aforementioned error diffusion processing method does not refer to any previous processing results since it diffuses errors to pixels before processing. This is a major difference from the first embodiment. However, in this case, several lines from the line of the pixel of interest must undergo arithmetic operations for respective pixels. This is because since several lines from the pixel of interest have undergone error diffusion, even if an input image signal is &ldquo;0&rdquo;, the error-corrected pixel value may not be &ldquo;0&rdquo;. Hence, even when an input image signal is &ldquo;0&rdquo;, the binarization output result must not be immediately replaced by &ldquo;0&rdquo;. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> For this reason, the present invention can be applied to the error diffusion processing method of the second embodiment. In the second embodiment, since error values are diffused up to two lines ahead of the pixel of interest, whether or not line skip is made is checked by the process shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> as in the first embodiment. Since the process after whether or not line skip is made is checked is the same as that in the first embodiment, a description thereof will be omitted. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> Of course, as in the first embodiment, when the number of lines to which errors are diffused is n, the image conversion process can be skipped only when (n&plus;1) or more blank lines successively appear. At this time, the threshold value of the parameter count in step S<highlight><bold>2205</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> must be set to be n&plus;1, as described above. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> With the above process, the image conversion process can be appropriately skipped, and a high-speed process can be realized as in the first embodiment. As a result, another process can be made in place of the skipped image conversion process, and image data sent from the PC can be output at high speed from a printer or digital copying machine. </paragraph>
<paragraph id="P-0166" lvl="7"><number>&lsqb;0166&rsqb;</number> &lsqb;Third Embodiment&rsqb;</paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> The third embodiment of the present invention will be described in detail below with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> The same reference numerals in the basic apparatus arrangement in the third embodiment denote the same parts as in the first embodiment, and a description thereof will be omitted. A characteristic feature of the third embodiment lies in that the error diffusion process used in the error diffusion processor <highlight><bold>2302</bold></highlight> of the second embodiment is replaced by a minimized error method that collects errors. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Since the basic arrangement except for the image conversion processing circuit is the same as that in the first and second embodiments, only differences will be explained. Also, since the basic concept of the minimized error method is the state-of-the-art technique, a detailed description thereof will be omitted, but only a point associated with this embodiment will be explained. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> shows a collection method of collecting errors in contrast to the error diffusion method that diffuses errors, as described in the second embodiment. In <cross-reference target="DRAWINGS">FIG. 25</cross-reference>, &ldquo;*&rdquo; indicates the position of a pixel of interest, and numerical values around the pixel of interest are minimized error coefficients. This minimized error method processes respective pixels while holding a binarization error generated at the pixel of interest without diffusing it. Also, the method of correcting an image signal value of the pixel of interest is largely different from the error diffusion process. That is, if Ei,j represents a binarization error calculated at each pixel, an image signal value D is corrected by: </paragraph>
<paragraph lvl="0"><in-line-formula>D&plus;(Ei,j&times;n&divide;(7&plus;5&plus;3&plus;5&plus;7&plus;5&plus;3&plus;1&plus;3&plus;5&plus;3&plus;1) </in-line-formula></paragraph>
<paragraph id="P-0171" lvl="7"><number>&lsqb;0171&rsqb;</number> where n is the minimized error coefficient shown in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>, and i,j of Ei,j is an error collection range. In the third embodiment, i&equals;&minus;2 to 2, and j&equals;&minus;2 to 0. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> That is, this method collects quantization errors generated previously from pixels around the pixel of interest. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> An image signal corrected in this manner is binarized using an arbitrary slice level. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> The aforementioned minimized error method refers to previous processing results with respect to the position of the pixel of interest. This is the same as the average density preservation method in the first embodiment. Hence, in this case, even when an input line of the pixel of interest is &ldquo;0&rdquo;, the binarization result must not be immediately replaced by &ldquo;0&rdquo;. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> For this reason, the present invention can be applied to the minimized error method of the third embodiment. Since the third embodiment refers to error values of two lines before the pixel of interest, whether or not line skip is made is checked by the process shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> as in the first embodiment. Since the process after whether or not line skip is made is checked is the same as that in the first embodiment, a description thereof will be omitted. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Of course, as in the first and second embodiments, when the number of lines from which errors are collected is n, the image conversion process can be skipped only when (n&plus;1) or more blank lines successively appear. At this time, the threshold value of the parameter count in step S<highlight><bold>2205</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is set to be n&plus;1. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> With the above process, the image conversion process can be appropriately skipped, and a high-speed process can be realized as in the first and second embodiments. As a result, another process can be made in place of the skipped image conversion process, and image data sent from the PC can be output at high speed from a printer or digital copying machine. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> In the embodiments described above, the average density preservation processing method, error diffusion processing method, and minimized error method have been exemplified. However, the present invention is not limited to such specific methods, and can be applied to an image conversion process which executes a process with reference to a region other than the pixel of interest. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> In the above embodiments, binarization has been exemplified. However, the present invention is not limited to this, and may be applied to conversion to n-valued data (n&gt;1). </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> Furthermore, the present invention may be applied to either a system constituted by a plurality of devices (e.g., a host computer, interface device, reader, printer, and the like), or an apparatus consisting of a single equipment (e.g., a copying machine, facsimile apparatus, or the like). </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> The objects of the present invention are also achieved by supplying a storage medium, which records a program code of a software program that can implement the functions of the above-mentioned embodiments to the system or apparatus, and reading out and executing the program code stored in the storage medium by a computer (or a CPU or MPU) of the system or apparatus. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> In this case, the program code itself read out from the storage medium implements the functions of the above-mentioned embodiments, and the storage medium which stores the program code constitutes the present invention. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> As the storage medium for supplying the program code, for example, a floppy disk, hard disk, optical disk, magneto-optical disk, CD-ROM, CD-R, magnetic tape, nonvolatile memory card, ROM, and the like may be used. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> The functions of the above-mentioned embodiments may be implemented not only by executing the readout program code by the computer but also by some or all of actual processing operations executed by an OS (operating system) running on the computer on the basis of an instruction of the program code. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> Furthermore, the functions of the above-mentioned embodiments may be implemented by some or all of actual processing operations executed by a CPU or the like arranged in a function extension board or a function extension unit, which is inserted in or connected to the computer, after the program code read out from the storage medium is written in a memory of the extension board or unit. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> As described above, according to the above embodiments, since an image conversion process that requires a heavy load is skipped in accordance with a feature of an image to be processed, a high-speed image process can be realized. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> The preferred embodiments of the present invention have been explained. However, the present invention is not limited to the aforementioned specific embodiments, and various modifications may be made within the scope of the claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An image processing apparatus for receiving N-bit multi-valued image information having density information, converting the input image information into M-bit (N&gE;M) image information, and outputting the converted image information, comprising: 
<claim-text>generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of the multi-valued image information, on the basis of the multi-valued image information; and </claim-text>
<claim-text>control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the image conversion process is executed also with reference to pixels other than the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the pixels to be referred to by the image conversion process are pixels which neighbor the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the pixels to be referred to by the image conversion process include not less than one line different from the line including the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the image conversion process comprises means for obtaining a quantization error generated upon image conversion. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the image conversion process comprises means for making error correction for the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said generation means generates binary information indicating whether or not image information other than a predetermined value is present in the line including the pixel of interest of the multi-valued image information. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said control means controls to inhibit execution of the image conversion process upon executing the image conversion process only when the generated information indicating that the image conversion process is to be skipped successively appears for a number of times not less than &ldquo;the number of lines required for the process&rdquo;&plus;1. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said control means forcibly sets a processing result of the image conversion process to be a predetermined value when said control means inhibits execution of the image conversion process. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein information from said generation means and an output from the image conversion process are logically ANDed and output. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, further comprising image scanning means for sequentially scanning images of a plurality of documents, and sequentially outputting scanned image information. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said apparatus is connected via a network to image forming means for forming a visible image of the image information that has been converted into the M-bit image information. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method of controlling an image forming apparatus which receives N-bit multi-valued image information having density information, converts the input image information into M-bit (N&gE;M) image information, and outputs the converted image information, comprising the steps of: 
<claim-text>generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of the multi-valued image information, on the basis of the multi-valued image information; and </claim-text>
<claim-text>controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the image conversion process is executed also with reference to pixels other than the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the pixels to be referred to by the image conversion process are pixels which neighbor the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the pixels to be referred to by the image conversion process include not less than one line different from the line including the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the image conversion process comprises the step of obtaining a quantization error generated upon image conversion. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the image conversion process comprises the step of making error correction for the pixel of interest. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the generation step includes the step of generating binary information indicating whether or not image information other than a predetermined value is present in the line including the pixel of interest of the multi-valued image information. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the control step includes the step of controlling to inhibit execution of the image conversion process upon executing the image conversion process only when the generated information indicating that the image conversion process is to be skipped successively appears for a number of times not less than &ldquo;the number of lines required for the process&rdquo;&plus;1. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the control step includes the step of forcibly setting a processing result of the image conversion process to be a predetermined value when execution of the image conversion process is inhibited. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A program for making a computer function as: 
<claim-text>generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of multi-valued image information, on the basis of the multi-valued image information; and </claim-text>
<claim-text>control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A computer readable recording medium that records a program for making a computer function as: 
<claim-text>generation means for generating information indicating whether or not an image conversion process is made for one line including a pixel of interest of multi-valued image information, on the basis of the multi-valued image information; and </claim-text>
<claim-text>control means for controlling to inhibit execution of the image conversion process for one line including the pixel of interest of the multi-valued image information in accordance with the generated information.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>8</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002082A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002082A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002082A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002082A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002082A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002082A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002082A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002082A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002082A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002082A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002082A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002082A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002082A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002082A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002082A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002082A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002082A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030002082A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030002082A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030002082A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030002082A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030002082A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030002082A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030002082A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030002082A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030002082A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
