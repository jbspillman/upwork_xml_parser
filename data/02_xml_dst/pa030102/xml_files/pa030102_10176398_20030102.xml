<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005205A1-20030102-D00000.TIF SYSTEM "US20030005205A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00001.TIF SYSTEM "US20030005205A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00002.TIF SYSTEM "US20030005205A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00003.TIF SYSTEM "US20030005205A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00004.TIF SYSTEM "US20030005205A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00005.TIF SYSTEM "US20030005205A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00006.TIF SYSTEM "US20030005205A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005205A1-20030102-D00007.TIF SYSTEM "US20030005205A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005205</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10176398</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020621</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>90115353</doc-number>
</priority-application-number>
<filing-date>20010622</filing-date>
<country-code>TW</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/14</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>305000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Core logic circuit of computer system capable of accelerating 3D graphics</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ruen-Rone</given-name>
<family-name>Lee</family-name>
</name>
<residence>
<residence-non-us>
<city>Hsin-Chu City</city>
<country-code>TW</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Chien-Chung</given-name>
<family-name>Hsiao</family-name>
</name>
<residence>
<residence-non-us>
<city>Bai-Sa</city>
<country-code>TW</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Lin-Tien</given-name>
<family-name>Mei</family-name>
</name>
<residence>
<residence-non-us>
<city>Chu-Dong</city>
<country-code>TW</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Hung-Ta</given-name>
<family-name>Pai</family-name>
</name>
<residence>
<residence-non-us>
<city>Da-Jia</city>
<country-code>TW</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Silicon Integrated System Corp.</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>LOWE HAUPTMAN GILMAN &amp; BERNER, LLP</name-1>
<name-2>Suite 310</name-2>
<address>
<address-1>1700 Diagonal Road</address-1>
<city>Alexandria</city>
<state>VA</state>
<postalcode>22314</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A core logic circuit for use with a CPU and a main graphics accelerator in a computer system is provided. The core logic chip includes a host controller electrically connected to the CPU for receiving a command from the CPU; an auxiliary graphing engine electrically connected to the host controller fore receiving and processing the command; and a transmission controller electrically connected to the auxiliary graphing engine for transmitting the command processed and outputted by the auxiliary graphing engine to the main graphics accelerator to be further processed. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a core logic circuit of a computer system, and more particularly to a core logic circuit capable of accelerating 3D graphics. The present invention also relates to a process for coordinating the 3D graphics operations of a core logic circuit and a 3D graphics accelerator in a computer system </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In a typical computer system of <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> core logic circuit <highlight><bold>13</bold></highlight> such as a chipset, is widely used to control data flows among a central processing unit (CPU) <highlight><bold>11</bold></highlight>, a system memory <highlight><bold>12</bold></highlight>, and a plurality of I/O devices including a 3D graphics accelerator <highlight><bold>14</bold></highlight> and other I/O devices <highlight><bold>15</bold></highlight>. For example, the CPU <highlight><bold>11</bold></highlight> accesses data of a system memory <highlight><bold>12</bold></highlight> or outputs graphing commands to the 3D graphics accelerator <highlight><bold>14</bold></highlight> via the core logic circuit <highlight><bold>13</bold></highlight>. The system memory, for example, is a dynamic random access memory (DRAM). The core logic circuit <highlight><bold>13</bold></highlight> includes several interface controllers such as a host controller <highlight><bold>130</bold></highlight>, a DRAM controller <highlight><bold>131</bold></highlight>, an AGP/PCI controller <highlight><bold>132</bold></highlight> and other I/O interface controllers <highlight><bold>133</bold></highlight>, as can be seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, The interface controllers <highlight><bold>130</bold></highlight>, <highlight><bold>131</bold></highlight>, <highlight><bold>132</bold></highlight> and <highlight><bold>133</bold></highlight> are employed for controlling data exchange between the core logic circuit <highlight><bold>1</bold></highlight> <highlight><bold>3</bold></highlight> and respectively the CPU <highlight><bold>11</bold></highlight>, the system memory <highlight><bold>12</bold></highlight>, the 3D graphics accelerator <highlight><bold>14</bold></highlight> and other I/O devices <highlight><bold>15</bold></highlight>. In general, data flows through different buses to be used. For example, the CPU <highlight><bold>11</bold></highlight> accesses memory data through a host bus and a memory bus (not shown). Since the newly developed buses, e.g. a USB or an IEEE 1394 interface, are specified for different applications, the pad number of the core logic circuit <highlight><bold>13</bold></highlight> is large for complying with the requirements. Therefore, a large area of the core logic circuit is required for accommodating the large number of pads. Under this circumstance, although the control circuits of the buses require extremely small area for current semiconductor manufacturing technology, the area of the core logic circuit could not be reduced correspondingly. Such occurrence is called a &ldquo;pad-limited&rdquo; phenomenon. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> On the other hand, with the increasing demand of 3D graphics, a part of the 3D graphics accelerating task is transferred from the CPU to the 3D graphics accelerator. Therefore, the 3D graphics accelerator <highlight><bold>14</bold></highlight> becomes larger than ever. Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>(<highlight><italic>a</italic></highlight>), the 3D graphics accelerator <highlight><bold>14</bold></highlight> generally includes a geometry engine <highlight><bold>141</bold></highlight> and a rendering engine <highlight><bold>142</bold></highlight>. The geometry engine <highlight><bold>141</bold></highlight> and the rendering engine <highlight><bold>142</bold></highlight> are used for doing the transform/lighting and setup/rendering operations, respectively. The geometry engine <highlight><bold>141</bold></highlight> and the rendering engine <highlight><bold>142</bold></highlight> are incorporated in a single chip for improving 3D graphics performance. In addition, nowadays, multiple pipelines are widely used in the rendering operation to improve the rending throughput. Therefore, much more logical gates are required to be installed in the 3D graphics accelerator <highlight><bold>14</bold></highlight>, which increases the cost of the 3D graphics accelerator <highlight><bold>14</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 3</cross-reference>(<highlight><italic>b</italic></highlight>) illustrates another design of the 3D graphics accelerator <highlight><bold>14</bold></highlight>. Since the processing speeds of the geometry engine <highlight><bold>141</bold></highlight> and the rendering engine <highlight><bold>142</bold></highlight> are different in some cases, a local DRAM <highlight><bold>16</bold></highlight> for supporting the rendering operation as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>(<highlight><italic>a</italic></highlight>), is provided for buffering the output of the geometry engine <highlight><bold>141</bold></highlight> so as to prevent such engines from being idle. As known, a sufficient memory bandwidth is required for the operation of the rendering engine <highlight><bold>142</bold></highlight>. The share of the local DRAM as described above might impair the performance of the rendering engine <highlight><bold>142</bold></highlight> due to the reduction of the memory bandwidth provided for the rendering operation. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> It is an object of the present invention to provide an apparatus for accelerating 3D graphics, in which the geometry engine of the 3D graphics accelerator is embedded into the core logic circuit so as to reduce the cost of the graphics accelerator and make use of the area of the core logic circuit. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> It is a further object of the present invention to provide an apparatus for accelerating 3D graphics, in which the system memory is provided for buffering the output of the geometry engine in order not to occupy the memory bandwidth of the local memory, and adversely affect the performance of the rendering engine. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In accordance with a first aspect of the p resent invention, a core logic chip for use with a CPU and a main graphics accelerator in a computer system, comprises a host controller electrically connected to the CPU for receiving a command from the CPU; an auxiliary graphing engine electrically connected to the host controller fore receiving and processing the command; and a transmission controller electrically connected to the auxiliary graphing engine for transmitting the command processed and outputted by the auxiliary graphing engine to the main graphics accelerator to be further processed. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In general, the core logic chip further comprises an interface controller electrically connected to the host controller and I/O devices for interfacing therebetween. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Preferably, the transmission controller is an AGP/PCI bus controller. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In genera, the c ore logic chip further comprises a control circuit electrically connected to the host controller and the auxiliary graphing engine for outputting a control signal to control the transmission of command in the auxiliary graphing engine. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In an embodiment, the auxiliary graphing engine i s a 3D engine, and includes: a demultiplexer receiving a graphing command from the host controller in response to the control signal; a transform and lighting unit receiving and performing converting and brightness-controlling operation on the graphing command from the demultiplexer; and a multiplexer selecting a signal from one of the demultiplexer and the transform and lighting unit to be outputted to the transmission controller. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In general, the core logic chip further comprises a system memory controller electrically connected to the host controller and a system memory for accessing data, </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Generally, the system memory is a DRAM. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Preferably, the auxiliary graphing engine her includes a primitive sorter for receiving the output signal of the demultiplexer, and storing the sorted data to the system memory via the system memory controllers and the data in the system memory is accessed by the transform and lighting unit via the system memory controller. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In accordance with a second aspect of The present invention, there is provided a core logic circuit of a computer system. The core logic circuit included an interface controller portion, a graphing engine and a control circuit. The interface controller portion includes a host controller, a memory controller and an AGP/PCI bus controller for controlling data exchange with a CPU, a system memory and a graphics accelerator, respectively. The graphing engine is electrically connected between the host controller and the AGP/PCI bus controller, and in response to a first graphing command from the CPU, performing a first graphing operation to realize a second graphing command prior to a second graphing operation performed by the graphic accelerator. The control circuit is electrically connected between the host controller and the AGP/PCI bus controller for controlling whether the first graphing command flows to the graphics accelerator via the graphing engine. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In an embodiment, the core logic circuit further includes a first demultiplexer and a first multiplexer. The first demultiplexer is electrically connected to the host controller for receiving the first graphing command from the CPU via the host controller, and outputting the first graphing command to either of the graphing engine and the AGP/PCI bus controller. The first multiplexer is electrically connected to the graphing engine, the first demultiplexer and the AGP/PCI bus controller for selecting one of the first graphing command and the second graphing command to be outputted to the AGP/PCI bus controller, wherein the first demultiplexer and the first multiplexer are respectively controlled by a first control signal and a second control signal of the control circuit. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In all embodiment, the core logic circuit further includes a data flow control unit between the graphing engine and the first multiplexer, wherein the data flow control unit comprises a second demultiplexer and a second multiplexer, interconnected with each other and both electrically connected to the memory controller, for determining the second graphing command to be outputted to either one of the system memory and the graphing accelerator via the memory controller and the AGP/PCI bus controller, respectively, and the second demultiplexer and the second multiplexer are respectively controlled by a third control signal and a fourth control signal of the control circuit, </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Preferably, the graphics accelerator is a 3D graphics accelerator, and the graphing engine is a geometry engine for performing a transform/lighting operation. The geometry engine finer comprises a primitive sorter for re-ordering 3D primitives in accordance with depth information. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In accordance with a third aspect of the present invention, there is provided an apparatus for accelerating 3D graphics. The apparatus includes a core logic circuit and a 3D graphics accelerator. The core logic circuit is electrically connected to a CPU and a system memory and having a 3D geometry engine for performing a first graphics operation. The 3D graphics Accelerator is electrically connected with the core logic circuit via an I/O bus and having a rendering engine for performing a second graphics operation. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Preferably, the first graphics operation includes a transform and lighting operation, and optionally a sorting operation. The second graphics operation includes a setup and rendering operation. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In accordance with a fourth aspect of the present invention, a method for processing a graphing command in a computer system comprises steps of: outputting a command from a CPU of the computer system; and receiving the command by an auxiliary graphing engine of the computer system, processing a portion of the command, and outputting the command to a main graphing accelerator of the computer system to be further processed. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Preferably, the auxiliary graphing engine is disposed in a core logic chip of the computer system, and communicated with the main graphing accelerator via an AGP/PCI bus. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In accordance with a fifth aspect of the present invention, there is provided a process for coordinating 3D graphics operations of a core logic circuit and a 3D graphics accelerator in, a computer system, wherein data of the core logic circuit and the 3D graphics accelerator is respectively stored in a system memory and a local memory, and each the core logic circuit and the 3D graphics accelerator having a 3D geometry engine. The process includes steps of detecting respective access conditions of the system memory and the local memory, and starting the 3D geometry engine of a selected one of the core logic circuit and the 3D graphics accelerator to perform a graphics operation according to the access conditions. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In an embodiment, the graphics operation is performed by the 3D geometry engine of the 3D graphics accelerator if the system memory is detected to be busier than the local memory, and the graphics operation is performed by the 3D geometry engine of the core logic circuit if the local memory is busier than the system memory. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Preferably, the detecting step is performed once a frame or a scene. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The above objects and advantages of the present invention will become more readily apparent to those ordinarily skilled in the art after reviewing the following detailed description and accompanying drawings, in which:</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a typical computer system; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating the architecture of the core logic circuit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference>(<highlight><italic>a</italic></highlight>) is a block diagram illustrating a 3D graphics accelerator in the prior art; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference>(<highlight><italic>b</italic></highlight>) is a block diagram illustrating another 3D graphics accelerator in the prior art; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a core logic circuit according to a first preferred embodiment of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating core logic circuit according to a second preferred embodiment of the present invention; and </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow chart illustrating a process for coordinating 3D graphics operations of a core logic circuit and a 3D graphics accelerator in a computer system according to a preferred embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> core logic circuit <highlight><bold>20</bold></highlight> according to a first preferred embodiment of the present invention includes an interface controller portion, a geometry engine <highlight><bold>24</bold></highlight> and a control circuit <highlight><bold>25</bold></highlight>. The interface controller portion includes the similar controllers in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, for example, a host controller <highlight><bold>230</bold></highlight>, a DRAM controller <highlight><bold>231</bold></highlight>, an AGP/PCI controller <highlight><bold>232</bold></highlight> and other I/O interface controllers <highlight><bold>233</bold></highlight>, which are used for controlling data exchange with a CPU, a system memory, a graphics accelerator (not shown) and other I/O interfaces, respectively. A demultiplexer <highlight><bold>242</bold></highlight> is electrically connected to the host controller <highlight><bold>230</bold></highlight> for receiving a first graphing command from the CPU via the host controller <highlight><bold>230</bold></highlight>, and outputting the first graphing command to either of the transforming/lighting (T/L) unit <highlight><bold>241</bold></highlight> and the AGP/PCI controller <highlight><bold>232</bold></highlight>. A transform/lighting operation is performed by the geometry engine <highlight><bold>24</bold></highlight> so as to realize a second graphing command prior to a setup/rendering operation performed by the graphic accelerator. A multiplexer <highlight><bold>243</bold></highlight> is electrically connected to the T/L unit <highlight><bold>241</bold></highlight>, the demultiplexer <highlight><bold>242</bold></highlight> and the AGP/PCI controller <highlight><bold>232</bold></highlight> for selecting one of the first graphing command and the second graphing command to be outputted to AGP/PCI controller <highlight><bold>232</bold></highlight>. Moreover, the demultiplexer <highlight><bold>242</bold></highlight> and the multiplexer <highlight><bold>243</bold></highlight> are respectively controlled by a first control signal S<highlight><bold>1</bold></highlight> and a second control signal S<highlight><bold>2</bold></highlight> of the control circuit <highlight><bold>25</bold></highlight> for controlling whether the first graphing command flows to the geometry accelerator via the geometry engine <highlight><bold>24</bold></highlight>. It is of course that the control circuit <highlight><bold>25</bold></highlight> can also include registers for storing these control signals. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Since the transform/lighting operation is performed by the geometry engine <highlight><bold>24</bold></highlight> of the core logic circuit <highlight><bold>20</bold></highlight>, the transform/lighting operation will be no longer required to be done by the CPU. In addition, the architecture for performing transform/lighting operation could be removed from the graphics accelerator. Therefore, the cost of the 3D graphics accelerator is dramatically reduced without impairing the graphics functions of the whole computer system. Since the core logic <highlight><bold>20</bold></highlight> is pad-limited, the extra gates can be utilized for installing the geometry engine <highlight><bold>24</bold></highlight> and make use of the area of the core logic circuit <highlight><bold>320</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> core logic circuit <highlight><bold>30</bold></highlight> according to a second preferred embodiment of the present invention also includes an interface controller portion, a geometry engine <highlight><bold>34</bold></highlight> and a control circuit <highlight><bold>35</bold></highlight>. The interface controller portion includes the similar controllers in <cross-reference target="DRAWINGS">FIG. 4, e</cross-reference>.g. a host controller <highlight><bold>330</bold></highlight>, the DRAM controller <highlight><bold>331</bold></highlight>, an AGP/PCI controller <highlight><bold>332</bold></highlight> and other I/O interface controllers <highlight><bold>333</bold></highlight>. The core logic circuit firmer includes a first demultiplexer <highlight><bold>342</bold></highlight> and a first multiplexer <highlight><bold>343</bold></highlight>. A data flow control unit <highlight><bold>344</bold></highlight> is provided between the T/L unit <highlight><bold>341</bold></highlight> and the multiplexer <highlight><bold>343</bold></highlight>. The data flow control unit <highlight><bold>344</bold></highlight> includes a second demultiplexer <highlight><bold>3441</bold></highlight> and a second multiplexer <highlight><bold>3442</bold></highlight>, which are interconnected with each other and both electrically connected to the memory controller <highlight><bold>331</bold></highlight> for determining the second graphing command to be outputted to either one of the system memory and the graphing accelerator via the memory controller <highlight><bold>331</bold></highlight> and the AGP/PCI controller <highlight><bold>332</bold></highlight>, respectively. The second demultiplexer <highlight><bold>3441</bold></highlight> and the second multiplexer <highlight><bold>3442</bold></highlight> are respectively controlled by a third control signal S<highlight><bold>3</bold></highlight> and a fourth control signal S<highlight><bold>4</bold></highlight> of the control circuit <highlight><bold>35</bold></highlight>. Similarly, the control circuit <highlight><bold>35</bold></highlight> can also includes registers for storing these control signals. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> It is noted second graphing command can be optionally stored in the system memory through the DRAM controller <highlight><bold>331</bold></highlight> and, if desired, it will be retrieved. Therefore, the processing speed of geometry engine <highlight><bold>34</bold></highlight> can match the graphics accelerator so as to avoid being idle. Since the system memory is provided for buffering the output of the geometry engine, the memory bandwidth of the local memory will not be fully occupied, and the performance of the rendering engine will not be adversely affected. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Certainly, the geometry engine <highlight><bold>24</bold></highlight>/<highlight><bold>34</bold></highlight> can have other functions in 3D graphics. For example, a primitive sorter can re-order 3D primitives in accordance with their depth information, and discard the covered triangles. Thus, only the visible primitives will be saved and passed to the next stage, which prevent the graphics accelerator from memory bound and thus enhance its performance. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> If the 3D graphics accelerator of a computer system has a geometry engine with the same functions as that in tee core logic circuit of the present invention, it is desirable to provide a process for coordinating 3D graphics operations of a core logic circuit and a 3D graphics accelerator in a computer system, thereby obtaining the highest throughout of the 3D graphing commands. The process of the present invention includes steps of detecting respective access conditions of the system memory and the local memory, and starting the 3D geometry engine of a selected one of the core logic circuit and the 3D graphics accelerator to perform a graphics operation according to the access conditions. The detection can be done in once a frame or a scene. For illustration, the flow chart is shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. If the system memory is busier than the local memory, the graphics operation is performed by the 3D geometry engine of the 3D graphics accelerator. If the local memory is busier than the system memory, the graphics operation is performed by said 3D geometry engine of the core logic circuit. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> While the invention has been described in terms of what is presently considered to be the most practical and preferred embodiments, it is to be understood that the invention needs not be limited to the disclosed embodiment. On the contrary, it is intended to cover various modifications and similar arrangements included within the spirit and scope of the appended claims which are to be accorded with the broadest interpretation so as to encompass all such modifications and similar structures. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A core logic chip for use with a CPU and a main graphics accelerator in a computer system, comprising: 
<claim-text>a host controller electrically connected to said CPU for receiving a command from said CPU; </claim-text>
<claim-text>an auxiliary graphing engine electrically connected to said host controller fore receiving and processing said command; and </claim-text>
<claim-text>a transmission controller electrically connected to said auxiliary graphing engine for transmitting said command processed and outputted by said auxiliary graphing engine to said main graphics accelerator to be further processed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The core logic chip according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said transmission controller is an AGP/PCI bus controller. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The core logic chip according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said auxiliary graphing engine is a 3D engine, and includes: 
<claim-text>a demultiplexer receiving a graphing command from said host controller in response to a control signal; </claim-text>
<claim-text>a transform and lighting unit receiving and performing converting and brightness-controlling operation on said graphing command from said demultiplexer; and </claim-text>
<claim-text>a multiplexer selecting a signal from one of said demultiplexer and said transform and lighting unit to be outputted to said transmission controller. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The core logic chip according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said control signal is generated by a control circuit of said core logic chip, which is electrically connected to said host controller and said auxiliary graphing engine. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The core logic chip according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said auxiliary graphing engine further includes a primitive sorter for receiving the output signal of said demultiplexer, and storing the sorted data to a system memory via a system memory controller of said core logic chip, and the data in said system memory is accessed by said transform and lighting unit via said system memory controller. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The core logic chip according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein said system memory is a DRAM. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A core logic circuit of a computer system comprising: 
<claim-text>an interface controller portion including a host controller, a memory controller and an AGP/PCI bus controller for controlling data exchange with a CPU, a system memory and a graphics accelerator, respectively; </claim-text>
<claim-text>a graphing engine electrically connected between said host controller and said AGP/PCI bus controller, and in response to a first graphing command from said CPU, performing a first graphing operation to realize a second graphing command prior to a second graphing operation performed by said graphic accelerator; and </claim-text>
<claim-text>a control circuit electrically connected between said host controller and said AGP/PCI bus controller for controlling whether said first graphing command flows to said graphics accelerator via said graphing engine. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The core logic circuit according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> further comprising: 
<claim-text>a first demultiplexer electrically connected to said host controller for receiving said fast graphing command from said CPU via said host controller, and outputting said first graphing command to either of said graphing engine and said AGP/PCI bus controller; and </claim-text>
<claim-text>a first multiplexer electrically connected to said graphing engine, said first demultiplexer and said AGP/PCI bus controller for selecting one of said first graphing command and said second graphing command to be outputted to said AGP/PCI bus controller, wherein said first demultiplexer and said first multiplexer are respectively controlled by a first control signal and a second control signal of said control circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The core logic circuit according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> further comprising a data flow control unit between said graphing engine and said first multiplexer, wherein said data flow control unit comprises a second demultiplexer and a second multiplexer, interconnected with each other and both electrically connected to said memory controller, for determining said second graphing command to be outputted to either one of said system memory and said graphing accelerator via said memory controller and said AGP/PCI bus controller, respectively, and said second demultiplexer and said second multiplexer are respectively controlled by a third control signal and a fourth control signal of said control circuit. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The core logic according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said graphics accelerator is a 3D graphics accelerator, and said graphing engine is a geometry engine for performing a transform/lighting operation. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The core logic circuit according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said geometry engine further comprises a primitive sorter for reordering 3D primitives in accordance with depth information. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The core logic circuit according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said system memory is a DRAM. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. An apparatus for accelerating 3D graphics comprising: 
<claim-text>a core logic circuit electrically connected to a CPU and a system memory and having a 3D geometry engine for performing a first graphics operation; and </claim-text>
<claim-text>a 3D graphics accelerator electrically connected with said core logic circuit via an AGP/PCI bus and having a rendering engine for performing a second graphics operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said first graphics operation includes a transform and lighting operation. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference> wherein said first graphics operation includes transform, lighting and sorting operations. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said second graphics operation includes a setup and rendering operation. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method for processing a graphing command in a computer system, comprising steps of: 
<claim-text>outputting a command from a CPU of said computer system; and </claim-text>
<claim-text>receiving said command by an auxiliary graphing engine of said computer system, processing a portion of said command, and outputting said command to a main graphing accelerator of said computer system to be filer processed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The process according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> wherein said auxiliary graphing engine is disposed in a core logic chip of said computer system, and communicated with said main graphing accelerator via an AGP/PCI bus. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A process for coordinating 3D graphics operations of a core logic circuit and a 3D graphics accelerator in a computer system, data of said core logic circuit and said 3D graphics accelerator being respectively stored in a system memory and a local memory, and each said core logic circuit and said 3D graphics accelerator having a 3D geometry engine, said process comprising steps of: 
<claim-text>detecting respective access conditions of said system memory and said local memory; and </claim-text>
<claim-text>starting said 3D geometry engine of a selected one of said core logic circuit and said 3D graphics accelerator to perform a graphics operation according to said access conditions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said graphics operation includes a transform and lighting operation. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said graphics operation includes transform, lighting and sorting operations. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The process according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said graphics operation is performed by said 3D geometry engine of said 3D graphics accelerator if said system memory is detected to be busier than said local memory, and said graphics operation is performed by said 3D geometry engine of said core logic circuit if said local memory is busier than said system memory. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The process according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said detecting step is performed once a frame. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The process according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> wherein said detecting step is performed once a scene.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005205A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005205A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005205A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005205A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005205A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005205A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005205A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005205A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
