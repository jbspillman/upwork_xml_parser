<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004976A1-20030102-D00000.TIF SYSTEM "US20030004976A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00001.TIF SYSTEM "US20030004976A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00002.TIF SYSTEM "US20030004976A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00003.TIF SYSTEM "US20030004976A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00004.TIF SYSTEM "US20030004976A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00005.TIF SYSTEM "US20030004976A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00006.TIF SYSTEM "US20030004976A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00007.TIF SYSTEM "US20030004976A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00008.TIF SYSTEM "US20030004976A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00009.TIF SYSTEM "US20030004976A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00010.TIF SYSTEM "US20030004976A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00011.TIF SYSTEM "US20030004976A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004976A1-20030102-D00012.TIF SYSTEM "US20030004976A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004976</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10176631</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020624</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-195385</doc-number>
</priority-application-number>
<filing-date>20010627</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/30</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>200000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Data processing method and apparatus and stroage medium</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Miyuki</given-name>
<family-name>Enokida</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Kunihiro</given-name>
<family-name>Yamamoto</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Kiyoshi</given-name>
<family-name>Kusama</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Takashi</given-name>
<family-name>Hanamoto</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FITZPATRICK CELLA HARPER &amp; SCINTO</name-1>
<name-2></name-2>
<address>
<address-1>30 ROCKEFELLER PLAZA</address-1>
<city>NEW YORK</city>
<state>NY</state>
<postalcode>10112</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A data processing apparatus in which attachment of removable memory card is detected and it is determined whether or not binary data is stored in the memory card. If it is determined that binary data is stored in the memory card, it is further determined whether or not meta data is stored in the memory card. If it is determined that the meta data is stored, the meta data is added to the binary data. If it is determined that no meta data is stored, meta data registration processing is started, and addition processing is performed after registration of the meta data. On the other hand, if it is determined that no binary data is stored, the registration processing is started to register the meta data in the memory card. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to data management apparatus and method for registration of meta data in binary data. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Meta data is &ldquo;data on data&rdquo; which is used as data explaining image data, audio data and the like (these data will be referred to as &ldquo;binary data&rdquo;). A keyboard search can be performed on the image data, audio data and the like by adding the meta data to the respective binary data. Accordingly, as more meta data are added to the respective binary data, a search can be conducted with more key words. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Further, input of binary data or registration of meta data from a removable PC card is performed by a user&apos;s inputting a corresponding command or designation using GUI or the like. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> However, the work to add meta data to binary data is very troublesome for the user. For example, the user must check each binary data for input of meta data. Further, even if the same meta data is to be added to binary data generated on almost the same condition, the same meta data must be repeatedly inputted. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Further, as a method of inputting meta data for respective binary data, proposed is storing meta data of binary data to be obtained onto a removable storage medium such as a memory card, then storing the binary data onto the storage medium, and thereafter, adding the meta data to the respective binary data by a meta data registration device. However, the meta data registration device cannot automatically select one of processing of previously inputting meta data (pre-input processing) from processing of adding the meta data to the binary data (addition processing). Accordingly, it is necessary for the user to select any of the processings from the same menu. Thus, in this conventional art, the operation is complicated and cannot be automated. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> As a result, in many cases, meta data is not actually added to binary data. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention has been made in consideration of the above situation regarding input of meta data, and has its object to facilitate input of meta data. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Further, another object of the present invention is to register meta data for many binary data by inputting meta data only once. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Further, another object of the present invention is to simplify or automate user&apos;s operation procedure upon addition of meta data to binary data. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> According to the present invention, the foregoing object is attained by providing a data processing apparatus comprising: connection means for connection with a storage medium, removable from the apparatus, so as to enable access to the medium; first determination means for, if the storage medium is accessible by the connection means, determining whether or not binary data is stored in the storage medium; addition means for, if the first determination means determines that the binary data is stored, adding meta data stored in the storage medium to the binary data; and first registration means for, if the first determination means determines that the binary data is not stored, starting registration processing to register the meta data in the storage medium. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to the another aspect of the present invention, the foregoing object is attained by providing a data processing method in a data processing apparatus having connection means for connection with a storage medium, removable from the apparatus, so as to enable access to the medium, the method comprising: a first determination step of, if the storage medium is accessible by the connection means, determining whether or not binary data is stored in the storage medium; an addition step of, if it is determined at the first determination step that the binary data is stored, adding meta data stored in the storage medium to the binary data; and a first registration step of, if it is determined at the first determination step that the binary data is not stored, starting registration processing to register the meta data in the storage medium. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same name or similar parts throughout the figures thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing a system configuration of data processing apparatus according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a perspective view showing the outer appearance of the data processing apparatus according to the embodiment; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an example of GUI screen image in meta data input processing; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart showing processing of registering meta data in a memory card; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart showing the meta data input processing at step S<highlight><bold>403</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart showing writing of the meta data onto the memory card at step S<highlight><bold>405</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic diagram showing the structure of image data where the meta data is added to the image data; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart showing processing upon addition of the meta data to the image data; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram showing a construction of DCF (Design rule for Camera File System) file format; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart showing switching processing between registration of meta data and addition of meta data according to the embodiment; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing processing of determining whether or not binary data is stored on the memory card; and </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flowchart showing processing of determining whether or not the binary data is stored on the memory card in a case where plural DCF directories exist. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Preferred embodiments of the present invention will now be described in detail in accordance with the accompanying drawings. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing the system configuration of data processing apparatus according to an embodiment of the present invention. In <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> data input/output device <highlight><bold>100</bold></highlight> reads image data or the like obtained by a digital camera or the like, from a memory card, a PC card or the like, via an interface such as USB, otherwise, writes meta data onto the memory card, the PC card or the like by a procedure to be described later. Note that in the present embodiment, binary data of image or the like is not written onto the memory card (it may be arranged such that the binary data is written onto the memory card). </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> An input device <highlight><bold>101</bold></highlight>, including pointing devices such as a keyboard and a mouse, inputs a user&apos;s designation or data. A storage device <highlight><bold>102</bold></highlight> which is a hard disk or the like holds the binary data and the meta data. A display device <highlight><bold>103</bold></highlight>, which is generally a CRT or a liquid crystal display, displays GUI or an image. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Numeral <highlight><bold>104</bold></highlight> denotes a CPU which relates to all the processing of the above-described constituent elements. ROM <highlight><bold>105</bold></highlight> and RAM <highlight><bold>106</bold></highlight> provide a program, data, a working area and the like necessary for each processing to the CPU <highlight><bold>104</bold></highlight>. Further, a control program necessary for processing in the flowcharts in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and the subsequent figures is stored in the storage device <highlight><bold>102</bold></highlight> or in the ROM <highlight><bold>105</bold></highlight>. Note that if the control program is stored in the storage device <highlight><bold>102</bold></highlight>, it is read to the RAM <highlight><bold>106</bold></highlight>, then executed by the CPU <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Note that in the system configuration, various constituent elements other than the above elements exist, however, since they are not significant in the invention, explanations of those elements will be omitted. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a perspective view showing the outer appearance of the data processing apparatus according to the embodiment. As shown in <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> PC card slot <highlight><bold>201</bold></highlight> as the data input/output device <highlight><bold>100</bold></highlight> is incorporated in a front surface of the apparatus, and binary data is read via a PC card. A power switch <highlight><bold>202</bold></highlight> is used for ON/OFF operation of power supply to the data processing apparatus. An infrared photoreception unit <highlight><bold>203</bold></highlight> receives a signal from a wireless keyboard <highlight><bold>204</bold></highlight> and a remote controller <highlight><bold>205</bold></highlight>. The wireless keyboard <highlight><bold>204</bold></highlight> and the remote controller <highlight><bold>205</bold></highlight> are respectively used as the input device <highlight><bold>101</bold></highlight>. A display output terminal <highlight><bold>206</bold></highlight> is provided on a rear surface of the apparatus. The display device <highlight><bold>103</bold></highlight> such as a CRT or a liquid crystal display is connected to the display output terminal <highlight><bold>206</bold></highlight>. Further, other terminals such as a USB terminal for connection to a digital camera or the like and a network connection terminal for connection to a network may be provided there. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Next, a meta data generation method in the data processing apparatus of the present embodiment having the above construction will be described. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is an example of GUI screen image in meta data input processing. In display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight>, display and selection of list, and text input can be made. In the present embodiment, in the display input field <highlight><bold>301</bold></highlight> corresponding to a &ldquo;who&rdquo; item, a personal name or the like is displayed, selected or inputted. In the display input field <highlight><bold>302</bold></highlight> corresponding to a &ldquo;when&rdquo; item, a date is displayed or inputted. In the display field <highlight><bold>303</bold></highlight> corresponding to a &ldquo;where&rdquo; item, the place of image sensing or the like is displayed, selected or inputted. In the display input field <highlight><bold>304</bold></highlight> corresponding to a &ldquo;what&rdquo; item, an event or the like is displayed, selected or inputted. Further, &ldquo;add&rdquo; buttons <highlight><bold>305</bold></highlight>, <highlight><bold>307</bold></highlight> and <highlight><bold>308</bold></highlight> are buttons to add items inputted in the display input fields <highlight><bold>301</bold></highlight>, <highlight><bold>303</bold></highlight> and <highlight><bold>304</bold></highlight> (inputted from the keyboard) to the lists. A &ldquo;change&rdquo; button <highlight><bold>306</bold></highlight> is a button to change the date. The date inputted in the display input field <highlight><bold>302</bold></highlight> can be changed by using the button <highlight><bold>306</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart showing processing of registering meta data on the memory card. First, at step S<highlight><bold>401</bold></highlight>, a list file where the respective &ldquo;who&rdquo;, &ldquo;when&rdquo;, &ldquo;where&rdquo; and &ldquo;what&rdquo; lists are registered is read onto the RAM <highlight><bold>106</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Next, at step S<highlight><bold>402</bold></highlight>, the read lists are displayed in the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Next, at step S<highlight><bold>403</bold></highlight>, the user inputs meta data about &ldquo;who&rdquo;, &ldquo;when&rdquo;, &ldquo;where&rdquo; and &ldquo;what&rdquo; into the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Note that the input method will be described in detail later with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. At step S<highlight><bold>404</bold></highlight>, when the &ldquo;enter&rdquo; button <highlight><bold>309</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is depressed, a meta data file (CardInfo.xml) is generated by using a data description language such as XML from the input meta data. then at step S<highlight><bold>405</bold></highlight>, the meta data file generated at step S<highlight><bold>404</bold></highlight> is written onto the memory card via the data input/output device <highlight><bold>100</bold></highlight>. Note that the writing to the memory card will be described in detail later with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart showing the meta data input processing at step S<highlight><bold>403</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. First, at step S<highlight><bold>501</bold></highlight>, it is determined whether the operation to the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight> has been a list operation (operation to inverted delta symbols of the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight>) or an input operation from the keyboard. If it is determined that the operation has been the list operation, the process proceeds to step S<highlight><bold>502</bold></highlight>, at which a pull-down list is displayed. Then one of the items of the pull-down list selected by the user is temporarily stored as an input content to the display input field. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> If a desired item is not found in the displayed pull-down list, a character string is inputted from the keyboard (keyboard operation). If the keyboard operation has been operated, the process proceeds to step S<highlight><bold>503</bold></highlight>, at which the content of the input by the keyboard operation is displayed in an active one of the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight>, and it is held as a setting to the corresponding to the display input field. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Then, it is determined whether or not any of the &ldquo;add&rdquo; buttons <highlight><bold>305</bold></highlight>, <highlight><bold>307</bold></highlight> and <highlight><bold>308</bold></highlight> has been depressed. If it is determined that any one of the buttons has been depressed, the process proceeds from step S<highlight><bold>504</bold></highlight> to step S<highlight><bold>505</bold></highlight>. At step S<highlight><bold>505</bold></highlight>, the data inputted in the display input field corresponding to the &ldquo;add&rdquo; button depressed at step S<highlight><bold>503</bold></highlight> is added to the list of the display input field. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> When the input regarding the display input fields <highlight><bold>301</bold></highlight> to <highlight><bold>304</bold></highlight> has been completed, the user depresses the &ldquo;enter&rdquo; button <highlight><bold>309</bold></highlight> to complete the input of meta data. At step S<highlight><bold>506</bold></highlight>, it is determined whether or not the &ldquo;enter&rdquo; button <highlight><bold>309</bold></highlight> has been depressed. If it is determined that the &ldquo;enter&rdquo; button <highlight><bold>309</bold></highlight> has been depressed, the processing (at step S<highlight><bold>403</bold></highlight>) is terminated, and the process proceeds to step S<highlight><bold>404</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. As described above, a meta data file (CardInfo.xml) is generated by using a data description language such as XML from the content of input held in correspondence with the respective display input fields by the above processing. On the other hand, if it is determined that the &ldquo;enter&rdquo; button <highlight><bold>309</bold></highlight> has not been depressed, the process returns to step S<highlight><bold>501</bold></highlight> to repeat the above processing. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Note that in the above example, the keyboard is used as the input device at step S<highlight><bold>503</bold></highlight>, however, other various input methods such as input from G code, voice input and input via network are applicable. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart showing writing of the meta data onto the memory card at step S<highlight><bold>405</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. At step S<highlight><bold>601</bold></highlight>, it is determined whether or not a storage medium as a writing destination for the meta data is connected to the data input/output device <highlight><bold>100</bold></highlight>. For example, it is checked whether or not a PC card is attached, or the device is connected to a memory card of digital camera via USB. If it is determined that the storage medium is connected to the data input/output device <highlight><bold>100</bold></highlight>, the process proceeds to step S<highlight><bold>602</bold></highlight> at which the meta data file generated at step S<highlight><bold>404</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is written into the memory card. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> When the processing in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> has been completed, the meta data writing processing according to the present embodiment ends. In this embodiment, the connection between the input/output device <highlight><bold>100</bold></highlight> and the memory card is made by merely using the PC card or the memory card of digital camera via USB, however, any other connection may be employed such as connection using a serial port as long as it enables access to the memory card. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Next, processing to add generated meta data to binary data will be described. In the present embodiment, still image data is handled as binary data. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a schematic diagram showing the structure of image data where the meta data is added to the image data. In the present embodiment, binary data with meta data is generated by adding the meta data to the end of the binary data. Accordingly, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the meta data is added to the end of the image data. Note that in the present embodiment, the image data is used as the binary data, however, audio data, moving image data and the like may be handled as binary data. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart showing processing upon addition of the meta data to the image data. At step S<highlight><bold>801</bold></highlight>, the meta data is read from the memory card by using the data input/output device <highlight><bold>100</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. In this embodiment, the above-described meta data (CardInfo.xml) written in a data description language such as XML is read from a PC card, or from a storage medium which is connected to the data input/output device <highlight><bold>100</bold></highlight> via USB or the like (there cards are generally referred to as a &ldquo;memory card&rdquo;), and stored onto the RAM <highlight><bold>106</bold></highlight>. Thereafter, the meta data on the memory card is deleted. At step S<highlight><bold>802</bold></highlight>, the image data is read from the memory card by using the data input/output device <highlight><bold>100</bold></highlight>, and stored onto the RAM <highlight><bold>106</bold></highlight>. Thereafter the image data is deleted from the memory card. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> At step S<highlight><bold>803</bold></highlight>, the meta data held in the RAM <highlight><bold>106</bold></highlight> at step S<highlight><bold>801</bold></highlight> is added to the image data held in the RAM <highlight><bold>106</bold></highlight> at step S<highlight><bold>802</bold></highlight>. When a command of addition is issued from the system, the meta data read at step S<highlight><bold>801</bold></highlight> is added to the end of the image data read at step S<highlight><bold>802</bold></highlight>, thus the image data with meta data as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is generated. At step S<highlight><bold>804</bold></highlight>, the image data with meta data generated at step S<highlight><bold>803</bold></highlight> is held onto the storage device <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> At step S<highlight><bold>805</bold></highlight>, it is determined whether or not image data which has not been read yet exists on the memory card. If it is determined that all the image data on the memory card has been read, as the addition of meta data to all the image data on the memory card has been completed, the process ends. On the other hand, if it is determined that unread image data remains on the memory card, the process returns to step S<highlight><bold>802</bold></highlight>. In this manner, merely by previously inputting meta data, meta data can be simply added to all the images on the memory card. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The registration and addition of meta data are as described above. In the present embodiment, the presence/absence of binary data on the memory card inserted in the PC card slot <highlight><bold>201</bold></highlight> (memory card connected to the data input/output device <highlight><bold>100</bold></highlight>) is determined, and the above registration and addition of meta data are performed based on the result of determination. Hereinbelow, control of the registration and addition will be described. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> First, the data storage format on the memory card according to the present embodiment will be described. Assuming that the binary data held on the memory card inserted in the PC card slot is obtained by image sensing a still image by a digital camera, the file format on the memory card is a camera file system format (Design rule for Camera File System) (DCF file format). <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows an example of directories of the DCF file format. In the figure, numeral <highlight><bold>900</bold></highlight> denotes a root directory (&ldquo;ROOT&rdquo;) of the memory card, and a DCF image root directory <highlight><bold>901</bold></highlight> having a directory name &ldquo;DCIM&rdquo; is stored immediately below the root directory <highlight><bold>900</bold></highlight>. Further, a DCF directory <highlight><bold>902</bold></highlight> for storing a DCF object (&ldquo;100ABCDE&rdquo;) is stored immediately below the DCF image root directory <highlight><bold>901</bold></highlight>. Plural DCF objects (still image binary data) are stored below the DCF directory <highlight><bold>902</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, four still image data <highlight><bold>903</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>903</bold></highlight>-<highlight><bold>2</bold></highlight>, <highlight><bold>903</bold></highlight>-<highlight><bold>3</bold></highlight> and <highlight><bold>903</bold></highlight>-<highlight><bold>4</bold></highlight> are stored. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a flowchart showing switching processing between the registration of meta data and the addition of meta data according to the present embodiment. When the memory card is attached to the data processing apparatus of the present embodiment (for example, when a PC card is inserted and becomes accessible, or when a memory card in a digital camera becomes accessible via USB), the processing shown in the flowchart is performed. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> First, at step S<highlight><bold>1001</bold></highlight>, it is determined whether or not still image data is stored on the inserted PC card. In the present embodiment, the determination is made by using the DCF file format. <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a flowchart showing processing of determining whether or not binary data is stored on the memory card. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> First, at step S<highlight><bold>1100</bold></highlight>, a search is performed for the fixed DCF image root directory. If it is determined that this directory does not exist, the process proceeds to step S<highlight><bold>1104</bold></highlight>, at which it is determined that there is no object, and the process ends. On the other hand, if the DCF image root directory is found, a search is performed on the DCF directory immediately below the DCF image root directory at step S<highlight><bold>1101</bold></highlight>. As in the case of step S<highlight><bold>1100</bold></highlight>, if it is determined that this directory does not exist, the process proceeds to step S<highlight><bold>1104</bold></highlight>, at which it is determined that there is no object. If the DCF directory is found, the process proceeds to step S<highlight><bold>1102</bold></highlight>, at which it is determined whether or not the DCF object(s) exists. If the DCF object(s) exists, the process proceeds to step S<highlight><bold>1103</bold></highlight>, at which it is determined that object(s) exists. If it is determined at step S<highlight><bold>1102</bold></highlight> that no DCF object exists, the process proceeds to step S<highlight><bold>1104</bold></highlight> at which it is determined that no object exists. Since the determination here is merely determining whether object(s) exists or not, the number of DCF objects is not determined. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> As described above, it is determined whether or not a DCF object i.e. binary data exists in the DCF file format, and if it is determined that no DCF object exists, the process proceeds to step S<highlight><bold>1002</bold></highlight>. At step S<highlight><bold>1002</bold></highlight>, the meta data registration processing shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is started, and the meta data is registered onto the memory card. Note that if meta data has been registered at this time, the contents of setting are displayed in the respective display input fields in the GUI image in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, thereby the set meta data can be held or updated. Further, the determination as to whether or not meta data has been registered may be made by using processing at step S<highlight><bold>1003</bold></highlight> to be described later. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> On the other hand, if it is determined at step S<highlight><bold>1001</bold></highlight> that binary data exists on the memory card, the process proceeds to step S<highlight><bold>1003</bold></highlight>. As <highlight><bold>4</bold></highlight> files (binary data) exist in the data structure shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the process proceeds from step S<highlight><bold>1001</bold></highlight> to step S<highlight><bold>1003</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> At step S<highlight><bold>1003</bold></highlight>, it is determined whether or not meta data is registered on the memory card. If it is determined that meta data is registered, the process proceeds to step S<highlight><bold>1004</bold></highlight>, at which the addition of meta data to binary data as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is performed. On the other hand, if it is determined at step S<highlight><bold>1003</bold></highlight> that no meta data is registered on the memory card, the process proceeds to step S<highlight><bold>1005</bold></highlight>, at which the registration of meta data as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is performed. Then the process proceeds to step S<highlight><bold>1004</bold></highlight>, at which the registered meta data is added to the binary data. When the processing up to this point has been completed, the process proceeds to step S<highlight><bold>1006</bold></highlight>, at which the PC card is ejected, and the present process ends. Note that as the meta data, CardInfo.xml may be provided in parallel to the DCIM <highlight><bold>901</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, accordingly, the determination as to whether or not meta data is registered may be made by searching for this CardInfo.xml. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Note that in a case where the meta data registration processing shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is performed at step S<highlight><bold>1005</bold></highlight> and the meta data addition processing is performed at step S<highlight><bold>1004</bold></highlight>, the meta data is written onto the memory card then it is read to the RAM <highlight><bold>106</bold></highlight> and is deleted from the memory card. This process may be omitted. That is, it may be arranged such that in the registration processing in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the process proceeds to step S<highlight><bold>1004</bold></highlight> in a status where the meta data is held in the RAM <highlight><bold>106</bold></highlight> while the final writing of the meta data onto the memory card (S<highlight><bold>405</bold></highlight>) is not performed. In this case, the meta data reading processing (step S<highlight><bold>801</bold></highlight> in FIG. <highlight><bold>8</bold></highlight>) in the meta data addition processing can be omitted. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Further, in the object search in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, only one DCF directory <highlight><bold>902</bold></highlight> exists, however, in case of DCF file format, plural DCF directories <highlight><bold>902</bold></highlight> may be stored below the DCF image root directory <highlight><bold>901</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows the object search processing in this case. Note that in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, steps which perform the same processing in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> have the same step numbers. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> According to the processing in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, if it is determined at step S<highlight><bold>1101</bold></highlight> that no DCF directory exists or it is determined at step S<highlight><bold>1102</bold></highlight> that no DCF object exists, it is determined whether or not the next (unsearched) DCF directory exists at step S<highlight><bold>1201</bold></highlight>. Then if it is determined that the next DCF directory exists, the process returns to step S<highlight><bold>1102</bold></highlight>, at which a search is performed on the next DCF directory for DCF object. If it is determined at step S<highlight><bold>1201</bold></highlight> that there is no next DCF directory, the process proceeds to step S<highlight><bold>1104</bold></highlight>, at which it is determined that there is no object, and the present process ends. By this processing, a search is performed on all the stored DCF directories, to determine whether or not at least one DCF object is stored in each DCF directory. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The processing in use of DCF file format is as described above. Even in a case where this fixed format directory structure is not employed, the above processing can be performed. For example, a search is performed on all the directories in the inserted PC card for a file recognized as binary data, e.g., a JPEG file if data is still image data, or an MPEG file if data is moving image data, to determine at least one binary data exists. Further, the type of file is discriminated by using a file extension such as .jpg or .mpg. Further, if the processing is performed on all the arbitrary directories, the processing can be easily realized by using a function to obtain directory information such as opendir() in case of UNIX. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Further, in the above embodiment, XML is used as a meta data description language, however, the data description language is not limited to XML but other data description languages such as SGML, HTML and the like may be used. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Further, in the above embodiment, the PC card and the like are used as a removable storage medium accessible by the data input/output device <highlight><bold>100</bold></highlight>, however, the present invention is not limited to these cards. For example, the embodiment is applicable to other removable storage media such as a compact flash, a smart medium and a memory stick. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As described above, according to the embodiment, since the processing when a memory card is attached is automatically selected based on the presence/absence of binary data on the memory card, key-input or GUI menu selection by the user can be omitted. For example, if binary data and meta data are stored in the memory card, the meta data is automatically added to the binary data in accordance with insertion of the memory card. Thus the operation is automated. Further, in a case where binary data is stored but meta data is not stored, first, the meta data registration processing is started, and when the registration processing is completed, the addition processing is started. Further, in a case where binary data and meta data are not registered, the meta data registration processing is automatically started. Further, as one meta data can be automatically added to plural binary data, meta data can be registered for a large number of binary data by merely inputting the meta data once. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The present invention can be applied to a system constituted by a plurality of devices (e.g., a host computer, an interface, a reader and a printer) or to an apparatus comprising a single device (e.g., a copy machine or a facsimile apparatus). </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Further, the object of the present invention can be also achieved by providing a storage medium holding software program code for performing the aforesaid functions of the above-described embodiment to a system or an apparatus, reading the program code with a computer (e.g., CPU, MPU) of the system or apparatus from the storage medium, then executing the program. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In this case, the program code read from the storage medium realizes the functions according to the embodiment, and the storage medium storing the program code constitutes the invention. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Further, the storage medium, such as a floppy disk, a hard disk, an optical disk, a magneto-optical disk, a CD-ROM, a CD-R, a DVD, a magnetic tape, a non-volatile type memory card, and ROM can be used for providing the program code. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Furthermore, besides aforesaid functions according to the above embodiment are realized by executing the program code which is read by a computer, the present invention includes a case where an OS (operating system) or the like working on the computer performs a part or entire actual processing in accordance with designations of the program code and realizes functions according to the above embodiment. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Furthermore, the present invention also includes a case where, after the program code read from the storage medium is written in a function expansion card which is inserted into the computer or in a memory provided in a function expansion unit which is connected to the computer, CPU or the like contained in the function expansion card or unit performs a part or entire process in accordance with designations of the program code and realizes functions of the above embodiment. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Note that in the above embodiment, the insertion of card triggers the automatic determination of presence/absence of binary data, the meta data addition processing and the meta data registration processing, however, another operation input may trigger these processings. Further, in the processing shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the card is finally ejected (step S<highlight><bold>1006</bold></highlight>), however, the process may move to another processing e.g. to browse stored images. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> As described above, according to the present invention, it is possible to easily input meta data and add the meta data to binary data. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Further, according to the present invention, it is possible to register meta data for many binary data merely by inputting meta data once. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Further, according to the present invention, upon addition of meta data to binary data, a user&apos;s operation procedure is simplified. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof, it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data processing apparatus comprising: 
<claim-text>connection means for connection with a storage medium, removable from said apparatus, so as to enable access to the medium; </claim-text>
<claim-text>first determination means for, if the storage medium is accessible by said connection means, determining whether or not binary data is stored in said storage medium; </claim-text>
<claim-text>addition means for, if said first determination means determines that the binary data is stored, adding meta data stored in said storage medium to the binary data; and </claim-text>
<claim-text>first registration means for, if said first determination means determines that the binary data is not stored, starting registration processing to register the meta data in said storage medium. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The data processing apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said addition means has second determination means for, if said storage medium is accessible by said connection means, determining whether or not the meta data is registered in said storage medium, 
<claim-text>and wherein if said first and second determination means determine that the binary data and the meta data are stored in said storage medium, the meta data stored in said storage medium is added to the binary data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The data processing apparatus according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein said addition means has second registration means for, if said second determination means determines that the meta data is not stored, registering the meta data in said storage medium, 
<claim-text>and wherein the meta data registered by said second registration means is added to the binary data stored in said storage medium. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The data processing apparatus according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said second registration means starts the registration processing used by said first registration means. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The data processing apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein in said registration processing, if the meta data already exists in said storage medium, processing to maintain or update the meta data is performed. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The data processing apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said addition means adds the meta data to the end of the binary data. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A data processing method in a data processing apparatus having connection means for connection with a storage medium, removable from said apparatus, so as to enable access to the medium, said method comprising: 
<claim-text>a first determination step of, if the storage medium is accessible by said connection means, determining whether or not binary data is stored in said storage medium; </claim-text>
<claim-text>an addition step of, if it is determined at said first determination step that the binary data is stored, adding meta data stored in said storage medium to the binary data; and </claim-text>
<claim-text>a first registration step of, if it is determined at said first determination step that the binary data is not stored, starting registration processing to register the meta data in said storage medium. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said addition step has a second determination step of, if said storage medium is accessible by said connection means, determining whether or not the meta data is registered in said storage medium, 
<claim-text>and wherein if it is determined at said first and second determination steps that the binary data and the meta data are stored in said storage medium, the meta data stored in said storage medium is added to the binary data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said addition step has a second registration step of, if it is determined at said second determination step that the meta data is not stored, registering the meta data in said storage medium, 
<claim-text>and wherein the meta data registered at said second registration step is added to the binary data stored in said storage medium. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein at said second registration step, the registration processing used at said first registration step is started. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein in said registration processing, if the meta data already exists in said storage medium, processing to maintain or update the meta data is performed. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said meta data is described in a data description language. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein said data description language is any one of XML, SGML and HTML. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said binary data is any one of moving image data, still image data and audio data. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein at said first determination step, it is determined whether or not a DCF (Design rule for Camera File System) object file defined by DCF format exists in said storage medium. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein at said first determination step, a search is performed on all the directories formed in said storage medium, and it is determined whether or not a binary data file which can be handled at said addition step exists. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein at said addition step, the meta data is added to the end of the binary data. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A storage medium holding a control program for realizing the data processing method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> by a computer.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004976A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004976A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004976A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004976A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004976A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004976A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004976A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004976A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004976A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004976A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004976A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004976A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004976A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
