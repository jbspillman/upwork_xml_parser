<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001613A1-20030102-D00000.TIF SYSTEM "US20030001613A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00001.TIF SYSTEM "US20030001613A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00002.TIF SYSTEM "US20030001613A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00003.TIF SYSTEM "US20030001613A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00004.TIF SYSTEM "US20030001613A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00005.TIF SYSTEM "US20030001613A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00006.TIF SYSTEM "US20030001613A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00007.TIF SYSTEM "US20030001613A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00008.TIF SYSTEM "US20030001613A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00009.TIF SYSTEM "US20030001613A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00010.TIF SYSTEM "US20030001613A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00011.TIF SYSTEM "US20030001613A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00012.TIF SYSTEM "US20030001613A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00013.TIF SYSTEM "US20030001613A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00014.TIF SYSTEM "US20030001613A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00015.TIF SYSTEM "US20030001613A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00016.TIF SYSTEM "US20030001613A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00017.TIF SYSTEM "US20030001613A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00018.TIF SYSTEM "US20030001613A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00019.TIF SYSTEM "US20030001613A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00020.TIF SYSTEM "US20030001613A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00021.TIF SYSTEM "US20030001613A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00022.TIF SYSTEM "US20030001613A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00023.TIF SYSTEM "US20030001613A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00024.TIF SYSTEM "US20030001613A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00025.TIF SYSTEM "US20030001613A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00026.TIF SYSTEM "US20030001613A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00027.TIF SYSTEM "US20030001613A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00028.TIF SYSTEM "US20030001613A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00029.TIF SYSTEM "US20030001613A1-20030102-D00029.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00030.TIF SYSTEM "US20030001613A1-20030102-D00030.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00031.TIF SYSTEM "US20030001613A1-20030102-D00031.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00032.TIF SYSTEM "US20030001613A1-20030102-D00032.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00033.TIF SYSTEM "US20030001613A1-20030102-D00033.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00034.TIF SYSTEM "US20030001613A1-20030102-D00034.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00035.TIF SYSTEM "US20030001613A1-20030102-D00035.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00036.TIF SYSTEM "US20030001613A1-20030102-D00036.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00037.TIF SYSTEM "US20030001613A1-20030102-D00037.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00038.TIF SYSTEM "US20030001613A1-20030102-D00038.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00039.TIF SYSTEM "US20030001613A1-20030102-D00039.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00040.TIF SYSTEM "US20030001613A1-20030102-D00040.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00041.TIF SYSTEM "US20030001613A1-20030102-D00041.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00042.TIF SYSTEM "US20030001613A1-20030102-D00042.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00043.TIF SYSTEM "US20030001613A1-20030102-D00043.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00044.TIF SYSTEM "US20030001613A1-20030102-D00044.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00045.TIF SYSTEM "US20030001613A1-20030102-D00045.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00046.TIF SYSTEM "US20030001613A1-20030102-D00046.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00047.TIF SYSTEM "US20030001613A1-20030102-D00047.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00048.TIF SYSTEM "US20030001613A1-20030102-D00048.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00049.TIF SYSTEM "US20030001613A1-20030102-D00049.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00050.TIF SYSTEM "US20030001613A1-20030102-D00050.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00051.TIF SYSTEM "US20030001613A1-20030102-D00051.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00052.TIF SYSTEM "US20030001613A1-20030102-D00052.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00053.TIF SYSTEM "US20030001613A1-20030102-D00053.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00054.TIF SYSTEM "US20030001613A1-20030102-D00054.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00055.TIF SYSTEM "US20030001613A1-20030102-D00055.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00056.TIF SYSTEM "US20030001613A1-20030102-D00056.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00057.TIF SYSTEM "US20030001613A1-20030102-D00057.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00058.TIF SYSTEM "US20030001613A1-20030102-D00058.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00059.TIF SYSTEM "US20030001613A1-20030102-D00059.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00060.TIF SYSTEM "US20030001613A1-20030102-D00060.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00061.TIF SYSTEM "US20030001613A1-20030102-D00061.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00062.TIF SYSTEM "US20030001613A1-20030102-D00062.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00063.TIF SYSTEM "US20030001613A1-20030102-D00063.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00064.TIF SYSTEM "US20030001613A1-20030102-D00064.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00065.TIF SYSTEM "US20030001613A1-20030102-D00065.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00066.TIF SYSTEM "US20030001613A1-20030102-D00066.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00067.TIF SYSTEM "US20030001613A1-20030102-D00067.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00068.TIF SYSTEM "US20030001613A1-20030102-D00068.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00069.TIF SYSTEM "US20030001613A1-20030102-D00069.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00070.TIF SYSTEM "US20030001613A1-20030102-D00070.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00071.TIF SYSTEM "US20030001613A1-20030102-D00071.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00072.TIF SYSTEM "US20030001613A1-20030102-D00072.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00073.TIF SYSTEM "US20030001613A1-20030102-D00073.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00074.TIF SYSTEM "US20030001613A1-20030102-D00074.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00075.TIF SYSTEM "US20030001613A1-20030102-D00075.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00076.TIF SYSTEM "US20030001613A1-20030102-D00076.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00077.TIF SYSTEM "US20030001613A1-20030102-D00077.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00078.TIF SYSTEM "US20030001613A1-20030102-D00078.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00079.TIF SYSTEM "US20030001613A1-20030102-D00079.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00080.TIF SYSTEM "US20030001613A1-20030102-D00080.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00081.TIF SYSTEM "US20030001613A1-20030102-D00081.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00082.TIF SYSTEM "US20030001613A1-20030102-D00082.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00083.TIF SYSTEM "US20030001613A1-20030102-D00083.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00084.TIF SYSTEM "US20030001613A1-20030102-D00084.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00085.TIF SYSTEM "US20030001613A1-20030102-D00085.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00086.TIF SYSTEM "US20030001613A1-20030102-D00086.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00087.TIF SYSTEM "US20030001613A1-20030102-D00087.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00088.TIF SYSTEM "US20030001613A1-20030102-D00088.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00089.TIF SYSTEM "US20030001613A1-20030102-D00089.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00090.TIF SYSTEM "US20030001613A1-20030102-D00090.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00091.TIF SYSTEM "US20030001613A1-20030102-D00091.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00092.TIF SYSTEM "US20030001613A1-20030102-D00092.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00093.TIF SYSTEM "US20030001613A1-20030102-D00093.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00094.TIF SYSTEM "US20030001613A1-20030102-D00094.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00095.TIF SYSTEM "US20030001613A1-20030102-D00095.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00096.TIF SYSTEM "US20030001613A1-20030102-D00096.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00097.TIF SYSTEM "US20030001613A1-20030102-D00097.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00098.TIF SYSTEM "US20030001613A1-20030102-D00098.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00099.TIF SYSTEM "US20030001613A1-20030102-D00099.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00100.TIF SYSTEM "US20030001613A1-20030102-D00100.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00101.TIF SYSTEM "US20030001613A1-20030102-D00101.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00102.TIF SYSTEM "US20030001613A1-20030102-D00102.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00103.TIF SYSTEM "US20030001613A1-20030102-D00103.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00104.TIF SYSTEM "US20030001613A1-20030102-D00104.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00105.TIF SYSTEM "US20030001613A1-20030102-D00105.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00106.TIF SYSTEM "US20030001613A1-20030102-D00106.TIF" NDATA TIF>
<!ENTITY US20030001613A1-20030102-D00107.TIF SYSTEM "US20030001613A1-20030102-D00107.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001613</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10177180</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020624</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-191770</doc-number>
</priority-application-number>
<filing-date>20010625</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2002-179301</doc-number>
</priority-application-number>
<filing-date>20020620</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H03K019/173</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>326</class>
<subclass>038000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Function block</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Shogo</given-name>
<family-name>Nakaya</family-name>
</name>
<residence>
<residence-non-us>
<city>Tokyo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>NEC CORPORATION</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>FOLEY AND LARDNER</name-1>
<name-2>SUITE 500</name-2>
<address>
<address-1>3000 K STREET NW</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20007</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A function block allows a multiplier and a multi-input multiplexer to be realized with a small number of blocks. A logical function generator generates a logical output signal from first to fourth logical inputs thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data. A 4-2 carry block generates a 4-2 carry output from the second to fourth logical inputs. A first signal is generated from at least the logical output, a second signal from at least the first logical input, a third signal from at least a 4-2 carry input signal, and a fourth signal from at least the 4-2 carry input signal. A multiplexer selects one of the second and third signals depending on the first signal to produce a carry output signal. An exclusive OR circuit produce an exclusive-ORed result from the logical output and the fourth signal. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a reconfigurable device in which various functions can be implemented by a user, and in particular to a function block which is a logic function constituting unit. More specifically, the present invention relates to a function block suitable for implementing a multiplier and a multiplexer. In this specification, a circuit bearing a main portion of a logic function in a programmable function cell is referred to as a function block. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Recently, reconfigurable devices such as a PLD (programmable logic device), FPGA (field programmable gate array) and the like in which various functions can be set by a user have been rapidly developed. With increase of degree of integration and speed, such a reconfigurable device is expected to be used not only for emulation during the designing of ASIC (application-specific integrated circuit) or substitution of a simple peripheral circuit but also for a reconfigurable computer whose hardware structure can be changed depending on an application. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> However, a multiplier that is frequently used in computing cannot be effectively realized by a conventional PLD or FPGA, which is one of tho causes disturbing practical use of a reconfigurable computer. Furthermore, the conventional PLD and FPGA cannot effectively realize a multi-input multiplexer (MUX). Owing to this, it has been impossible to obtain a compact barrel shifter, for example, used for floating-point addition/subtraction. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 103</cross-reference> shows a typical example of an ordinary multiplier. This multiplier multiplies X&equals;x<highlight><subscript>7</subscript></highlight>x<highlight><subscript>6</subscript></highlight>x<highlight><subscript>5</subscript></highlight>x<highlight><subscript>4</subscript></highlight>x<highlight><subscript>3</subscript></highlight>x<highlight><subscript>2</subscript></highlight>x<highlight><subscript>1</subscript></highlight>x<highlight><subscript>0 </subscript></highlight>by Y&equals;y<highlight><subscript>3</subscript></highlight>y<highlight><subscript>2</subscript></highlight>y<highlight><subscript>1</subscript></highlight>y<highlight><subscript>0 </subscript></highlight>to produce Z&equals;z<highlight><subscript>11</subscript></highlight>z<highlight><subscript>10</subscript></highlight>z<highlight><subscript>9</subscript></highlight>z<highlight><subscript>8</subscript></highlight>z<highlight><subscript>7</subscript></highlight>z<highlight><subscript>6</subscript></highlight>z<highlight><subscript>5</subscript></highlight>z<highlight><subscript>4</subscript></highlight>z<highlight><subscript>3</subscript></highlight>z<highlight><subscript>2</subscript></highlight>z<highlight><subscript>1</subscript></highlight>z<highlight><subscript>0 </subscript></highlight>that is the product of X and Y, where each of x<highlight><subscript>i</subscript></highlight>, y<highlight><subscript>i </subscript></highlight>or z<highlight><subscript>i </subscript></highlight>represents (i&plus;1) -th bit of binary data X, Y and Z, and is 0 or 1 (i&minus;0, 1, 2, . . . ). For example, the notation of x<highlight><subscript>7</subscript></highlight>x<highlight><subscript>6</subscript></highlight>x<highlight><subscript>5</subscript></highlight>x<highlight><subscript>4</subscript></highlight>x<highlight><subscript>3</subscript></highlight>x<highlight><subscript>2</subscript></highlight>x<highlight><subscript>1</subscript></highlight>x<highlight><subscript>0 </subscript></highlight>represents a bit arrangement of binary data X. As is clear from <cross-reference target="DRAWINGS">FIG. 103</cross-reference>, this multiplier is constructed by systematically arranging a multiplier unit <highlight><bold>76</bold></highlight> in an array. In the multiplier unit <highlight><bold>76</bold></highlight>, an output of an AND circuit <highlight><bold>31</bold></highlight> is connected to one argument input b of a 1-bit full adder <highlight><bold>43</bold></highlight>. In the 1-bit full adder <highlight><bold>43</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 103</cross-reference>, the other argument input is denoted by a, a carry input by ic, a carry output by oc, and an addition output by s. The multiplier as shown in <cross-reference target="DRAWINGS">FIG. 103</cross-reference> is the most basic array-type multiplier having a simple and systematic configuration, which is suitable for implementation in the FPGA. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 104</cross-reference> shows an example of a conventional function block <highlight><bold>4</bold></highlight> for FPGA (for example, see U.S. Pat. Nos. 5,349,250, 5,481,206, and 5,546,018). Here, only those parts related to the description are shown. In the figure, a logic function generator <highlight><bold>40</bold></highlight> is a circuit capable of realizing various logic functions in accordance with contents of a built-in configuration memory. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 105</cross-reference> shows an example of the logic function generator <highlight><bold>40</bold></highlight>. This has sixteen 1-bit memory cells <highlight><bold>13</bold></highlight> as a configuration memory and the outputs of respective ones of the memory cells are inputted to a 16-input multiplexer (MUX) <highlight><bold>20</bold></highlight>. In accordance with values of four control inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight>, the 16-input MUX <highlight><bold>20</bold></highlight> selects one of the 16 inputs to output it as denoted by out. This logic function generator <highlight><bold>40</bold></highlight> has a logic function which is determined in accordance with contents stored in the configuration memory <highlight><bold>13</bold></highlight> and can realize an arbitrary 4-input 1-output logic function having four inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> and one output. In general, a logic function generator having 2 k-bit memory cells and capable of realizing all the k-input 1-output logic functions is referred to as a Look-Up Table (hereinafter, abbreviated as LUT). <cross-reference target="DRAWINGS">FIG. 105</cross-reference> shows an example of 4-input LUT. Examples of other configurations of the LUT are disclosed in, for example, U.S. Pat. Re. 34,363 and U.S. Pat. No. 4,706,216. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference> uses the logic function generator <highlight><bold>40</bold></highlight> to which a 2-input MUX <highlight><bold>22</bold></highlight> as a ripple carry circuit and a 2-input exclusive OR circuit (XOR) <highlight><bold>30</bold></highlight> required for constituting an adder are added. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> With regard to the 2-input MUX, see <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the 2-input MUX <highlight><bold>22</bold></highlight> has an input to which input in<highlight><bold>0</bold></highlight> is connected (input-<highlight><bold>0</bold></highlight>) and another input to which input in<highlight><bold>1</bold></highlight> is connected (input-<highlight><bold>1</bold></highlight>). When a control input in<highlight><bold>2</bold></highlight> is logical 0, a signal in<highlight><bold>0</bold></highlight> fed to the input-<highlight><bold>0</bold></highlight> is outputted as denoted by out, and when the control input in<highlight><bold>2</bold></highlight> is logical 1, a signal in<highlight><bold>1</bold></highlight> fed to the input <highlight><bold>1</bold></highlight> is outputted. Hereinafter, when MUX is briefly written as &ldquo;MUX&rdquo; omitting the number of inputs, it represents two inputs (exclusive of a control input). </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The multiplier of <cross-reference target="DRAWINGS">FIG. 103</cross-reference> may be configured using the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference> to implement the function as shown in <cross-reference target="DRAWINGS">FIG. 106</cross-reference> in the logic function generator <highlight><bold>40</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference>. In this case, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference> functions as the multiplier unit <highlight><bold>76</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 103</cross-reference>. Here, an input in<highlight><bold>0</bold></highlight>, an output os, a ripple carry input irc, and a ripple carry output orc of <cross-reference target="DRAWINGS">FIG. 104</cross-reference> correspond to the argument input a, the adder output s, the carry input ic, and the carry output oc of the 1-bit full adder <highlight><bold>43</bold></highlight>, respectively. Moreover, the AND <highlight><bold>31</bold></highlight> in the circuit of <cross-reference target="DRAWINGS">FIG. 106</cross-reference> implemented in the logic function generator <highlight><bold>40</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference> corresponds to the AND <highlight><bold>31</bold></highlight> in the multiplier unit <highlight><bold>76</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 103</cross-reference>. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> As has been described above, the multiplier unit <highlight><bold>76</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 103</cross-reference> can be constructed of one function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 104</cross-reference>. However, when a multiplier is constructed by this method, multiplication of m-bit data and n-bit data requires m&times;n function blocks, occupying a great area. Furthermore, in the case of a multiplier of n bits, a signal should be transferred through n stages of function blocks <highlight><bold>4</bold></highlight> (besides a carry propagation delay) and accordingly, a signal propagation delay is also increased. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In addition to the function block shown in <cross-reference target="DRAWINGS">FIG. 104</cross-reference>, several methods have been devised for realizing by a single function block a multiplier unit in which an AND gate is attached to one argument input of a 1-bit full adder (for example, see Japanese Patent Application Laid-open Publication Nos. 11-24891, 11-122096, and 11-353152, and U.S. Pat. No. 5,570,039). These conventional techniques also have the aforementioned problem. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In order to solve the aforementioned problem, U.S. Pat. No 5,754,459 discloses a method for implementing a multiplier using the modified Booth algorithm and the Wallace Tree into a PLD. However, this multiplier has disadvantages that its circuit configuration is complicated, a plenty of wiring resources is needed, and the area reduction effect is small. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Furthermore, the conventional FPGA has a problem that multi-input (3-input or more in this specification) MUX cannot be effectively realized. As shown in <cross-reference target="DRAWINGS">FIG. 104</cross-reference>, in the function block <highlight><bold>4</bold></highlight> having one 4-input logic function generator <highlight><bold>40</bold></highlight>, only one 2-input MUX which is the simplest can be implemented. This is because a 2-input MUX can be realized by three input terminals including a control input while a 3-input MUX requires 5 input terminals and a 4-input MUX requires 6 input terminals. Thus, the 4-input logic function generator cannot provide a sufficient number of inputs. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> From this reason, for example, for realizing a 4-input MUX having a high usability by the conventional FPGA, as shown in <cross-reference target="DRAWINGS">FIG. 107</cross-reference>, it is necessary to use two function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>and a MUX <highlight><bold>22</bold></highlight>. (<cross-reference target="DRAWINGS">FIG. 107</cross-reference> shows only a portion of the function block related to the present explanation). Here, the logic function generator <highlight><bold>40</bold></highlight> of each function block has a 2-input MUX (for example, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>) implemented therein. In this case, in <cross-reference target="DRAWINGS">FIG. 107</cross-reference>, two pairs of inputs i<highlight><bold>0</bold></highlight> and i<highlight><bold>1</bold></highlight> of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>correspond to the four inputs of the 4-input MUX, respectively. The respective inputs i<highlight><bold>2</bold></highlight> and i<highlight><bold>4</bold></highlight> correspond to first and second control inputs of the 4-input MUX. An output om corresponds to the output of the 4-input MUX. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Thus, in order to realize a 4-input MUX by using the conventional FPGA, it is necessary to use two function blocks, resulting in an increase in occupied area. Japanese Patent Laid-open Publication No. 11-24891, Japanese Patent Laid-open Publication Nos. 11-122096 and 11-353152 disclose a completely different type of function block not using the 4-input LUT. However, even with this function block, it is impossible to realize a 4-input MUX in one block. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The floating-point addition/subtraction is performed by using a barrel shifter, which is composed of a large number of MUX&apos;es. When implementing it in the FPGA, such a scheme that a single function block corresponds to one 2-input MUX is inefficient, resulting in increased area. It is desired to realize a 4-input MUX with one function block, thereby greatly improving the efficiency. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A first problem is that when a multiplier is configured by using a conventional function block, the multiplier area and signal propagation delay are increased. When a multiplier unit consisting of a 1-bit full adder and an AND gate is made by one function block, it is necessary to use great many function blocks to complete the entire multiplier. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A second problem is that when constructing a multi-input multiplexer using a conventional function block, the area is increased. Since only one 2-input MUX can be implemented in one function block, plural function blocks should be used to constitute a multi-input MUX. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> It is therefore an object of the present invention to provide a function block capable of realizing a compact and high-speed multiplier. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Another object of the present invention is to provide a function block capable of realizing a compact multi-input multiplexer. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> According to the present invention, a 4-2 carry block is added to a known function block so as to be used as a 4-2 adder. Furthermore, a preposition logic circuit is added so that an AND-attached 4-2 adder can be realized in one function block. Moreover, an XOR (exclusive OR) and an MUX (multiplexer) are combined with each other so as to constitute a function block, which can also be used as an AND-attached 4-2 adder. Furthermore, by using a MUX as a preposition logic circuit, a multi-input MUX (for example, 4-input MUX) can be realized in one function block. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> According to a first aspect of the present invention, a function block includes: a logical function generator having four logical input terminals and one logical output terminal, for generating a logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth logical input signals; a first signal generator for generating a first signal from at least the logical output signal; a second signal generator for generating a second signal from at least the first logical input signal; a third signal generator for generating a third signal from at least a 4-2 carry input signal; a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; a selector for selecting one of the second and third signals depending on the first signal to produce a carry output signal; and an exclusive OR circuit for performing an exclusive OR function on the logical output signal and the fourth signal to produce an output of the function block. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Several embodiments of the first-aspect function block are shown in the accompanying drawings, for example, FIGS. <highlight><bold>6</bold></highlight>, <highlight><bold>40</bold></highlight>-<highlight><bold>42</bold></highlight>, <highlight><bold>45</bold></highlight>-<highlight><bold>51</bold></highlight>, <highlight><bold>59</bold></highlight> and <highlight><bold>61</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Taking <cross-reference target="DRAWINGS">FIG. 6</cross-reference> as an example, the respective first, second, third, and fourth logical inputs correspond to inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight>, and in<highlight><bold>3</bold></highlight> of a logical function generator <highlight><bold>40</bold></highlight> and the logical output corresponds to an output out of the logical function generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The first signal generator corresponds to a wire connecting the output out as the first signal to the control input of a MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>that corresponds to the selector. Alternatively, taking <cross-reference target="DRAWINGS">FIGS. 40 and 42</cross-reference> as other examples, the first signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>d </italic></highlight>and/or AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>for selecting a signal from the output out, other signal i<highlight><bold>50</bold></highlight>, and/or a fixed value to output it as the first signal to the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The second signal generator, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, corresponds to a wire connecting the input in<highlight><bold>0</bold></highlight> as the second signal to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Alternatively, taking <cross-reference target="DRAWINGS">FIG. 42</cross-reference> as another example, the second signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>for selecting a signal from the inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>3</bold></highlight> of the logical function generator <highlight><bold>40</bold></highlight> to output it as the second signal to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The third signal generator, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, corresponds to a wire connecting the 4-2 carry input signal i<highlight><bold>42</bold></highlight> as the third signal to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Alternatively, taking <cross-reference target="DRAWINGS">FIG. 41</cross-reference> as another example, the third signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>for selecting a signal from the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and the input in<highlight><bold>3</bold></highlight> and a wire connecting the selected signal as the third signal to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Further, taking <cross-reference target="DRAWINGS">FIG. 48</cross-reference> as another example, the third signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for selecting a signal from the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and the ripple carry signal irc and a wire connecting the selected signal as the third signal to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The fourth signal generator, as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, corresponds to a wire connecting the 4-2 carry input signal i<highlight><bold>42</bold></highlight> as the fourth signal to one input of an XOR <highlight><bold>30</bold></highlight> that corresponds to the above exclusive OR circuit. In other words, according to the example as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the third and fourth signal generators both use the 4-2 carry input signal <highlight><bold>142</bold></highlight> as the third and fourth signal, respectively. Alternatively, taking <cross-reference target="DRAWINGS">FIG. 41</cross-reference> as another example, the fourth signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>for selecting a signal from the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and the input in<highlight><bold>3</bold></highlight> and a wire connecting the selected signal as the fourth signal to the one input of the XOR <highlight><bold>30</bold></highlight>. Further, taking <cross-reference target="DRAWINGS">FIG. 47</cross-reference> as another example, the fourth signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for selecting a signal from the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and the ripple carry signal irc to output the selected signal as the fourth signal to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Furthermore, taking <cross-reference target="DRAWINGS">FIG. 59</cross-reference> as another example, the fourth signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for selecting a signal from the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and the input in<highlight><bold>3</bold></highlight> and an AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>for selecting one of the selected signal and a fixed value to output it as the fourth signal to the one input of the XOR <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> According to a second aspect of the present invention, a function block includes: a first exclusive OR circuit for performing an exclusive OR function on a first input signal and a second input signal; a second exclusive OR circuit for performing an exclusive OR function on a third input signal and a fourth input signal; a 4-2 carry block for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; a second signal generator for generating a second signal from at least one of the first and second input signals; a third signal generator for generating a third signal from a first multiple-signal group including a 4-2 carry input signal and at least one logical input signal; a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input signal and at least one logical input signal; a selector for selecting one of the second and third signals to produce a carry output signal depending on the first signal; and a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Several embodiments of the second-aspect function block are shown in the accompanying drawings, for example, FIGS. <highlight><bold>73</bold></highlight>, <highlight><bold>77</bold></highlight>-<highlight><bold>81</bold></highlight>, and <highlight><bold>84</bold></highlight>-<highlight><bold>86</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Taking <cross-reference target="DRAWINGS">FIG. 73</cross-reference> as an example, the first exclusive OR circuit corresponds to XOR <highlight><bold>30</bold></highlight><highlight><italic>a</italic></highlight>, the second exclusive OR circuit corresponds to XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, the 4-2 carry block corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>j</italic></highlight>, the third exclusive OR circuit corresponds to XOR <highlight><bold>30</bold></highlight><highlight><italic>c</italic></highlight>, and the fourth exclusive OR circuit corresponds to XOR <highlight><bold>30</bold></highlight><highlight><italic>d. </italic></highlight></paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The first signal generator is basically similar to that of the first-aspect function block. For example, in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the first signal generator corresponds to a wire connecting the output of XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>as the first signal to the control input of a MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>that corresponds to the selector. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The second signal generator is basically similar to that of the first-aspect function block. For example, in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the second signal generator corresponds to a wire connecting one input of XOR <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>as the second signal to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The third signal generator is basically similar to that of the first-aspect function block. For example, in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the third signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for selecting a signal from a first multiple-signal group including the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and another logical input signal i<highlight><bold>40</bold></highlight> and a wire connecting the selected signal as the third signal to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The fourth signal generator is basically similar to that of the first,-aspect function block. For example, in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the fourth signal generator corresponds to a MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for selecting a signal from a second multiple-signal group including the 4-2 carry input signal i<highlight><bold>42</bold></highlight> and another logical input signal i<highlight><bold>40</bold></highlight> and a wire connecting the selected signal as the fourth signal to one input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>d</italic></highlight>. In other words, according to the example as shown in <cross-reference target="DRAWINGS">FIG. 73</cross-reference>, the third and fourth signal generators select the third and fourth signal from the same multiple-signal group, respectively. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic block diagram showing a programmable function cell using a function block according to the present invention. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing a first example of an input selection unit used in the programmable function cell in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram showing a programmable switch <highlight><bold>10</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a circuit diagram showing an example of a transmission gate <highlight><bold>12</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram showing a second example of the input selection unit used in the programmable function cell in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing configuration of a function block according to a first embodiment of the present invention. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a circuit diagram for explaining a 2-input MUX. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>1</bold></highlight>) is a circuit diagram showing a first example of a 4-2 carry block <highlight><bold>41</bold></highlight>; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>2</bold></highlight>) is a circuit diagram showing a second example of the 4-2 carry block <highlight><bold>41</bold></highlight>; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>3</bold></highlight>) is a circuit diagram showing a third example of the 4-2 carry block <highlight><bold>41</bold></highlight>; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>4</bold></highlight>) is a circuit diagram showing a fourth example of the 4-2 carry block <highlight><bold>41</bold></highlight>; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>5</bold></highlight>) is a circuit diagram showing a fifth example of the 4-2 carry block <highlight><bold>41</bold></highlight>; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>6</bold></highlight>) is a circuit diagram showing a sixth example of the 4-2 carry block <highlight><bold>41</bold></highlight>; and </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>7</bold></highlight>) is a circuit diagram showing a seventh example of the 4-2 carry block <highlight><bold>41</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram showing a first example of an output block in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram showing an example of a register block in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a block diagram showing a first example of an output selection unit in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram showing a second example of the output selection unit in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a 4-input XOR <highlight><bold>24</bold></highlight> to be implemented in a logic function generator <highlight><bold>40</bold></highlight> of a function block <highlight><bold>4</bold></highlight> in a 4-2 adder mode. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows a circuit equivalent to the 4-2 adder. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a circuit diagram of a multi-bit adder in which pluralities of 4-2 adders are arranged. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of complete-tree type multi-bit multi-argument adder using a 4-2 adder; and </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example of complete-tree type multi-bit multi-argument adder using a full adder. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of completely cascaded type multi-bit multi-argument adder using the 4-2 adder; and </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example of completely cascaded type multi-bit multi-argument adder using the full adder. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a block diagram showing a detailed configuration of first to third stages of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a block diagram showing an example of a semi-cascaded type multi-bit multi-argument adder. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a block diagram showing an example of a secondary cascaded type multi-bit multi-argument adder. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a block diagram showing an example of a high-order cascaded type multi-bit multi-argument adder. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a block diagram showing a partial product generator using a modified Booth algorithm (hereinafter, referred to as a modified Booth partial product generator). </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> is a circuit diagram showing a function block according to a second embodiment of the present invention. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a circuit diagram showing a first example of an input selection unit having a fixed value. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> is a circuit diagram showing an example of a fixed logical value supply switch. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a circuit diagram showing a second example of the input selection unit having a fixed value. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a circuit diagram showing a third example of the input selection unit having a fixed value. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is a table showing various logic functions of an MUX. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> is a circuit diagram showing a 4AND4-2 adder using all the circuits of the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference> as ANDs. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> is a circuit diagram showing a computation block required for a multiplier using the 4AND4-2 adder of <cross-reference target="DRAWINGS">FIG. 29</cross-reference>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of a complete-tree type multiplier using a multi-bit 4AND4-2 adder <highlight><bold>26</bold></highlight>; and </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example using a completely cascaded type multi-bit multi-argument 4-2 adder. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 32</cross-reference> is a circuit diagram showing a modified example of the function block according to the second embodiment of the present invention. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 33</cross-reference> is a circuit diagram showing a circuit when two circuits in the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> are used as ANDs. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> is a circuit diagram showing an example of multiplier composed by using a 2AND4-2 adder shown in <cross-reference target="DRAWINGS">FIG. 33</cross-reference>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 35</cross-reference> is a circuit diagram of a multiplier equivalent to <cross-reference target="DRAWINGS">FIG. 34</cross-reference> having a different configuration. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 36</cross-reference> is a circuit diagram of a multiplier equivalent to <cross-reference target="DRAWINGS">FIG. 35</cross-reference> having a different configuration. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 37</cross-reference>(<highlight><bold>1</bold></highlight>) shows a shift arrangement of a completely cascaded type multiplier using a multi-bit 2AND4-2 adder; and </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 37</cross-reference>(<highlight><bold>2</bold></highlight>) shows a horizontal arrangement of the completely cascaded type multiplier using the multi-bit 2AND4-2 adder. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 38</cross-reference> is a circuit diagram showing an example of a 4-input MUX composed in accordance with the function block having a preposition logic circuit as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 39</cross-reference> is a circuit diagram for explaining a construction method of a 4-input MUX striding over two function blocks. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 40</cross-reference> is a circuit diagram showing a modified example of the function block according to the second embodiment of the present invention. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 41</cross-reference> is a circuit diagram showing a third embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 42</cross-reference> is a circuit diagram showing a modified example of the third embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 43</cross-reference> is a circuit diagram showing an ordinary barrel shifter composed of a 2-input MUX. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 44</cross-reference> is a circuit diagram showing an example of a barrel shifter composed of a 4-input MUX according to the present invention. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 45</cross-reference> is a circuit diagram showing a fourth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is a circuit diagram showing a modified example of the fourth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 47</cross-reference> is a circuit diagram showing a fifth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 48</cross-reference> is a circuit diagram showing a first modified example of the fifth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 49</cross-reference> is a circuit diagram showing a second modified example of the fifth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 50</cross-reference> is a circuit diagram showing a sixth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 51</cross-reference> is a circuit diagram showing a seventh embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 52</cross-reference> is a circuit diagram showing a first example of a memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 53</cross-reference> is a circuit diagram showing a second example of a memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 54</cross-reference> is a circuit diagram showing a modified example of the seventh embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 55</cross-reference> is a circuit diagram showing an eighth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 56</cross-reference> is a circuit diagram showing a configuration example of AO by NAND. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 57</cross-reference> is a circuit diagram showing a modified example of the eighth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 58</cross-reference> is a block diagram showing a connection method of the aforementioned function block having a ripple carry circuit. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 59</cross-reference> is a circuit diagram showing a ninth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> FIG <highlight><bold>60</bold></highlight>(<highlight><bold>1</bold></highlight>) shows symbols of an XOR; and </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 60</cross-reference>(<highlight><bold>2</bold></highlight>) shows a configuration example of the XOR. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 61</cross-reference> is a circuit diagram showing a tenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 62</cross-reference>(<highlight><bold>1</bold></highlight>) is a circuit diagram showing a first example of a 4-2 carry block; </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 62</cross-reference>(<highlight><bold>2</bold></highlight>) is a circuit diagram showing a first example of a carry block. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 63</cross-reference>(<highlight><bold>1</bold></highlight>) is a circuit diagram showing a second example of the 4-2 carry block; </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 63</cross-reference>(<highlight><bold>2</bold></highlight>) is a circuit diagram showing a second example of the carry block. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 64</cross-reference>(<highlight><bold>1</bold></highlight>) is a circuit diagram showing a 4-input LUT composed of two 3-input LUT&apos;s; </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 64</cross-reference>(<highlight><bold>2</bold></highlight>) is a circuit diagram showing a 3-input LUT composed of two 2-input LUT&apos;s. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 65</cross-reference> is a circuit diagram showing an eleventh embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 66</cross-reference> is a circuit diagram showing a modified example of the eleventh embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 67</cross-reference> is a circuit diagram showing a twelfth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 68</cross-reference> is a circuit diagram showing a modified example of the twelfth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 69</cross-reference> is a circuit diagram showing a thirteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 70</cross-reference> is a block diagram showing a composite function cell for constituting a condition carry adder. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 71</cross-reference> is a block diagram showing a cascade connection of the composite function cells <highlight><bold>71</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 72</cross-reference> is a circuit diagram showing a modified example of the thirteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 73</cross-reference> is a circuit diagram showing a fourteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>) shows an equivalent circuit of the function block of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in a full adder mode; and </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>2</bold></highlight>) shows an equivalent circuit of the function block of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in a 4-2 adder mode. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 75</cross-reference> is a table showing logic functions of an MUX-XOR <highlight><bold>54</bold></highlight>. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 76</cross-reference> is a table showing logic functions of a 1-bit full adder. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 77</cross-reference> is a circuit diagram showing a fifteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 78</cross-reference> is a circuit diagram showing a modified example of the fifteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 79</cross-reference> is a circuit diagram showing a sixteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 80</cross-reference> is a circuit diagram showing a modified example of the sixteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 81</cross-reference> is a circuit diagram showing a seventeenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 82</cross-reference> shows one of equivalent circuits of the function block <highlight><bold>4</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 81</cross-reference>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 83</cross-reference> shows a logic circuit of frequent use that can be realized by the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference>. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 84</cross-reference> is a circuit diagram showing an eighteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 85</cross-reference> is a circuit diagram showing a nineteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 86</cross-reference> is a circuit diagram showing a modified example of the nineteenth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 87</cross-reference> is a circuit diagram showing a twentieth embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 88</cross-reference> is a circuit diagram showing a twenty-first embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 89</cross-reference> is a circuit diagram showing a twenty-second embodiment of the function block according to the present invention. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 90</cross-reference> shows an equivalent circuit of the function block of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> in a logic mode. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 91</cross-reference> is a block diagram showing another example of the programmable function cell using the function block according to the present invention. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 92</cross-reference> is a circuit diagram showing a register block <highlight><bold>42</bold></highlight> that has been modified. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 93</cross-reference> is a circuit diagram showing a configuration example of a pipelined multiplier. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 94</cross-reference> is a circuit diagram showing a configuration example of a multi-bit adder/subtractor. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 95</cross-reference> is circuit diagram showing a configuration example of a multi-bit adder having an MUX. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 96</cross-reference> is a circuit diagram showing a configuration example of an overflow processor composed of OR&apos;s arranged in one row. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 97</cross-reference> is a block diagram showing a part of a programmable function cell array according to the present invention. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 98</cross-reference> is a circuit diagram showing an example of an intersection portion of an interconnection wire group running in vertical direction and an interconnection wire group running in a horizontal direction. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 99</cross-reference> is a circuit diagram for explaining a common configuration memory group. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 100</cross-reference> is a circuit diagram showing a configuration example of a ripple carry terminal block <highlight><bold>57</bold></highlight>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 101</cross-reference> is a circuit diagram showing a configuration example of a 4-2 carry block <highlight><bold>58</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 102</cross-reference> is a layout diagram of an example of a reconfigurable device in which the programmable function cells are arranged. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 103</cross-reference> is a circuit diagram showing a typical example of an ordinary multiplier. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 104</cross-reference> is a circuit diagram showing an example of a conventional FPGA function block. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 105</cross-reference> is a circuit diagram showing an example of a logic function generator. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 106</cross-reference> is a diagram showing a circuit to be implemented in the logic function generator for constituting a multiplier. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 107</cross-reference> is a circuit diagram showing a configuration example of a 4-input MUX using a conventional function block.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> Hereafter, the preferred embodiments of the present invention will be described in detail with reference to the accompanying drawings. </paragraph>
</section>
<section>
<heading lvl="1">1. First Embodiment </heading>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> 1.0) Programmable function cell </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic block diagram showing the configuration of a programmable function cell using a function block according to the present invention. This programmable function cell <highlight><bold>1</bold></highlight> is provided with an input block <highlight><bold>3</bold></highlight>, a function block <highlight><bold>4</bold></highlight>, and an output block <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> The programmable function cells <highlight><bold>1</bold></highlight> are arranged in a two-dimensional array on a reconfigurable device, and they are interconnected by an interconnection wire group <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> The input block <highlight><bold>3</bold></highlight> is composed of a plurality of input selection units (here, four input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>0</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>2</bold></highlight>, and <highlight><bold>3</bold></highlight>_<highlight><bold>3</bold></highlight>). Each of the input selection units selects a signal on one wire from the interconnection wire group <highlight><bold>2</bold></highlight> and outputs the selected signal to the function block <highlight><bold>4</bold></highlight>. Outputs of the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>0</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>2</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>3</bold></highlight> are connected to inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the input block <highlight><bold>4</bold></highlight>, respectively. The output block <highlight><bold>5</bold></highlight> is supplied with outputs ol, os and oc of the function block <highlight><bold>4</bold></highlight> and a clock signal clk as inputs and outputs a signal selected from ol, os and oc to a wire selected from the interconnection wire group <highlight><bold>2</bold></highlight> directly or after temporarily storing in a register. When the programmable function cell is not used, the output block <highlight><bold>5</bold></highlight> may not output any signal to the interconnection wire group. Selection or a wire or a signal in the input block <highlight><bold>3</bold></highlight> and in the output block <highlight><bold>5</bold></highlight> is determined by configuration data set by a user. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> 1.1) Input selection unit </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing a first example of the input selection unit used in the programmable function cell of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The input selection unit <highlight><bold>3</bold></highlight>_k (k is an integer) is composed of one output line <highlight><bold>11</bold></highlight> and a plurality of programmable switches <highlight><bold>10</bold></highlight>. Each of the programmable switches <highlight><bold>10</bold></highlight> connects the output line <highlight><bold>11</bold></highlight> with a corresponding wire of the interconnection wire group <highlight><bold>2</bold></highlight>. The output line <highlight><bold>11</bold></highlight> is not necessarily connected to all of the wires of the interconnection wire group <highlight><bold>2</bold></highlight> passing through the input selection unit <highlight><bold>3</bold></highlight>_k by the programmable switches <highlight><bold>10</bold></highlight>. Moreover, connection with which wire in the interconnection wire group <highlight><bold>2</bold></highlight> may differ in each of the input selection units. Each of the programmable switches <highlight><bold>10</bold></highlight> is a circuit having two terminals selectively connected and disconnected depending on configuration data. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram showing an example of the programmable switch <highlight><bold>10</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Each of the programmable switches includes a 1-bit configuration memory <highlight><bold>13</bold></highlight> and a transmission gate <highlight><bold>12</bold></highlight>. An output q and inverted output qb of the configuration memory are connected to a gate input g and an inverted gate input gb of the transmission gate <highlight><bold>12</bold></highlight>, respectively. An I/O terminal t<highlight><bold>0</bold></highlight> and t<highlight><bold>1</bold></highlight> of the transmission gate <highlight><bold>12</bold></highlight> are connected to terminals <highlight><bold>14</bold></highlight> and <highlight><bold>15</bold></highlight> of the programmable switch <highlight><bold>10</bold></highlight>, respectively. The terminals <highlight><bold>14</bold></highlight> and <highlight><bold>15</bold></highlight> of the programmable switch <highlight><bold>10</bold></highlight> are connected to each other when a logical value of 1 is held in the configuration memory <highlight><bold>13</bold></highlight> and not connected when the logical value of 0 is held in the configuration memory <highlight><bold>13</bold></highlight>. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a circuit diagram showing an example of the transmission gate of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As is well-known, the transmission gate <highlight><bold>12</bold></highlight> uses a first I/O terminal t<highlight><bold>0</bold></highlight> obtained by connecting drain terminals of an NMOS (n-channel metal-oxide-semiconductor) transistor <highlight><bold>16</bold></highlight> and a PMOS (p-channel MOS) transistor <highlight><bold>17</bold></highlight> and a second I/O terminal t<highlight><bold>1</bold></highlight> obtained by connecting source terminals of the NMOS and the PMOS. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Other than this, the programmable switch <highlight><bold>10</bold></highlight> can be constructed by various ways. For example, see Japanese Patent Application Laid-open No. 11-353152. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram showing a second example of the input selection unit used in the programmable function cell of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. This input selection unit <highlight><bold>3</bold></highlight>_k connects one or more wires of the interconnection wire group <highlight><bold>2</bold></highlight> to inputs of a multiplexer <highlight><bold>20</bold></highlight> and connects the configuration memory <highlight><bold>13</bold></highlight> to control inputs <highlight><bold>21</bold></highlight> of the multiplexer <highlight><bold>20</bold></highlight>. Depending on data stored in the configuration memory, one of the input signals of the multiplexer <highlight><bold>20</bold></highlight> is selected and outputted to an output line <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> Similarly to the case of the aforementioned first example, all the wires of the interconnection wire group passing through the input selection unit <highlight><bold>3</bold></highlight>_k are not necessarily connected to the multiplexer <highlight><bold>20</bold></highlight>. Moreover, the connection between the interconnection wire group <highlight><bold>2</bold></highlight> and the multiplexer <highlight><bold>20</bold></highlight> may be different in each of the input selection units. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> 1.2) Function block (First Embodiment) </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing the configuration of a function block according to a first embodiment of the present invention. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> The function block <highlight><bold>4</bold></highlight> according to the present embodiment is provided with a logic function generator <highlight><bold>40</bold></highlight>, a 4-2 carry block <highlight><bold>41</bold></highlight>, a 2-input MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, and an exclusive-OR circuit (XOR) <highlight><bold>30</bold></highlight>. Inputs i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight>, and i<highlight><bold>3</bold></highlight> of the function block <highlight><bold>4</bold></highlight> are respectively connected to inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight> and to inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> of the 4-2 carry block <highlight><bold>41</bold></highlight>. An input i<highlight><bold>0</bold></highlight> of the function block <highlight><bold>4</bold></highlight> is connected to input in<highlight><bold>0</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight> and to an input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. An output out of the logic function generator <highlight><bold>40</bold></highlight> is connected to a control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to a first input of the XOR <highlight><bold>30</bold></highlight>. In addition, the output out of the logic function generator <highlight><bold>40</bold></highlight> also becomes a logic output ol of the function block <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> A 4-2 carry input i<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight> is connected to an input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to a second input of the XOR <highlight><bold>30</bold></highlight>. An output of the 4-2 carry block <highlight><bold>41</bold></highlight>, an output of the XOR <highlight><bold>30</bold></highlight>, and an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>are a 4-2 carry output o<highlight><bold>42</bold></highlight>, an addition output os, and a carry output oc of the function block <highlight><bold>4</bold></highlight>, respectively. Since the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>has been explained above, its explanation is omitted here (see <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> The logic function generator <highlight><bold>40</bold></highlight> is a circuit that can implement various logic functions depending on data stored in a built-in configuration memory (not shown). Typically, a 4-input LUT as shown in <cross-reference target="DRAWINGS">FIG. 105</cross-reference> is implemented. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> The 4-2 carry block <highlight><bold>41</bold></highlight> is a circuit that makes a carry signal that is generated when adding the inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight>. Hereinafter, several examples of the 4-2 carry block <highlight><bold>41</bold></highlight> will be described with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>1</bold></highlight>) is a circuit diagram showing a first example of the 4-2 carry block <highlight><bold>41</bold></highlight>. The AND <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>uses inputs in<highlight><bold>3</bold></highlight> and in<highlight><bold>1</bold></highlight> to perform an AND function thereon and outputs its result to an OR circuit (OR) <highlight><bold>32</bold></highlight>. Similarly, the AND <highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>uses in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> to output its ANDed result to the OR <highlight><bold>32</bold></highlight>, and the AND <highlight><bold>31</bold></highlight><highlight><italic>c </italic></highlight>uses in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> to output its ANDed result to the OR <highlight><bold>32</bold></highlight>. The OR <highlight><bold>32</bold></highlight> performs an OR function on these three inputs to output the 4-2 carry signal o<highlight><bold>42</bold></highlight>. As can be seen from this configuration, the 4-2 carry block <highlight><bold>41</bold></highlight> is symmetric with respect to inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> (that is, the output does not change even if the inputs are replaced by each other). </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>2</bold></highlight>) is a circuit diagram showing a second example of the 4-2 carry block <highlight><bold>41</bold></highlight>. An output of the AND <highlight><bold>31</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to a input-<highlight><bold>0</bold></highlight> of a MUX <highlight><bold>22</bold></highlight>; an output of an OR <highlight><bold>33</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to an input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>; an input in<highlight><bold>1</bold></highlight> is used as a control input of the MUX <highlight><bold>22</bold></highlight>; and an output of the MUX <highlight><bold>22</bold></highlight> serves as out. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>3</bold></highlight>) is a circuit diagram showing a third example of the 4-2 carry block <highlight><bold>41</bold></highlight>. An output of an AND <highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to a first input of an OR <highlight><bold>33</bold></highlight><highlight><italic>b</italic></highlight>; an output of an OR <highlight><bold>33</bold></highlight><highlight><italic>a </italic></highlight>using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to a first input of an AND <highlight><bold>31</bold></highlight><highlight><italic>a</italic></highlight>; the input in<highlight><bold>1</bold></highlight> serves as a second input of the AND <highlight><bold>31</bold></highlight><highlight><italic>a</italic></highlight>; an output of the AND <highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>is connected to a second input of the OR <highlight><bold>33</bold></highlight><highlight><italic>b</italic></highlight>; and an output of the OR <highlight><bold>33</bold></highlight><highlight><italic>b </italic></highlight>serves as out. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>4</bold></highlight>) is a circuit diagram showing a fourth example of the 4-2 carry block <highlight><bold>41</bold></highlight>. In this fourth example, the OR <highlight><bold>33</bold></highlight><highlight><italic>a </italic></highlight>in the third example is replaced by the XOR <highlight><bold>30</bold></highlight>. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>5</bold></highlight>) is a circuit diagram showing a fifth example of the 4-2 carry block <highlight><bold>41</bold></highlight>. An output of the XOR <highlight><bold>30</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs serves as a control input of the MUX <highlight><bold>22</bold></highlight>; in<highlight><bold>2</bold></highlight> (or in <highlight><bold>3</bold></highlight>) is connected to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>; in<highlight><bold>1</bold></highlight> serves as the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>; and an output of the MUX <highlight><bold>22</bold></highlight> serves as out. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>6</bold></highlight>) is a circuit diagram showing a sixth example of the 4-2 carry block <highlight><bold>41</bold></highlight>. An output of a NAND <highlight><bold>34</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>; an output of an NOR <highlight><bold>35</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>; the input in<highlight><bold>1</bold></highlight> serves as a control input of the MUX <highlight><bold>22</bold></highlight>; and an inverted output of the MUX <highlight><bold>22</bold></highlight> serves as out. In this example, the output of each logic gate <highlight><bold>31</bold></highlight>, <highlight><bold>33</bold></highlight> and <highlight><bold>22</bold></highlight> in the second example is inverted. In general, with regard to a logic gate, as compared to an AND and an OR, an NAND and an NOR whose outputs are inverted can be made easily and the delay is smaller. Accordingly, the sixth example is superior to the second example with respect to the area and the delay. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>7</bold></highlight>) is a circuit diagram showing a seventh example of the 4-2 carry block <highlight><bold>41</bold></highlight>. An output of the NAND <highlight><bold>34</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to a first input of an OAI (OR-AND-INVERT) <highlight><bold>36</bold></highlight>; an output of the NOR <highlight><bold>35</bold></highlight> using in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs is connected to a second input of the OAI <highlight><bold>36</bold></highlight>; an output of an inverter <highlight><bold>37</bold></highlight> using in<highlight><bold>1</bold></highlight> as the input is connected to a third input of the OAI <highlight><bold>36</bold></highlight>; and an output of the OAI <highlight><bold>36</bold></highlight> serves as out. Here, the OAI <highlight><bold>36</bold></highlight> is a logic gate outputting an NAND-ed result of the first input and an OR-ed result of the second and the third input. This can also be formed by combining separated OR and NAND but sometimes it is better to form it as an indivisible logic gate from the viewpoint of occupied area and propagation delay. In the seventh example, outputs of the respective logic gates of the third example are inverted. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> In addition to the examples of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, various modifications are possible which can easily be devised by those skilled in the art such as logic inversion. Moreover, it is possible to use a 3-input logic function generator (such as a 3-input LUT) where various logic circuits can be implemented as the 4-2 carry block <highlight><bold>41</bold></highlight>. In this case, there is an advantage that it can be used for generating a 4-2 carry output o<highlight><bold>42</bold></highlight> or for other purposes as will be detailed later, depending on the configuration. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> 1.3) Output block </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram showing a first example of the output block in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The respective signals oc, os and ol are led to inputs of register blocks <highlight><bold>42</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>a</italic></highlight>, respectively, which are supplied with a clock signal clk. Each of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>outputs its input signal directly or after temporarily holding in a register controlled by the clock signal clk, in accordance with the configuration data. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> The outputs of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>are connected to inputs of output selection units <highlight><bold>5</bold></highlight>_<highlight><bold>2</bold></highlight>, <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight>, respectively. The respective output selection units <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight>, <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>2</bold></highlight>, in accordance with the configuration data, output the input signals in to one or more wires of the interconnection wire group <highlight><bold>2</bold></highlight> or do not output to any of them. The register blocks <highlight><bold>42</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>a </italic></highlight>have some control inputs (in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, two control inputs ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight>) which are connected to input blocks <highlight><bold>3</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>3</bold></highlight><highlight><italic>a</italic></highlight>, respectively. Connection between an input block and the interconnection wire group <highlight><bold>2</bold></highlight> may differ in each of the input blocks <highlight><bold>3</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>3</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram showing an example of the register block in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. An input in of the register block <highlight><bold>42</bold></highlight> is connected to a data input d of a D-flip-flop (FF) <highlight><bold>38</bold></highlight> and to one of the inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>s</italic></highlight>; a data output q of the D-FF <highlight><bold>38</bold></highlight> is connected to the other of the inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>s</italic></highlight>; and an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>s </italic></highlight>serves as an output out of the register block <highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> The D-FF <highlight><bold>38</bold></highlight> is supplied with the clock signal clk and several control signals. Here, the two control inputs of the register block <highlight><bold>42</bold></highlight> are ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight>. There are various types of control input of the D-FF. For example, a clock enable e and a set/reset sr can be used with a high usability. The control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>s </italic></highlight>is connected with an output of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>s </italic></highlight>and, in accordance with the content of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>s</italic></highlight>, the input in is output to out directly or after being registered in the D-FF in synchronization with the clock signal clk. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> In this disclosure, if the two inputs are connected to the MUX regardless of which is connected to input-<highlight><bold>0</bold></highlight> (or input-<highlight><bold>1</bold></highlight>), symbols <highlight><bold>0</bold></highlight> and <highlight><bold>1</bold></highlight> of the MUX are in some cases omitted as in the MUX <highlight><bold>22</bold></highlight><highlight><italic>s </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a block diagram showing a first example of an output selection unit in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. An input signal of the output selection unit <highlight><bold>5</bold></highlight>_k (k&minus;0, 1, . . . ) is input to a buffer <highlight><bold>39</bold></highlight>, whose output <highlight><bold>18</bold></highlight> is connected to one terminals of the respective programmable switches <highlight><bold>10</bold></highlight>. The other terminal of each of the programmable switches <highlight><bold>10</bold></highlight> is connected to a different wire of the interconnection wire group <highlight><bold>2</bold></highlight>. The output <highlight><bold>18</bold></highlight> of the buffer <highlight><bold>39</bold></highlight> is not necessarily connected to all the wires of the interconnection wire group <highlight><bold>2</bold></highlight> passing through the output selection unit <highlight><bold>5</bold></highlight>_k via the programmable switches <highlight><bold>10</bold></highlight>. Moreover, as shown by reference numerals <highlight><bold>2</bold></highlight>_<highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight>_<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, some wires of the interconnection wire group <highlight><bold>2</bold></highlight> may be connected directly to the output <highlight><bold>18</bold></highlight> of the buffer <highlight><bold>39</bold></highlight>. The interconnection wire group <highlight><bold>2</bold></highlight> may be connected to the output selection unit <highlight><bold>5</bold></highlight>_k (k&equals;0, 1, . . . ) in different ways. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram showing a second example of the output selection unit in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. An MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>selects one from input signals os and ol depending on data stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>and outputs the selected one to the input of the register block <highlight><bold>42</bold></highlight><highlight><italic>c</italic></highlight>. The signal oc is input to the input of the register block <highlight><bold>42</bold></highlight><highlight><italic>c</italic></highlight>. Moreover, the control inputs (ct<highlight><bold>11</bold></highlight>, ct<highlight><bold>12</bold></highlight>) of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>are connected to the outputs of the input blocks <highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>3</bold></highlight><highlight><italic>c</italic></highlight>, respectively. An output of the register block <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>is connected to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>; an output out of the register block <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>is connected to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>; and control inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>are both connected to the output of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b</italic></highlight>, respectively. When a logical value of 0 is held in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b</italic></highlight>, outputs of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>are respectively connected to the output selection units <highlight><bold>5</bold></highlight> <highlight><bold>1</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight>. When a logical value of 1 is held in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b</italic></highlight>, outputs of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>are respectively connected to the output selection units <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> The output selection units <highlight><bold>5</bold></highlight> <highlight><bold>0</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight> are respectively connected to even-numbered wires and odd-numbered wires of the interconnection wire group <highlight><bold>2</bold></highlight> (six wires are shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>) via the programmable switches <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> As compared to the first example (<cross-reference target="DRAWINGS">FIG. 9</cross-reference>), in the second example of the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>), the numbers of input blocks <highlight><bold>3</bold></highlight>, the output selection units <highlight><bold>5</bold></highlight>_k (k is an integer), and the register blocks <highlight><bold>42</bold></highlight> are reduced, which advantageously reduces the occupied area. This is realized by the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>selecting only one of the signals os and ol. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> In the function block <highlight><bold>4</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, there is scarcely a case that the three outputs os, ol and oc are simultaneously used. Accordingly, there is no need of providing each of the three outputs individually with the input block <highlight><bold>3</bold></highlight>, the output selection unit <highlight><bold>5</bold></highlight>_k (k is an integer) and the register block <highlight><bold>42</bold></highlight>. Thus, as in the second example of the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>), it is more effective that firstly input signals are reduced to two and then the input selection unit, the output selection unit and the register block are provided for these signals. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> Moreover, in the second example of the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 12</cross-reference>), by using the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, it is possible to exchange the outputs of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>to be given to the output selection units <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight> in accordance with the content of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b</italic></highlight>. The respective output selection units are connected to only half of wires of the interconnection wire group <highlight><bold>2</bold></highlight>. However, the register block can output to any of the output selection units in accordance with the content of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>and, therefore, can output to all the wires of the interconnection wire group <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> In this manner, while assuring routability, the number of the programmable switches <highlight><bold>10</bold></highlight> in the output selection unit can be reduced by half, thereby decreasing the occupied area. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>exchanging signals are arranged at the output side of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c</italic></highlight>. However, the same effect can be obtained when they are arranged at the input side so as to exchange input signals of two register blocks. Moreover, it may be allowable in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> that the signals os and oc are replaced with each other and the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>selects one signal from oc and ol. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> However, such an arrangement in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> that signals ol and oc are replaced with each other and one signal is selected from oc and os, or one signal is selected from signals ol, oc and os so that only one register block and one output selection unit are used cannot achieve the object of the present invention. Because, as will be described later, in order to achieve the object of the present invention oc and os should be simultaneously output to the interconnection wire group. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> 1.4) Operation </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> Next, an operation and effect of the programmable function cell having the aforementioned configuration will be described. The programmable function cell has a logic operation mode and a 4-2 adder operation mode. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> 1.4.1) Logic mode </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The first operation mode is similar to the programmable function cell in the conventional PLD and FPGA; that is, the cell is used as a component of various circuits that are implemented on a reconfigurable device by setting various logic functions. This operation mode is called a logic mode. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> In the logic mode, in the programmable function cell <highlight><bold>1</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the output block <highlight><bold>5</bold></highlight> is configured so that the logic output ol of the function block <highlight><bold>4</bold></highlight> is output to the interconnection wire group <highlight><bold>2</bold></highlight>. Since the logic output ol is an output itself of the logic function generator <highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>), the programmable function cell <highlight><bold>1</bold></highlight> in the logic mode can be used as an arbitrary logic circuit that can be realized by the logic function generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> 1.4.2) 4-2 adder mode </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> The second operation mode is to use the programmable function cell <highlight><bold>1</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> as a 4-2 adder. This operation mode is called a 4-2 adder mode. In the 4-2 adder mode, a 4-input XOR is implemented in the logic function generator <highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 6</cross-reference>). </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a 4-input XOR <highlight><bold>24</bold></highlight> implemented in the logic function generator <highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, four inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> and one output out of the 4-input XOR <highlight><bold>24</bold></highlight> correspond to the respective inputs and output of the same reference symbols in the logic function generator <highlight><bold>40</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> Thus, the function block <highlight><bold>4</bold></highlight> having the logic function generator <highlight><bold>40</bold></highlight> where the 4-input XOR <highlight><bold>24</bold></highlight> is implemented has a function identical to that of a 4-2 adder as shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> (Equivalent circuit of 4-2 adder) </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a diagram showing an equivalent circuit of the 4-2 adder. Inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight>, i<highlight><bold>3</bold></highlight> and i<highlight><bold>4</bold></highlight> and outputs o<highlight><bold>42</bold></highlight>, os and oc of the 4-2 adder correspond respectively to the inputs and outputs denoted by the same reference symbols in the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Since the 4-2 adder <highlight><bold>44</bold></highlight> has an addition output os and a carry output oc, the output block <highlight><bold>5</bold></highlight> of the programmable function cell <highlight><bold>1</bold></highlight> should output the outputs os and oc of the function block <highlight><bold>4</bold></highlight> simultaneously to different wires of the interconnection wire group <highlight><bold>2</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, argument inputs i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the 4-2 adder <highlight><bold>44</bold></highlight> are input to the carry input ic and argument inputs a and b of the 1-bit full adder <highlight><bold>43</bold></highlight><highlight><italic>a</italic></highlight>, respectively; while the 4-2 carry input i<highlight><bold>42</bold></highlight> and the argument input i<highlight><bold>0</bold></highlight> of the 4-2 adder <highlight><bold>44</bold></highlight> and the addition output s of the 1-bit full adder <highlight><bold>43</bold></highlight><highlight><italic>a </italic></highlight>are input to the carry input ic and the argument inputs a and b of the 1-bit full adder <highlight><bold>43</bold></highlight><highlight><italic>b</italic></highlight>, respectively. The carry output of the 1-bit full adder <highlight><bold>43</bold></highlight><highlight><italic>a </italic></highlight>and the addition output s and the carry output oc of the 1-bit full adder <highlight><bold>43</bold></highlight><highlight><italic>b </italic></highlight>serve as a 4-2 carry output o<highlight><bold>42</bold></highlight>, an addition output os, and a carry output oc of the 4-2 full adder <highlight><bold>44</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> In the 4-2 adder mode, the function block <highlight><bold>4</bold></highlight> of FIG. <highlight><bold>6</bold></highlight> has an I/O relation (truth table) equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 14</cross-reference> but the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> cannot be dissolved into two 1-bit full adders as in the circuit of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> (Use and advantage of 4-2 adder) </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a circuit diagram showing a multi-bit 4-2 adder circuit in which plural 4-2 adders are arranged. As shown in this figure, in general, plural 4-2 adders are connected to form a multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>, in which the 4-2 adders <highlight><bold>44</bold></highlight> are arranged in one row and a 4-2 carry output o<highlight><bold>42</bold></highlight> and a 4-2 carry input i<highlight><bold>42</bold></highlight> are connected to each other between adjacent 4-2 adders. This circuit is designed to perform carry-save addition of multi-bit data. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, in general, an n-bit 4-2 adder circuit <highlight><bold>45</bold></highlight> creates a (n&plus;1)-bit addition output OS and a (n&plus;1) -bit carry output OC from four n-bit argument inputs C, D, E and F. Here, the respective k-th (k&equals;1, 2, . . . n) bits of C, D, E and F, each denoted by c<highlight><subscript>k-1</subscript></highlight>, d<highlight><subscript>k-1</subscript></highlight>, e<highlight><subscript>k-1 </subscript></highlight>and f<highlight><subscript>k-1</subscript></highlight>, are input to argument inputs i<highlight><bold>3</bold></highlight>, i<highlight><bold>2</bold></highlight>, i<highlight><bold>1</bold></highlight> and i<highlight><bold>0</bold></highlight> of the k-th 4-2 adder <highlight><bold>44</bold></highlight> in the n-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>, respectively. In the n-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>, an addition output os<highlight><subscript>k-1 </subscript></highlight>of the k-th 4-2 adder <highlight><bold>44</bold></highlight> serves as the k-th bit of the (n&plus;1) -bit addition output OS; and a 4-2 carry output o<highlight><bold>42</bold></highlight> of the n-th 4-2 adder <highlight><bold>44</bold></highlight> serves as the (n&plus;1)-th bit (i.e., MSB) os<highlight><subscript>n </subscript></highlight>of the (n&plus;1)-bit addition output OS. In the n-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>, a carry output oc<highlight><subscript>k-1 </subscript></highlight>of the k-th 4-2 adder <highlight><bold>44</bold></highlight> serves as the (k&plus;1)-th bit of the (n&plus;1)-bit carry output OC; and the first bit (LSB) oc<highlight><subscript>-1 </subscript></highlight>of the (n&plus;1) -bit carry output OC is a signal supplied from another circuit or a fixed logical value. The carry input ic<highlight><subscript>-1 </subscript></highlight>of the first 4-2 adder <highlight><bold>44</bold></highlight> of the n-bit 4-2 adder circuit <highlight><bold>45</bold></highlight> is also a signal supplied from another circuit or a fixed logical value. When adding all of the four n-bit argument inputs C, D, E and F, both of oc<highlight><subscript>-1 </subscript></highlight>and ic<highlight><subscript>-1 </subscript></highlight>have a logical value of 0. When a subtraction is made on one of the n-hit argument inputs, one of oc<highlight><subscript>-1 </subscript></highlight>and ic<highlight><subscript>-1 </subscript></highlight>has a logical value of 0 and the other has a logical value of 1. When a subtraction is made on two of the n-bit argument inputs, both of them have a logical value of 1. </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> Complete-tree multi-bit multi-argument adder </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of a complete-tree-type multi-bit multi-argument adder using the 4-2 adder. Here is exemplified a multi-bit multi-argument adder that produces an addition result of 16 pieces of multi-bit data: C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q and R. </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> First, the multi-bit; data C, D, E and F are input to multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>2</bold></highlight>, I<highlight><bold>1</bold></highlight> and I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight>, respectively (this is the same as the example shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>); the multi-bit data G, II, I and J are input to multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>2</bold></highlight>, I<highlight><bold>1</bold></highlight> and I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight>, respectively; the multi-bit data K, L, M and N are input to multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>2</bold></highlight>, I<highlight><bold>1</bold></highlight> and I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>3</bold></highlight>, respectively; and the multi-bit data O, P, Q and R are input to multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>2</bold></highlight>, I<highlight><bold>1</bold></highlight> and I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>4</bold></highlight>, respectively. Here, the multi-bit argument input I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_k (k is an integer) corresponds to the argument input i<highlight><bold>0</bold></highlight> of the first to the n-th 4-2 adders constituting the multi-bit 4-2 adder circuit. It is the same with the multi-bit argument inputs I<highlight><bold>1</bold></highlight>, I<highlight><bold>2</bold></highlight> and I<highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> Next, a multi-bit addition output OS and a multi bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight>, and a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight> are input to the multi-bit argument inputs I<highlight><bold>0</bold></highlight>, I<highlight><bold>1</bold></highlight>, I<highlight><bold>2</bold></highlight> and I<highlight><bold>3</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>5</bold></highlight>, respectively. Moreover, a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>4</bold></highlight>, and a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>3</bold></highlight> are input to the multi-bit argument inputs I<highlight><bold>0</bold></highlight>, I<highlight><bold>1</bold></highlight>, I<highlight><bold>2</bold></highlight> and I<highlight><bold>3</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>6</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0221" lvl="0"><number>&lsqb;0221&rsqb;</number> Next, a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>6</bold></highlight>, and a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>5</bold></highlight> are input to the multi bit argument inputs I<highlight><bold>0</bold></highlight>, I<highlight><bold>1</bold></highlight>, I<highlight><bold>2</bold></highlight> and I<highlight><bold>3</bold></highlight> of the multi-bit 4-2 add circuit <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight>, respectively. Lastly, a multi-bit addition output OS and a multi-bit carry output OC of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight> are input to the multi-bit argument inputs A and B of a multi-bit full adder circuit <highlight><bold>46</bold></highlight>, respectively. Finally, an addition result of the multi-bit data C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q and R is yielded as a multi-bit addition output S of the multi-bit full adder <highlight><bold>46</bold></highlight>. </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> As is found from <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>), the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight> has a function of reducing four inputs to two outputs. By utilizing this function, by halving the number of pieces of data to be added in each stage, and the last two remaining pieces of data are added by an ordinary multi-bit full adder to yield a final addition result. This is the way of the multi-bit multi-argument adder of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>). Accordingly, the multi-bit full adder is certainly required at the last stage. Detailed description using the programmable function cell according to the present invention will be given later. </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> The respective 4-2 adders <highlight><bold>44</bold></highlight> constituting the aforementioned multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight> (see <cross-reference target="DRAWINGS">FIG. 15</cross-reference>) can be realized with a single programmable function cell by using the function block according to the present invention shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> On the other hand, in the conventional function block (see <cross-reference target="DRAWINGS">FIG. 104</cross-reference>) as well as a programmable function cell including one conventional function block, only one-bit full adder can be implemented and accordingly, as is seen from <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, in order to create the 4-2 adder <highlight><bold>44</bold></highlight>, two programmable function cells should be connected in cascade. That is, for adding the same number of pieces of data, the conventional programmable function cell requires twice the number of cells required by the programmable function cell of the present invention (except for the multi-bit full adder of the last stage). </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> Now the function block of the present invention (as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>) differs from the conventional function block (<cross-reference target="DRAWINGS">FIG. 104</cross-reference>) only by one 4-2 carry block <highlight><bold>41</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, this is a very small area as compared to the entire programmable function cell including the input block <highlight><bold>3</bold></highlight> and the output block <highlight><bold>5</bold></highlight> occupying a large area. That is, the programmable function cell of the present invention occupies almost the same area as that of the conventional one. Moreover, both function blocks have a configuration that data propagates through the same number of stages formed with the same logic circuit. Accordingly, propagation delay of the programmable function cell of the present invention is the same as that of the conventional function cell. </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> From the aforementioned fact, when adding the same number of values, the programmable function cell of the present invention needs only one-half the area required for the conventional programmable function cell (aside from the multi-bit full adder of the last stage). Moreover, with regard to delay, as compared to the conventional programmable function cell in which two cells are connected in series to configure one 4-2 adder, the delay of the programmable function cell of the present invention is halved (aside from the multi-bit full adder of the last stage). </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> In the multi-bit multi-argument adder of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>), a delay from the data input until the last addition result is obtained corresponds to the four stages or computation blocks from the first to the fourth, as shown in the figure. Moreover, only eight computation blocks <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight> and <highlight><bold>46</bold></highlight> are needed in total. </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) shows a specific example of multi-bit 16-argument adder but this is only one example. In general, when adding 2k pieces of multi-bit data, the number of values is reduced to 2k&minus;1 by the computation block of the first stage (consisting of 2k-2 multi-bit 4-2 adders), and to 2k&minus;2 by the computation block of the second stage (consisting of 2k-3 multi-bit 4-2 adders) Thus, the number of values is reduced by half in each stage and when the number of values has become 2 through the computation block of the (k&minus;1)-th stage (one multi-bit 4-2 adder), the two pieces of data are added by using the multi-bit full adder to yield a final result. Here, 2k&minus;1 multi-bit 4-2 adders are used in total and the delay is determined by k&minus;1 stages of the computation block (except the multi-bit full adder of the last stage). When the number of input data, 2k, is large, the area occupied by the multi-bit full adder and the delay at the last stage occupy only a small ratio as a whole. Such a complete-tree multi-bit multi-argument adder is characterized in that it has the smallest delay as compared to the other types of multi-bit multi-argument adder which will be detailed later. </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> The complete-tree type multi-bit multi-argument adder using the 4-2 adder has been described. In addition, there are various types of complete-tree type multi-bit multi-argument adder. Among them, the one most suitable for the conventional function block (<cross-reference target="DRAWINGS">FIG. 104</cross-reference>) is shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>2</bold></highlight>). </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example of complete-tree type multi-bit multi-argument adder using a full adder. Here, there is exemplified a complete-tree type multi-bit multi-argument adder using multi-bit full adders <highlight><bold>46</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>46</bold></highlight>_<highlight><bold>15</bold></highlight>. In the conventional function block (<cross-reference target="DRAWINGS">FIG. 104</cross-reference>), a 1-bit full adder can be realized by one block and accordingly, as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>2</bold></highlight>), the complete-tree type multi-bit multi-argument adder using multi-bit full adders has a better efficiency. Actually, in this case, the delay is identical to that of the complete-tree type multi-bit multi-argument adder created by implementing a 4-2 adder in the programmable function cell of the present invention shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> However, the number of computation blocks, i.e., the occupied area of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) is one-half that of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>2</bold></highlight>) again. The complete-tree type multi-bit multi-argument adder as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) has an advantage that it has a highest speed but also has a disadvantage that wiring is irregular and complicated. The complexity of the wiring increases rapidly as the number of pieces of data to be added is increases, i.e., as the number of stages of the computation blocks increases. In general, in reconfigurable devices, interconnection resources are equally allocated to the respective programmable function cells arranged in a two-dimensional array. Accordingly, it is difficult to implement a circuit such as the complete-tree multi-bit multi-argument adder that uses a great number of pieces of data in which a plenty of very complicated wiring resources are consumed partially. </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> Completely cascaded tree multi-bit multi-argument adder </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of completely cascaded type multi-bit multi-argument adder. This has a function completely identical to that of the complete-tree type multi-bit multi-argument adder of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>). The multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>2</bold></highlight>, I<highlight><bold>1</bold></highlight> and I<highlight><bold>0</bold></highlight> of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight> in the first stage are respectively supplied with multi-bit data C, D, E and F; and the multi-bit argument inputs I<highlight><bold>3</bold></highlight>, I<highlight><bold>0</bold></highlight>, I<highlight><bold>2</bold></highlight> and I<highlight><bold>1</bold></highlight> or the multi bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight> in the second stage are respectively supplied with multi-bit data G and H and multi-bit outputs OC and OS from the first stage. After this, likewise, it is repeated that multi-bit argument inputs of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_k in the k-th stage are supplied with two pieces of multi-bit data and multi-bit outputs OC and OS from the (k&minus;1)-th stage. And at the last stage, multi-bit outputs OC and OS from a preceding stage are added by the multi-bit full adder <highlight><bold>46</bold></highlight> and a final addition result is yielded as a multi-bit addition output S. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>) shows an example when the number of the multi-bit data is 16. However, it is possible to create a completely cascaded type multi-bit multi-argument adder for an arbitrary number of pieces of data in the same way. In general, when the number of pieces of the multi-bit data is 2k, 2k-1-1 multi-bit 4-2 adders are required for the completely cascaded type multi-bit multi-argument adder. This is the same situation as the complete-tree type multi-bit multi-argument adder. </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a block diagram showing a detailed configuration of the first to third stages of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>). In the configuration of <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, it is assumed that no overflow occurs in each multi-bit 4-2 adder <highlight><bold>45</bold></highlight>_k and further that a logical value of 0 is initially given where no data is written. </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> As is seen from <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, the completely cascaded type multi-bit multi-argument adder has a high regularity and its wiring is simple. This configuration is not changed even when the number of pieces of multi-bit data to be added is increased. In general, among various types of multi-bit multi-argument adders, the completely cascaded type multi-bit multi-argument adder has the advantage of the highest regularity and most simple wiring. Accordingly, such a multi-bit multi-argument adder can be implemented with the highest easiness in a reconfigurable device in which interconnection resources are allocated regularly and equally. </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> With regard to delay, the completely cascaded type multi-bit multi-argument adder has a delay for 2k-1-1 stages of computation blocks (multi-bit 4-2 adders), which is large as compared to a delay of the complete-tree type multi-bit multi-argument adder having computation blocks of k-1 stages (except the multi-bit full adder at the last stage). However, this makes little difference when k is small. Furthermore, the delay is calculated only by the number of stages of the computation blocks but the completely cascaded type multi-bit multi-argument adder has a merit that an interconnection delay is much smaller than that of the complete-tree type. Accordingly, when the number of pieces of data is small, the completely cascaded type almost ranks with the complete-tree type with regard to delay. </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> When the completely cascaded type multi-bit multi-argument adder using the 4-2 adder as shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>) is configured by using the conventional function block (<cross-reference target="DRAWINGS">FIG. 104</cross-reference>), similarly to the case of the aforementioned complete-tree type, the area and the delay are doubled (except the multi-bit full adder of the last stage) as compared to the case using the function block of the present invention as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example of completely cascaded multi-bit multi-argument adder using the multi-bit full adder. In this case, the number of computation blocks and the number of stages of the computation blocks are doubled as compared to the case using the 4-2 adder (<cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>). In either case, the completely cascaded multi-bit multi-argument adder, unlike the complete-tree type, the area and the delay can be halved by using the programmable function cell of the present invention. </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> As has been detailed above, the complete-tree type operates at higher speeds but its wiring is complicated; while the completely cascaded type has simple wiring but its delay is larger. Especially in the completely cascaded type, as the number of pieces of data to be added increases, the delay is greatly increased, as compared to the complete-tree type. In order to solve this problem, a semi-cascaded type multi-bit multi-argument adder is proposed as described hereinafter. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> Semi-cascaded multi-bit multi-argument adder </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a block diagram showing an example of a semi-cascaded multi-bit multi-argument adder. This is an example of 16-argument adder as in the case of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>). The multi-bit 4-2 adders <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight> and <highlight><bold>45</bold></highlight> <highlight><bold>3</bold></highlight> constitute a first completely cascaded type multi-bit multi-argument adder; while the multi bit 4-2 adders <highlight><bold>45</bold></highlight>_<highlight><bold>4</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>5</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>6</bold></highlight> constitute a second completely cascaded type multi-bit multi-argument adder. The multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight> receives four outputs in total from these adders, and the outputs of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight> are added by the multi-bit full adder <highlight><bold>46</bold></highlight> to yield the final addition result on its output S. </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> The number of computation blocks used in this example is identical to that of the complete-tree type and the completely cascaded type as described above. Moreover, the delay corresponds to four stages of computation blocks except the multi-bit full adder of the last stage. Therefore, the delay is about one-half that corresponding to seven stages of computation blocks in the completely cascaded type. </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows an example of the case of <highlight><bold>16</bold></highlight> arguments. Even when the number of pieces of data to be added is different, this type of multi-bit multi-argument adder can be implemented only by changing the number of stages in the first and the second completely cascaded type multi-bit multi-argument adders. In general, when the number of pieces of data to be added is large, the delay of the semi-cascaded type multi-bit multi-argument adder is almost halved as compared to that of the completely cascaded type. The semi-cascaded type multi-bit multi-argument adder has more stages of computation blocks as compared to the complete-tree type, but has a merit that its wiring is simple and the interconnection delay is small. For this, when the number of pieces of data is not so large, the semi-cascaded type almost ranks with the complete-tree type with regard to the delay, too. The completely cascaded type multi-bit multi-argument adder is preferably used when the number of pieces of data to be added is small and the delay is almost negligible. In contrast, the semi-cascaded type multi-bit multi-argument adder is preferably used when the number of pieces of data is comparatively large and the delay becomes too large if the completely cascaded type is used. However, when the number of pieces of data becomes very large, the delay also becomes too large even in the semi-cascaded type. In this case, it is effective to use a secondary cascaded type multi-bit multi-argument adder as described below. </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> Secondary cascaded multi-bit multi-argument adder </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a block diagram showing an example of secondary cascaded type multi-bit multi-argument adder. This secondary cascaded type multi-bit multi-argument adder outputs an addition result of 30 pieces of multi bit data: C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, AA, BB, CC, DD, EE, FF, GG, HH, II, and JJ. </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> The multi-bit 4-2 adder circuits <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight> constitute a first completely cascaded multi-bit multi-argument adder; the multi-bit 4-2 adder circuits <highlight><bold>45</bold></highlight>_<highlight><bold>3</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>4</bold></highlight> constitute a second completely cascaded multi-bit multi-argument adder; the multi-bit 4-2 adder circuits <highlight><bold>45</bold></highlight>_<highlight><bold>5</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>6</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight> constitute a third completely cascaded multi-bit multi-argument adder; and the multi-bit 4-2 adder circuits <highlight><bold>45</bold></highlight>_<highlight><bold>8</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>9</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>10</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>11</bold></highlight> constitute a fourth completely cascaded multi-bit multi-argument adder. These will be called altogether a first layer of completely cascaded type multi-bit multi-argument adders. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> Multi-bit 4-2 adders <highlight><bold>45</bold></highlight>_<highlight><bold>12</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>13</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>14</bold></highlight> constitute a second layer of completely cascaded type multi-bit multi-argument adders, which is supplied with the outputs of the first layer of completely cascaded type multi-bit multi-argument adders as data pieces to be added. The semi-cascaded type multi-bit multi-argument adder as shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference> may be considered as the simplest example of the secondary cascaded multi-bit multi-argument adder in which the second layer consists of a single multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>7</bold></highlight>. From such a point of view, the example shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a primary cascaded type multi-bit multi-argument adder because it has only the first layer. </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> As the number of pieces of addend/augend data is increased in the semi-cascaded type multi-bit multi-argument adder, the number of stages in the first layer of completely cascaded type multi-bit multi-argument adders is proportionately increased, thereby increasing the delay. The entire delay increase can be suppressed as follows. Instead of increasing the number of stages in the first layer, a plenty of completely cascaded type multi-bit multi-argument adders having a small number of stages are prepared as shown in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> and their outputs are connected to the argument inputs of the completely cascaded type multi-bit multi-argument adders in the second layer. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, the number of stages in the first layer of completely cascaded type multi-bit multi-argument adders is set to become larger as its connection destination becomes nearer to the output stage (<highlight><bold>45</bold></highlight>_<highlight><bold>14</bold></highlight>) of the completely cascaded type multi-bit multi-argument adder in the second layer. Such an arrangement is employed so as to provide the approximately same delay in all signal paths from initial data inputs to the output stage (<highlight><bold>45</bold></highlight>_<highlight><bold>14</bold></highlight>). The outputs of the first and the second completely cascaded type multi-bit multi-argument adders in the first layer should go through two stages of multi-bit 4-2 adder circuits <highlight><bold>45</bold></highlight>_<highlight><bold>12</bold></highlight> and <highlight><bold>45</bold></highlight>_<highlight><bold>13</bold></highlight> before reaching the output stage (<highlight><bold>45</bold></highlight>_<highlight><bold>14</bold></highlight>). Also, the output of the third completely cascaded type multi-bit multi-argument adder in the first layer should go through one stage of the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_<highlight><bold>13</bold></highlight> before reaching the output stage (<highlight><bold>45</bold></highlight>_<highlight><bold>14</bold></highlight>). On the other hand, the output of the fourth completely cascaded type multi-bit multi-argument adder is directly connected to the output stage (<highlight><bold>45</bold></highlight> <highlight><bold>14</bold></highlight>). If all the completely cascaded type multi-bit multi-argument adders in the first layer have the same number of stages, then a signal path going through a multi-bit 4-2 adder farther from the output stage of the second layer has a greater delay, which determines the entire delay. To cope with this, the completely cascaded type multi-bit multi-argument adders of the first layer connected to the multi-bit 4-2 adders farther from the output stage of the second layer has a smaller number of stages, so as to eliminate a signal path having a greater delay than the others. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> Description has been given on the secondary cascaded type multi-bit multi-argument adder. It is also possible to increase the number of layers to provide a higher-order cascaded type multi-bit multi-argument adder. </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> Higher-order cascaded multi-bit multi-argument adder </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a block diagram showing an example of a higher-order cascaded multi-bit multi-argument adder. In general, a K-order cascaded type multi-bit multi-argument adder has K layers, each of which includes at least one completely cascaded type multi-bit multi-argument adder as shown in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. In the first layer, inputs Xi and Yi (i&minus;0, 1, 2, . . . , n) of the completely cascaded type multi-bit multi-argument adder of <cross-reference target="DRAWINGS">FIG. 21</cross-reference> are multi-bit data to be added, and in the k-th (k is 2 or more) layer, Xi and Yi are outputs of the completely cascaded type multi-bit multi-argument adder of the (k&minus;1)-th layers The K-th layer has one completely cascaded type multi-bit multi-argument adder <highlight><bold>1</bold></highlight> and its output is added by a multi-bit full adder to yield a final result. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 21</cross-reference>, the number n of stages may differ from layer to layer or within a layer, depending on the completely cascaded multi-bit multi-argument adder. It is most preferable to determine the number of stages so that all the signal paths have the same delay. In general, a primary cascaded multi-bit multi-argument adder is preferably used when the number of pieces of addend/augend data is small. A higher order cascaded type multi-bit multi-argument adder becomes more preferable as the number of pieces of addend/augend data increases. Thus, it is possible to obtain a multi-bit multi-argument adder having simple wiring and the almost same speed as that of the complete-tree type. Since the cascaded type multi-bit multi-argument adder has a high regularity and simple wiring, it is suitable for a reconfigurable device. In the programmable function cell of the present invention, it is possible to provide a multi-bit multi-argument adder with a half area as compared to the conventional programmable function cell. It is also possible to reduce the delay (by half at the maximum compared to the conventional one). </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> Multiplier </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> There is a large demand for a compact high-speed multi-bit multi-argument adder as a main block of a multiplier. In general, multiplication consists of two parts: generation of partial products and addition of the partial products. For the addition of the partial products, the multi-bit multi-argument adder is used. On the other hand, for partial product generation, at method using the modified Booth algorithm is often used. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a block diagram showing a partial product generator using the modified Booth algorithm (hereinafter, referred to as a modified Booth partial product generator). A modified Booth partial product generator produces a partial product by multiplying a multiplicand X by a multiplier Y. In <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, each of m/2 partial product generation units <highlight><bold>47</bold></highlight> is supplied with X and a corresponding one of y<highlight><subscript>2k-1</subscript></highlight>, y<highlight><subscript>2k </subscript></highlight>and Y<highlight><subscript>2k&prime;1 </subscript></highlight>and outputs a partial product P<highlight><subscript>2k </subscript></highlight>(k&equals;0, 1, 2, . . . , m/2&minus;1). Here, Y is assumed to be m-bit data: Y<highlight><subscript>m-1</subscript></highlight>Y<highlight><subscript>m-2 </subscript></highlight>. . . Y<highlight><subscript>3</subscript></highlight>Y<highlight><subscript>2</subscript></highlight>Y<highlight><subscript>1</subscript></highlight>Y<highlight><subscript>0</subscript></highlight>. In an ordinary method using AND gates, the partial product consists of m pieces of multi-bit data, but in the modified Booth algorithm the number of pieces of the multi-bit data is reduced to m/2, that is, by half. </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> In a current custom design LSI, what is used most is a multiplier using the modified Booth partial product generator in combination with the complete-tree type multi-bit multi-argument 4-2 adder as shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>) (hereinafter, a multi-bit multi-argument adder using the 4-2 adder will be particularly referred to as a &ldquo;multi-bit multi-argument 4-2 adder&rdquo;). However, this is not the best way in a reconfigurable device. Its reason will be described below. </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> A multiplier that is used most in the conventional FPGA is the one using a multi-bit full adder as shown in <cross-reference target="DRAWINGS">FIG. 103</cross-reference>. Here, a partial product is generated by an AND gate attached to one input of each full adder. In this method, when Y is assumed to be m-bit data, m multi-bit full adder circuits, i.e., m rows of programmable function cells are used. Here, <cross-reference target="DRAWINGS">FIG. 103</cross-reference> shows the simplest completely cascaded type. However, when multi-bit full adders are combined by other method, the required number of programmable function cells is almost identical to that of the simplest type shown in <cross-reference target="DRAWINGS">FIG. 103</cross-reference>. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> On the other hand, in the case of a multiplier using the modified Booth partial product generator and the multi-bit multi-argument 4-2 adder, the required number of computation blocks is about 3m/4. And the partial product generation unit <highlight><bold>47</bold></highlight> can be implemented in one row of the programmable function cells according to the present invention. Thus, the multiplier using the modified Booth partial product generator and the multi-bit multi-argument 4-2 adder implemented in the programmable function cell of the present invention occupies about three quarters (&frac34;) the area required for the conventional FPGA multiplier. The area surely becomes smaller but with slight difference. And the former multiplier has more complicated configuration than the latter and requires more wiring resource. Accordingly, there may be little merit if the area reduction is small. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> Thus, the method optimal for the custom design LSI is not always optimal for the reconfigurable device. In the custom design LSI, a circuit can be formed with a free shape and arrangement and it is possible to optimally fabricate an arbitrary circuit. On the other hand, in the case of the reconfigurable device, a programmable function cell is used as a configuration unit, in which each circuit should he implemented. Furthermore, the reconfigurable device is under strong restriction with regard to the wiring resource as compared to the custom design LSI. From these differences, as in the aforementioned example, the method optimal for the custom design LSI is not always optimal for the reconfigurable device. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> Next, a more compact multiplier suitable for a reconfigurable device and a function block used therefore will be described in detail hereafter. </paragraph>
</section>
<section>
<heading lvl="1">2. Second Embodiment </heading>
<paragraph id="P-0263" lvl="0"><number>&lsqb;0263&rsqb;</number> 2.1) Function block </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> is a circuit diagram showing a function block according to a second embodiment of the present invention. The second embodiment differs from the first embodiment shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> in that a preposition logic circuit <highlight><bold>29</bold></highlight> is connected to the inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, four types of preposition logic circuit are shown as an example: an AND <highlight><bold>31</bold></highlight>, a 3-input LUT <highlight><bold>48</bold></highlight>, a 2-input LUT <highlight><bold>49</bold></highlight> and an MUX <highlight><bold>22</bold></highlight><highlight><italic>f</italic></highlight>. However, the preposition logic circuit is not limited to these. In general, a preposition logic circuit is a circuit in which various logic functions can be set in accordance with configuration, and has a smaller variety, a smaller size and a higher speed than the logic function generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> Inputs i<highlight><bold>00</bold></highlight>, i<highlight><bold>01</bold></highlight>, i<highlight><bold>11</bold></highlight>, i<highlight><bold>12</bold></highlight>, i<highlight><bold>20</bold></highlight>, i<highlight><bold>21</bold></highlight>, i<highlight><bold>30</bold></highlight>, i<highlight><bold>31</bold></highlight>, and i<highlight><bold>32</bold></highlight> of the function block shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference> are connected to the input selection units, respectively, as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of four input selection units. In general, in the input block <highlight><bold>3</bold></highlight> of the programmable function cell <highlight><bold>1</bold></highlight>, there are as many input selection units <highlight><bold>3</bold></highlight>_k (k is an integer) as the inputs of the function block <highlight><bold>4</bold></highlight>, and the respective inputs of the function block <highlight><bold>4</bold></highlight> are connected with the outputs of the input selection units. In the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, each of the input selection units connected to the inputs i<highlight><bold>10</bold></highlight>, i<highlight><bold>11</bold></highlight> and i<highlight><bold>12</bold></highlight> of the 3-input LUT <highlight><bold>48</bold></highlight> and to the inputs i<highlight><bold>20</bold></highlight> and i<highlight><bold>21</bold></highlight> of the 2-input LUT <highlight><bold>49</bold></highlight> selects one signal from the interconnection wire group <highlight><bold>2</bold></highlight> to output it as in the examples shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. As has been described above, a k-input LUT can realize an arbitrary k-input 1-output logic function in accordance with configuration data stored in a configuration memory incorporated therein. </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> On the other hand, in the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, the inputs i<highlight><bold>00</bold></highlight> and i<highlight><bold>01</bold></highlight> of the AND <highlight><bold>31</bold></highlight> and the inputs i<highlight><bold>30</bold></highlight>, i<highlight><bold>31</bold></highlight> and i<highlight><bold>32</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>are connected to the other type of input selection unit. This type of input selection unit is an input selection unit with a fixed value, which is capable of selecting one from signals on the interconnection wire group and the fixed logical values of 0 and 1. </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> 2.2) Input selection unit with fixed value </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a circuit diagram showing a first example of the input selection unit having a fixed value. This is different from the input selection unit of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> in that an output of a fixed logical value supply switch <highlight><bold>19</bold></highlight> is connected to the output line <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0270" lvl="0"><number>&lsqb;0270&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> is a circuit diagram showing an example of the fixed logical value supply switch. In the fixed logical value supply switch <highlight><bold>19</bold></highlight>, a source terminal of an NMOS transistor <highlight><bold>16</bold></highlight> is connected to the ground, and a source terminal of a PMOS transistor <highlight><bold>17</bold></highlight> is connected to a power voltage Vcc. Furthermore, drain terminals of both transistors <highlight><bold>16</bold></highlight> and <highlight><bold>17</bold></highlight> are connected in common to the output line <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> Moreover, an output q of a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>is connected to the gate terminal of the PMOS transistor <highlight><bold>17</bold></highlight>, and an output q of the other configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>is connected to the gate terminal of the NMOS transistor <highlight><bold>16</bold></highlight>, respectively. When the respective configuration memories <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>store logical values of 1 and 0, the fixed logical value supply switch <highlight><bold>19</bold></highlight> has its output at a high impedance state. When both of the configuration memories store a logical value of 0, the fixed logical value supply switch <highlight><bold>19</bold></highlight> outputs a logical value of 1. When both of the configuration memories store a logical value of 1, the fixed logical value supply switch <highlight><bold>19</bold></highlight> outputs a logical value of 0. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a circuit diagram showing a second example of the input selection unit having a fixed value. This is different from the input selection unit <highlight><bold>3</bold></highlight>_k of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> in that one of the inputs of the multiplexer <highlight><bold>20</bold></highlight> is connected with the output of the fixed logical value supply memory <highlight><bold>13</bold></highlight><highlight><italic>a</italic></highlight>. When the control memory <highlight><bold>13</bold></highlight> of the multiplexer <highlight><bold>20</bold></highlight> is set to select the output of the fixed logical value supply memory <highlight><bold>13</bold></highlight><highlight><italic>a</italic></highlight>, a logical value stored in the fixed logical value supply memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>is supplied as a fixed logical value to the output line <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a circuit diagram showing a third example of the input selection unit having a fixed value. This is different from the input selection unit <highlight><bold>3</bold></highlight>_k of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> in that one of the inputs of the multiplexer <highlight><bold>20</bold></highlight> is connected to a power voltage Vcc and the other input is connected to the ground, respectively. In accordance with the setting of the control memory <highlight><bold>13</bold></highlight>, the power voltage Vcc (logical value of 1) and the ground (logical value of 0) can be selectively supplied as a fixed logical value to the output line <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> In this specification, the power voltage, the ground, the output of the configuration memory, and a signal uniquely determined by them are called a fixed logical value or a fixed value, and the other signals are called dynamic signals. </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> By connecting the aforementioned input selection unit having a fixed logical value, it becomes possible to use one logic circuit as various logic circuits. One of the simplest examples is the AND <highlight><bold>31</bold></highlight> in the proposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. When the inputs i<highlight><bold>00</bold></highlight> and i<highlight><bold>01</bold></highlight> are both used as signal inputs, i.e., when the input selection units with a fixed value connected to them are set so as to output one of the signals on the interconnection wire group <highlight><bold>2</bold></highlight>, the AND <highlight><bold>31</bold></highlight> functions as a circuit outputting an AND-ed result of the two signals. </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> On the other hand, when the input selection unit with a fixed value connected to the input i<highlight><bold>00</bold></highlight> is set so as to output a fixed logical value of 1 and the input selection unit with a fixed value connected to the input <highlight><bold>101</bold></highlight> is set so as to output one of the signals on the interconnection wire group <highlight><bold>2</bold></highlight>, the AND <highlight><bold>31</bold></highlight> functions as a circuit outputting the input i<highlight><bold>01</bold></highlight> as it is. </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> The AND is allowed to implement only these two functions therein, but more functions can be implemented in the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>in the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> 2.3) Logic functions of MUX </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is a table showing various logic functions of a MUX. Here, equivalent circuits of the MUX when its inputs are set in various ways are shown. Here, the input and output symbols in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and out correspond to those of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. In the input setting column of <cross-reference target="DRAWINGS">FIG. 28, </cross-reference>0 and 1 are fixed logical values supplied to the input, X means that the function does not depend on the input, and the others mean that the input is used as a signal input. As can be seen from this, the MUX can be used as various logic circuits including frequently used AND and OR. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> shows an example having four different logic circuits in the preposition logic circuit <highlight><bold>29</bold></highlight>, but these may be partially or entirely identical circuits. Especially, the MUX is excellent as the preposition logic circuit because it has a large variety with a small area and small delay and it can be converted to a multi-input MUX as will be detailed later. For this, a function block having only MUX as the preposition logic circuit is an embodiment with high usability. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> Moreover, the preposition logic circuit is not necessarily attached to all of the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight>. For example, as will be detailed later, a function block in which the preposition logic circuit is attached to only two of the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> is also another embodiment with high usability. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> 2.4) 4AND4 2 adder </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> is a circuit diagram showing a 4AND4-2 adder in which all circuits of the preposition logic circuit <highlight><bold>29</bold></highlight> are AND gates. The function block <highlight><bold>4</bold></highlight> can be used as a circuit <highlight><bold>25</bold></highlight> in which the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> of the 4-2 adder <highlight><bold>44</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 29</cross-reference> are connected with the outputs of the AND <highlight><bold>31</bold></highlight> (hereinafter, this will be referred to as a 4AND4-2 adder). By using this, it is possible to make a multiplier very compact. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> Multiplier </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> is a circuit diagram showing a computation block required for a multiplier using the 4AND4-2 adder of <cross-reference target="DRAWINGS">FIG. 29</cross-reference>. In the computation block <highlight><bold>26</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 30</cross-reference> (hereinafter, referred to as a &ldquo;multi-bit 4AND4-2 adder), each of the 4AND4-2 adders <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>25</bold></highlight><highlight><italic>k </italic></highlight>is represented by a 4-2 adder having ANDs connected to respective ones of the inputs thereof. </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> As is seen from <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, the function block <highlight><bold>4</bold></highlight> is not symmetric with respect to the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> (i.e., not invariable when inputs are replaced). More specifically, the input i<highlight><bold>0</bold></highlight> is not symmetric with the other inputs i<highlight><bold>1</bold></highlight> to i<highlight><bold>3</bold></highlight>. To cope with this, as shown in <cross-reference target="DRAWINGS">FIG. 30, a</cross-reference> position of the i<highlight><bold>0</bold></highlight> is indicated to show which AND of the 4AND4-2 adder is connected to the input i<highlight><bold>0</bold></highlight>. In the function block, inputs i<highlight><bold>1</bold></highlight> to i<highlight><bold>3</bold></highlight> are symmetric and their symbols are not indicated for simplicity in the 4AND4-2 adder. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> Moreover, a 4-2 carry output o<highlight><bold>42</bold></highlight> and a carry output oc of the 4AND4-2 adder <highlight><bold>25</bold></highlight><highlight><italic>k </italic></highlight>at the most significant bit (eleventh bit in <cross-reference target="DRAWINGS">FIG. 30</cross-reference>) are both 0 and their output lines are omitted. For simplicity, <cross-reference target="DRAWINGS">FIG. 30</cross-reference> shows an example of a multiplicand input X as 8-bit data: x<highlight><subscript>7</subscript></highlight>x<highlight><subscript>6</subscript></highlight>x<highlight><subscript>5</subscript></highlight>x<highlight><subscript>4</subscript></highlight>x<highlight><subscript>3</subscript></highlight>x<highlight><subscript>2</subscript></highlight>x<highlight><subscript>1</subscript></highlight>x<highlight><subscript>0</subscript></highlight>. However, in general, this may be of an arbitrary bit width. Moreover, y<highlight><subscript>0</subscript></highlight>, y<highlight><subscript>1</subscript></highlight>, y<highlight><subscript>2 </subscript></highlight>and y<highlight><subscript>3 </subscript></highlight>are multiplier inputs, which are listed in order of increasing bit significance. </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> Complete-tree multiplier </paragraph>
<paragraph id="P-0289" lvl="0"><number>&lsqb;0289&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>1</bold></highlight>) is a block diagram showing an example of a complete-tree type multiplier using the multi-bit 4AND4-2 adder <highlight><bold>26</bold></highlight>. Here, M is a multiplicand, and N<highlight><bold>0</bold></highlight>, N<highlight><bold>1</bold></highlight>, N<highlight><bold>2</bold></highlight> and N<highlight><bold>3</bold></highlight> are respectively first to fourth bits, fifth to eighth bits, ninth to twelfth bits, and thirteenth to sixteenth bits of a multiplier. The multi-bit 4AND4-2 adders <highlight><bold>26</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>26</bold></highlight>_<highlight><bold>4</bold></highlight> of the first stage perform generation of partial products using the AND and addition of the partial products by the 4-2 adder in one computation block. The outputs from the first stage are added by the complete-tree type multi-bit multi-argument 4-2 adder (second to fourth stages in <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>1</bold></highlight>)) to yield a final multiplication result. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>1</bold></highlight>) shows an example in the case where a multiplier has sixteen bits. In general, in the case of an m-bit multiplier, a multiplier device is composed of m/4 multi-bit 4AND4-2 adders <highlight><bold>26</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>26</bold></highlight>_(m/4), m/4-1 multi-bit 4-2 adders <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight> to 45_(m/4-1), and the multi-bit full adder <highlight><bold>46</bold></highlight>. Accordingly, the multiplier device can be composed of m/2 computation blocks in total. On the other hand, as has been described above, when a multiplier device is composed by using the modified Booth partial product generator and the multi-bit multi-argument 4-2 adder, it is necessary to use 3m/4 computation blocks. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> Thus, it is possible to realize a multiplier device with a reduced number of programmable function cells by using the function block according to the second embodiment of the present invention to constitute the multiplier device with the multi-bit 4AND4-2 adder and the multi-bit multi-argument 4-2 adder. </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>1</bold></highlight>) is an example using the complete-tree type multi-bit multi-argument 4-2 adder. It is also possible to constitute a multiplier using the multi-bit 4AND4-2 adder by using the other type of multi-bit multi-argument 4-2 adder. </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference>(<highlight><bold>2</bold></highlight>) is a block diagram showing an example using the completely cascaded type multi-bit multi-argument 4-2 adder. In this example, outputs of the multi-bit 4AND4-2 adders <highlight><bold>26</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>26</bold></highlight>_<highlight><bold>4</bold></highlight> are input as to-be-added data of the completely cascaded multi-bit multi-argument 4-2 adder composed of computation blocks <highlight><bold>45</bold></highlight>_<highlight><bold>1</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>2</bold></highlight>, <highlight><bold>45</bold></highlight>_<highlight><bold>3</bold></highlight> and <highlight><bold>46</bold></highlight>. In general, a multiplier can be configured by adding the output of the multi-bit 4AND4-2 adder by using an arbitrary type of multi-bit multi-argument 4-2 adder. For any of the types, the number of programmable function cells is the same. </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> In the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, the number of preposition logic circuits is increased as compared to that of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. The area occupied by the preposition logic circuit <highlight><bold>29</bold></highlight> itself is small considering the entire programmable function cell and therefore an area increase due to the preposition logic circuit does not cause so significant problem. However, addition of a preposition logic circuit <highlight><bold>29</bold></highlight> significantly increases the number of inputs of the function block <highlight><bold>4</bold></highlight>, which in turn significantly increases the number of input selection units to be connected. This affects the entire area, which cannot be ignored because the input selection unit (having a fixed value) is a fairly large part. Moreover, as is seen from <cross-reference target="DRAWINGS">FIG. 30</cross-reference>, the multi-bit 4AND4-2 adder <highlight><bold>26</bold></highlight> requires not a few interconnection wires. </paragraph>
<paragraph id="P-0295" lvl="0"><number>&lsqb;0295&rsqb;</number> As is seen from <cross-reference target="DRAWINGS">FIG. 31</cross-reference>, among the computation blocks constituting the multiplier, the multi-bit 4AND4-2 adder occupies only half and the rest of the computation blocks do not require any preposition logic circuit or a plenty of wires. Such a circuit having little unevenness can easily be implemented in the reconfigurable device. Next, explanation will be given on a multiplier improving this point and a function block suitable for implementing it. </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> 2.5) Modified example of second embodiment (1) </paragraph>
<paragraph id="P-0297" lvl="0"><number>&lsqb;0297&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 32</cross-reference> is a circuit diagram showing a modified example of the function block according to the second embodiment of the present invention. This is the same as the function block as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference> except for that the preposition logic circuits connected to the inputs i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> are removed. This suppresses the increase of the number of inputs in the function block as well as suppresses area increase of the programmable function cell by the increase of the input selection units (having a fixed value). In <cross-reference target="DRAWINGS">FIG. 32</cross-reference>, the AND <highlight><bold>31</bold></highlight> and the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>are used as the preposition logic circuits, but as has been described above, the preposition logic circuit is not limited to these. However, it is necessary that the preposition logic circuit can be used as an AND. Moreover, it is preferable that the input i<highlight><bold>0</bold></highlight> and one of the inputs i<highlight><bold>1</bold></highlight> to i<highlight><bold>3</bold></highlight> are connected with a preposition logic circuit, respectively. </paragraph>
<paragraph id="P-0298" lvl="0"><number>&lsqb;0298&rsqb;</number> 2AND4-2 adder </paragraph>
<paragraph id="P-0299" lvl="0"><number>&lsqb;0299&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 33</cross-reference> is a circuit diagram showing a circuit in which two circuits in the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> are used as AND. The function block <highlight><bold>4</bold></highlight> can be used as a circuit <highlight><bold>27</bold></highlight> in which the outputs of the ANDs <highlight><bold>31</bold></highlight> are connected to inputs i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> of the 4-2 adder <highlight><bold>44</bold></highlight> as shown in FIG. <highlight><bold>33</bold></highlight> (hereinafter, this circuit will be referred to as a &ldquo;2AND4-2 adder&rdquo;). </paragraph>
<paragraph id="P-0300" lvl="0"><number>&lsqb;0300&rsqb;</number> Multiplier </paragraph>
<paragraph id="P-0301" lvl="0"><number>&lsqb;0301&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> is a circuit diagram showing an example of multiplier composed of the 2AND4-2 adders of <cross-reference target="DRAWINGS">FIG. 33</cross-reference>. This is an example for generating a product Z&equals;z<highlight><subscript>15</subscript></highlight>z<highlight><subscript>14</subscript></highlight>z<highlight><subscript>13</subscript></highlight>z<highlight><subscript>12</subscript></highlight>z<highlight><subscript>11</subscript></highlight>z<highlight><subscript>10</subscript></highlight>z<highlight><subscript>9</subscript></highlight>z<highlight><subscript>8</subscript></highlight>z<highlight><subscript>7</subscript></highlight>z<highlight><subscript>6</subscript></highlight>z<highlight><subscript>5</subscript></highlight>z<highlight><subscript>4</subscript></highlight>z<highlight><subscript>3</subscript></highlight>z<highlight><subscript>2</subscript></highlight>z<highlight><subscript>1</subscript></highlight>z<highlight><subscript>0 </subscript></highlight>of a multiplicand X&equals;x<highlight><subscript>7</subscript></highlight>x<highlight><subscript>6</subscript></highlight>x<highlight><subscript>5</subscript></highlight>x<highlight><subscript>4</subscript></highlight>x<highlight><subscript>3</subscript></highlight>x<highlight><subscript>2</subscript></highlight>x<highlight><subscript>1</subscript></highlight>x<highlight><subscript>0 </subscript></highlight>and a multiplier Y&equals;y<highlight><subscript>7</subscript></highlight>y<highlight><subscript>6</subscript></highlight>y<highlight><subscript>5</subscript></highlight>y<highlight><subscript>4</subscript></highlight>y<highlight><subscript>3</subscript></highlight>y<highlight><subscript>2</subscript></highlight>y<highlight><subscript>1</subscript></highlight>y<highlight><subscript>0</subscript></highlight>. Similarly to the 4AND4-2 adder <highlight><bold>25</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 30</cross-reference>, only the position of the input i<highlight><bold>0</bold></highlight> is indicated in the symbol of the 2AND4-2 adder <highlight><bold>27</bold></highlight>. Moreover, in <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, input lines are omitted for the 2AND4-2 adders <highlight><bold>27</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>27</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>27</bold></highlight><highlight><italic>e </italic></highlight>and the like in which inputs i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> are supplied with a fixed logical value of 0; and output lines are also omitted for the 2AND4-2 adders <highlight><bold>2</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>27</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>27</bold></highlight><highlight><italic>f </italic></highlight>and the like in which the carry output oc and the 4-2 carry output o<highlight><bold>42</bold></highlight> always output a fixed logical value of 0. </paragraph>
<paragraph id="P-0302" lvl="0"><number>&lsqb;0302&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, each row is called a &ldquo;multi-bit 2AND4-2 adder&rdquo; except the fifth row (multi-bit full adder). As compared to the multi-bit 4AND4-2 adder <highlight><bold>26</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 30</cross-reference>, the multi-bit 2AND4-2 adder requires a less amount of wiring. Moreover, each 2AND4-2 adder <highlight><bold>27</bold></highlight> can be implemented to a smaller programmable function cell using the function block of <cross-reference target="DRAWINGS">FIG. 32</cross-reference>. Unlike the multiplier of <cross-reference target="DRAWINGS">FIG. 31</cross-reference>, in the multiplier of <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, all the rows except the last row (fifth row) are composed of the same computation blocks (multi-bit 2AND4-2 adders), thereby providing a high uniformity. With these features, the multiplier of <cross-reference target="DRAWINGS">FIG. 34</cross-reference> is extremely suitable for a reconfigurable device. </paragraph>
<paragraph id="P-0303" lvl="0"><number>&lsqb;0303&rsqb;</number> With regard to multiplication using the same multiplier, a multiplier device composed of the multi-bit 2AND4-2 adders connected in cascade requires only half of the number of rows as compared to a multiplier composed of the multi-bit full adders of <cross-reference target="DRAWINGS">FIG. 103</cross-reference> connected in cascade. That is, as compared to the multiplier of the type of <cross-reference target="DRAWINGS">FIG. 103</cross-reference> implemented in the conventional FPGA, the multiplier of the type of <cross-reference target="DRAWINGS">FIG. 34</cross-reference> implemented in a reconfigurable device using the function block (<cross-reference target="DRAWINGS">FIG. 32</cross-reference>) of the present invention has an area and a delay reduced by almost half. </paragraph>
<paragraph id="P-0304" lvl="0"><number>&lsqb;0304&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> shows a completely cascaded type multiplier using the multi-bit 2AND4-2 adders. It is also possible to form another type of multiplier using the multi-bit 2AND4-2 adders. In general, it is possible to form a multiplier by inputting as to-be-added data an output of a circuit composed of a plurality of stages of the multi-bit 2AND4-2 adders connected in cascade, to an arbitrary multi-bit multi-argument adder such as the complete-tree type (<cross-reference target="DRAWINGS">FIG. 16</cross-reference>(<highlight><bold>1</bold></highlight>)), the completely cascaded type (<cross-reference target="DRAWINGS">FIG. 17</cross-reference>(<highlight><bold>1</bold></highlight>)), the semi-cascaded type (<cross-reference target="DRAWINGS">FIG. 19</cross-reference>), and the secondary cascaded type (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>). </paragraph>
<paragraph id="P-0305" lvl="0"><number>&lsqb;0305&rsqb;</number> Moreover, in the circuit composed of a plurality of stages of the multi-bit 2AND4-2 adders connected in cascade, the first stage and the second stage can be replaced with one 4AND4-2 adder, thereby reducing the number of computation blocks by one stage. </paragraph>
<paragraph id="P-0306" lvl="0"><number>&lsqb;0306&rsqb;</number> In the completely cascaded type multiplier (<cross-reference target="DRAWINGS">FIG. 34</cross-reference>) using the multi-bit 2AND4-2 adder, it is possible to replace the first row as shown in <cross-reference target="DRAWINGS">FIG. 35</cross-reference> with a circuit composed of full adders <highlight><bold>77</bold></highlight> in each of which two AND&apos;s are attached to the argument inputs a and b. Furthermore, the multiplier of <cross-reference target="DRAWINGS">FIG. 35</cross-reference> can be modified as shown in <cross-reference target="DRAWINGS">FIG. 36</cross-reference>. </paragraph>
<paragraph id="P-0307" lvl="0"><number>&lsqb;0307&rsqb;</number> These circuits shown in <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, <cross-reference target="DRAWINGS">FIG. 35</cross-reference> and <cross-reference target="DRAWINGS">FIG. 36</cross-reference> are equivalent. However, the circuit shown in <cross-reference target="DRAWINGS">FIG. 34</cross-reference> is composed of all the same calculators (2AND4-2 adders) except for the last row, while the circuits shown in <cross-reference target="DRAWINGS">FIG. 35</cross-reference> and <cross-reference target="DRAWINGS">FIG. 36</cross-reference> include different types of calculators, resulting in lack in uniformity. </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, the multi-bit 2AND2-4 adders are arranged such that their positions are shifted upwardly while going right ward on the sheet. That is, the computation blocks are arranged as shown in <cross-reference target="DRAWINGS">FIG. 37</cross-reference>(<highlight><bold>1</bold></highlight>) (<highlight><bold>28</bold></highlight>_k represents a multi-bit 2AND4-2 adder of the k-th row, and <highlight><bold>46</bold></highlight> represents the multi-bit full adder of the last row). This is effective when using all the bits of the multiplication result; but in the case of multiplication of a mantissa of the floating-point notation in which only most significant half of the multiplication result is used, some wasted area is occupied. </paragraph>
<paragraph id="P-0309" lvl="0"><number>&lsqb;0309&rsqb;</number> When only most significant half is required, as shown in <cross-reference target="DRAWINGS">FIG. 37</cross-reference>(<highlight><bold>2</bold></highlight>), the multi-bit 2AND4-2 adders are horizontally arranged, which can reduce the substantial multiplier area and eliminate the unnecessary space. This works most effectively in the completely cascaded multiplier of the 2AND4-2 adders. If the multi-bit 2AND4-2 adders are connected in other way, then a computation block having a large bit width is required and therefore the arrangement of <cross-reference target="DRAWINGS">FIG. 37</cross-reference>(<highlight><bold>2</bold></highlight>) cannot reduce the multiplier area so much. </paragraph>
<paragraph id="P-0310" lvl="0"><number>&lsqb;0310&rsqb;</number> 4-input MUX </paragraph>
<paragraph id="P-0311" lvl="0"><number>&lsqb;0311&rsqb;</number> Next, explanation will be given on the other effect of the function block equipped with a preposition logic circuit as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. </paragraph>
<paragraph id="P-0312" lvl="0"><number>&lsqb;0312&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 38</cross-reference> is a circuit diagram showing an example of 4-input MUX based on the function block with the preposition logic circuit as shown in <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference> can be used as a 4-input MUX, which will be described hereafter. In the preposition logic circuit <highlight><bold>29</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference>, the AND <highlight><bold>31</bold></highlight> is replaced by a 2-input MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>; and configuration is made so that one input of the i<highlight><bold>20</bold></highlight> and i<highlight><bold>21</bold></highlight> of the 2-input LUT <highlight><bold>49</bold></highlight> is output directly to i<highlight><bold>2</bold></highlight>, or the 2-input LUT <highlight><bold>49</bold></highlight> is removed. And a 2-input MUX using in<highlight><bold>3</bold></highlight> and in<highlight><bold>0</bold></highlight> as data inputs and in<highlight><bold>2</bold></highlight> as a control input is implemented in the logic function generator <highlight><bold>40</bold></highlight>. Here, reference numeral <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>corresponds to the MUX implemented in the logic function generator <highlight><bold>40</bold></highlight> and its output out is a logic output ol of <cross-reference target="DRAWINGS">FIG. 23</cross-reference> output from the function block <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0313" lvl="0"><number>&lsqb;0313&rsqb;</number> Moreover, instead of replacing the AND <highlight><bold>31</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 23</cross-reference> by a 2-input MUX, a 2-input MUX can be implemented in the 3-input LUT <highlight><bold>48</bold></highlight> to obtain the same effect. Here, as shown within round brackets ( ) of <cross-reference target="DRAWINGS">FIG. 38</cross-reference>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>corresponds to the 3-input LUT <highlight><bold>48</bold></highlight>, i<highlight><bold>00</bold></highlight> corresponds to i<highlight><bold>10</bold></highlight>, i<highlight><bold>01</bold></highlight> corresponds to i<highlight><bold>11</bold></highlight>, i<highlight><bold>02</bold></highlight> corresponds to i<highlight><bold>12</bold></highlight>, and i<highlight><bold>0</bold></highlight> corresponds to i<highlight><bold>1</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0314" lvl="0"><number>&lsqb;0314&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 107</cross-reference>, in order to implement a 4-input MUX in the conventional FPGA, at least two function blocks are required. In contrast, one function block according to the present invention can realize a 4-input MUX and the area is almost halved as compared to the conventional one. </paragraph>
<paragraph id="P-0315" lvl="0"><number>&lsqb;0315&rsqb;</number> The function block of <cross-reference target="DRAWINGS">FIG. 23</cross-reference> can also be used as a 4-input MUX in other way. A 3-input LUT is used as the 4-2 carry block <highlight><bold>41</bold></highlight>, which has a 2-input MUX having in<highlight><bold>3</bold></highlight> and in<highlight><bold>1</bold></highlight> as data inputs and in<highlight><bold>2</bold></highlight> as a control input implemented therein. And a 2-input MUX is also implemented in the 3-input LUT <highlight><bold>48</bold></highlight>. Thus, it is possible to realize a 4-input MUX as shown in <cross-reference target="DRAWINGS">FIG. 38</cross-reference>. Here, as shown within round brackets ( ) of <cross-reference target="DRAWINGS">FIG. 38</cross-reference>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>corresponds to the 4-2 carry block <highlight><bold>41</bold></highlight>, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>corresponds to the 3-input LUT <highlight><bold>48</bold></highlight>. However, since the output o<highlight><bold>42</bold></highlight> of the 4-2 carry block <highlight><bold>41</bold></highlight> is connected to the adjacent function block as shown in <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, the output out of <cross-reference target="DRAWINGS">FIG. 38</cross-reference> should be taken out of the adjacent function block. Referring to <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, detailed explanation will be given. </paragraph>
<paragraph id="P-0316" lvl="0"><number>&lsqb;0316&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 39</cross-reference> is a circuit diagram for explaining a configuration method of the 4-input MUX striding over two function blocks. In <cross-reference target="DRAWINGS">FIG. 39, a</cross-reference> 4-2 carry output o<highlight><bold>42</bold></highlight> of a function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is connected to a 4-2 carry input i<highlight><bold>42</bold></highlight> of the adjacent function block <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>, i.e., input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Accordingly by configuring the logic function generator <highlight><bold>40</bold></highlight> to output a fixed logical value of 1 and by taking out the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>as the carry output oc from the function block, it is possible to use an output of the 4-input MUX of this method. </paragraph>
<paragraph id="P-0317" lvl="0"><number>&lsqb;0317&rsqb;</number> Alternatively, by configuring the logic function generator <highlight><bold>40</bold></highlight> to output a fixed logical value of 0, it is possible to take out an output of the 4-input MUX of this method as an addition output os via the XOR <highlight><bold>30</bold></highlight>. In this configuration, one 4-input MUX strides over the two function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>. However, the programmable function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>can further be used as a part of other 4-input MUX and accordingly, one 4-input MUX can be formed substantially per one programmable function block. </paragraph>
<paragraph id="P-0318" lvl="0"><number>&lsqb;0318&rsqb;</number> Next, explanation will be given on still another configuration of the 4-input MUX. In <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>of the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>are used as a 2-input MUX constituting the 4-input MUX. For this, the 4-2 carry block <highlight><bold>41</bold></highlight> of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is set so that a signal of the input in<highlight><bold>3</bold></highlight> is transmitted directly to the output out, and the logic function generator <highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>is set so that a signal of the input in<highlight><bold>2</bold></highlight> is transmitted directly to the output out. Here, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>of the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>and the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>function as two 2-input MUX&apos;es of the input stage of the 4-inputs MUX, an input i<highlight><bold>2</bold></highlight> of the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>becomes a control signal of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>functions as a 2-input MUX of an output stage of the 4-input MUX. </paragraph>
<paragraph id="P-0319" lvl="0"><number>&lsqb;0319&rsqb;</number> When the 4-2 carry block <highlight><bold>41</bold></highlight> is a 3-input LUT, it is easy to configure so as to output one input directly. However, even when the 4-2 carry block <highlight><bold>41</bold></highlight> is a circuit dedicated for generating a carry signal as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, such a function can be realized. This is because in general, in a carry signal generation circuit, when two of the three inputs are set to logical values 0 and 1 respectively, the remaining one input is output as it is. Accordingly, in the respective function blocks of <cross-reference target="DRAWINGS">FIG. 39</cross-reference>, by implementing an inverter reversing the i<highlight><bold>12</bold></highlight> when output in the 3-input LUT <highlight><bold>48</bold></highlight> and by inputting the same signal as i<highlight><bold>2</bold></highlight> to the i<highlight><bold>12</bold></highlight>, the 4-2 carry block <highlight><bold>41</bold></highlight> outputs the signal of input in<highlight><bold>3</bold></highlight> as it is. In this configuration, one 4-input MUX also strides over the two function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>. However, the programmable function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>can further be used as a part of the other 4-input MUX. Accordingly, substantially one 4-input MUX can be formed per one programmable function block. </paragraph>
<paragraph id="P-0320" lvl="0"><number>&lsqb;0320&rsqb;</number> And now, when using the input i<highlight><bold>2</bold></highlight> of the function block as the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, the control signal should go through the logic function generator <highlight><bold>40</bold></highlight>, thereby increasing the delay. This problem can be overcome by using a function block as shown in <cross-reference target="DRAWINGS">FIG. 40</cross-reference>. </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> 2.6) Modified example of the second embodiment (2) </paragraph>
<paragraph id="P-0322" lvl="0"><number>&lsqb;0322&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 40</cross-reference> is a circuit diagram showing another modified example of the function block according to the second embodiment of the present invention. In the function block of the present invention as described above (for example, <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 39</cross-reference>), instead of directly connecting the logic function generator <highlight><bold>40</bold></highlight> with the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, they are connected via an MUX <highlight><bold>22</bold></highlight><highlight><italic>d </italic></highlight>as shown in <cross-reference target="DRAWINGS">FIG. 40</cross-reference>. </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> The MUX <highlight><bold>22</bold></highlight><highlight><italic>d </italic></highlight>is controlled by a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>. When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 1, the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>is controlled by an output of the logic function generator <highlight><bold>40</bold></highlight>. When the configuration memory stores a logical value of 0, the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>is controlled by a control input i<highlight><bold>50</bold></highlight>. The latter control can be performed faster and is suitable for configuring the 4-input MUX of high performance. Moreover, when controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, with the i<highlight><bold>50</bold></highlight>, by inputting a fixed logical value of 0 as the i<highlight><bold>50</bold></highlight>, it is possible to output the input i<highlight><bold>00</bold></highlight> or i<highlight><bold>01</bold></highlight> of the function block <highlight><bold>4</bold></highlight> via the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>to the carry output oc. Thus, it is possible to output the input of the function block <highlight><bold>4</bold></highlight> at a high speed by bypassing the logic function generator <highlight><bold>40</bold></highlight>. Such a signal bypass is used when using only the D-FF in the output block <highlight><bold>5</bold></highlight> of the programmable function cell as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and when improving the routability. </paragraph>
<paragraph id="P-0324" lvl="0"><number>&lsqb;0324&rsqb;</number> The same can be performed in the function block (<highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>or <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>) of <cross-reference target="DRAWINGS">FIG. 39</cross-reference> by configuring the logic function generator <highlight><bold>40</bold></highlight> so as to output a fixed logical value of 0. However, in this case, the logic function generator <highlight><bold>40</bold></highlight> cannot be used as another logic circuit. On the other hand, in the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 40</cross-reference>, by supplying the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>via the i<highlight><bold>50</bold></highlight>, the logic function generator <highlight><bold>40</bold></highlight> can be used for another purpose. When the aforementioned bypass is used, the input i<highlight><bold>0</bold></highlight> is occupied for the bypass but the other inputs i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> can be used as inputs of the logic function generator <highlight><bold>40</bold></highlight>. That is, one function block <highlight><bold>4</bold></highlight> can simultaneously realize a signal bypass and a 3-input logic circuit. An output of the 3-input logic circuit here is taken out from a logic output ol of <cross-reference target="DRAWINGS">FIG. 40</cross-reference>. </paragraph>
</section>
<section>
<heading lvl="1">3. Third Embodiment </heading>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> 3.1) Function block </paragraph>
<paragraph id="P-0326" lvl="0"><number>&lsqb;0326&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 41</cross-reference> is a circuit diagram showing a function block according to a third embodiment of the present invention. This is different from the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 40</cross-reference> in that the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and the 4-2 carry input i<highlight><bold>42</bold></highlight> are connected to an input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of an MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>respectively, and an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>is connected to an input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to one of the inputs of the XOR. <cross-reference target="DRAWINGS">FIG. 41</cross-reference> shows an example in which the 3-input LUT <highlight><bold>48</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 40</cross-reference> is removed but this is not an essential point. For example, a preposition logic circuit may be attached to the i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 41</cross-reference>. </paragraph>
<paragraph id="P-0327" lvl="0"><number>&lsqb;0327&rsqb;</number> The function block <highlight><bold>4</bold></highlight> according to the present embodiment has the same function as the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> (except that the AND <highlight><bold>31</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> is replaced with the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>) when the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>both store a logical value of 1. On the other hand, when the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>both store a logical value of 0, a 4-input MUX is formed by the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 41</cross-reference>. This 4-input MUX, unlike the aforementioned ones, contains neither 4-2 carry block <highlight><bold>41</bold></highlight> nor the logic function generator <highlight><bold>40</bold></highlight> on the signal route and therefore operates at high speeds. </paragraph>
<paragraph id="P-0328" lvl="0"><number>&lsqb;0328&rsqb;</number> Furthermore, the function block <highlight><bold>4</bold></highlight> according to the present embodiment can also be used as a 1 bit full adder by using the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>as a ripple carry circuit. For this, logical values 1 and 0 are stored in the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g</italic></highlight>, respectively, and an XOR having inputs in<highlight><bold>1</bold></highlight> (or in<highlight><bold>2</bold></highlight>) and in<highlight><bold>0</bold></highlight> is implemented in the logic function generator <highlight><bold>40</bold></highlight>. Here, the in<highlight><bold>1</bold></highlight> (or in<highlight><bold>2</bold></highlight>) and in<highlight><bold>0</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 41</cross-reference> correspond to the argument inputs of the 1-bit full adder; the addition output os corresponds to an addition output of the 1-bit full adder; the carry output oc corresponds to a ripple carry output; and an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>(i.e., input i<highlight><bold>30</bold></highlight> or i<highlight><bold>31</bold></highlight>) corresponds to a ripple carry input. The ripple carry signal is transferred from the carry output oc via the interconnection wire group to an input i<highlight><bold>30</bold></highlight> (or i<highlight><bold>31</bold></highlight>) of an adjacent function block. </paragraph>
<paragraph id="P-0329" lvl="0"><number>&lsqb;0329&rsqb;</number> 3.2) Modified example of third embodiment </paragraph>
<paragraph id="P-0330" lvl="0"><number>&lsqb;0330&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 42</cross-reference> is a circuit diagram showing a modified example of the function block according to the third embodiment of the present invention. Here, the outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>are connected to an input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of an MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, respectively, and an input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>its supplied with the control signal i<highlight><bold>50</bold></highlight>. These three 2-input MUX&apos;es constitute a 4-input MUX. </paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> The input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>are connected with an output and a 4-2 carry input <highlight><bold>42</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, respectively, and an output of the AND <highlight><bold>31</bold></highlight> supplied with an output of the logic function generator <highlight><bold>40</bold></highlight> and an output of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>is connected to a control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 0, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> can be used as a 4-input MUX. </paragraph>
<paragraph id="P-0332" lvl="0"><number>&lsqb;0332&rsqb;</number> On the other hand, when the control input i<highlight><bold>50</bold></highlight> is supplied with a fixed logical value of 0 and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 1, the same function as the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> (except that the AND <highlight><bold>31</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> is replaced by the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>) is obtained. </paragraph>
<paragraph id="P-0333" lvl="0"><number>&lsqb;0333&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 42</cross-reference>, since the control signal i<highlight><bold>50</bold></highlight> is directly input to the output stage MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>of the 4-input MUX, control can be performed at a high speed as compared to <cross-reference target="DRAWINGS">FIG. 41</cross-reference> in which the control signal is input via the MUX <highlight><bold>22</bold></highlight><highlight><italic>d</italic></highlight>. Moreover, in <cross-reference target="DRAWINGS">FIG. 41</cross-reference>, the 4-2 carry input i<highlight><bold>42</bold></highlight> is output via the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>to the carry output oc while in <cross-reference target="DRAWINGS">FIG. 42</cross-reference> the 4-2 carry input i<highlight><bold>42</bold></highlight> is output via only one MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, thereby obtaining a merit of delay reduction. </paragraph>
<paragraph id="P-0334" lvl="0"><number>&lsqb;0334&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 42</cross-reference>, the AND <highlight><bold>31</bold></highlight> is used for controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>but it is not limited to this. For example, when an NAND is used instead of the AND <highlight><bold>31</bold></highlight><highlight><italic>d</italic></highlight>, the same function can be obtained by exchanging the input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. Moreover, use of the AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>for controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>is not limited to <cross-reference target="DRAWINGS">FIG. 42</cross-reference> but can also be realized in the other function blocks of the present invention. For example, in case this is applied to the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, when the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 0, it is possible to simultaneously implement a route for outputting a signal from the input i<highlight><bold>0</bold></highlight> via the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>(i.e., bypassing the logic function generator <highlight><bold>40</bold></highlight>) to oc and the logic function to make i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> inputs and ol an output. </paragraph>
<paragraph id="P-0335" lvl="0"><number>&lsqb;0335&rsqb;</number> Explanation has been given on the embodiment of the present invention in which a 4-input MUX can be implemented in one (or substantially one) function block. Next, explanation will be given on a barrel shifter in which the merit is brought into good play. </paragraph>
<paragraph id="P-0336" lvl="0"><number>&lsqb;0336&rsqb;</number> 3.3) Barrel shifter </paragraph>
<paragraph id="P-0337" lvl="0"><number>&lsqb;0337&rsqb;</number> A barrel shifter is a circuit in which a shift amount of multi-bit data can dynamically be changed in accordance with a control signal and is mainly used in a floating point addition/subtraction. </paragraph>
<paragraph id="P-0338" lvl="0"><number>&lsqb;0338&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 43</cross-reference> is a circuit diagram showing an ordinary barrel shifter composed of 2-input MUXs. In <cross-reference target="DRAWINGS">FIG. 43, </cross-reference>16-bit input data i<highlight><bold>0</bold></highlight> to i<highlight><bold>15</bold></highlight> go through blocks of first to fourth stages composed of 2-input MUXs to be output. The first stage outputs the input data as it is or after shifting it by one bit in accordance with a control input i<highlight><bold>60</bold></highlight>. The second stage outputs input data from the first stage as it is or after shifting it by two bits in accordance with a control input i<highlight><bold>61</bold></highlight>. The third stage outputs input data from the second stage as it is or after shifting it by four bits in accordance with a control input i<highlight><bold>62</bold></highlight>. The fourth stage outputs input data from the third stage as it is or after shifting it by eight bits in accordance with a control input i<highlight><bold>63</bold></highlight>. </paragraph>
<paragraph id="P-0339" lvl="0"><number>&lsqb;0339&rsqb;</number> As a whole, the barrel shifter of <cross-reference target="DRAWINGS">FIG. 43</cross-reference> can perform any shifting of 0 bit to 15 bits in accordance with the control input. If this is implemented in the conventional FPGA, one 2-input MUX corresponds to one function block and accordingly a plenty of programmable function cells are needed and the delay is also increased. </paragraph>
<paragraph id="P-0340" lvl="0"><number>&lsqb;0340&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 44</cross-reference> is a circuit diagram showing an example of barrel shifter composed of the 4-input MUXs according to the present invention. Here, numbers 0, 1, 2 and 3 in the symbol of each MUX <highlight><bold>60</bold></highlight> mean that, when the respective control inputs i<highlight><bold>62</bold></highlight> and i<highlight><bold>63</bold></highlight> are 0 and 0, an input at 0 is selected to output it; when the respective control inputs i<highlight><bold>62</bold></highlight> and i<highlight><bold>63</bold></highlight> are 1 and 0, an input at 1 is selected to output; when the respective control inputs i<highlight><bold>62</bold></highlight> and i<highlight><bold>63</bold></highlight> are 0 and 1, an input at 2 is selected to output; and when the respective control inputs i<highlight><bold>62</bold></highlight> and i<highlight><bold>63</bold></highlight> are 1 and 1, an input at 3 is selected to output. </paragraph>
<paragraph id="P-0341" lvl="0"><number>&lsqb;0341&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 44</cross-reference>, the first stage performs data shifting by 0, 1, 2 or 3 bits in accordance with the control inputs i<highlight><bold>60</bold></highlight> and i<highlight><bold>61</bold></highlight>. The second stage performs data shifting by 0, 4, 8 or 12 bits in accordance with the control bits i<highlight><bold>62</bold></highlight> and i<highlight><bold>63</bold></highlight>. As a whole, the barrel shifter of <cross-reference target="DRAWINGS">FIG. 44</cross-reference> can perform any shift of 0 bit to 15 bits in accordance with the control input. </paragraph>
<paragraph id="P-0342" lvl="0"><number>&lsqb;0342&rsqb;</number> If this is implemented in the conventional FPGA, as shown in <cross-reference target="DRAWINGS">FIG. 107</cross-reference>, two function blocks are used for one 4-input MUX and accordingly, the number of programmable function cells identical to that of a barrel shifter using 2-input MUX are consumed. </paragraph>
<paragraph id="P-0343" lvl="0"><number>&lsqb;0343&rsqb;</number> In contrast, when using the function block according to the present invention, it is possible to form a 4-input MUX with one function block. Accordingly, it is possible to implement a barrel shifter having the same function using one half of the conventional area. Moreover, as compared to the barrel shifter using the 2-input MUX in <cross-reference target="DRAWINGS">FIG. 43</cross-reference>, the barrel shifter using the 4-input MUX in <cross-reference target="DRAWINGS">FIG. 44</cross-reference> has a half number of stages and therefore the delay is also halved. </paragraph>
</section>
<section>
<heading lvl="1">4. Fourth Embodiment </heading>
<paragraph id="P-0344" lvl="0"><number>&lsqb;0344&rsqb;</number> 4.1) Function block </paragraph>
<paragraph id="P-0345" lvl="0"><number>&lsqb;0345&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 45</cross-reference> is a circuit diagram showing a function block according to a fourth embodiment of the present invention. In the embodiment, in function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 40</cross-reference>, there are provided MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, MUX <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, MUX <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>. The inputs i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight> are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, respectively. Outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>are connected to input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>n</italic></highlight>, respectively. Outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>are connected to input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, respectively. Furthermore, the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>are controlled by a control input i<highlight><bold>51</bold></highlight> and outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>are connected to input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>g</italic></highlight>, respectively. </paragraph>
<paragraph id="P-0346" lvl="0"><number>&lsqb;0346&rsqb;</number> Thus, one function block according to the present embodiment can realize 8-input MUX. In order to use as the 8-input MUX, 0 is stored in both of configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>q</italic></highlight>. Here, an 8-input MUX is formed using the four MUXs <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>as an input stage, the two MUXs <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>as the second stage, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>as the output stage. </paragraph>
<paragraph id="P-0347" lvl="0"><number>&lsqb;0347&rsqb;</number> Moreover, the function block <highlight><bold>4</bold></highlight> according to the present embodiment can also realize the 4AND4-2 adder <highlight><bold>25</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 29</cross-reference> by using the four MUXs <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>as AND. </paragraph>
<paragraph id="P-0348" lvl="0"><number>&lsqb;0348&rsqb;</number> Furthermore, in the same way as is the case with <cross-reference target="DRAWINGS">FIG. 41</cross-reference>, the function block <highlight><bold>4</bold></highlight> according to the present embodiment can constitute a full adder. For this, logical values 1 and 0 are stored in the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>respectively, and the control input i<highlight><bold>51</bold></highlight> is set to a fixed logical value, e.g., 0. And an XOR for inputting in<highlight><bold>1</bold></highlight> (or in<highlight><bold>3</bold></highlight>) and in<highlight><bold>0</bold></highlight> is implemented in the logic function generator <highlight><bold>40</bold></highlight>. Here, the function block <highlight><bold>4</bold></highlight> according to the present embodiment functions as a 1-bit full adder using in<highlight><bold>1</bold></highlight> (or in<highlight><bold>3</bold></highlight>) and in<highlight><bold>0</bold></highlight> as argument inputs, an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>(i.e., i<highlight><bold>20</bold></highlight> or i<highlight><bold>21</bold></highlight>) as a ripple carry input, and the carry output oc as a ripple carry output. </paragraph>
<paragraph id="P-0349" lvl="0"><number>&lsqb;0349&rsqb;</number> 4.2) Modified example of the fourth embodiment </paragraph>
<paragraph id="P-0350" lvl="0"><number>&lsqb;0350&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is a circuit diagram showing a modified example of the function block according to the fourth embodiment of the present invention. This embodiment differs from the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> in that MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, MUX <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, MUX <highlight><bold>22</bold></highlight><highlight><italic>n</italic></highlight>, MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>are provided. The inputs i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight> are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, respectively. The outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>are connected to input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>n</italic></highlight>, respectively. The outputs of MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>(instead of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 42</cross-reference>) are connected to input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, respectively. The outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>are connected to input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g</italic></highlight>, respectively. Moreover, the control input i<highlight><bold>51</bold></highlight> controls the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n</italic></highlight>, the control input i<highlight><bold>50</bold></highlight> controls the MUX <highlight><bold>22</bold></highlight><highlight><italic>g</italic></highlight>, and the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>is connected to input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0351" lvl="0"><number>&lsqb;0351&rsqb;</number> Thus, one function block <highlight><bold>4</bold></highlight> according to the present embodiment can realize an 8-input MUX. To use it as the 8-input MUX, a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>. Thus, an 8-input MUX is formed using the four MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>e </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>of the preposition logic circuit as an input stage, the two MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>as a second stage, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>as an output stage. The output or the output stage is taken out to oc via the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0352" lvl="0"><number>&lsqb;0352&rsqb;</number> Moreover, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 46</cross-reference> can also realize the 4AND4-2 adder <highlight><bold>25</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 29</cross-reference> by using the four MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>as AND. </paragraph>
</section>
<section>
<heading lvl="1">5. Fifth Embodiment </heading>
<paragraph id="P-0353" lvl="0"><number>&lsqb;0353&rsqb;</number> And now, in the full adder composed of the function block of the aforementioned <cross-reference target="DRAWINGS">FIG. 45</cross-reference> (or <cross-reference target="DRAWINGS">FIG. 41</cross-reference>), the ripple carry signal is transferred from the carry output oc via the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) and the interconnection wire group to the adjacent programmable function cell, and in the cell, input to the function block via the input selection unit. Thus, going through some switching circuits and the interconnection wire group which a plenty of circuits are connected to and thereby is burdened with relatively heavy load makes a signal propagation delay fairly large. Next, explanation will be given on a function block for realizing high-speed ripple carry propagation. </paragraph>
<paragraph id="P-0354" lvl="0"><number>&lsqb;0354&rsqb;</number> 5.1) Function block </paragraph>
<paragraph id="P-0355" lvl="0"><number>&lsqb;0355&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 47</cross-reference> is a circuit diagram showing a function block according to a fifth embodiment of the present invention. This differs from the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> in that the function block is connected with a ripple carry block <highlight><bold>50</bold></highlight>. An input c and output out of the ripple carry block <highlight><bold>50</bold></highlight> are connected to a ripple carry input irc and a ripple carry output orc, respectively. The inputs a, b and d are not necessarily used all. Moreover, the inputs a and b may be connected to any of i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> and <cross-reference target="DRAWINGS">FIG. 47</cross-reference> shows only one example of how to be connected. </paragraph>
<paragraph id="P-0356" lvl="0"><number>&lsqb;0356&rsqb;</number> The ripple carry block <highlight><bold>50</bold></highlight> can be realized using the same method as the 4-2 carry block <highlight><bold>41</bold></highlight>. Accordingly, one of the circuits <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>1</bold></highlight>) to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>7</bold></highlight>) can be used. Here, the inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>1</bold></highlight>), <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>2</bold></highlight>), <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>3</bold></highlight>). <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>6</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>7</bold></highlight>) correspond to the inputs c, b and a of the ripple carry block <highlight><bold>50</bold></highlight>, respectively, and the input d is not used. The inputs in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> and the output of the XOR <highlight><bold>30</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>4</bold></highlight>) correspond to the inputs c, b, a and d of the ripple carry block <highlight><bold>50</bold></highlight>, respectively. The inputs in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> and the output of the XOR <highlight><bold>30</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>5</bold></highlight>) correspond to the inputs c, b and d of the ripple carry block <highlight><bold>50</bold></highlight> and input a is not used. The output out in each of the circuits or <cross-reference target="DRAWINGS">FIG. 8</cross-reference> corresponds to the output out of the ripple carry block <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0357" lvl="0"><number>&lsqb;0357&rsqb;</number> When using the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 47</cross-reference> as a 1-bit full adder, an XOR having inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>1</bold></highlight> and an output out in implemented in the logic function generator <highlight><bold>40</bold></highlight>. Here, the inputs i<highlight><bold>0</bold></highlight> and i<highlight><bold>1</bold></highlight> and the addition output os of the function block <highlight><bold>4</bold></highlight> correspond to the two argument inputs and the addition output of the 1-bit full adder, respectively. Since the XOR <highlight><bold>30</bold></highlight> in the circuits <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>4</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>5</bold></highlight>) is carried by the XOR implemented in the logic function generator <highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 47</cross-reference>, when using the circuit of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>4</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 8</cross-reference>(<highlight><bold>5</bold></highlight>) as a ripple carry, the circuit except the XOR is used as the ripple carry block <highlight><bold>50</bold></highlight>. The other circuits of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> can be used directly as the ripple carry block. </paragraph>
<paragraph id="P-0358" lvl="0"><number>&lsqb;0358&rsqb;</number> The configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 47</cross-reference> stores a logical value of 1 when using the function block <highlight><bold>4</bold></highlight> as a 1-bit full adder and a logical value of 0 when using other function (the same function as the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>). </paragraph>
<paragraph id="P-0359" lvl="0"><number>&lsqb;0359&rsqb;</number> 5.2) First modified example of the fifth embodiment </paragraph>
<paragraph id="P-0360" lvl="0"><number>&lsqb;0360&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 48</cross-reference> is a circuit diagram showing a first modified example of the fifth embodiment. Here, the MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>in the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 47</cross-reference> is connected to a different position but the function is almost identical to that of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 47</cross-reference>. However, in case of <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, the ripple carry input irc can be output via the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>to the carry output oc unlike the case of <cross-reference target="DRAWINGS">FIG. 47</cross-reference>. </paragraph>
<paragraph id="P-0361" lvl="0"><number>&lsqb;0361&rsqb;</number> 5.3) Second Modified example of the fifth embodiment </paragraph>
<paragraph id="P-0362" lvl="0"><number>&lsqb;0362&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 49</cross-reference> is a circuit diagram showing a second modified example of the fifth embodiment according to the present invention. Here, in the function block <highlight><bold>4</bold></highlight> or <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, the input-<highlight><bold>0</bold></highlight> and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>are replaced by one another, an NAND <highlight><bold>34</bold></highlight><highlight><italic>d </italic></highlight>is inserted for controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, and the inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> are reconnected to the inputs i<highlight><bold>2</bold></highlight> and i<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0363" lvl="0"><number>&lsqb;0363&rsqb;</number> When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 1, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 49</cross-reference> has a function substantially identical to that of <cross-reference target="DRAWINGS">FIG. 48</cross-reference>. The difference is only the connection destination of the inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight>. Only the argument input, when using the function block as a 1-bit full adder, is changed to i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 49</cross-reference> (here, in the logic function generator <highlight><bold>40</bold></highlight>, an XOR having inputs in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> and an output out is implemented). </paragraph>
<paragraph id="P-0364" lvl="0"><number>&lsqb;0364&rsqb;</number> When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>stores a logical value of 0, it is possible to simultaneously implement a 3-input logic circuit using in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> as inputs and ol as an output, and a bypass route for outputting the input i<highlight><bold>0</bold></highlight> directly to oc. The bypass route is useful when increasing the routability and outputting an input signal as it is via D-FF (in the output block <highlight><bold>5</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Furthermore, with this configuration, it is also possible to simultaneously implement a 1-bit full adder using i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> as argument inputs and os as an addition output, and a bypass route outputting the input i<highlight><bold>0</bold></highlight> directly to oc. </paragraph>
<paragraph id="P-0365" lvl="0"><number>&lsqb;0365&rsqb;</number> When using the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 49</cross-reference> as a 1-bit full adder, the ripple carry signal is transferred from irc to orc and accordingly, the carry output oc is not used. Thus, the bypass route can be used for other purpose and helps to avoid waste. As has been described above, since at least two D-FF&apos;s are present in one programmable function cell (in the output block), it is desirable to use these as effectively as possible. </paragraph>
<paragraph id="P-0366" lvl="0"><number>&lsqb;0366&rsqb;</number> The aforementioned configuration enabling simultaneous use of the 3-input logic circuit or the 1-bit full adder and the bypass route serves the purpose. In the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 49</cross-reference>, the NAND <highlight><bold>34</bold></highlight><highlight><italic>d </italic></highlight>is used for controlling the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, but the AND can also be used as in <cross-reference target="DRAWINGS">FIG. 42</cross-reference>. In this case, the input-<highlight><bold>0</bold></highlight> and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 49</cross-reference> are replaced by one another. </paragraph>
</section>
<section>
<heading lvl="1">6. Sixth Embodiment </heading>
<paragraph id="P-0367" lvl="0"><number>&lsqb;0367&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 50</cross-reference> is a circuit diagram showing a function block according to a sixth embodiment of the present invention. This is an example of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> in which the ripple carry block <highlight><bold>50</bold></highlight> is attached in the same way as in <cross-reference target="DRAWINGS">FIG. 48</cross-reference>. <cross-reference target="DRAWINGS">FIG. 50</cross-reference> shows an example in which the control AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> is removed but it can also be contained. </paragraph>
<paragraph id="P-0368" lvl="0"><number>&lsqb;0368&rsqb;</number> In the function block <highlight><bold>4</bold></highlight> of the present embodiment, when the logic function generator <highlight><bold>40</bold></highlight> is set so as to output a fixed logical value of 0, it is possible to constitute a 4-input MUX by the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>using the oc as an output. In <cross-reference target="DRAWINGS">FIG. 50</cross-reference>, an input b of the ripple carry block <highlight><bold>50</bold></highlight> is connected to an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>. This causes a flexibility that when using the function block <highlight><bold>4</bold></highlight> as a 1-bit full adder, either of i<highlight><bold>3</bold></highlight> and i<highlight><bold>0</bold></highlight> can be used as an argument input of the adder in accordance with the logical value given to the control input i<highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0369" lvl="0"><number>&lsqb;0369&rsqb;</number> Although this flexibility is lost, this function block <highlight><bold>4</bold></highlight> can be also used as a 1-bit full adder by connecting the input b of the ripple carry block <highlight><bold>50</bold></highlight> directly to the input (for example, i<highlight><bold>0</bold></highlight>) of the logic function generator <highlight><bold>40</bold></highlight>. </paragraph>
</section>
<section>
<heading lvl="1">7. Seventh Embodiment </heading>
<paragraph id="P-0370" lvl="0"><number>&lsqb;0370&rsqb;</number> 7.1) Function block </paragraph>
<paragraph id="P-0371" lvl="0"><number>&lsqb;0371&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 51</cross-reference> is a circuit diagram showing a function block according to a seventh embodiment of the present invention. This is an example of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 45</cross-reference> in which the ripple carry block <highlight><bold>50</bold></highlight> is attached in the same way as in <cross-reference target="DRAWINGS">FIG. 48</cross-reference>. Inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> has been connected to the outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, respectively. This causes a flexibility that when using the function block <highlight><bold>4</bold></highlight> as a 1-bit full adder, a pair of i<highlight><bold>0</bold></highlight> and i<highlight><bold>2</bold></highlight> or a pair of i<highlight><bold>1</bold></highlight> and i<highlight><bold>3</bold></highlight> can be used as argument inputs of the adder in accordance with a logical value given to a control input i<highlight><bold>51</bold></highlight>. Although this flexibility is lost, this function block <highlight><bold>4</bold></highlight> can also be used as the 1-bit full adder by connecting the inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> directly to any of the inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0372" lvl="0"><number>&lsqb;0372&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 51</cross-reference>, the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight> is a circuit that has a built-in configuration memory, selects one of the input signals a, b and c in accordance with the content of the configuration memory, and outputs the selected signal to the output out. When the input c is selected in the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 51</cross-reference> functions as a 1-bit full adder having a dedicated ripple carry circuit <highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0373" lvl="0"><number>&lsqb;0373&rsqb;</number> When the input a or b is selected in the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>, the function block <highlight><bold>4</bold></highlight> of the present embodiment has the same function as in the case where a logical value of 0 or 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 45</cross-reference>. </paragraph>
<paragraph id="P-0374" lvl="0"><number>&lsqb;0374&rsqb;</number> Memory-equipped 3-input MUX </paragraph>
<paragraph id="P-0375" lvl="0"><number>&lsqb;0375&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 52</cross-reference> is a circuit diagram showing a first example of the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight> in which one of the data inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>is connected with an output of an MUX <highlight><bold>22</bold></highlight><highlight><italic>h. </italic></highlight></paragraph>
<paragraph id="P-0376" lvl="0"><number>&lsqb;0376&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 53</cross-reference> is a circuit diagram showing a second example of the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>. This 3-input MUX is composed of three transmission gates <highlight><bold>12</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>12</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>12</bold></highlight><highlight><italic>c</italic></highlight>. When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>(or <highlight><bold>13</bold></highlight><highlight><italic>b</italic></highlight>) stores a logical value of 1, the transmission gate <highlight><bold>12</bold></highlight><highlight><italic>a </italic></highlight>(or <highlight><bold>12</bold></highlight><highlight><italic>b</italic></highlight>) is forced into conduction to output the input a (or b) to the out. In this case, the transmission gate <highlight><bold>12</bold></highlight><highlight><italic>c </italic></highlight>controlled by the NAND <highlight><bold>34</bold></highlight> and the inverter <highlight><bold>37</bold></highlight> is in a non-conduction state. </paragraph>
<paragraph id="P-0377" lvl="0"><number>&lsqb;0377&rsqb;</number> When both of the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>store logical value of 0, only the transmission gate <highlight><bold>12</bold></highlight><highlight><italic>c </italic></highlight>is forced into conduction to output the input c to the out. The memory-equipped 3-input MUX <highlight><bold>23</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 53</cross-reference> has a smaller delay from data input (inputs b and c) to the output out as compared to the first example of <cross-reference target="DRAWINGS">FIG. 52</cross-reference>. </paragraph>
<paragraph id="P-0378" lvl="0"><number>&lsqb;0378&rsqb;</number> 7.2) Modified example of seventh embodiment </paragraph>
<paragraph id="P-0379" lvl="0"><number>&lsqb;0379&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 54</cross-reference> is a circuit diagram showing a modified example of the function block according to the seventh embodiment of the present invention. This is an example where the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 46</cross-reference> to which the ripple carry block <highlight><bold>50</bold></highlight> is attached in the same way as <cross-reference target="DRAWINGS">FIG. 47</cross-reference> (<cross-reference target="DRAWINGS">FIG. 54</cross-reference> shows an example where the control AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 46</cross-reference> is removed but it can also be contained). When using this function block as an 8-input MUX, the logic function generator <highlight><bold>40</bold></highlight> is set so as to output a fixed logical value of 0. </paragraph>
<paragraph id="P-0380" lvl="0"><number>&lsqb;0380&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 54</cross-reference>, inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> has been connected to the input i<highlight><bold>2</bold></highlight> and an output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g</italic></highlight>, respectively. By the connection to the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g</italic></highlight>, the function block <highlight><bold>4</bold></highlight> has a following flexibility when used as a 1-bit full adder. That is, it is possible to use any of i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight> and i<highlight><bold>3</bold></highlight> as an adder argument input in accordance with a logical value given to the control inputs i<highlight><bold>51</bold></highlight> and i<highlight><bold>50</bold></highlight>. </paragraph>
<paragraph id="P-0381" lvl="0"><number>&lsqb;0381&rsqb;</number> The inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> need be supplied with an input signal i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> or i<highlight><bold>3</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight>. For example, it is possible to connect them directly to these inputs or to the outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>n. </italic></highlight></paragraph>
</section>
<section>
<heading lvl="1">8. Eighth Embodiment </heading>
<paragraph id="P-0382" lvl="0"><number>&lsqb;0382&rsqb;</number> Next, explanation will be given on a function block according to an eighth embodiment of the present invention. This is an example of function block having a 2-bit carry look ahead circuit having a higher speed than the aforementioned ordinary ripple carry circuit. </paragraph>
<paragraph id="P-0383" lvl="0"><number>&lsqb;0383&rsqb;</number> 8.1) Function block </paragraph>
<paragraph id="P-0384" lvl="0"><number>&lsqb;0384&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 55</cross-reference> is a circuit diagram showing a function block according to the eighth embodiment of the present invention. This embodiment is a composite or combined function block and is composed of a function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and a function block <highlight><bold>4</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0385" lvl="0"><number>&lsqb;0385&rsqb;</number> The function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> to which an MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it, and an AND <highlight><bold>31</bold></highlight> are added as a circuit for 2-bit carry look ahead. The function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> to which MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>s</italic></highlight>, a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling them, and AO (AND-OR) <highlight><bold>51</bold></highlight> and AND <highlight><bold>31</bold></highlight> are added as a circuit for 2-bit carry look ahead. </paragraph>
<paragraph id="P-0386" lvl="0"><number>&lsqb;0386&rsqb;</number> When the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>store a logical value of 0, these function blocks have a function identical to that of the function block of <cross-reference target="DRAWINGS">FIG. 61</cross-reference>, respectively. In this case, the 4-2 carry output of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is connected to the 4-2 carry input of the function block <highlight><bold>4</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0387" lvl="0"><number>&lsqb;0387&rsqb;</number> When the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>store a logical value of 1, these function blocks can be used as a 2-bit full adder using carry look ahead. For this, however, it is necessary to implement an XOR having inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>3</bold></highlight> in the logic function generators <highlight><bold>40</bold></highlight> of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>(in<highlight><bold>2</bold></highlight> or in<highlight><bold>1</bold></highlight> may be used instead of in<highlight><bold>3</bold></highlight>. In this case, the input connected to i<highlight><bold>3</bold></highlight> of the AND <highlight><bold>31</bold></highlight> of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is also reconnected to i<highlight><bold>2</bold></highlight> or i<highlight><bold>1</bold></highlight>). Here, the inputs of the XOR implemented in the logic function generator <highlight><bold>40</bold></highlight> serve as argument inputs of the full adder of each bit; os serves as an addition output of the full adder of each bit; and irc and orc become the ripple carry input and the ripple carry output of the full adder, respectively. </paragraph>
<paragraph id="P-0388" lvl="0"><number>&lsqb;0388&rsqb;</number> The AO <highlight><bold>51</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 55</cross-reference> has a logic function identical to a circuit in which one of the OR inputs are connected with an output of AND. Actually, however, because of the CMOS circuit characteristic, it is general to configure from the AOI in which AO output is inverted and an inverter. Here, the AOI may be configured by connecting an output of the AND to one of the NOR inputs. However, it is possible to increase the speed and reduce the area when it is made as one indivisible logic gate. </paragraph>
<paragraph id="P-0389" lvl="0"><number>&lsqb;0389&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 56</cross-reference> is a circuit diagram showing a configuration example of the AO using an NAND. Thus, the AO <highlight><bold>51</bold></highlight> can also be configured by using the NAND. Since the NAND is a very simple high-speed logic gate, when the AO <highlight><bold>51</bold></highlight> thus configured is used, a carry transfer from irc to orc in <cross-reference target="DRAWINGS">FIG. 55</cross-reference> can be performed at a very high speed. </paragraph>
<paragraph id="P-0390" lvl="0"><number>&lsqb;0390&rsqb;</number> 8.2) Modified example of eighth embodiment </paragraph>
<paragraph id="P-0391" lvl="0"><number>&lsqb;0391&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 57</cross-reference> is a circuit diagram showing a modified example of the function block according to the eighth embodiment of the present invention. This is an example of a composite function block <highlight><bold>2</bold></highlight> composed of two function blocks of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> to which a 2-bit carry look ahead circuit is added. </paragraph>
<paragraph id="P-0392" lvl="0"><number>&lsqb;0392&rsqb;</number> The function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is the function block <highlight><bold>4</bold></highlight> of FIG. <highlight><bold>42</bold></highlight> to which MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it and AND <highlight><bold>31</bold></highlight> are added as a circuit for 2-bit carry look ahead. The function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 42</cross-reference> to which MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>s</italic></highlight>, a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling them, and AO <highlight><bold>51</bold></highlight> and AND <highlight><bold>31</bold></highlight> are added as a circuit for 2-bit carry look ahead. It should be noted that the MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>s </italic></highlight>in the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 57</cross-reference> is attached in a different way from that of the function block <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 55</cross-reference>. However, this is only an example of different ways for realizing the same function and is not a substantial difference. </paragraph>
<paragraph id="P-0393" lvl="0"><number>&lsqb;0393&rsqb;</number> In the composite function block of <cross-reference target="DRAWINGS">FIG. 57</cross-reference>, when the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>store a logical value of 0, these function blocks have a function identical to that of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 42</cross-reference>. In this case, the 4-2 carry output of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is connected with the 4-2 carry input of the function block <highlight><bold>4</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0394" lvl="0"><number>&lsqb;0394&rsqb;</number> When the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>store a logical value of 1, these function blocks can be used as a 2-bit full adder using carry look ahead. For this, however, it is necessary to implement an XOR having inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>3</bold></highlight> in the logic function generator <highlight><bold>40</bold></highlight> of the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>. (The in<highlight><bold>3</bold></highlight> maybe replaced by in<highlight><bold>2</bold></highlight> or in<highlight><bold>1</bold></highlight>. In this case, the input connected to the i<highlight><bold>3</bold></highlight> of the AND <highlight><bold>31</bold></highlight> of the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>is also reconnected to the i<highlight><bold>2</bold></highlight> or i<highlight><bold>1</bold></highlight>.) In this case, the inputs of the XOR implemented in the logic function generator <highlight><bold>40</bold></highlight> serve as argument inputs of the full adder of each bit; os becomes an addition output of the full adder of each bit; and irc and orc become the ripple carry input and the ripple carry output of the 2-bit full adder, respectively. </paragraph>
<paragraph id="P-0395" lvl="0"><number>&lsqb;0395&rsqb;</number> The modified example shown in <cross-reference target="DRAWINGS">FIG. 57</cross-reference> is only one of the plenty of modified examples. The 2-bit carry look ahead circuit can also be added similarly to the other function blocks of the present invention. It is easy, for those skilled in the art, to configure them from the information disclosed in this specification. </paragraph>
<paragraph id="P-0396" lvl="0"><number>&lsqb;0396&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 58</cross-reference> is a block diagram showing a connection method of the function blocks having the aforementioned ripple carry circuit. Here, when using a function block having an ordinary ripple carry circuit as in the fifth to seventh embodiments of the invention and their modifications, the cell <highlight><bold>52</bold></highlight> corresponds to a programmable function cell containing one. Moreover, when using a composite function block having a 2-bit carry look ahead circuit as in the function block of the eighth embodiment and its modifications, the cell <highlight><bold>52</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 56</cross-reference> corresponds to two programmable function cells containing one function block. </paragraph>
</section>
<section>
<heading lvl="1">9. Ninth Embodiment </heading>
<paragraph id="P-0397" lvl="0"><number>&lsqb;0397&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 59</cross-reference> is a circuit diagram showing a function block according to a ninth embodiment of the present invention This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 48</cross-reference> into which AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>controlling the XOR <highlight><bold>30</bold></highlight> and a configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>controlling the AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>are inserted, and from which the logic output ol is removed. </paragraph>
<paragraph id="P-0398" lvl="0"><number>&lsqb;0398&rsqb;</number> When the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>stores a logical value of 1, the function block of <cross-reference target="DRAWINGS">FIG. 59</cross-reference> has a function identical to that of <cross-reference target="DRAWINGS">FIG. 48</cross-reference> (except that the ol is absent). On the other hand, when the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>stores a logical value of 0, the output out of the logic function generator <highlight><bold>40</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 59</cross-reference> is output from os. Thus, even without the logic output ol as in <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, it becomes possible to utilize various logic functions implemented in the logic function generator <highlight><bold>40</bold></highlight>. In this case, only two outputs os and oc of the function block <highlight><bold>4</bold></highlight> are present, and there is no need of the output selection unit <highlight><bold>5</bold></highlight>_<highlight><bold>2</bold></highlight>, the register block <highlight><bold>42</bold></highlight><highlight><italic>a </italic></highlight>and the input block <highlight><bold>3</bold></highlight><highlight><italic>a </italic></highlight>in the output block (<cross-reference target="DRAWINGS">FIG. 9</cross-reference>), thereby reducing the area. </paragraph>
<paragraph id="P-0399" lvl="0"><number>&lsqb;0399&rsqb;</number> And now, in <cross-reference target="DRAWINGS">FIG. 59</cross-reference> the output of the logic function generator <highlight><bold>40</bold></highlight> passes through the XOR <highlight><bold>30</bold></highlight> to be output to os; while in <cross-reference target="DRAWINGS">FIG. 48</cross-reference> the output is output from ol without passing through the XOR <highlight><bold>30</bold></highlight>. However, the total delay is identical. </paragraph>
<paragraph id="P-0400" lvl="0"><number>&lsqb;0400&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 60</cross-reference> is a circuit diagram showing a configuration example of the XOR <highlight><bold>30</bold></highlight>. The XOR shown in <cross-reference target="DRAWINGS">FIG. 60</cross-reference>(<highlight><bold>1</bold></highlight>) can be composed of an MUX <highlight><bold>22</bold></highlight> and inverter <highlight><bold>37</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 60</cross-reference>(<highlight><bold>2</bold></highlight>). When this configuration is applied to the XOR <highlight><bold>30</bold></highlight> of FIG. <highlight><bold>59</bold></highlight> and the input a is connected to the output out of the logic function generator <highlight><bold>40</bold></highlight>, the signal on the output out is input to the output block, passing through one stage of the MUX. </paragraph>
<paragraph id="P-0401" lvl="0"><number>&lsqb;0401&rsqb;</number> On the other hand, even when the logic output ol is present as in <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, by using the output block of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, only two output selection units, two register blocks, and two input selection units are required. However, the logic output ol should pass through the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 12</cross-reference> (nothing corresponding to this in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>). Thus, considering up to the output block, there is no difference in delay between circuits of <cross-reference target="DRAWINGS">FIG. 59</cross-reference> and <cross-reference target="DRAWINGS">FIG. 48</cross-reference>. </paragraph>
<paragraph id="P-0402" lvl="0"><number>&lsqb;0402&rsqb;</number> The insertion position of the AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>may be other than the position shown in <cross-reference target="DRAWINGS">FIG. 59</cross-reference> such as wires <highlight><bold>61</bold></highlight>, <highlight><bold>62</bold></highlight> and <highlight><bold>63</bold></highlight>. The AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>may be at any position if only it can feed a fixed logical value to one of the inputs of the XOR <highlight><bold>30</bold></highlight>. Moreover, the AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>may be replaced by other logic circuit only if has that function. Moreover, here, explanation has been given on means giving a fixed logical value in a programmable way to one of the inputs of the XOR <highlight><bold>30</bold></highlight> through an example of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, but this means can also be applied to the other function blocks of the present invention. </paragraph>
<paragraph id="P-0403" lvl="0"><number>&lsqb;0403&rsqb;</number> Explanation has been given on various function blocks according to the embodiments of the present invention. These are based on the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> in which signal supply means to inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight>, to respective inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to one on the inputs of the XOR <highlight><bold>30</bold></highlight>, and the carry circuit are modified in various ways. The present specification has shown only a part of examples of the function block using the various signal supply means and the carry circuits. Those skilled in the art can easily constitute the function block by using the various signal supply means and the carry circuits that have been described in other combinations than examples shown in this specification. </paragraph>
</section>
<section>
<heading lvl="1">10. Tenth Embodiment </heading>
<paragraph id="P-0404" lvl="0"><number>&lsqb;0404&rsqb;</number> The function block of the present invention that has been explained has the 4-2 carry block <highlight><bold>41</bold></highlight> and the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>for realizing the 4-2 adder <highlight><bold>44</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 14</cross-reference>). And now, there are various types of 4-2 adder other than the one composed of two 1-bit full adders as in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0405" lvl="0"><number>&lsqb;0405&rsqb;</number> In general, the 4-2 adder is a circuit having five inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight>, i<highlight><bold>3</bold></highlight> and i<highlight><bold>42</bold></highlight> and three outputs o<highlight><bold>42</bold></highlight>, oc and os, and (o<highlight><bold>42</bold></highlight>&plus;oc)&times;2&plus;os is equal to a sum of the five inputs. Its usage is identical to the case of <cross-reference target="DRAWINGS">FIG. 14</cross-reference> but I/O relations (truth table) differ from one to another circuit. Next, explanation will be given on a function block that can realize another type of 4-2 adder different from <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0406" lvl="0"><number>&lsqb;0406&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 61</cross-reference> is a circuit diagram showing a function block according to a tenth embodiment of the present invention. Inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the function block <highlight><bold>4</bold></highlight> are respectively connected to the inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> of the logic function generator <highlight><bold>40</bold></highlight>, to the inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> of the carry block <highlight><bold>41</bold></highlight>, and to the inputs in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight>, in<highlight><bold>2</bold></highlight> and in<highlight><bold>3</bold></highlight> of tho carry block <highlight><bold>52</bold></highlight>. The output out of the logic function generator <highlight><bold>40</bold></highlight> is connected to the input in<highlight><bold>5</bold></highlight> of the carry block <highlight><bold>53</bold></highlight> and a first input of the XOR <highlight><bold>30</bold></highlight>, and becomes logic output ol of the function block <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0407" lvl="0"><number>&lsqb;0407&rsqb;</number> The 4-2 carry input i<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight> is connected to the input in<highlight><bold>4</bold></highlight> of the carry block <highlight><bold>53</bold></highlight> and to a second input of the XOR <highlight><bold>30</bold></highlight>. The output of the 4-2 carry block <highlight><bold>41</bold></highlight>, the output of the XOR <highlight><bold>30</bold></highlight> and the output of the carry block <highlight><bold>53</bold></highlight> respectively become the 4-2 carry output o<highlight><bold>42</bold></highlight>, the addition output os and the carry output oc of the function block <highlight><bold>4</bold></highlight>. When using the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 61</cross-reference> as the 4-2 adder, the 4-input XOR <highlight><bold>24</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is implemented in the logic function generator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0408" lvl="0"><number>&lsqb;0408&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 62</cross-reference>(<highlight><bold>1</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 62</cross-reference>(<highlight><bold>2</bold></highlight>) are circuit diagrams showing a first example and a second example of the 4-2 carry block <highlight><bold>41</bold></highlight>, respectively. <cross-reference target="DRAWINGS">FIG. 63</cross-reference>(<highlight><bold>1</bold></highlight>) and <cross-reference target="DRAWINGS">FIG. 63</cross-reference>(<highlight><bold>2</bold></highlight>) are circuit diagrams showing a first example and a second example of the carry block <highlight><bold>53</bold></highlight>, respectively. The 4-2 carry block <highlight><bold>41</bold></highlight> and the carry block <highlight><bold>53</bold></highlight> may be any circuit as long as the sum of inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight>, i<highlight><bold>3</bold></highlight> and i<highlight><bold>42</bold></highlight> is equal to (o<highlight><bold>42</bold></highlight>&plus;oc)&times;2&plus;os. </paragraph>
<paragraph id="P-0409" lvl="0"><number>&lsqb;0409&rsqb;</number> Needless to say, those skilled in the art can easily add the aforementioned preposition logic circuit to the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> of the function block of <cross-reference target="DRAWINGS">FIG. 61</cross-reference>. </paragraph>
<paragraph id="P-0410" lvl="0"><number>&lsqb;0410&rsqb;</number> Explanation has been given on a function block containing one 4-input logic function generator. As has been described above, a typical example of the 4-input logic function generator is the 4-input LUT (<cross-reference target="DRAWINGS">FIG. 105</cross-reference>). </paragraph>
<paragraph id="P-0411" lvl="0"><number>&lsqb;0411&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 64</cross-reference>(<highlight><bold>1</bold></highlight>), the 4-input LUT <highlight><bold>40</bold></highlight> is composed of two 3-input LUT&apos;S <highlight><bold>48</bold></highlight> and an MUX <highlight><bold>22</bold></highlight> connecting them. Furthermore, as shown in <cross-reference target="DRAWINGS">FIG. 64</cross-reference>(<highlight><bold>2</bold></highlight>), the 3-input LUT <highlight><bold>48</bold></highlight> is composed of two 2-input LUT&apos;s <highlight><bold>49</bold></highlight> and an MUX connecting them. Thus, in general, when the number of inputs is reduced by one, the LUT area is reduced by half or more and the delay from the input to the output is also shortened. </paragraph>
<paragraph id="P-0412" lvl="0"><number>&lsqb;0412&rsqb;</number> Next, explanation will be given on a function block using a logic function generator of 3-input or less and capable of constituting a 4-2 adder. </paragraph>
</section>
<section>
<heading lvl="1">11. Eleventh Embodiment </heading>
<paragraph id="P-0413" lvl="0"><number>&lsqb;0413&rsqb;</number> 11.1) Function block </paragraph>
<paragraph id="P-0414" lvl="0"><number>&lsqb;0414&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 65</cross-reference> is a circuit diagram showing a function block according to a eleventh embodiment of the present invention. Inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the function block <highlight><bold>4</bold></highlight> are respectively connected to inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>1</bold></highlight> of a 3-input logic function generator <highlight><bold>48</bold></highlight> and to two inputs of an XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, and an output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>is connected to an input in<highlight><bold>2</bold></highlight> of the 3-input logic function generator <highlight><bold>48</bold></highlight>. </paragraph>
<paragraph id="P-0415" lvl="0"><number>&lsqb;0415&rsqb;</number> An output out of the 3-input logic function generator <highlight><bold>48</bold></highlight> is connected to a control input of an MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to a first input of an XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>and becomes a logic output ol of the function block <highlight><bold>4</bold></highlight>. A 4-2 carry input i<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight> is connected to an input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to a second input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>d</italic></highlight>. An input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>The is connected with input i<highlight><bold>0</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. Outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>and the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>respectively become an addition output os and a carry output oc of the function block <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0416" lvl="0"><number>&lsqb;0416&rsqb;</number> An MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>generates a 4-2 carry output o<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>is controlled by the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, input-<highlight><bold>0</bold></highlight> is connected to the input i<highlight><bold>3</bold></highlight> (or i<highlight><bold>2</bold></highlight>), and input-<highlight><bold>1</bold></highlight> is connected to the input i<highlight><bold>1</bold></highlight>. The circuit generating the 4-2 carry output o<highlight><bold>42</bold></highlight> may be any circuit if it can generate carry signals (carry signals generated when adding three inputs) associated with the inputs i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> and the MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>is the most preferable example. </paragraph>
<paragraph id="P-0417" lvl="0"><number>&lsqb;0417&rsqb;</number> The function block shown in <cross-reference target="DRAWINGS">FIG. 65</cross-reference> has two operation modes: logic mode; and 4-2 adder mode. In the logic mode, a fixed logical value of 0 is fed to the input i<highlight><bold>3</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>, and the function block <highlight><bold>4</bold></highlight> is used as a 3-input logic circuit using i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight> and i<highlight><bold>2</bold></highlight> as inputs and ol as an output. Here, the function block <highlight><bold>4</bold></highlight> can be used as an arbitrary logic circuit that can be realized by the 3-input logic function generator <highlight><bold>48</bold></highlight>. </paragraph>
<paragraph id="P-0418" lvl="0"><number>&lsqb;0418&rsqb;</number> In the 4-2 adder mode, the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference> is used as a 4-2 adder. For this, a 3-input XOR using in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> as inputs is implemented in the 3-input logic function generator <highlight><bold>48</bold></highlight>. In this case, the function block <highlight><bold>4</bold></highlight> functions as a 4-2 adder using i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> as argument inputs, i<highlight><bold>42</bold></highlight> as a 4-2 carry input, o<highlight><bold>42</bold></highlight> as a 4-2 carry output, os as an addition output, and oc as a carry output. </paragraph>
<paragraph id="P-0419" lvl="0"><number>&lsqb;0419&rsqb;</number> The function block shown in <cross-reference target="DRAWINGS">FIG. 65</cross-reference> includes one 3-input logic function generator <highlight><bold>48</bold></highlight>. As has been described above, since the 3 input logic function generator occupies only half area as compared to the 4-input logic function generator, the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference> has a feature that its area is small, as compared to the aforementioned function block including the 4-input logic function generator. </paragraph>
<paragraph id="P-0420" lvl="0"><number>&lsqb;0420&rsqb;</number> As compared to the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> using the 4-input logic function generator <highlight><bold>40</bold></highlight>, in the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>, the XOR <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>is added to the input of the 3-input logic function generator <highlight><bold>48</bold></highlight> but the delay from the input to the output is almost identical in both cases. This is because the delay increase due to passing through the XOR <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>in the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference> is cancelled by the delay reduction obtained by replacing the 4-input logic function generator with the 3-input logic function generator. </paragraph>
<paragraph id="P-0421" lvl="0"><number>&lsqb;0421&rsqb;</number> 11.2) Modified example of eleventh embodiment </paragraph>
<paragraph id="P-0422" lvl="0"><number>&lsqb;0422&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 66</cross-reference> is a circuit diagram showing a modified example of the function block according to the eleventh embodiment of the present invention. This has the constitution shown in <cross-reference target="DRAWINGS">FIG. 65</cross-reference> to which modifications have been performed like the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>), the first modified example of the fifth embodiment (<cross-reference target="DRAWINGS">FIG. 48</cross-reference>) and the ninth embodiment (<cross-reference target="DRAWINGS">FIG. 59</cross-reference>) of the present invention. </paragraph>
<paragraph id="P-0423" lvl="0"><number>&lsqb;0423&rsqb;</number> More specifically, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, the AND <highlight><bold>31</bold></highlight><highlight><italic>d</italic></highlight>, and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 66</cross-reference> add their functions in the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>. Moreover, the ripple carry block <highlight><bold>50</bold></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 66</cross-reference> add their functions in the first modified example of the fifth embodiment (<cross-reference target="DRAWINGS">FIG. 48</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>. Furthermore, the AND <highlight><bold>31</bold></highlight><highlight><italic>k </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 66</cross-reference> add their functions in the ninth embodiment (<cross-reference target="DRAWINGS">FIG. 59</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>. </paragraph>
<paragraph id="P-0424" lvl="0"><number>&lsqb;0424&rsqb;</number> Various variations of the function block including the 4-input logic function generator have been already detailed. They are based on the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> in which signal supply means to the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight>, to the inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to one of the inputs of the XOR <highlight><bold>30</bold></highlight>, and the carry circuit are modified in various ways. The inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> and respective inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 65</cross-reference> correspond to those of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, and the XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 65</cross-reference> corresponds to the XOR <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Accordingly, various modifications that have been performed to the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> can also be performed to the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>. <cross-reference target="DRAWINGS">FIG. 66</cross-reference> shows only one of the examples. </paragraph>
<paragraph id="P-0425" lvl="0"><number>&lsqb;0425&rsqb;</number> When adding a high-speed carry circuit to the function block of <cross-reference target="DRAWINGS">FIG. 65</cross-reference>, it is preferable that the input a of the ripple carry block <highlight><bold>50</bold></highlight> or one of the inputs of the AND <highlight><bold>31</bold></highlight> in the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 55</cross-reference> and <cross-reference target="DRAWINGS">FIG. 57</cross-reference> are connected to the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>as shown in <cross-reference target="DRAWINGS">FIG. 66</cross-reference>, but one of the signals i<highlight><bold>1</bold></highlight> to i<highlight><bold>3</bold></highlight> may be fed. </paragraph>
</section>
<section>
<heading lvl="1">12. Twelfth Embodiment </heading>
<paragraph id="P-0426" lvl="0"><number>&lsqb;0426&rsqb;</number> 12.1) Function block </paragraph>
<paragraph id="P-0427" lvl="0"><number>&lsqb;0427&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 67</cross-reference> is a circuit diagram showing a function block according to a twelfth embodiment of the present invention. The inputs i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> of the function block <highlight><bold>4</bold></highlight> are connected to the inputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, and outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>are connected to the inputs in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> of the 3-input logic function generator <highlight><bold>48</bold></highlight> and to the input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c</italic></highlight>. The output ol of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>is connected to a control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>. The 4-2 carry input i<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight> is connected to input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>k</italic></highlight>; input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>is connected with the input i<highlight><bold>0</bold></highlight> of the function block <highlight><bold>4</bold></highlight>; the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>is connected with the input i<highlight><bold>4</bold></highlight> of the function block <highlight><bold>4</bold></highlight>; and the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>is connected to the input in<highlight><bold>0</bold></highlight> of the 3-input logic function generator <highlight><bold>48</bold></highlight>. Tho output of the 3-input logic function generator <highlight><bold>48</bold></highlight> and the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>become the addition output oc and the carry output oc or the function block <highlight><bold>4</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0428" lvl="0"><number>&lsqb;0428&rsqb;</number> Here the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>may be inserted at the position <highlight><bold>61</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> instead of the position shown in <cross-reference target="DRAWINGS">FIG. 67</cross-reference>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>generates the 4-2 carry output o<highlight><bold>42</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>is controlled by the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>. The input-<highlight><bold>0</bold></highlight> is connected to the input i<highlight><bold>3</bold></highlight> (or i<highlight><bold>2</bold></highlight>) and the input-<highlight><bold>1</bold></highlight> is connected to the input i<highlight><bold>1</bold></highlight>. The circuit generating the 4-2 carry output o<highlight><bold>42</bold></highlight> may be any circuit if it can generate a carry signal (carry signal generated when three inputs are added) associated with the inputs i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight>, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>is the most preferable example. </paragraph>
<paragraph id="P-0429" lvl="0"><number>&lsqb;0429&rsqb;</number> The function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> has two operation modes: logic mode and 4-2 adder mode. In the logic mode, a fixed logical value of 0 is fed to the inputs i<highlight><bold>1</bold></highlight> and i<highlight><bold>3</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> and a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k</italic></highlight>. And the function block <highlight><bold>4</bold></highlight> is used as a 3-input logic circuit using i<highlight><bold>0</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>4</bold></highlight> as inputs and os as an output. In this case, the function block <highlight><bold>4</bold></highlight> can be used as an arbitrary logic circuit that can be realized by the 3-input logic function generator <highlight><bold>48</bold></highlight>. </paragraph>
<paragraph id="P-0430" lvl="0"><number>&lsqb;0430&rsqb;</number> In the 4-2 adder mode, the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> is used as a 4-2 adder. For this, a 3-input XOR using in<highlight><bold>0</bold></highlight>, in<highlight><bold>1</bold></highlight> and in<highlight><bold>2</bold></highlight> as inputs is implemented in the 3-input logic function generator <highlight><bold>48</bold></highlight>, and a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k</italic></highlight>. In this case, the function block <highlight><bold>4</bold></highlight> functions as a 4-2 adder using i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> as argument inputs, i<highlight><bold>42</bold></highlight> as a 4-2 carry input, o<highlight><bold>42</bold></highlight> as a 4-2 carry output, os as an addition output, and oc as a carry output. </paragraph>
<paragraph id="P-0431" lvl="0"><number>&lsqb;0431&rsqb;</number> The function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> includes one 3-input logic function generator <highlight><bold>48</bold></highlight>. As has been described above, since the 3-input logic, function generator occupies half or less of the area as compared to the 4-input logic function generator, the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> has a feature to have a small area as compared to the function block containing 4-input logic function generator. </paragraph>
<paragraph id="P-0432" lvl="0"><number>&lsqb;0432&rsqb;</number> Moreover, in the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 67</cross-reference>, the delay from the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> to the output os is a sum of delays of the XOR and the 3-input logic function generator. On the other hand, the corresponding delay in the aforementioned function block is a sum of delays of the XOR and the 4-input logic function generator (except the function block according to the eleventh embodiment of the present invention) or a sum of delays of the two stages of XOR and the 3-input logic function generator (in case of the function block according to the eleventh embodiment of the present invention). Accordingly, the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> also has a feature that it has a higher speed than the function blocks mentioned above. </paragraph>
<paragraph id="P-0433" lvl="0"><number>&lsqb;0433&rsqb;</number> 12.2) Modified example of twelfth embodiment </paragraph>
<paragraph id="P-0434" lvl="0"><number>&lsqb;0434&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 68</cross-reference> is a circuit diagram showing a modified example of the function block according to the twelfth embodiment of the present invention. This circuit is obtained by modifying the twelfth embodiment shown in <cross-reference target="DRAWINGS">FIG. 67</cross-reference> similarly to the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>) and the first modified example of the fifth embodiment (<cross-reference target="DRAWINGS">FIG. 48</cross-reference>) of the present invention. </paragraph>
<paragraph id="P-0435" lvl="0"><number>&lsqb;0435&rsqb;</number> More specifically, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, the AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 68</cross-reference> are configured to add the same functions as in the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference>. Moreover, the ripple carry block <highlight><bold>50</bold></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 68</cross-reference> are configured to add the same functions as in the first modified example of the fifth embodiment (<cross-reference target="DRAWINGS">FIG. 48</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>may be inserted at the position <highlight><bold>61</bold></highlight>, <highlight><bold>62</bold></highlight> or <highlight><bold>63</bold></highlight> instead of the position shown in <cross-reference target="DRAWINGS">FIG. 68</cross-reference>. </paragraph>
<paragraph id="P-0436" lvl="0"><number>&lsqb;0436&rsqb;</number> Various variations of the function block including the 4-input logic function generator have been already detailed. They are based on the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> in which the inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight>, the signal supply means to respective inputs or the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and to one of the inputs of the XOR <highlight><bold>30</bold></highlight>, and the carry circuit are modified in various ways. </paragraph>
<paragraph id="P-0437" lvl="0"><number>&lsqb;0437&rsqb;</number> The inputs i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight> and the respective inputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 67</cross-reference> correspond to those in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>; and the input in<highlight><bold>0</bold></highlight> of the 3-input logic function generator <highlight><bold>48</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 67</cross-reference> corresponds to one of the inputs of the XOR <highlight><bold>30</bold></highlight> in FIG. <highlight><bold>6</bold></highlight>. Accordingly, various modifications performed to the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> can also be performed to the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference>. <cross-reference target="DRAWINGS">FIG. 68</cross-reference> shows only one of the modification examples. However, when such modifications are performed, attention should be paid on that os and ol in the function block of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> correspond to the output of the 3-input logic function generator <highlight><bold>48</bold></highlight> and the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c</italic></highlight>, respectively. </paragraph>
<paragraph id="P-0438" lvl="0"><number>&lsqb;0438&rsqb;</number> When adding a high-speed carry circuit to the function block of <cross-reference target="DRAWINGS">FIG. 67</cross-reference>, the inputs a and b of the ripple carry block <highlight><bold>50</bold></highlight> or the input of the AND <highlight><bold>31</bold></highlight> in the function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 55</cross-reference> and <cross-reference target="DRAWINGS">FIG. 57</cross-reference> are preferably connected to the outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>as shown in <cross-reference target="DRAWINGS">FIG. 68</cross-reference> but may also be supplied with signals i<highlight><bold>0</bold></highlight> to i<highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0439" lvl="0"><number>&lsqb;0439&rsqb;</number> Moreover, <cross-reference target="DRAWINGS">FIG. 65</cross-reference> to <cross-reference target="DRAWINGS">FIG. 68</cross-reference> show examples of the function block including the 3-input logic function generator but in these function blocks, the 3-input logic function generator can easily be replaced by a 4-input logic function generator. </paragraph>
</section>
<section>
<heading lvl="1">13. Thirteenth Embodiment </heading>
<paragraph id="P-0440" lvl="0"><number>&lsqb;0440&rsqb;</number> 13.1) Function block </paragraph>
<paragraph id="P-0441" lvl="0"><number>&lsqb;0441&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 69</cross-reference> is a circuit diagram showing a function block according to a thirteenth embodiment of the present invention. The function block <highlight><bold>4</bold></highlight> consists of two half function blocks <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> and MUX <highlight><bold>22</bold></highlight><highlight><italic>q </italic></highlight>and MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>connecting them. </paragraph>
<paragraph id="P-0442" lvl="0"><number>&lsqb;0442&rsqb;</number> The half-function block <highlight><bold>4</bold></highlight> <highlight><bold>0</bold></highlight> comprises: a first 2-input logic function generator <highlight><bold>49</bold></highlight> generating a first logic output; a first XOR <highlight><bold>30</bold></highlight> generating a first addition output; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>generating a 4-2 carry output o<highlight><bold>42</bold></highlight>; a first ripple carry block <highlight><bold>50</bold></highlight> generating a first ripple carry output orc<highlight><bold>0</bold></highlight>; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>for supplying a signal to an input in<highlight><bold>0</bold></highlight> of the first 2-input logic function generator <highlight><bold>49</bold></highlight>, an input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and an input-b of the first ripple carry bock <highlight><bold>50</bold></highlight>, and a first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>for controlling it; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for supplying a signal to a first input of the first XOR <highlight><bold>30</bold></highlight> and an input-<highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c, </italic></highlight>and a first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it. </paragraph>
<paragraph id="P-0443" lvl="0"><number>&lsqb;0443&rsqb;</number> The first logic output is supplied to a control input of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, a second input of the first XOR <highlight><bold>30</bold></highlight>, and an input-d of the first ripple carry block <highlight><bold>50</bold></highlight>. An input-a of the first ripple carry block <highlight><bold>50</bold></highlight> is connected to an input in<highlight><bold>1</bold></highlight> of the first 2-input logic function generator <highlight><bold>49</bold></highlight>. The first ripple carry input irc<highlight><bold>0</bold></highlight> is supplied to an input-c of the first ripple carry block <highlight><bold>50</bold></highlight> and an input-<highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>h. </italic></highlight></paragraph>
<paragraph id="P-0444" lvl="0"><number>&lsqb;0444&rsqb;</number> The half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> comprises: a second 2-input logic function generator <highlight><bold>49</bold></highlight> generating a second logic output; a second XOR <highlight><bold>30</bold></highlight> generating a second addition output; a second MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>generating a carry output cc; a second ripple carry block <highlight><bold>50</bold></highlight> generating a second ripple carry output orc<highlight><bold>1</bold></highlight>; a second MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>for supplying a signal to an input in<highlight><bold>1</bold></highlight> of the second 2-input logic function generator <highlight><bold>49</bold></highlight> and an input-a of the second ripple carry bock <highlight><bold>50</bold></highlight>, and a second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>for controlling it; a second MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for supplying a signal to a first input of the second XOR <highlight><bold>30</bold></highlight> and an input-<highlight><bold>1</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, and a second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it. </paragraph>
<paragraph id="P-0445" lvl="0"><number>&lsqb;0445&rsqb;</number> The second logic output is supplied to a control input of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, a second input of the second XOR <highlight><bold>30</bold></highlight>, and an input-d of the second ripple carry block <highlight><bold>50</bold></highlight>. An input-b of the second ripple carry block <highlight><bold>50</bold></highlight> and an input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>are connected to an input in<highlight><bold>0</bold></highlight> of the second 2-input logic function generator <highlight><bold>49</bold></highlight>. The second ripple carry input irc<highlight><bold>1</bold></highlight> is supplied to an input c of the second ripple carry block <highlight><bold>50</bold></highlight> and an input-<highlight><bold>1</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>h. </italic></highlight></paragraph>
<paragraph id="P-0446" lvl="0"><number>&lsqb;0446&rsqb;</number> The 4-2 carry input i<highlight><bold>42</bold></highlight> is supplied to the input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>; the input i<highlight><bold>0</bold></highlight> is supplied to the input in<highlight><bold>0</bold></highlight> of the second 2-input logic function generator <highlight><bold>49</bold></highlight> and to the input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>p</italic></highlight>; the input i<highlight><bold>1</bold></highlight> is supplied to the input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and to the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>q</italic></highlight>; the input i<highlight><bold>2</bold></highlight> is supplied to the input-<highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>p</italic></highlight>; and the input i<highlight><bold>3</bold></highlight> is supplied to the input in<highlight><bold>1</bold></highlight> of the first 2-input logic function generator <highlight><bold>49</bold></highlight> and to the input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>p. </italic></highlight></paragraph>
<paragraph id="P-0447" lvl="0"><number>&lsqb;0447&rsqb;</number> The input-<highlight><bold>0</bold></highlight> and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>q </italic></highlight>are supplied with the first and the second logic output, respectively; the input-<highlight><bold>0</bold></highlight> and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>are supplied with the first and the second addition output, respectively; and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>is supplied with the first addition output. The addition output os and the logic output ol of the function block <highlight><bold>4</bold></highlight> are given by the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>and the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>q</italic></highlight>, respectively. </paragraph>
<paragraph id="P-0448" lvl="0"><number>&lsqb;0448&rsqb;</number> 13.2) Operation mode </paragraph>
<paragraph id="P-0449" lvl="0"><number>&lsqb;0449&rsqb;</number> The function block shown in <cross-reference target="DRAWINGS">FIG. 69</cross-reference> has three operation modes: logic mode, 4-2 adder mode and conditional carry mode. </paragraph>
<paragraph id="P-0450" lvl="0"><number>&lsqb;0450&rsqb;</number> Logic mode </paragraph>
<paragraph id="P-0451" lvl="0"><number>&lsqb;0451&rsqb;</number> In the logic mode, a logical value of 0 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 69</cross-reference>. Here, as can be seen from comparison with <cross-reference target="DRAWINGS">FIG. 64</cross-reference> (<highlight><bold>2</bold></highlight>) the first and the second 2-input logic function generator <highlight><bold>49</bold></highlight> and the MUX <highlight><bold>22</bold></highlight><highlight><italic>q </italic></highlight>function as a 3-input logic function generator using i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight> and i<highlight><bold>3</bold></highlight> as inputs and ol as an output. (Here, it is assumed that the 2-input logic function generator is an LUT.) Thus, in the logic mode, the function block of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> can be used as an arbitrary 3-input logic circuit. </paragraph>
<paragraph id="P-0452" lvl="0"><number>&lsqb;0452&rsqb;</number> 4-2 adder mode </paragraph>
<paragraph id="P-0453" lvl="0"><number>&lsqb;0453&rsqb;</number> In the 4-2 adder mode, a 2-input XOR is implemented in the first and the second 2-input logic function generator <highlight><bold>49</bold></highlight>; a logical value of 1 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p</italic></highlight>; a logical value of 0 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>; and a fixed logical value of 1 is fed to a control input icc of the MUX <highlight><bold>22</bold></highlight><highlight><italic>r</italic></highlight>. In this case, the function block <highlight><bold>4</bold></highlight> functions as a 4-2 adder using i<highlight><bold>0</bold></highlight>, i<highlight><bold>1</bold></highlight>, i<highlight><bold>2</bold></highlight> and i<highlight><bold>3</bold></highlight> as argument inputs, i<highlight><bold>42</bold></highlight> as a 4-2 carry input, o<highlight><bold>42</bold></highlight> as a 4-2 carry output, os as an addition output, and oc as a carry output. </paragraph>
<paragraph id="P-0454" lvl="0"><number>&lsqb;0454&rsqb;</number> Conditional carry mode </paragraph>
<paragraph id="P-0455" lvl="0"><number>&lsqb;0455&rsqb;</number> In the conditional carry mode, a 2-input XOR is implemented in the first and the second 2-input logic function generator <highlight><bold>49</bold></highlight>, a logical value of 0 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p</italic></highlight>, and a logical value of 1 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>. In this case, the half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> functions as a 1-bit full adder using i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> as argument inputs, irc<highlight><bold>0</bold></highlight> as a ripple carry input, orc<highlight><bold>0</bold></highlight> as a ripple carry output, and the first addition output as an addition output. Simultaneously with this, the half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> functions as a 1-bit full adder using i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> as argument inputs, irc<highlight><bold>1</bold></highlight> as a ripple carry input, orc<highlight><bold>1</bold></highlight> as a ripple carry output, and the second addition output as an addition output. Thus, the two full adders having the common argument inputs and independent ripple carry routes can be used as a high-speed condition carry adder. For this, the programmable function cell <highlight><bold>52</bold></highlight> including the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> is connected as shown in <cross-reference target="DRAWINGS">FIG. 70</cross-reference>. </paragraph>
<paragraph id="P-0456" lvl="0"><number>&lsqb;0456&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 70</cross-reference> is a block diagram showing a composite or combined function cell for constituting a condition carry adder. The composite function cell <highlight><bold>71</bold></highlight> includes a plurality (for example, eight) of programmable function cell <highlight><bold>52</bold></highlight>. The 4-2 carry output o<highlight><bold>42</bold></highlight>, a first ripple carry output orc<highlight><bold>0</bold></highlight>, and a second ripple carry output orc<highlight><bold>1</bold></highlight> of each of the programmable function cells <highlight><bold>52</bold></highlight> are connected to the 4-2 carry input i<highlight><bold>42</bold></highlight>, a first ripple carry input irc<highlight><bold>0</bold></highlight>, and a second ripple carry input irc<highlight><bold>1</bold></highlight> of the programmable function cell <highlight><bold>52</bold></highlight> of an upper node, respectively; a first ripple carry output orc<highlight><bold>0</bold></highlight> and a second ripple carry output orc<highlight><bold>1</bold></highlight> of the programmable function cell <highlight><bold>52</bold></highlight> of the uppermost node are connected to the input-<highlight><bold>0</bold></highlight> and input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight>, respectively; and a common signal icc is fed to the control input of the MUX <highlight><bold>22</bold></highlight> and the input icc of the respective programmable function cell <highlight><bold>52</bold></highlight>. </paragraph>
<paragraph id="P-0457" lvl="0"><number>&lsqb;0457&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 71</cross-reference> is a block diagram showing a cascade connection of the composite function cells <highlight><bold>7</bold></highlight>l. With this configuration, it is possible to realize a multi-bit full adder having a high-speed condition carry as compared to an ordinary ripple carry. In each of the composite function cells of <cross-reference target="DRAWINGS">FIG. 71</cross-reference>, when i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> of the function block are supplied with bits of the first and the second multi-bit argument inputs respectively, and icc of the lowermost composite function cell <highlight><bold>71</bold></highlight> is supplied with a carry input, respective bits of the addition result are output to the addition output os of the respective function blocks. </paragraph>
<paragraph id="P-0458" lvl="0"><number>&lsqb;0458&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> comprises two 2-input logic function generators <highlight><bold>49</bold></highlight> and one MUX <highlight><bold>22</bold></highlight><highlight><italic>q</italic></highlight>, which is equivalent to one 3-input logic function generator in the functional and area aspects. Since the 3-input logic function generator occupies half or less of that of the 4-input logic function generator, the function block of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> has a feature that the area is small as compared to a function block including a 4-input logic function generator. </paragraph>
<paragraph id="P-0459" lvl="0"><number>&lsqb;0459&rsqb;</number> 13.3) Modified example of thirteenth embodiment </paragraph>
<paragraph id="P-0460" lvl="0"><number>&lsqb;0460&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 72</cross-reference> is a circuit diagram showing modified example of the function block according to the thirteenth embodiment of the present invention. This is the aforementioned thirteenth embodiment (<cross-reference target="DRAWINGS">FIG. 69</cross-reference>) to which modification like the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>) has been performed, and such modification is performed that the MUX <highlight><bold>22</bold></highlight><highlight><italic>q </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> is removed and its function is performed by the MUX <highlight><bold>22</bold></highlight><highlight><italic>r. </italic></highlight></paragraph>
<paragraph id="P-0461" lvl="0"><number>&lsqb;0461&rsqb;</number> More specifically, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 72</cross-reference>, the AND <highlight><bold>31</bold></highlight> and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>in the half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> add their functions in the modified example of the third embodiment (<cross-reference target="DRAWINGS">FIG. 42</cross-reference>) to the function block of <cross-reference target="DRAWINGS">FIG. 69</cross-reference>. That is, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>in the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 72</cross-reference> can constitute a 4-input MUX outputting to oc via the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0462" lvl="0"><number>&lsqb;0462&rsqb;</number> Moreover, by using the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>f </italic></highlight>as AND in the 4-2 adder mode, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 72</cross-reference> can be used as 2AND4-2 adder (<cross-reference target="DRAWINGS">FIG. 33</cross-reference>). </paragraph>
<paragraph id="P-0463" lvl="0"><number>&lsqb;0463&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 72</cross-reference>, in the 4-2 adder mode and the conditional carry mode a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>s </italic></highlight>in the half-function blocks <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight>. On the other hand, in the logic mode, a logical value of 0 is stored in them. Here, a first logic output is output directly to the first addition output and a second logic output is output directly to the second addition output respectively, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>is controlled by i<highlight><bold>1</bold></highlight>. Accordingly, the MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 72</cross-reference> functions in the same way as the MUX <highlight><bold>22</bold></highlight><highlight><italic>q </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 69</cross-reference> and the addition output os becomes a logic output. </paragraph>
<paragraph id="P-0464" lvl="0"><number>&lsqb;0464&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 72</cross-reference> shows only one of the modifications that can be performed to the function block of <cross-reference target="DRAWINGS">FIG. 69</cross-reference>. Those skilled in the art can easily apply modification examples performed to the other function blocks disclosed in this specification to the function block of <cross-reference target="DRAWINGS">FIG. 69</cross-reference>. Moreover, <cross-reference target="DRAWINGS">FIG. 69</cross-reference> and <cross-reference target="DRAWINGS">FIG. 72</cross-reference> show examples of the function block including the 2-input logic function generator but in these function blocks the 2-input logic function generator can also easily be replaced by a 3-input logic function generator. </paragraph>
<paragraph id="P-0465" lvl="0"><number>&lsqb;0465&rsqb;</number> Explanation has thus far been given on the function block including a logic function generator. Hereinafter, explanation will be given on a function block not including a logic function generator. </paragraph>
</section>
<section>
<heading lvl="1">14. Fourteenth Embodiment </heading>
<paragraph id="P-0466" lvl="0"><number>&lsqb;0466&rsqb;</number> 14.1) Function block </paragraph>
<paragraph id="P-0467" lvl="0"><number>&lsqb;0467&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 73</cross-reference> is a circuit diagram showing a function block according to a fourteenth embodiment of the present invention. In the function block <highlight><bold>4</bold></highlight>, the inputs i<highlight><bold>00</bold></highlight>, i<highlight><bold>01</bold></highlight> and i<highlight><bold>02</bold></highlight> are connected to the input-<highlight><bold>0</bold></highlight>, the input-<highlight><bold>1</bold></highlight> and the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, respectively; the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>is connected to a first input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a</italic></highlight>; and the input <highlight><bold>03</bold></highlight> is connected to a second input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a</italic></highlight>. The inputs i<highlight><bold>10</bold></highlight>, i<highlight><bold>11</bold></highlight> and i<highlight><bold>12</bold></highlight> are connected to the input-<highlight><bold>0</bold></highlight>, the input-<highlight><bold>1</bold></highlight> and control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, respectively; the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>is connected to a first input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>; and the input i<highlight><bold>13</bold></highlight> is connected to a second input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0468" lvl="0"><number>&lsqb;0468&rsqb;</number> The input-<highlight><bold>0</bold></highlight>, the input-<highlight><bold>1</bold></highlight> and the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>j </italic></highlight>outputting the 4-2 carry o<highlight><bold>42</bold></highlight> are connected with the input i<highlight><bold>13</bold></highlight>, the input i<highlight><bold>03</bold></highlight> and the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, respectively; and a first and a second input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>are connected with the outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>30</bold></highlight><highlight><italic>b</italic></highlight>, respectively. The input-<highlight><bold>0</bold></highlight>, the input-<highlight><bold>1</bold></highlight> and control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>are connected with the input i<highlight><bold>40</bold></highlight>, the 4-2 carry input i<highlight><bold>42</bold></highlight> and the output of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>, respectively; the input-<highlight><bold>0</bold></highlight>, the input-<highlight><bold>1</bold></highlight> and the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>outputting the carry output oc are connected with the outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>and the XOR <highlight><bold>30</bold></highlight><highlight><italic>c</italic></highlight>, respectively; and a first and a second input of the XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>outputting the addition output os are connected with the outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and the MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, respectively </paragraph>
<paragraph id="P-0469" lvl="0"><number>&lsqb;0469&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> is used in one programmable function cell <highlight><bold>1</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. However, there are provided nine input selection units <highlight><bold>3</bold></highlight>_k (k is an integer) and their inputs are connected to the inputs i<highlight><bold>00</bold></highlight>, i<highlight><bold>01</bold></highlight>, i<highlight><bold>02</bold></highlight>, i<highlight><bold>03</bold></highlight>, i<highlight><bold>10</bold></highlight>, i<highlight><bold>11</bold></highlight>, i<highlight><bold>12</bold></highlight>, i<highlight><bold>13</bold></highlight> and i<highlight><bold>40</bold></highlight>, respectively. Moreover, the input selection units <highlight><bold>3</bold></highlight>_k here are all input selection units with fixed values. Since the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> does not have the logic output ol, the circuits <highlight><bold>5</bold></highlight>_<highlight><bold>2</bold></highlight>, <highlight><bold>3</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>a </italic></highlight>corresponding to ol are removed from the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 9</cross-reference>). </paragraph>
<paragraph id="P-0470" lvl="0"><number>&lsqb;0470&rsqb;</number> 14.2) Operation mode </paragraph>
<paragraph id="P-0471" lvl="0"><number>&lsqb;0471&rsqb;</number> Next, explanation will be given on the operation and effect of the present embodiment. The present embodiment has two operation modes: full adder mode and 4-2 adder mode. </paragraph>
<paragraph id="P-0472" lvl="0"><number>&lsqb;0472&rsqb;</number> Full adder mode </paragraph>
<paragraph id="P-0473" lvl="0"><number>&lsqb;0473&rsqb;</number> For using the present embodiment in the full adder mode, a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>and a fixed logical value of 0 is fed to the input iO<highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0474" lvl="0"><number>&lsqb;0474&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>) shows an equivalent circuit of the function block of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in the full adder mode. In this circuit, the argument inputs a and b of the 1-bit full adder <highlight><bold>42</bold></highlight> are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and an MUX-XOR <highlight><bold>54</bold></highlight>, respectively, as a preposition logic circuit. As has been shown in <cross-reference target="DRAWINGS">FIG. 28</cross-reference>, the MUX can realize various logic circuits in accordance with the input setting. <cross-reference target="DRAWINGS">FIG. 75</cross-reference> is a table showing various logic functions of the MUX-XOR <highlight><bold>54</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 75</cross-reference>, the MUX-XOR <highlight><bold>54</bold></highlight> in which an output of the MUX is connected with one of the inputs of the XOR can realize various logic circuits in accordance with the input setting. Especially <cross-reference target="DRAWINGS">FIG. 75</cross-reference> includes all the 2-input 1-output logic circuits. Thus, the circuit of <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>) can realize a circuit in which various logic circuits are added to the input of the 1-bit full adder, and is useful for various arithmetic computations. </paragraph>
<paragraph id="P-0475" lvl="0"><number>&lsqb;0475&rsqb;</number> Moreover, as shown in <cross-reference target="DRAWINGS">FIG. 76</cross-reference>, by using both of the carry output oc and the addition output s, the 1-bit full adder can also provide various logic circuits in accordance with the input setting. (Here, I/O symbols a, b, ic, oc and s in <cross-reference target="DRAWINGS">FIG. 76</cross-reference> follow the ones described in the 1-bit full adder <highlight><bold>43</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>).) By using such a 1-bit full adder in combination with the logic varieties of the preposition logic circuit, the circuit of <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>) can realize a large variety of logic circuits. That is, the full adder mode of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> is excellent not only in the arithmetic computation but also in logic calculation. This feature enables the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> to be used as a logic function constituting unit of a reconfigurable device. </paragraph>
<paragraph id="P-0476" lvl="0"><number>&lsqb;0476&rsqb;</number> 4-2 adder mode </paragraph>
<paragraph id="P-0477" lvl="0"><number>&lsqb;0477&rsqb;</number> On the other hand, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> enters the 4-2 adder mode when a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h. </italic></highlight></paragraph>
<paragraph id="P-0478" lvl="0"><number>&lsqb;0478&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>2</bold></highlight>) shows an equivalent circuit of the function block of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in the 4-2 adder mode. This circuit is the 4-2 adder <highlight><bold>44</bold></highlight> whose inputs iO and i<highlight><bold>3</bold></highlight> are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 28</cross-reference>, the MUX as a preposition logic circuit can realize various logic functions. For example, when it is used as an AND, <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>2</bold></highlight>) becomes equivalent to the 2AND4-2 adder <highlight><bold>27</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 33</cross-reference> and can be used to constitute a high-performance multiplier (<cross-reference target="DRAWINGS">FIG. 34</cross-reference>). </paragraph>
<paragraph id="P-0479" lvl="0"><number>&lsqb;0479&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> has a function similar to that of the function block of <cross-reference target="DRAWINGS">FIG. 32</cross-reference> in which the AND <highlight><bold>31</bold></highlight> is replaced by an MUX. The former has less logic variety but has merits of a small area and a small delay because the logic function generator <highlight><bold>40</bold></highlight> is not provided. </paragraph>
</section>
<section>
<heading lvl="1">15. Fifteenth Embodiment </heading>
<paragraph id="P-0480" lvl="0"><number>&lsqb;0480&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 77</cross-reference> is a circuit diagram showing a function block according to a fifteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the MUX <highlight><bold>22</bold></highlight><highlight><italic>d </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>controlling it, and the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>controlling it are added. The input-<highlight><bold>0</bold></highlight> and the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>are connected with the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and i<highlight><bold>40</bold></highlight>; and the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>is connected to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>d </italic></highlight>selects either of the output of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and the control signal i<highlight><bold>50</bold></highlight> and supplies it to the control input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0481" lvl="0"><number>&lsqb;0481&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 77</cross-reference> becomes equivalent to the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> when a logical value of 1 is stored in the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g</italic></highlight>. On the other hand, when a logical value of 0 is stored in the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>, <highlight><bold>13</bold></highlight><highlight><italic>g </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>constitute a 4-input MUX using the oc as an output. </paragraph>
<paragraph id="P-0482" lvl="0"><number>&lsqb;0482&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 77</cross-reference> has a function similar to the function of <cross-reference target="DRAWINGS">FIG. 41</cross-reference>. The former has a less logic variety but has merits of a small area and a small delay because the logic function generator <highlight><bold>40</bold></highlight> is not provided. </paragraph>
<paragraph id="P-0483" lvl="0"><number>&lsqb;0483&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 78</cross-reference> is a circuit diagram showing a modified example of the function block according to the fifteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the MUX <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, the AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>are added. The input-<highlight><bold>1</bold></highlight> and the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, respectively; the output of the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>is connected to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>; and the MUX <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>is controlled by the control input i<highlight><bold>50</bold></highlight>. The AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>is supplied with outputs of the XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>as inputs and the output of the AND <highlight><bold>31</bold></highlight><highlight><italic>d </italic></highlight>controls the MUX <highlight><bold>22</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0484" lvl="0"><number>&lsqb;0484&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 78</cross-reference> becomes equivalent to the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> when a logical value of 1 is given as i<highlight><bold>50</bold></highlight> and a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>. On the other hand, when a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>m </italic></highlight>constitute a 4-input MUX using the oc as an output. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 78</cross-reference> has a function similar to the function of <cross-reference target="DRAWINGS">FIG. 42</cross-reference>. The former has less logic variety but has merits of a small area and a small delay because the logic function generator <highlight><bold>40</bold></highlight> is not provided. </paragraph>
</section>
<section>
<heading lvl="1">16. Sixteenth Embodiment </heading>
<paragraph id="P-0485" lvl="0"><number>&lsqb;0485&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 79</cross-reference> is a circuit diagram showing a function block according to a sixteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> that has been modified to realize an 8-input MUX in the same way as <cross-reference target="DRAWINGS">FIG. 45</cross-reference>. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 79</cross-reference> becomes equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in which an MUX is added to i<highlight><bold>03</bold></highlight> and i<highlight><bold>13</bold></highlight> when a logical value of 0 is fed as i<highlight><bold>51</bold></highlight> and a logical value of 1 is stored in both of the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g. </italic></highlight></paragraph>
<paragraph id="P-0486" lvl="0"><number>&lsqb;0486&rsqb;</number> On the other hand, when a logical value of 0 is stored in both of the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>g</italic></highlight>, the MUXs <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>constitute an 8-input MUX using the oc as an output. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 79</cross-reference> has the function similar to the function of <cross-reference target="DRAWINGS">FIG. 45</cross-reference>. The former has a less logic variety but has merits of a small area and a small delay because the logic function generator <highlight><bold>40</bold></highlight> is not provided. </paragraph>
<paragraph id="P-0487" lvl="0"><number>&lsqb;0487&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 80</cross-reference> is a circuit diagram showing a modified example of the function block according to the sixteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> that has been modified to realize an 8-input MUX in the same way as <cross-reference target="DRAWINGS">FIG. 46</cross-reference>. The function block of <cross-reference target="DRAWINGS">FIG. 80</cross-reference> becomes equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in which an MUX is added to i<highlight><bold>03</bold></highlight> and i<highlight><bold>13</bold></highlight> when a logical value of 0 is fed to i<highlight><bold>50</bold></highlight> and i<highlight><bold>51</bold></highlight> and a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d. </italic></highlight></paragraph>
<paragraph id="P-0488" lvl="0"><number>&lsqb;0488&rsqb;</number> On the other hand, when a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>d</italic></highlight>, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>e</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>m</italic></highlight>, <highlight><bold>22</bold></highlight><highlight><italic>n </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>g </italic></highlight>constitute an 8-input MUX using the oc as an output. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 80</cross-reference> has a function similar to the function of <cross-reference target="DRAWINGS">FIG. 46</cross-reference>. The former has a less logic variety but has merits of a small area and a small delay because the logic function generator <highlight><bold>40</bold></highlight> is not provided. </paragraph>
</section>
<section>
<heading lvl="1">17. Seventeenth Embodiment </heading>
<paragraph id="P-0489" lvl="0"><number>&lsqb;0489&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 81</cross-reference> is a circuit diagram showing a function block according to the seventeenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>controlling it are added. </paragraph>
<paragraph id="P-0490" lvl="0"><number>&lsqb;0490&rsqb;</number> The function block of <cross-reference target="DRAWINGS">FIG. 81</cross-reference> becomes equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> when a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k. </italic></highlight></paragraph>
<paragraph id="P-0491" lvl="0"><number>&lsqb;0491&rsqb;</number> On the other hand, when a logical value of 0 is stored in both of the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 81</cross-reference> becomes equivalent to a circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference>. </paragraph>
<paragraph id="P-0492" lvl="0"><number>&lsqb;0492&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 82</cross-reference> shows one of the equivalent circuits of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 81</cross-reference> in which the argument inputs a and b of the 1 bit full adder <highlight><bold>43</bold></highlight> are respectively connected with the outputs of the MUX-XOR <highlight><bold>54</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>54</bold></highlight><highlight><italic>b </italic></highlight>as a preposition logic circuit. </paragraph>
<paragraph id="P-0493" lvl="0"><number>&lsqb;0493&rsqb;</number> As has been described above, since the MUX-XOR can realize a larger variety of logic circuits than the MUX, the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference> can implement a larger variety of logic circuits than <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0494" lvl="0"><number>&lsqb;0494&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 83</cross-reference> shows a logic circuit that can be realized by the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference> and is used with a high frequency. The circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference> has a feature that it can implement all the logic circuits of the type shown in <cross-reference target="DRAWINGS">FIG. 83</cross-reference>. Here, reference numerals <highlight><bold>55</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>55</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>55</bold></highlight><highlight><italic>c </italic></highlight>denote arbitrary 2-input 1-output logic circuits. This type of logic circuit is used by much more frequently than the other types. Accordingly, realization of it in a single function block is a very effective feature for a logic function constituting unit of a reconfigurable device. </paragraph>
</section>
<section>
<heading lvl="1">18. Eighteenth Embodiment </heading>
<paragraph id="P-0495" lvl="0"><number>&lsqb;0495&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 84</cross-reference> is a circuit diagram showing a function block according to an eighteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 78</cross-reference> to which the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>controlling it are added. The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 84</cross-reference> is equivalent to <cross-reference target="DRAWINGS">FIG. 78</cross-reference> when a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k. </italic></highlight></paragraph>
<paragraph id="P-0496" lvl="0"><number>&lsqb;0496&rsqb;</number> On the other hand, when logical values 0, 1 and 0 are stored in the configuration memories <highlight><bold>13</bold></highlight><highlight><italic>k</italic></highlight>, <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>h</italic></highlight>, respectively, and a logical value of 1 is fed as the control input i<highlight><bold>50</bold></highlight>, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 84</cross-reference> becomes equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference>. With these modes, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 84</cross-reference> cab realize a 4-input MUX and has a large logic variety. In the same way, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 79</cross-reference> or <cross-reference target="DRAWINGS">FIG. 80</cross-reference> can also have a large logic variety by adding the MUX <highlight><bold>22</bold></highlight><highlight><italic>k </italic></highlight>and the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k </italic></highlight>controlling it. </paragraph>
</section>
<section>
<heading lvl="1">19. Nineteenth Embodiment </heading>
<paragraph id="P-0497" lvl="0"><number>&lsqb;0497&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 85</cross-reference> is a circuit diagram showing a function block according to a nineteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the ripple carry block <highlight><bold>50</bold></highlight> is added in the same way as <cross-reference target="DRAWINGS">FIG. 47</cross-reference>, thereby making a high-speed ripple carry transfer possible. When using this ripple carry function, a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k</italic></highlight>. In this case, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 85</cross-reference> is equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference> in which i<highlight><bold>40</bold></highlight> is replaced by the ripple carry input irc and oc is replaced by the ripple carry output orc, respectively. </paragraph>
<paragraph id="P-0498" lvl="0"><number>&lsqb;0498&rsqb;</number> Moreover, when a logical value of 0 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>k</italic></highlight>, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 85</cross-reference> becomes equivalent to the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference>. For those skilled in the art, it is easy to provide the ripple carry block <highlight><bold>50</bold></highlight> in the other function blocks of the present invention (function blocks of the fifteenth to eighteenth embodiment of the present invention and their modified examples) in the same way as the present example using the information disclosed in this specification. </paragraph>
<paragraph id="P-0499" lvl="0"><number>&lsqb;0499&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 86</cross-reference> is a circuit diagram showing a modified example of the function block according to the nineteenth embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the ripple carry block <highlight><bold>50</bold></highlight> is added in the same way as <cross-reference target="DRAWINGS">FIG. 48</cross-reference>, thereby making a high-speed ripple carry transfer possible. When using this ripple carry function, the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight> is configured so as to output the input c to out. In this case, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 86</cross-reference> is equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 82</cross-reference> in which i<highlight><bold>40</bold></highlight> is replaced by the ripple carry input irc and the oc is replaced by the ripple carry output orc, respectively. </paragraph>
<paragraph id="P-0500" lvl="0"><number>&lsqb;0500&rsqb;</number> Moreover, when the input a or b is selected by the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 86</cross-reference> becomes equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in which the input-<highlight><bold>0</bold></highlight> or the input-<highlight><bold>1</bold></highlight> is selected by the MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, respectively. </paragraph>
<paragraph id="P-0501" lvl="0"><number>&lsqb;0501&rsqb;</number> For those skilled in the art, it is easy to provide the ripple carry block <highlight><bold>50</bold></highlight> in the other function blocks of the present invention (the function blocks of the fifteenth to the eighteenth embodiment of the present invention and their modified examples) in the same way as in the present embodiment using the information disclosed in this specification. </paragraph>
</section>
<section>
<heading lvl="1">20. Twentieth Embodiment </heading>
<paragraph id="P-0502" lvl="0"><number>&lsqb;0502&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 87</cross-reference> is a circuit diagram showing a function block according to a twentieth embodiment of the present invention. This embodiment is a composite or combined function block composed of a function block <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and a function block <highlight><bold>4</bold></highlight><highlight><italic>b. </italic></highlight>Each of the function blocks is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> to which the 2-bit carry look ahead function of <cross-reference target="DRAWINGS">FIG. 55</cross-reference> is added. </paragraph>
<paragraph id="P-0503" lvl="0"><number>&lsqb;0503&rsqb;</number> In order to use the 2-bit carry look ahead function, in the two function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 87</cross-reference>, the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight> is configured so as to output the input c to out and a fixed logical value of 0 is fed to the input i<highlight><bold>03</bold></highlight>. Here, the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 87</cross-reference> becomes equivalent to <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>) in which the carry circuit is modified to a 2-bit carry look ahead (this only increases the carry transfer speed and the function of the full adder does not change). </paragraph>
<paragraph id="P-0504" lvl="0"><number>&lsqb;0504&rsqb;</number> When a logical value of 1 is stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>s </italic></highlight>and the input a or b is selected by the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>, the function blocks <highlight><bold>4</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 87</cross-reference> become equivalent to the circuit of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> in which the input-<highlight><bold>0</bold></highlight> or the input-<highlight><bold>1</bold></highlight> is selected by the MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, respectively. For those skilled in the art, it is easy to add the 2-bit carry look ahead function to the other function blocks (the function blocks of the fifteenth to the eighteenth embodiment of the present invention and their modified examples) in the same way as the present embodiment using the information disclosed in the present specification. </paragraph>
</section>
<section>
<heading lvl="1">21. Twenty-first Embodiment </heading>
<paragraph id="P-0505" lvl="0"><number>&lsqb;0505&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 88</cross-reference> is a circuit diagram showing a function block according to a twenty-first embodiment of the present invention. This is the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 61</cross-reference> in which the logic function generator <highlight><bold>40</bold></highlight> is replaced by a 4-input XOR composed of XOR <highlight><bold>30</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>30</bold></highlight><highlight><italic>c</italic></highlight>, and MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>are added as a proposition logic circuit. The function block of <cross-reference target="DRAWINGS">FIG. 88</cross-reference> functions as a circuit equivalent to <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>2</bold></highlight>) and accordingly, it can be used, for example, as a 2AND4-2 adder. Moreover, the MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and XOR <highlight><bold>30</bold></highlight><highlight><italic>a</italic></highlight>, or the MUX <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>and XOR <highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 88</cross-reference> constitute the aforementioned preposition logic circuit MUX-XOR, which can be used as various logic circuits as shown in <cross-reference target="DRAWINGS">FIG. 75</cross-reference>. </paragraph>
</section>
<section>
<heading lvl="1">22. Twenty-second Embodiment </heading>
<paragraph id="P-0506" lvl="0"><number>&lsqb;0506&rsqb;</number> 22.1) Function block </paragraph>
<paragraph id="P-0507" lvl="0"><number>&lsqb;0507&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 89</cross-reference> is a circuit diagram showing a function block according to a twenty-second embodiment of the present invention. The function block <highlight><bold>4</bold></highlight> consists of two half-function blocks <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> and an MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>connecting them. </paragraph>
<paragraph id="P-0508" lvl="0"><number>&lsqb;0508&rsqb;</number> The half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> includes: a first XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>generating a first addition output; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>generating a 4-2 carry output o<highlight><bold>42</bold></highlight> and a logic output o<highlight><bold>1</bold></highlight>; a first ripple carry block <highlight><bold>50</bold></highlight> generating a first ripple carry output orc<highlight><bold>0</bold></highlight>; a first XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>for supplying a signal to a first input of the first XOR <highlight><bold>30</bold></highlight><highlight><italic>d</italic></highlight>, to the input-d of the first ripple carry block <highlight><bold>50</bold></highlight> and to the control input of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>for supplying a signal to the input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, to a first input of the first XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and to the input-b of the first ripple carry block <highlight><bold>50</bold></highlight>, and a first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>for controlling it; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>for supplying a signal to a second input of the first XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and to the input-a of the first ripple carry block <highlight><bold>50</bold></highlight>; and a first MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for supplying a signal to a second input of the first XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>and to the input-<highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, and a first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it. </paragraph>
<paragraph id="P-0509" lvl="0"><number>&lsqb;0509&rsqb;</number> The first ripple carry input irc<highlight><bold>0</bold></highlight> is supplied to the input-c of the first ripple carry block <highlight><bold>50</bold></highlight> and to the input-<highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>. The input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>is supplied with an input i<highlight><bold>1</bold></highlight> and the input <highlight><bold>1</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>is supplied with an input i<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0510" lvl="0"><number>&lsqb;0510&rsqb;</number> The half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> comprises; a second XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>generating a second addition output; a second MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>generating a carry output oc; a second ripple carry block <highlight><bold>50</bold></highlight> generating a second ripple carry output orc<highlight><bold>1</bold></highlight>; a second XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>for supplying a signal to a first input of the second XOR <highlight><bold>30</bold></highlight><highlight><italic>d</italic></highlight>, to the input-d of the second ripple carry block <highlight><bold>50</bold></highlight> and to the control input of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>; a first MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>for supplying a signal to the input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>c</italic></highlight>, to a first input of the second XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and to the input-b of the second ripple carry block <highlight><bold>50</bold></highlight>; a second MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>for supplying a signal to a second input of the second XOR <highlight><bold>30</bold></highlight><highlight><italic>c </italic></highlight>and to the input-a of the second ripple carry block <highlight><bold>50</bold></highlight>, and a second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>for controlling it; and a second MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>for supplying a signal to a second input of the second XOR <highlight><bold>30</bold></highlight><highlight><italic>d </italic></highlight>and to the input-<highlight><bold>1</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>, and a second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>for controlling it. </paragraph>
<paragraph id="P-0511" lvl="0"><number>&lsqb;0511&rsqb;</number> The second ripple carry input irc<highlight><bold>1</bold></highlight> is supplied to the input-c of the second ripple carry block <highlight><bold>50</bold></highlight> and to the input-<highlight><bold>1</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>h</italic></highlight>. The input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>h </italic></highlight>is supplied with a 4-2 carry input i<highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0512" lvl="0"><number>&lsqb;0512&rsqb;</number> A first addition output is supplied to the input-<highlight><bold>0</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>r </italic></highlight>and to the input-<highlight><bold>1</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>p</italic></highlight>. A second addition output is supplied to the input-<highlight><bold>1</bold></highlight> of the MUX <highlight><bold>22</bold></highlight><highlight><italic>r</italic></highlight>. The input-<highlight><bold>0</bold></highlight> of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>is supplied with an output of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and the input-<highlight><bold>0</bold></highlight> of the second MUX <highlight><bold>22</bold></highlight><highlight><italic>p </italic></highlight>is supplied with an output of the first MUX <highlight><bold>22</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0513" lvl="0"><number>&lsqb;0513&rsqb;</number> 22.2) Operation mode </paragraph>
<paragraph id="P-0514" lvl="0"><number>&lsqb;0514&rsqb;</number> The function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> has three operation modes: logic mode; 4-2 adder mode; and conditional carry mode. </paragraph>
<paragraph id="P-0515" lvl="0"><number>&lsqb;0515&rsqb;</number> In the logic mode, a logical value of 0 is stored in the first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p </italic></highlight>and the first configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 89</cross-reference>, and a logical value of 0 is fed to icc. Here, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> becomes a circuit equivalent to <cross-reference target="DRAWINGS">FIG. 90</cross-reference>. As has been already described, since the full adder <highlight><bold>43</bold></highlight> and the preposition logic circuit MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>function as various logic circuits, the circuit of <cross-reference target="DRAWINGS">FIG. 90</cross-reference> can be used as various logic circuits. </paragraph>
<paragraph id="P-0516" lvl="0"><number>&lsqb;0516&rsqb;</number> In the 4-2 adder mode, a logical value of 0 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 89, a</cross-reference> logical value of 1 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p</italic></highlight>, and a logical value of 1 is fed to icc. Here, the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> becomes a circuit equivalent to <cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>2</bold></highlight>). </paragraph>
<paragraph id="P-0517" lvl="0"><number>&lsqb;0517&rsqb;</number> In the conditional carry mode, a logical value of 1 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> and a logical value of 0 is stored in the first and the second configuration memory <highlight><bold>13</bold></highlight><highlight><italic>p. </italic></highlight></paragraph>
<paragraph id="P-0518" lvl="0"><number>&lsqb;0518&rsqb;</number> Here, the half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>0</bold></highlight> is supplied with argument inputs i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> by the output of the first and the second MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and functions as a 1-bit full adder having a preposition logic circuit using irc<highlight><bold>0</bold></highlight> as a ripple carry input, orc<highlight><bold>0</bold></highlight> as a ripple carry output, and the first addition output as an addition output. </paragraph>
<paragraph id="P-0519" lvl="0"><number>&lsqb;0519&rsqb;</number> Simultaneously with this, the half-function block <highlight><bold>4</bold></highlight>_<highlight><bold>1</bold></highlight> is supplied with argument inputs i<highlight><bold>0</bold></highlight> and i<highlight><bold>3</bold></highlight> by the output of the first and the second MUX <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>and functions as a 1-bit full adder having a preposition logic circuit using irc<highlight><bold>1</bold></highlight> as a ripple carry input, orc<highlight><bold>1</bold></highlight> as a ripple carry output, and the second addition output as an addition output. </paragraph>
<paragraph id="P-0520" lvl="0"><number>&lsqb;0520&rsqb;</number> Thus, the two full adders having common argument inputs and independent ripple carry routes, as has been already described above, can be used as a high-speed condition carry adder. For this, the programmable function cell <highlight><bold>52</bold></highlight> including the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 89</cross-reference> is connected as shown in <cross-reference target="DRAWINGS">FIG. 70</cross-reference> so as to constitute a composite or combined function cell <highlight><bold>71</bold></highlight>, which is further cascade-connected as shown in <cross-reference target="DRAWINGS">FIG. 71</cross-reference>. With this configuration, it is possible to realize a multi-bit full adder having a higher speed condition carry than an ordinary ripple carry. </paragraph>
<paragraph id="P-0521" lvl="0"><number>&lsqb;0521&rsqb;</number> In the function blocks of the fourteenth to the twenty-second embodiments and their modified examples, an example has been given using an MUX as a preposition logic circuit. However, the preposition logic circuit of the function block of the present invention is not limited to this. For example, other circuits such as an LUT and an MUX-XOR can be used in which various programmable functions can be set. Moreover, for those skilled in the art, it is easy to change the number of preposition logic circuits and to modify the inputs to which the preposition logic circuit is added to other than those exemplified in this specification. </paragraph>
</section>
<section>
<heading lvl="1">23. Programmable Function Cell </heading>
<paragraph id="P-0522" lvl="0"><number>&lsqb;0522&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 91</cross-reference> is a block diagram showing another example of the programmable function cell using the function block according to the present invention. <cross-reference target="DRAWINGS">FIG. 91</cross-reference> shows an example using the function block of <cross-reference target="DRAWINGS">FIG. 73</cross-reference> but it is also possible to use other function blocks of the present invention. Moreover, in the example, the interconnection wire group <highlight><bold>2</bold></highlight> consists of 6 wires but the number of wires is not limited to this. </paragraph>
<paragraph id="P-0523" lvl="0"><number>&lsqb;0523&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 91</cross-reference>, the two outputs oc and os of the function block <highlight><bold>4</bold></highlight> firstly pass through the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>of the output block <highlight><bold>5</bold></highlight>. These MUX&apos;es are controlled by the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>and output the oc and os directly or after exchanging with each other in accordance with the value stored. This performs the same function as the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. In case of <cross-reference target="DRAWINGS">FIG. 91</cross-reference>, this is attached to the input side of the register block. </paragraph>
<paragraph id="P-0524" lvl="0"><number>&lsqb;0524&rsqb;</number> The output block <highlight><bold>5</bold></highlight> has register blocks <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>that are identical to the aforementioned register block (<cross-reference target="DRAWINGS">FIG. 19</cross-reference>), which has been slightly modified. </paragraph>
<paragraph id="P-0525" lvl="0"><number>&lsqb;0525&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 92</cross-reference> is a circuit diagram showing the register block <highlight><bold>42</bold></highlight> modified. This register block <highlight><bold>42</bold></highlight> has two data inputs i<highlight><bold>1</bold></highlight> and id, and also two data outputs out and ofb. The i<highlight><bold>1</bold></highlight> and id are connected to a data input of the MUX <highlight><bold>22</bold></highlight><highlight><italic>t </italic></highlight>whose output is connected to a data input d of the D-FF <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0526" lvl="0"><number>&lsqb;0526&rsqb;</number> The MUX <highlight><bold>22</bold></highlight><highlight><italic>t </italic></highlight>is controlled in accordance with a value stored in the configuration memory <highlight><bold>13</bold></highlight>L and one of the i<highlight><bold>1</bold></highlight> and id is selected to be input to the D-FF <highlight><bold>38</bold></highlight>. The MUX <highlight><bold>22</bold></highlight><highlight><italic>s </italic></highlight>is supplied with a data output q and i<highlight><bold>1</bold></highlight> of the D-FF <highlight><bold>38</bold></highlight> as data input and selects one of the data inputs in accordance with a value stored in the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>s </italic></highlight>so as to be output as out. Moreover, the data output q of the D-FF <highlight><bold>38</bold></highlight> is output directly as ofb. </paragraph>
<paragraph id="P-0527" lvl="0"><number>&lsqb;0527&rsqb;</number> In this register block <highlight><bold>42</bold></highlight>, the id is passed through the D-FF before being output from ofb and simultaneously with this, the i<highlight><bold>1</bold></highlight> can bypass the D-FF to be output from the out. This feature is effective when constituting a pipelined multiplier as will be detailed later. </paragraph>
<paragraph id="P-0528" lvl="0"><number>&lsqb;0528&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 91</cross-reference>, the data inputs i<highlight><bold>1</bold></highlight> of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>are connected with outputs of the MUX <highlight><bold>22</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>respectively, and the data inputs id of the both register blocks are connected with i<highlight><bold>40</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. In case of the function block using the logic function generator as shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, nothing corresponds to i<highlight><bold>40</bold></highlight> and a separate input selection unit is provided and its output is input to id. The output out of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>are input to the output selector units <highlight><bold>5</bold></highlight>_<highlight><bold>0</bold></highlight> and <highlight><bold>5</bold></highlight>_<highlight><bold>1</bold></highlight>, respectively. On the other hand, the output ofb of the register blocks <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>is input to the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight> not connected to the i<highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0529" lvl="0"><number>&lsqb;0529&rsqb;</number> Next, explanation will be given on the effect of the programmable function cell of <cross-reference target="DRAWINGS">FIG. 91</cross-reference>. One function block of the present invention can realize a 4-2 adder and by using it, it is possible to constitute a compact multiplier, which is a significant feature of iL. In general, a multiplier is composed by connecting computation blocks in multi-stages and accordingly, a signal transfer delay from the first input to the last output is fairly large. For this, a pipeline register is often inserted between some computation blocks so as to operate even with a high clock frequency. </paragraph>
<paragraph id="P-0530" lvl="0"><number>&lsqb;0530&rsqb;</number> And now, as is seen from <cross-reference target="DRAWINGS">FIG. 34</cross-reference>, in order to insert a pipeline register between the computation blocks (i.e., between rows in <cross-reference target="DRAWINGS">FIG. 34</cross-reference>), in addition to the outputs os and oc, a register should also be inserted with respect to multiplicand data xk per one 4-2 adder. However, when only two register blocks are present per one programmable function cell as in <cross-reference target="DRAWINGS">FIG. 91</cross-reference> (or <cross-reference target="DRAWINGS">FIG. 12</cross-reference>), the number of registers is insufficient. This problem can be solved by inserting a pipeline register between every other computation blocks. <cross-reference target="DRAWINGS">FIG. 93</cross-reference> shows the example. </paragraph>
<paragraph id="P-0531" lvl="0"><number>&lsqb;0531&rsqb;</number> Pipelined multiplier </paragraph>
<paragraph id="P-0532" lvl="0"><number>&lsqb;0532&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 93</cross-reference> is a circuit diagram showing a configuration example of a pipelined multiplier. In the figure, i in x<highlight><subscript>i</subscript></highlight>, x<highlight><subscript>i&plus;1</subscript></highlight>, . . . x<highlight><subscript>i&plus;5 </subscript></highlight>is an integer. </paragraph>
<paragraph id="P-0533" lvl="0"><number>&lsqb;0533&rsqb;</number> A pipeline registers is inserted between an odd-numbered row (for example, the first row) and the following even-numbered row (for example, the second row) and no pipeline register is inserted between an even-numbered rows (for example, the second row) and the following odd numbered row (for example, the third row). The 2AND4-2 adder <highlight><bold>27</bold></highlight> is implemented in each of the programmable function cells (for example, <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>). The outputs oc and os of 2AND4-2 adder <highlight><bold>27</bold></highlight> of the odd-numbered row (for example, the one implemented in the programmable function cell <highlight><bold>1</bold></highlight><highlight><italic>a</italic></highlight>) respectively pass through the register <highlight><bold>38</bold></highlight>. Each bit x<highlight><subscript>k </subscript></highlight>(k is an integer) of the multiplicand data passes through the register <highlight><bold>38</bold></highlight> of the programmable function cell (for example <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>) of the even-numbered row before being supplied to the programmable function cell of a corresponding row. The outputs oc and os of the 2AND4-2 adder <highlight><bold>27</bold></highlight> implemented in a programmable function cell of the even-numbered row (for example, <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>) are transferred to the subsequent stage without passing through the register. Thus, the pipeline register is inserted between every other computation blocks. </paragraph>
<paragraph id="P-0534" lvl="0"><number>&lsqb;0534&rsqb;</number> Here, in the programmable function cell of the even-numbered row (for example, <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>) has two outputs oc and os not passing through the register and an output x<highlight><subscript>k </subscript></highlight>being output simply through the register without any logic processing on input. The former uses a route from i<highlight><bold>1</bold></highlight> of the register block <highlight><bold>42</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 92</cross-reference>) to out bypassing the D-FF <highlight><bold>38</bold></highlight> and the latter uses a route from id through the D-FF to ofb. By using the register block <highlight><bold>42</bold></highlight> in this way, it is possible to realize the even-numbered rows of <cross-reference target="DRAWINGS">FIG. 93</cross-reference>. More specifically, the flow of x<highlight><subscript>k </subscript></highlight>is as follows: in the programmable function cell <highlight><bold>1</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 91, x</cross-reference> passes from the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>0</bold></highlight> through i<highlight><bold>40</bold></highlight> and from id of the register block (<highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>or <highlight><bold>4</bold></highlight><highlight><italic>b</italic></highlight>) to ofb so as to be fed to the input selection unit (<highlight><bold>3</bold></highlight> <highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight>). </paragraph>
<paragraph id="P-0535" lvl="0"><number>&lsqb;0535&rsqb;</number> As has been described above, by using the programmable function cell of <cross-reference target="DRAWINGS">FIG. 91</cross-reference>, it is possible to constitute a pipelined multiplier. With a progress in the process technique and the like, currently, it is possible to make a reconfigurable device of a very high speed and accordingly, it is possible to obtain a sufficiently high speed operation by inserting a pipeline register only in every other stage (instead of inserting in every stage). </paragraph>
<paragraph id="P-0536" lvl="0"><number>&lsqb;0536&rsqb;</number> In computing and signal processing, multi-bit data is used in most cases. In general, a calculator processing such multi-bit data is composed of a computation block in which a 1-bit calculation unit is arranged in one row in the bit arrangement direction. In this specification also, examples of such computation blocks have been described: the multi-bit 4-2 adder circuit <highlight><bold>45</bold></highlight>_k (k is an integer) constituting multi-bit multi-argument addition (<cross-reference target="DRAWINGS">FIG. 18</cross-reference>), the multi-bit 4AND4-2 adder <highlight><bold>26</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 30</cross-reference>) constituting a certain multiplier, the multi-bit 2AND4-2 adder (rows of <cross-reference target="DRAWINGS">FIG. 30</cross-reference> except the fifth row) constituting other type of multiplier, rows constituting a barrel shifter (<cross-reference target="DRAWINGS">FIG. 44</cross-reference>), rows constituting the pipelined multiplier (<cross-reference target="DRAWINGS">FIG. 93</cross-reference>), and the like. Moreover, besides these examples, as exemplified below, a computation block having one row of calculation units, each having a certain logic gate attached to the input of the 1-bit full adder, is used very often. </paragraph>
<paragraph id="P-0537" lvl="0"><number>&lsqb;0537&rsqb;</number> Multi-bit adder/subtractor </paragraph>
<paragraph id="P-0538" lvl="0"><number>&lsqb;0538&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 94</cross-reference> is a circuit diagram showing a configuration example of a multi-bit adder/subtractor. This uses a 1-bit full adder <highlight><bold>43</bold></highlight> having one argument input b connected with the output of the XOR <highlight><bold>30</bold></highlight> as a calculation unit, which is connected in one row as shown in the figure. The circuit of <cross-reference target="DRAWINGS">FIG. 90</cross-reference> serves as a multi-bit adder when the common input <highlight><bold>70</bold></highlight> connected to one of the inputs of the XOR <highlight><bold>30</bold></highlight> of all the calculation units is a logical value of 0, and as a multi-bit subtractor when the common input <highlight><bold>70</bold></highlight> is a logical value of 1. This multi-bit adder/subtractor is one of the computation blocks that are used most often. </paragraph>
<paragraph id="P-0539" lvl="0"><number>&lsqb;0539&rsqb;</number> MUX-equipped multi-bit adder </paragraph>
<paragraph id="P-0540" lvl="0"><number>&lsqb;0540&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 95</cross-reference> is a circuit diagram showing a configuration example of a MUX-equipped multi-bit adder. This uses the 1-bit full adder <highlight><bold>43</bold></highlight> having one argument input b connected with the output of the MUX <highlight><bold>22</bold></highlight> as a calculation unit, which is connected in one row as shown in the figure. The circuit of <cross-reference target="DRAWINGS">FIG. 95</cross-reference> is a computation block in which the argument input fed to the full adder is changed in accordance with the logical value of the common input <highlight><bold>70</bold></highlight> connected to the control input of the MUX <highlight><bold>22</bold></highlight> of all the calculation units. This is used for a conditioned calculation. </paragraph>
<paragraph id="P-0541" lvl="0"><number>&lsqb;0541&rsqb;</number> Overflow processing </paragraph>
<paragraph id="P-0542" lvl="0"><number>&lsqb;0542&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 96</cross-reference> is a circuit diagram showing a configuration example of an overflow processor composed of OR&apos;s arranged in one row. The circuit of <cross-reference target="DRAWINGS">FIG. 96</cross-reference> is a computation block in which when the common input <highlight><bold>70</bold></highlight> connected to one of the inputs of all the OR <highlight><bold>33</bold></highlight> is a logical value of 0, the other input of the OR <highlight><bold>33</bold></highlight> is directly output, and when the common input <highlight><bold>70</bold></highlight> is a logical value of 1, a logical value of 1 is output. This is used for overflow processing. </paragraph>
<paragraph id="P-0543" lvl="0"><number>&lsqb;0543&rsqb;</number> As has been described above, in the multi-bit data processing, a computation block often used is such that certain calculation units are arranged in one row and further a common input to all the calculation units is provided. If such a computation block is implemented in the conventional FPGA, a great waste is caused. Because in the conventional FPGA, all the programmable function cells have their own configuration memories and can be configured separately but in the case of the aforementioned computation block, the calculation units have an identical function and need not be configured separately. Furthermore, the conventional programmable function cells have separate input selection units but in the case of the aforementioned common input, an input can be supplied from one input selection unit to all the calculation units in the computation block. </paragraph>
</section>
<section>
<heading lvl="1">24. Programmable Function Cell Row </heading>
<paragraph id="P-0544" lvl="0"><number>&lsqb;0544&rsqb;</number> Next, explanation will be given on a programmable function cell row for effectively realizing a computation block for the aforementioned multi-bit data processing. </paragraph>
<paragraph id="P-0545" lvl="0"><number>&lsqb;0545&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 97</cross-reference> is a block diagram showing a part of a programmable cell row according to the present invention. The programmable function cell row is composed of a plurality of programmable function cells arranged in one row. <cross-reference target="DRAWINGS">FIG. 97</cross-reference> shows, as an example, the most significant part (including programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight> and <highlight><bold>1</bold></highlight>_<highlight><bold>7</bold></highlight> corresponding to significant two bits) of a programmable function cell row consisting of eight programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0546" lvl="0"><number>&lsqb;0546&rsqb;</number> In general, as shown in <cross-reference target="DRAWINGS">FIG. 97, a</cross-reference> reconfigurable device consists of an interconnection wire group <highlight><bold>2</bold></highlight> running vertically and horizontally and programmable function cells arranged in a two-dimensional array state. An intersection <highlight><bold>56</bold></highlight> of the interconnection wire group running vertically and the interconnection wire group running horizontally is in general connected by a programmable switch <highlight><bold>10</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 98</cross-reference>. </paragraph>
<paragraph id="P-0547" lvl="0"><number>&lsqb;0547&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 98</cross-reference> is a circuit diagram showing an example of the intersection of the interconnection wire group running vertically and the interconnection wire group running horizontally. In the intersection <highlight><bold>56</bold></highlight>, there are provided a programmable switch <highlight><bold>10</bold></highlight><highlight><italic>c </italic></highlight>for connecting wires running vertically, a programmable switch <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>for connecting wires running horizontally, and a programmable switch <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>for connecting a wire running horizontally and a wire running vertically. <cross-reference target="DRAWINGS">FIG. 98</cross-reference> shows only one example of connections by the programmable switch and the invention is not limited to this connection. </paragraph>
<paragraph id="P-0548" lvl="0"><number>&lsqb;0548&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, inputs i<highlight><bold>12</bold></highlight> and i<highlight><bold>02</bold></highlight> of all the function blocks <highlight><bold>4</bold></highlight> of the programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight> arranged in one row are connected to common lines <highlight><bold>64</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>65</bold></highlight><highlight><italic>b</italic></highlight>, respectively. And the common lines <highlight><bold>64</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>65</bold></highlight><highlight><italic>b </italic></highlight>are connected to outputs of the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>7</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>3</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0549" lvl="0"><number>&lsqb;0549&rsqb;</number> The input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>7</bold></highlight> selects an output signal in accordance with configuration from the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>64</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit. The input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>3</bold></highlight> selects an output signal in accordance with configuration from the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>65</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit if any. Thus, by supplying some inputs of the function block <highlight><bold>4</bold></highlight> from the common input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>7</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>3</bold></highlight>, it is possible to reduce the number of input selection units occupying a large area. </paragraph>
<paragraph id="P-0550" lvl="0"><number>&lsqb;0550&rsqb;</number> In case of <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, the number of selection units in each programmable function cell is smaller by 2 as compared to the case when no common input is used (<cross-reference target="DRAWINGS">FIG. 91</cross-reference>). Any inputs of the function block <highlight><bold>4</bold></highlight> can be made common. However, when an MUX is included as the preposition logic circuit as in the examples of <cross-reference target="DRAWINGS">FIG. 86</cross-reference> and <cross-reference target="DRAWINGS">FIG. 50</cross-reference>, it is most preferable to make its control input common. This is because a common control input is used often as shown in <cross-reference target="DRAWINGS">FIG. 95</cross-reference> and <cross-reference target="DRAWINGS">FIG. 44</cross-reference>. </paragraph>
<paragraph id="P-0551" lvl="0"><number>&lsqb;0551&rsqb;</number> Moreover, as is seen from <cross-reference target="DRAWINGS">FIG. 28</cross-reference>, when using the MUX as a 2-input logic circuit such as AND and OR, the control input becomes an input common to all the 2-input logic circuit. Accordingly, when the MUX control input is made common, it is possible to form a circuit in which one of the OR inputs is made common as in <cross-reference target="DRAWINGS">FIG. 96</cross-reference> and a circuit in which one of the AND inputs is made common as in <cross-reference target="DRAWINGS">FIG. 34</cross-reference> and <cross-reference target="DRAWINGS">FIG. 30</cross-reference>. Thus, it is the most useful example to make the control input of the MUX of the preposition logic circuit common among the inputs in the function block <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0552" lvl="0"><number>&lsqb;0552&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 97</cross-reference> shows an example in which the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 86</cross-reference> is used and its i<highlight><bold>02</bold></highlight> and i<highlight><bold>12</bold></highlight> are made common but the function block <highlight><bold>4</bold></highlight> is not limited to this and may be another one (the number of input selection units used varies depending on the function block used). </paragraph>
<paragraph id="P-0553" lvl="0"><number>&lsqb;0553&rsqb;</number> Moreover, although not depicted in <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, like i<highlight><bold>50</bold></highlight> and i<highlight><bold>51</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 17</cross-reference> and <cross-reference target="DRAWINGS">FIG. 79</cross-reference>, the control input of the MUX other than the preposition logic circuit (the one supplied with not a fixed logical value by the configuration memory but a dynamic signal) should also be supplied by a common input in the same way as has been described above. </paragraph>
<paragraph id="P-0554" lvl="0"><number>&lsqb;0554&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, reference numerals <highlight><bold>64</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>65</bold></highlight><highlight><italic>a </italic></highlight>denote common lines of the programmable function cell row arranged at a node upper by one. For example, when the common line <highlight><bold>64</bold></highlight><highlight><italic>a </italic></highlight>is selected by the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>7</bold></highlight>, the same signal as to the common line <highlight><bold>64</bold></highlight><highlight><italic>a </italic></highlight>is transmitted to the common line <highlight><bold>64</bold></highlight><highlight><italic>b</italic></highlight>. Accordingly, it is possible to control two programmable function cell rows arranged vertically with the common input, so as to use them as one longer programmable function cell row (having twice the bit width). </paragraph>
<paragraph id="P-0555" lvl="0"><number>&lsqb;0555&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, in all the output blocks <highlight><bold>5</bold></highlight> of the programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight> arranged in one row, the inputs ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight> are connected to the common lines <highlight><bold>67</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>66</bold></highlight><highlight><italic>b</italic></highlight>, respectively, and the common lines <highlight><bold>67</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>66</bold></highlight><highlight><italic>b </italic></highlight>are connected to outputs of the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>9</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>10</bold></highlight>, respectively. </paragraph>
<paragraph id="P-0556" lvl="0"><number>&lsqb;0556&rsqb;</number> The input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>9</bold></highlight> selects an output signal in accordance with the configuration from the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>67</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit. The input selection unit <highlight><bold>3</bold></highlight> <highlight><bold>10</bold></highlight> selects an output signal in accordance with the configuration from the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>66</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit. Here, the inputs ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight> of the output block <highlight><bold>5</bold></highlight> are the control inputs ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight> of the register block in the output block <highlight><bold>5</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 91</cross-reference>). </paragraph>
<paragraph id="P-0557" lvl="0"><number>&lsqb;0557&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 97</cross-reference> shows that no input block is provided in the output block <highlight><bold>5</bold></highlight> and ct<highlight><bold>11</bold></highlight> and ct<highlight><bold>12</bold></highlight> of the register block are supplied with inputs from outside the output block. IN <cross-reference target="DRAWINGS">FIG. 91</cross-reference>, two register blocks <highlight><bold>42</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>42</bold></highlight><highlight><italic>b </italic></highlight>are provided in the output block <highlight><bold>5</bold></highlight> and various methods can be obtained: only one of the control inputs is supplied from outside (the remaining is controlled by the inner input block); both are supplied with the same control input; or total of four control inputs are all supplied from outside independently. <cross-reference target="DRAWINGS">FIG. 97</cross-reference> shows an example that two control inputs are supplied from outside. Here, the number of control inputs of the register block (i.e., control input of the D-FF) is not necessarily limited to two. </paragraph>
<paragraph id="P-0558" lvl="0"><number>&lsqb;0558&rsqb;</number> As in <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, by supplying a control signal of the register block from the common input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>9</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>10</bold></highlight>, it is possible to reduce the number of input blocks in the register block occupying a large area. In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, reference numerals <highlight><bold>67</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>66</bold></highlight><highlight><italic>a </italic></highlight>denote common lines of the programmable function cell row arranged at one-node upper position. For example, when the common line <highlight><bold>67</bold></highlight><highlight><italic>a </italic></highlight>is selected by the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>9</bold></highlight>, the same signal as to the <highlight><bold>67</bold></highlight><highlight><italic>a </italic></highlight>is transmitted to the common line <highlight><bold>67</bold></highlight><highlight><italic>b</italic></highlight>. Accordingly, it is possible to control the programmable function cell rows arranged vertically with the common input so as to use them as one longer programmable function cell row (twice the bit width). </paragraph>
<paragraph id="P-0559" lvl="0"><number>&lsqb;0559&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>4</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight> of the programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight> arranged in one row have the common lines <highlight><bold>69</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>68</bold></highlight><highlight><italic>b</italic></highlight>, respectively, as one of inputs, and the common lines <highlight><bold>69</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>68</bold></highlight><highlight><italic>b </italic></highlight>are connected to output of the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>12</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>11</bold></highlight>, respectively. The input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>12</bold></highlight> selects an output signal in accordance with the configuration front the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>69</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit. The input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>11</bold></highlight> selects an output signal in accordance with the configuration from the interconnection wire group <highlight><bold>2</bold></highlight>, the common line <highlight><bold>68</bold></highlight><highlight><italic>a</italic></highlight>, and, if exists, a fixed logical value (not indispensable) in the input selection unit. </paragraph>
<paragraph id="P-0560" lvl="0"><number>&lsqb;0560&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight> having the common input is connected to the input i<highlight><bold>13</bold></highlight> of the function block <highlight><bold>4</bold></highlight>. When the function block <highlight><bold>4</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 86</cross-reference>) is used in the full adder mode, as can be seen from its equivalent circuit (<cross-reference target="DRAWINGS">FIG. 74</cross-reference>(<highlight><bold>1</bold></highlight>)), the input i<highlight><bold>13</bold></highlight> corresponds to one of the inputs of the XOR attached to the input of the full adder. Accordingly, when the programmable function cell row is used as an adder/subtractor as in <cross-reference target="DRAWINGS">FIG. 94</cross-reference>, the common line <highlight><bold>68</bold></highlight><highlight><italic>b </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 97</cross-reference> serves as the common input <highlight><bold>70</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 94</cross-reference>. </paragraph>
<paragraph id="P-0561" lvl="0"><number>&lsqb;0561&rsqb;</number> On the other hand, as in <cross-reference target="DRAWINGS">FIG. 93</cross-reference>, when the 2AND4-2 adder <highlight><bold>27</bold></highlight> is implemented in each of the programmable function cells (for example, <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1</bold></highlight><highlight><italic>b</italic></highlight>), the input i<highlight><bold>13</bold></highlight> of the function block <highlight><bold>4</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 86</cross-reference>) corresponds to input i<highlight><bold>2</bold></highlight> of the 2AND4-2 adder <highlight><bold>27</bold></highlight> and is not connected to the common input. In this case, an input is selected from the interconnection wire group <highlight><bold>2</bold></highlight> by the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0562" lvl="0"><number>&lsqb;0562&rsqb;</number> Moreover, when using the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 77</cross-reference>, it is possible to exchange the roles of the inputs i<highlight><bold>13</bold></highlight> and i<highlight><bold>03</bold></highlight> in accordance with a logical value fed to i<highlight><bold>50</bold></highlight>. In this case, by providing the input selection method of i<highlight><bold>31</bold></highlight> for the input i<highlight><bold>30</bold></highlight>, these inputs have a preferably symmetry and an application circuit can easily be implemented. The aforementioned i<highlight><bold>12</bold></highlight> and i<highlight><bold>02</bold></highlight> are examples of inputs connected only to the common input while i<highlight><bold>113</bold></highlight> and i<highlight><bold>03</bold></highlight> are input examples using both of the common input and the interconnection wire group. </paragraph>
<paragraph id="P-0563" lvl="0"><number>&lsqb;0563&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97, 69</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>68</bold></highlight><highlight><italic>a </italic></highlight>are common lines of the programmable function cell row arranged at a one-node upper position. For example, when the common line <highlight><bold>68</bold></highlight><highlight><italic>a </italic></highlight>is selected by the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>11</bold></highlight>, the same signal as to the common line <highlight><bold>68</bold></highlight><highlight><italic>a </italic></highlight>is transmitted to the common line <highlight><bold>68</bold></highlight><highlight><italic>b</italic></highlight>. Accordingly, it is possible to supply the same common input to the input selection unit <highlight><bold>3</bold></highlight>_<highlight><bold>8</bold></highlight> of the programmable function cell rows arranged vertically, so as to use them as one longer programmable function cell row (having twice the bit width). </paragraph>
<paragraph id="P-0564" lvl="0"><number>&lsqb;0564&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, the input selection units <highlight><bold>3</bold></highlight>_<highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>2</bold></highlight>, <highlight><bold>3</bold></highlight>_<highlight><bold>5</bold></highlight> and <highlight><bold>3</bold></highlight>_<highlight><bold>6</bold></highlight> of the programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>1</bold></highlight> to <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight> arranged in one row are respectively connected to the common configuration memory group <highlight><bold>59</bold></highlight>. </paragraph>
<paragraph id="P-0565" lvl="0"><number>&lsqb;0565&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 99</cross-reference> is a circuit diagram for explaining the common configuration memory group. <cross-reference target="DRAWINGS">FIG. 99</cross-reference> shows only those portions that are necessary for explaining the common configuration memory group <highlight><bold>59</bold></highlight>. For example, in the programmable function cells <highlight><bold>1</bold></highlight>_<highlight><bold>7</bold></highlight> and <highlight><bold>1</bold></highlight>_<highlight><bold>8</bold></highlight>, only the input selection unit <highlight><bold>3</bold></highlight>_k related to one common configuration memory group <highlight><bold>59</bold></highlight> is depicted. Here, as the input selection unit <highlight><bold>3</bold></highlight>_k, the example of <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is used but the input selection unit is not limited to this. </paragraph>
<paragraph id="P-0566" lvl="0"><number>&lsqb;0566&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 99</cross-reference>, each of a control input of the input selection unit <highlight><bold>3</bold></highlight>_k having a certain fixed value (<highlight><bold>21</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 26</cross-reference>) and a fixed logical value (supplied by the memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 26</cross-reference>) is made common over all the programmable function cells in the programmable function cell row and supplied from the respective memories <highlight><bold>13</bold></highlight> of the common configuration memory group <highlight><bold>59</bold></highlight>. </paragraph>
<paragraph id="P-0567" lvl="0"><number>&lsqb;0567&rsqb;</number> As has been described above, in the multi-bit data processing, most of the computation blocks are made from a calculation unit of an identical function. Accordingly, as shown in <cross-reference target="DRAWINGS">FIG. 99</cross-reference>, there is no problem if a fixed logical value determining the function of the function block is made common in the programmable junction cell row. This eliminates an unnecessary memory. Moreover, identical calculation units are arranged within a computation block and a connection with the other computation block is also regular, i.e., wires of identical connection are arranged (for example, <cross-reference target="DRAWINGS">FIG. 93</cross-reference>). Accordingly, as is shown in <cross-reference target="DRAWINGS">FIG. 99</cross-reference>, there is no problem if the control unit of the input selection unit <highlight><bold>3</bold></highlight>_k is made common in the programmable function cell row. This can eliminate an unnecessary configuration memory. </paragraph>
<paragraph id="P-0568" lvl="0"><number>&lsqb;0568&rsqb;</number> Moreover, in general, a configuration memory is present in the function block <highlight><bold>4</bold></highlight> like the configuration memory in the logic function generator <highlight><bold>40</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and <highlight><bold>13</bold></highlight><highlight><italic>d </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>h </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 77</cross-reference>. This is also preferably made common to obtain a high efficiency like the configuration input cm of the function block <highlight><bold>4</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 97</cross-reference> in the multi-bit data processing using all the function blocks in the programmable function cell row as having an identical function. </paragraph>
<paragraph id="P-0569" lvl="0"><number>&lsqb;0569&rsqb;</number> The same can be said for the output block <highlight><bold>5</bold></highlight>. Like <highlight><bold>13</bold></highlight><highlight><italic>t </italic></highlight>and <highlight><bold>13</bold></highlight><highlight><italic>s </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 92</cross-reference>, in general, several configuration memories are also present in the output block <highlight><bold>5</bold></highlight>. These are also preferably made common to obtain a high efficiency like the configuration input cm of the output block <highlight><bold>5</bold></highlight> of FIG., <highlight><bold>97</bold></highlight> for the multi-bit data processing. </paragraph>
<paragraph id="P-0570" lvl="0"><number>&lsqb;0570&rsqb;</number> There is no need of making common all the configuration memories in the programmable function cell row. For example, like <cross-reference target="DRAWINGS">FIG. 97</cross-reference>, (most of) the configuration memories of the input selection unit are made common but a separate configuration memory is provided in the output selector unit in the output block <highlight><bold>5</bold></highlight>, thereby allowing a slight variety of the programmable function cell, which is useful when implementing various circuits. </paragraph>
<paragraph id="P-0571" lvl="0"><number>&lsqb;0571&rsqb;</number> A ripple carry terminal block <highlight><bold>57</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 97</cross-reference> is to feed a ripple carry input of the least significant bit of the programmable function cell row. An input irc of the ripple carry terminal block <highlight><bold>57</bold></highlight> is connected with a ripple carry output from the lower-node programmable function cell row, inputs in<highlight><bold>0</bold></highlight> and in<highlight><bold>1</bold></highlight> is respectively connected with common lines <highlight><bold>69</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>68</bold></highlight><highlight><italic>a </italic></highlight>of the upper-node programmable function cell row, and an output orc is connected to a ripple carry input of the upper-node programmable function cell row. </paragraph>
<paragraph id="P-0572" lvl="0"><number>&lsqb;0572&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 100</cross-reference> is a circuit diagram showing a configuration example of the ripple carry terminal block <highlight><bold>57</bold></highlight>. In accordance with configuration of the memory-equipped 3-input MUX <highlight><bold>23</bold></highlight>, a fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a</italic></highlight>, a ripple carry signal that has risen from a lower node, or an output of the MUX <highlight><bold>22</bold></highlight> is selected and output to orc. </paragraph>
<paragraph id="P-0573" lvl="0"><number>&lsqb;0573&rsqb;</number> When the upper-node programmable function cell row is used as a full adder, a logical value of 1 is supplied from the fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>to orc. When the upper-node programmable function cell row is used as a subtractor, a logical value of 0 is supplied from the fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>to orc. When the lower-node and the upper-node programmable function cell rows are connected so as to be used as one computation block, irc of the ripple carry terminal block <highlight><bold>57</bold></highlight> is output to orc. When the upper-node programmable function cell row is used as an adder/subtractor like <cross-reference target="DRAWINGS">FIG. 94</cross-reference>, in<highlight><bold>0</bold></highlight> or in<highlight><bold>1</bold></highlight> of the ripple carry terminal block <highlight><bold>57</bold></highlight> is selected by the MUX <highlight><bold>22</bold></highlight> and is output to orc. This is because, as has been described above, the common line <highlight><bold>68</bold></highlight> or <highlight><bold>69</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 97</cross-reference> is equivalent to the common line <highlight><bold>70</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 94</cross-reference>. </paragraph>
<paragraph id="P-0574" lvl="0"><number>&lsqb;0574&rsqb;</number> A 4-2 carry terminal block <highlight><bold>58</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 97</cross-reference> is to feed a 4-2 carry input of the least significant bit of the programmable function cell row. An input i<highlight><bold>42</bold></highlight> of the 4-2 carry terminal block <highlight><bold>58</bold></highlight> is connected with a 4-2 carry output from the lower-node programmable function cell row, and an output o<highlight><bold>42</bold></highlight> is connected to a 4-2 carry input of the upper-node programmable function cell row. </paragraph>
<paragraph id="P-0575" lvl="0"><number>&lsqb;0575&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 101</cross-reference> is a circuit diagram showing a configuration example of the 4-2 carry block <highlight><bold>58</bold></highlight>. In accordance with a content of the configuration memory <highlight><bold>13</bold></highlight><highlight><italic>c </italic></highlight>controlling the MUX <highlight><bold>22</bold></highlight>, a fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>or a 4-2 carry signal that has risen from a lower node is selected and is output to o<highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0576" lvl="0"><number>&lsqb;0576&rsqb;</number> When the upper-node programmable function cell row is used as a 4-2 adder for adding all the four argument inputs, a logical value of 0 is supplied from the fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>to o<highlight><bold>42</bold></highlight>. When the upper-node programmable function cell row is used as a subtractor for subtracting one argument input, a logical value of 1 is supplied from the fixed logical value memory <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>to o<highlight><bold>42</bold></highlight>. When the lower-node and the upper-node programmable function cell rows are connected so as to be used as one computation block, i<highlight><bold>42</bold></highlight> of the 4-2 carry terminal block <highlight><bold>58</bold></highlight> is output to o<highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0577" lvl="0"><number>&lsqb;0577&rsqb;</number> As has been described above, by using the programmable function cell row according to the embodiment of the present invention, it is possible to effectively implement a computation block used for multi-bit data processing. Furthermore, a plurality of programmable function cell rows can be connected so as to create a programmable function cell row of more bits. </paragraph>
<paragraph id="P-0578" lvl="0"><number>&lsqb;0578&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 102</cross-reference> is a layout showing an example of reconfigurable device in which the programmable function cells are arranged. This includes an arithmetic logic unit (ALU) <highlight><bold>75</bold></highlight> composed of an n-bit programmable function cell row <highlight><bold>72</bold></highlight> and m-bit programmable function cell rows <highlight><bold>73</bold></highlight> and arranged in a two-dimensional array, and a peripheral block <highlight><bold>74</bold></highlight> arranged around the array. Here, in general m&lt;&lt;n and the usability is especially high when m&equals;1. The n may be 4, 8, 16, 32 and the like for a high usability. </paragraph>
<paragraph id="P-0579" lvl="0"><number>&lsqb;0579&rsqb;</number> In the ALU <highlight><bold>75</bold></highlight>, one or a small number of (two in the example of <cross-reference target="DRAWINGS">FIG. 102</cross-reference>) m-bit programmable function cell rows <highlight><bold>73</bold></highlight> is arranged at the uppermost-node position. In general, even in the case of a regular computation block for multi-bit data processing, the end portion often breaks the regularity. The m-bit programmable function cell row <highlight><bold>73</bold></highlight> is useful for implementing such a portion. Moreover, this is also used when creating various flags and performing various processing. The two-dimensional array of ALU is a portion suitable for implementing a multi-bit data path and occupies the most area of the reconfigurable device. </paragraph>
<paragraph id="P-0580" lvl="0"><number>&lsqb;0580&rsqb;</number> On the other hand, in the peripheral block <highlight><bold>74</bold></highlight>, a programmable function cell which can be configured independently by one bit is arranged. This is where a random logic is mainly implemented and suitable for creating a data path control system. Such a reconfigurable device can effectively implement a large-scale circuit including multi-bit data processing as compared to the conventional FPGA in which programmable function cells independently configurable are arranged over the entire surface. </paragraph>
<paragraph id="P-0581" lvl="0"><number>&lsqb;0581&rsqb;</number> The present invention has a first advantage to provide a function block capable of constituting a compact high-speed multiplier. This is because it is possible to realize an AND-equipped 4-2 adder as a multiplier constituting unit by one function block. Thus, it is possible to constitute a multiplier by using half the number of programmable function cells used conventionally. </paragraph>
<paragraph id="P-0582" lvl="0"><number>&lsqb;0582&rsqb;</number> The present invention has a second advantage to provide a function block capable of constituting a compact multi-input MUX. This is because by utilizing the MUX used as a preposition logic circuit, it is possible to create a 4-input or more-input MUX by one function block. Thus, it is possible to constitute a 4-input MUX by using one-half the number of programmable function cells used conventionally. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A function block comprising; 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating a logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth logical input signals; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce a carry output signal; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output signal and the fourth signal to produce an output of the function block. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry exclusive OR circuit for performing an exclusive OR function on the third and fourth logical input signals; and </claim-text>
<claim-text>a 4-2 carry multiplexer for selecting either the second logical input signal or one of inputs of the 4-2 carry exclusive OR circuit to produce the 4-2 carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the logical function generator generates a 4-input/1-output exclusive OR function according to the configuration data. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first signal generator outputs as the first signal the logical output signal of the logical function generator. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first signal generator comprises: 
<claim-text>a first selector for selecting one of at least a first control signal and the logical output signal to output it as the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the selector selects the second signal as the carry output signal when the first signal is the first control signal. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the first control signal is a dynamic signal that is not fixed. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second signal generator outputs the first logical input signal as the second signal. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second signal generator comprises: 
<claim-text>a second selector for selecting one from at least two ones of the first, second, third, and fourth logical input signals to output it as the second signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the second selector comprises at least one multiplexer controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the third signal generator outputs the 4-2 carry input signal as the third signal. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the third signal generator comprises: 
<claim-text>a third selector for selecting a signal from a first multiple-signal group including at least one of the first to fourth logical input signals and the 4-2 carry input signal, to output the selected signal as the third signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the first multiple-signal group further includes another signal. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the fourth signal generator outputs the 4-2 carry input signal as the fourth signal. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the fourth signal generator comprises: 
<claim-text>a fourth selector for selecting a signal from a second multiple-signal group including at least the 4-2 carry input signal, to output the selected signal as the fourth signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the second multiple-signal group includes a fixed logical value. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the third signal generator comprises: 
<claim-text>a third selector for selecting a signal from a first multiple-signal group including at least one of the first to fourth logical input signals and the 4-2 carry input signal, to output the selected signal as the third signal; and </claim-text>
</claim-text>
<claim-text>the fourth signal generator comprises: 
<claim-text>a fourth selector for selecting a signal from a second multiple-signal group including at least the 4-2 carry input signal, to output the selected signal as the fourth signal, </claim-text>
</claim-text>
<claim-text>wherein the third selector and the fourth selector are one and same circuit, wherein the first multiple-signal group is identical to the second multiple-signal group. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the third signal generator comprises: 
<claim-text>a third selector for selecting a signal from a first multiple-signal group including at least one of the first to fourth logical input signals and the 4-2 carry input signal, to output the selected signal as the third signal; and </claim-text>
</claim-text>
<claim-text>the fourth signal generator comprises: 
<claim-text>a fourth selector for selecting a signal from a second multiple-signal group including at least the 4-2 carry input signal, to output the selected signal as the fourth signal, </claim-text>
</claim-text>
<claim-text>wherein the fourth selector includes the third selector, wherein the second multiple-signal group includes the first multiple-signal group. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the third signal generator comprises: 
<claim-text>a third selector for selecting a signal from a first multiple-signal group including at least one of the first to fourth logical input signals and the 4-2 carry input signal, to output the selected signal as the third signal; and </claim-text>
</claim-text>
<claim-text>the fourth signal generator comprises: 
<claim-text>a fourth selector for selecting a signal from a second multiple-signal group including at least the 4-2 carry input signal, to output the selected signal as the fourth signal, </claim-text>
</claim-text>
<claim-text>wherein at least one of the first multiple-signal group and the second multiple-signal group includes a ripple carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry generator for generating a ripple carry output signal based on at least a ripple carry input signal and at least two ones of the first to fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the ripple carry generator is a ripple carry multiplexer for selecting either one of the first to fourth logical input signals or the ripple carry input signal depending on the logical output signal, to output a selected one as the ripple carry output signal. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the ripple carry generator is a ripple carry block for producing the ripple carry output signal from two ones of the first to fourth logical input signals, the logical output signal, and the ripple carry input signal. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising; 
<claim-text>a preposition circuit connected to at least one of the four logical input terminals, wherein the preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein a logical function of the preposition circuit is determined depending on configuration data. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein a logical function of the preposition circuit is determined based on a dynamic signal and a fixed logical value on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the preposition circuit is a look-up table. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the preposition circuit is a multiplexer that is allowed to be controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the plurality of logical functions includes an AND function. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the preposition circuit is connected to at least two ones of the four logical input terminals. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein 
<claim-text>at least one of preposition circuits is a look-up table; and </claim-text>
<claim-text>at least another one of the preposition circuits is set to a logical function determined based on a signal selected in programmable fashion from a fixed logical value and a dynamic signal on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein at least two ones of the preposition circuits are each multiplexers that are allowed to be controlled by dynamic signals. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein at least two ones of the preposition circuits are allowed to be set to an AND function. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the preposition circuit is connected to each of the four logical input terminals. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein each of the preposition circuits is a multiplexer that is allowed to be controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein each of the preposition circuits is allowed to be set to an AND function. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A function cell allowing programmable connection to an interconnection wire group including a plurality of interconnection wires, comprising: 
<claim-text>a programmable input selector for selecting a plurality of input signals from the interconnection wire group; </claim-text>
<claim-text>a function block for generating a plurality of output signals including at least an addition output signal and a carry output signal from the plurality of input signals; and </claim-text>
<claim-text>a programmable output selector for selecting a plurality of interconnection wires from the interconnection wire group to output the plurality of output signals to respective ones of the selected interconnection wires, </claim-text>
<claim-text>wherein the function block comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating all logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth logical input signals; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce the carry output signal; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output signal and the fourth signal to produce the addition output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a programmable signal switch for routing at least the addition output signal and the carry output signal from input terminals to output terminals according to a state changeable between a straight connection state and a cross connection state; </claim-text>
<claim-text>a first output selection block for selectively outputting a first output signal of the programmable signal switch to a first wire group of the interconnection wire group; and </claim-text>
<claim-text>a second output selection block for selectively outputting a second output signal of the programmable signal switch to a second wire group of the interconnection wire group, wherein the second wire group is different from the first wire group. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a first programmable register block changeable between a direct transfer state and a temporal latch state of the addition output signal; </claim-text>
<claim-text>a second programmable register block changeable between a direct transfer state and a temporal latch state of the carry output signal; and </claim-text>
<claim-text>a signal transfer section connecting each of the first and second programmable register blocks to the function block without intervention of the interconnection wire group, </claim-text>
<claim-text>wherein, when each of the first and second programmable register blocks is set to the temporal latch state, an output signal of a corresponding one of the first and second programmable register blocks is transferred to the function block through the signal transfer section. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a programmable signal switch for routing at least the addition output signal and the carry output signal from input terminals to output terminals according to a state changeable between a straight connection state and a cross connection state; </claim-text>
<claim-text>a first programmable register block changeable between a direct transfer state and a temporal latch state of one of two outputs of the programmable signal switch; </claim-text>
<claim-text>a second programmable register block changeable between a direct transfer state and a temporal latch state of the other one of the two outputs of the programmable signal switch; </claim-text>
<claim-text>a first output selection block for selectively outputting a direct-transfer output of the first programmable register block to a first wire group of the interconnection wire group; </claim-text>
<claim-text>a second output selection block for selectively outputting a direct-transfer output of the second programmable register block to a second wire group of the interconnection wire group, wherein the second wire group is different from the first wire group; and </claim-text>
<claim-text>a signal transfer section connecting each of the first and second programmable register blocks to the function block without intervention of the interconnection wire group, wherein, a temporal-latch output signal of each of the first and second programmable register blocks is transferred to the function block through the signal transfer section. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A combined function block comprising a first function block and a second function block, wherein 
<claim-text>the first function block comprises: 
<claim-text>a logical function generator A having at least four logical input terminals and one logical output terminal, for generating an logical output signal A from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block A for generating a 4-2 carry output signal A from the second, third, and fourth logical input signals; </claim-text>
<claim-text>a first signal generator A for generating a first signal A from at least the logical output signal A; </claim-text>
<claim-text>a second signal generator A for generating a second signal A from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator A for generating a third signal A by selecting a signal as the third signal from a first multiple-signal group including at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator A for generating a fourth signal A by selecting a signal as the fourth signal from the second multiple-signal group including at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector A for selecting one of the second signal A and the third signal A depending on the first signal A to produce a carry output signal A; </claim-text>
<claim-text>an exclusive OR circuit A for performing an exclusive OR function on the logical output signal A and the fourth signal A to produce an exclusive OR result A; and </claim-text>
<claim-text>a first AND circuit for performing an AND function on the first logical input signal and one of the second to fourth logical input signals, and </claim-text>
</claim-text>
<claim-text>the second function block comprises: 
<claim-text>a logical function generator B having at least four logical input terminals and one logical output terminal, for generating an logical output signal B from fifth, sixth, seventh, and eighth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a4-2 carry block B for generating a 4-2 carry output signal B from the sixth, seventh, and eighth logical input signals; </claim-text>
<claim-text>a first signal generator B for generating a first signal B from at least the logical output signal B; </claim-text>
<claim-text>a second signal generator B for generating a second signal B from at least the fifth logical input signal; </claim-text>
<claim-text>a third signal generator B for generating a third signal B by selecting a signal as the third signal B from a third multiple-signal group including at least the 4-2 carry output signal A and an output of the first AND circuit; </claim-text>
<claim-text>a fourth signal generator B for generating a fourth signal B by selecting a signal as the fourth signal B from a fourth multiple-signal group including at least the 4-2 carry output signal A and the carry output signal A; </claim-text>
<claim-text>a selector B for selecting one of the second signal B and the third signal B depending on the first signal B to produce a carry output signal B; </claim-text>
<claim-text>an exclusive OR circuit B for performing an exclusive OR function on the logical output signal B and the fourth signal B to produce an exclusive OR result B; </claim-text>
<claim-text>a second AND circuit for performing an AND function on the logical output signal A and the logical output signal B; and </claim-text>
<claim-text>an AND-OR circuit for performing a logical OR function on the carry output signal B and an AND of an output signal of the second AND circuit and a ripple carry input signal, to produce a ripple carry output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>, wherein the AND-OR circuit comprises: 
<claim-text>a first NAND circuit for inputting the output signal of the second AND circuit and the ripple carry input signal; and </claim-text>
<claim-text>a second NAND circuit for inputting an output signal of the first NAND circuit and NOT of the carry output signal B to produce the ripple output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A function block comprising: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least three ones of the first to fourth logical input signals; </claim-text>
<claim-text>a carry block for generating a carry output signal from a multiple-signal group including a 4-2 carry input signal and at least one of the first to fourth logical input signals; </claim-text>
<claim-text>a first multiplexer which is controlled by a dynamic signal and supplies its output signal to the first logical input terminal; and </claim-text>
<claim-text>a second multiplexer which is controlled by a dynamic signal and supplies its output signal to the second logical input terminal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, further comprising: 
<claim-text>a third multiplexer which is controlled by a dynamic signal and supplies its output signal to the third logical input terminal; and </claim-text>
<claim-text>a fourth multiplexer which is controlled by a dynamic signal and supplies its output signal to the fourth logical input terminal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A function block comprising: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; </claim-text>
<claim-text>a first multiplexer which is controlled by a dynamic signal and supplies its output signal to the first logical input terminal; </claim-text>
<claim-text>a second multiplexer which is controlled by a dynamic signal and supplies its output signal to the second logical input terminal; and </claim-text>
<claim-text>a third multiplexer controlled by a dynamic signal, for selecting one of output signals of the first and second multiplexers depending on a control signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, further comprising: 
<claim-text>a first signal generator for generating a first signal from the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from a 4-2 carry input signal; </claim-text>
<claim-text>a fourth multiplexer for selecting a signal from a multiple-signal group including the second signal and an output signal of the third multiplexer, depending on the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry block for generating a ripple carry output signal from a multiple-signal group including a ripple carry input signal and an output signal of the third multiplexer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, further comprising: 
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least three ones of the first to fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A function block comprising: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; </claim-text>
<claim-text>a first signal generator for generating a first signal from the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from the second logical input signal; </claim-text>
<claim-text>a first multiplexer which is controlled by a dynamic signal and supplies its output signal to the first logical input terminal; </claim-text>
<claim-text>a second multiplexer which is controlled by a dynamic signal and supplies its output signal to the second logical input terminal; </claim-text>
<claim-text>a third multiplexer controlled by a dynamic signal, for selecting a signal from a multiple-signal group including the second signal and an output signal of the first multiplexer, depending on the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00044">claim 48</dependent-claim-reference>, further comprising: 
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least three ones of the first to fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. A function block comprising: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; and </claim-text>
<claim-text>first to sixth multiplexers, each of which is controlled by a dynamic signal, </claim-text>
<claim-text>wherein the first to fourth multiplexers supply output signals to respective ones of the first to fourth logical input terminals, </claim-text>
<claim-text>the fifth multiplexer inputs at least the first and second logical input signals, and </claim-text>
<claim-text>the sixth multiplexer inputs at least the third and fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, wherein the fifth and sixth multiplexers are controlled by same dynamic signal. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, further comprising: 
<claim-text>a first signal generator for generating a first signal from the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from an output signal of the sixth multiplexer; </claim-text>
<claim-text>a seventh multiplexer for selecting a signal from a multiple-signal group including the second signal and an output signal of the fifth multiplexer, depending on the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry block for generating a ripple carry output signal from a multiple-signal group including a ripple carry input signal and at least one of output signals of the fifth and sixth multiplexers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, further comprising: 
<claim-text>a seventh multiplexer which is controlled by a dynamic signal and inputs output signals of the fifth and sixth multiplexers. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, further comprising: 
<claim-text>a first signal generator for generating a first signal from the logical output signal; and </claim-text>
<claim-text>an eighth multiplexer for selecting a signal from a multiple-signal group including a 4-2 carry input signal and an output signal of the seventh multiplexer, depending on the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry block for generating a ripple carry output signal from a multiple-signal group including a ripple carry input signal and an output signal of the seventh multiplexer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 50</dependent-claim-reference>, further comprising: 
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least three ones of the first to fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. A function block comprising: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; </claim-text>
<claim-text>two preposition circuits each connected to two ones of the four logical input terminals, wherein the preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions; </claim-text>
<claim-text>a first signal generator for generating a first signal from the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from a 4-2 carry input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from the first logical input signal; and </claim-text>
<claim-text>a multiplexer for selecting a signal from a multiple-signal group including the second signal and the third signal depending on the first signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference>, further comprising: 
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least three ones of the first to fourth logical input signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. A function block comprising: 
<claim-text>at least first, second, third, and fourth logical input terminals for inputting at least first, second, third, and fourth logical input signals, respectively; </claim-text>
<claim-text>a logical function generator having at least first, second, and third input terminals, for generating an logical output signal from first, second, and third input signals each inputted at the first, second, and third input terminals, according to a logical function selected from a plurality of logical functions depending on configuration data, wherein the first and second input signals are the first and second logical input signals; </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the third and fourth logical input signals to output an exclusive-OR result to the third input terminal of the logical function generator; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second logical input signal and one of the third and fourth logical input signals; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce a carry output signal depending on the first signal; and </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the logical output signal and the fourth signal to produce an output of the function block. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 60</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry multiplexer for selecting either the second logical input signal or one of the third and fourth logical input signals to produce the 4-2 carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 60</dependent-claim-reference>, wherein the logical function generator generates a 3-input/1-output exclusive OR function according to the configuration data. </claim-text>
</claim>
<claim id="CLM-00063">
<claim-text><highlight><bold>63</bold></highlight>. A function block comprising: 
<claim-text>at least first, second, third, and fourth logical input terminals for inputting at least first, second, third, and fourth logical input signals, respectively; </claim-text>
<claim-text>a logical function generator having at least first, second, and third input terminals, for generating an logical output signal from first, second, and third input signals each inputted at the first, second, and third input terminals, according to a logical function selected from a plurality of logical functions depending on configuration data; </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the third and fourth logical input signals to output an exclusive-OR result to the third input terminal of the logical function generator; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the first and second logical input signals to output an exclusive-OR result to the second input terminal of the logical function generator; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first and second exclusive OR circuits; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second logical input signal and one of the third and fourth logical input signals; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal to output it to the first input terminal of the logical function generator; and </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce a carry output signal depending on the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00064">
<claim-text><highlight><bold>64</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 63</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry multiplexer which is controlled by an output signal of the first exclusive OR circuit and selects either the second logical input signal or one of the third and fourth logical input signals to produce the 4-2 carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00065">
<claim-text><highlight><bold>65</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 63</dependent-claim-reference>, wherein the logical function generator generates a 3-input/1-output exclusive OR function according to the configuration data. </claim-text>
</claim>
<claim id="CLM-00066">
<claim-text><highlight><bold>66</bold></highlight>. A function block comprising: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on a first input signal and a second input signal; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on a third input signal and a fourth input signal; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second input signals; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including a 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce a carry output signal depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00067">
<claim-text><highlight><bold>67</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry multiplexer which is controlled by an output signal of the second exclusive OR circuit and selects either the one of the first and second input signals or the other one of the third and fourth input signals to produce the 4-2 carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00068">
<claim-text><highlight><bold>68</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the first signal generator outputs as the first signal the output signal of the third exclusive OR circuit. </claim-text>
</claim>
<claim id="CLM-00069">
<claim-text><highlight><bold>69</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the first signal generator outputs as the first signal a signal selected from a third multiple-signal group including the output signal of the third exclusive OR circuit and a control signal. </claim-text>
</claim>
<claim id="CLM-00070">
<claim-text><highlight><bold>70</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the selector selects the second signal to output it as the carry output signal when the first signal generator selects the control signal from the third multiple-signal group. </claim-text>
</claim>
<claim id="CLM-00071">
<claim-text><highlight><bold>71</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the control signal is a dynamic signal that is not a fixed value. </claim-text>
</claim>
<claim id="CLM-00072">
<claim-text><highlight><bold>72</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the second signal generator outputs as the second signal the one of the first and second input signals. </claim-text>
</claim>
<claim id="CLM-00073">
<claim-text><highlight><bold>73</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, further comprising: 
<claim-text>at least one preposition circuit which is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions, </claim-text>
<claim-text>wherein at least one of the first, second, third, and fourth input signals is supplied by said at least one preposition circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00074">
<claim-text><highlight><bold>74</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 73</dependent-claim-reference>, wherein a first preposition circuit and a second preposition circuit supply the first input signal and the third input signal, respectively. </claim-text>
</claim>
<claim id="CLM-00075">
<claim-text><highlight><bold>75</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the second signal generator outputs as the second signal an output signal of the first preposition circuit. </claim-text>
</claim>
<claim id="CLM-00076">
<claim-text><highlight><bold>76</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the second signal generator outputs as the second signal a signal selected from a fourth multiple-signal group including at least an output signal of the first preposition circuit. </claim-text>
</claim>
<claim id="CLM-00077">
<claim-text><highlight><bold>77</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 76</dependent-claim-reference>, wherein the fourth multiple-signal group further includes at least one of an output signal of the first exclusive OR circuit and an output signal of the second preposition circuit. </claim-text>
</claim>
<claim id="CLM-00078">
<claim-text><highlight><bold>78</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 77</dependent-claim-reference>, wherein the second signal generator includes a multiplexer controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00079">
<claim-text><highlight><bold>79</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the second multiple-signal group includes an output signal of the second preposition circuit. </claim-text>
</claim>
<claim id="CLM-00080">
<claim-text><highlight><bold>80</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the logical input signal and input signals of the first preposition circuit and the second preposition circuit are signals selected in programmable fashion from fixed logical values and signals on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00081">
<claim-text><highlight><bold>81</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein the second input signal and the fourth input signal are signals selected in programmable fashion from fixed logical values and signals on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00082">
<claim-text><highlight><bold>82</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 74</dependent-claim-reference>, wherein each of the first and second preposition circuits is a multiplexer that is controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00083">
<claim-text><highlight><bold>83</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00077">claim 73</dependent-claim-reference>, wherein the first, second, third, and fourth input signals are supplied by first, second, third, and fourth preposition circuits, respectively, wherein each of the first, second, third, and fourth preposition circuits is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions. </claim-text>
</claim>
<claim id="CLM-00084">
<claim-text><highlight><bold>84</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00088">claim 83</dependent-claim-reference>, wherein the second signal generator outputs as the second signal at least one output signal of the first to fourth preposition circuits. </claim-text>
</claim>
<claim id="CLM-00085">
<claim-text><highlight><bold>85</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00088">claim 84</dependent-claim-reference>, wherein the second signal generator includes a multiplexer controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00086">
<claim-text><highlight><bold>86</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00088">claim 83</dependent-claim-reference>, wherein the first multiple-signal group includes an output signal of at least one of the third and fourth preposition circuits. </claim-text>
</claim>
<claim id="CLM-00087">
<claim-text><highlight><bold>87</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00088">claim 83</dependent-claim-reference>, wherein input signals of the first to fourth preposition circuits are signals selected in programmable fashion from fixed logical values and signals on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00088">
<claim-text><highlight><bold>88</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00088">claim 83</dependent-claim-reference>, wherein each or the first to fourth preposition circuits is a multiplexer that is controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00089">
<claim-text><highlight><bold>89</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the fourth signal generator includes the third signal generator, and the second multiple-signal group includes the first multiple-signal group, 
<claim-text>wherein the fourth signal generator comprises a multiplexer for selecting a signal from a multiple-signal group including an output signal of the third signal generator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00090">
<claim-text><highlight><bold>90</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the third signal generator and the fourth signal generator are one and same circuit, wherein the first multiple-signal group is identical to the second multiple-signal group. </claim-text>
</claim>
<claim id="CLM-00091">
<claim-text><highlight><bold>91</bold></highlight>. A function block comprising: 
<claim-text>first to fourth multiplexers; </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on output signals of the first and second multiplexers; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on output signals of the third and fourth multiplexers; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first and second exclusive OR circuits; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least, an output signal of one of the first and second multiplexers and an output signal of one of the third and fourth multiplexers; </claim-text>
<claim-text>a fifth multiplexer for selecting one of output signals of the first and second multiplexers depending on a first control signal; </claim-text>
<claim-text>a sixth multiplexer for selecting one of output signals of the third and fourth multiplexers depending on a second control signal; </claim-text>
<claim-text>a seventh multiplexer for selecting a signal from a first multiple-signal group including a logical input signal and a 4-2 carry input signal; </claim-text>
<claim-text>an eighth multiplexer for selecting a signal from a second multiple-signal group including output signals of the sixth and seventh multiplexers; </claim-text>
<claim-text>a ninth multiplexer for selecting a signal from a third multiple-signal group including a third control signal and an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a tenth multiplexer which is controlled by an output signal of the ninth multiplexer and selects a signal from a fourth multiple-signal group including output signals of the fifth and eighth multiplexers to output it as a carry output signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on output signals of the third exclusive OR circuit and the seventh multiplexer to produce an addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00092">
<claim-text><highlight><bold>92</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 91</dependent-claim-reference>, wherein the first control signal and the second control signal are one and the same. </claim-text>
</claim>
<claim id="CLM-00093">
<claim-text><highlight><bold>93</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 91</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry multiplexer which is controlled by an output signal of the second exclusive OR circuit and selects either one of the output signals of the first and second multiplexers or one of the output signals of the third and fourth multiplexers to produce the 4-2 carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00094">
<claim-text><highlight><bold>94</bold></highlight>. A function block comprising: 
<claim-text>first to fourth multiplexers; </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on output signals of the first and second multiplexers; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on output signals of the third and fourth multiplexers; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first and second exclusive OR circuits; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least, an output signal of one of the first and second multiplexers and an output signal of one of the third and fourth multiplexers; </claim-text>
<claim-text>a fifth multiplexer for selecting one of output signals of the first and second multiplexers depending on a first control signal; </claim-text>
<claim-text>a sixth multiplexer for selecting one of output signals of the third and fourth multiplexers depending on a second control signal; </claim-text>
<claim-text>a seventh multiplexer for selecting a signal from a first multiple-signal group including at least one logical input signal and a 4-2 carry input signal; </claim-text>
<claim-text>an eighth multiplexer for selecting a signal from a second multiple-signal group including the logical input signal and the 4-2 carry input signal; </claim-text>
<claim-text>a ninth multiplexer for selecting a signal from a third multiple-signal group including output signals of the fifth and sixth multiplexers depending on a third control signal; </claim-text>
<claim-text>a selector for selecting a signal from a fourth multiple-signal group including a fourth control signal and an output of the third exclusive OR circuit; </claim-text>
<claim-text>a tenth multiplexer which is controlled by an output signal of the selector and selects a signal from a fifth multiple-signal group including output signals of the eighth and ninth multiplexers to output it as a carry output signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on output signals of the third exclusive OR circuit and the seventh multiplexer to produce an addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00095">
<claim-text><highlight><bold>95</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the tenth multiplexer selects the output signal of the ninth multiplexer when the selector selects the fourth control signal. </claim-text>
</claim>
<claim id="CLM-00096">
<claim-text><highlight><bold>96</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the first control signal and the second control signal are one and the same. </claim-text>
</claim>
<claim id="CLM-00097">
<claim-text><highlight><bold>97</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the 4-2 carry block comprises: 
<claim-text>a 4-2 carry multiplexer which is controlled by an output signal of the second exclusive OR circuit and selects either one of the output signals of the first and second multiplexers or one of the output signals of the third and fourth multiplexers to produce the 4-2 carry output signal, </claim-text>
</claim-text>
</claim>
<claim id="CLM-00098">
<claim-text><highlight><bold>98</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 91</dependent-claim-reference>, wherein the eighth multiplexer includes the seventh multiplexer, and the second multiple-signal group includes the first multiple-signal group, 
<claim-text>wherein the eighth multiplexer comprises a multiplexer for selecting a signal from a multiple-signal group including an output signal of the seventh multiplexer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00099">
<claim-text><highlight><bold>99</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the eighth multiplexer includes the seventh multiplexer, and the second multiple-signal group includes the first multiple-signal group, 
<claim-text>wherein the eighth multiplexer comprises a multiplexer for selecting a signal from a multiple-signal group including an output signal of the seventh multiplexer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00100">
<claim-text><highlight><bold>100</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00099">claim 94</dependent-claim-reference>, wherein the seventh multiplexer and the eighth multiplexer are one and same circuit, wherein the first multiple-signal group is identical to the second multiple-signal group. </claim-text>
</claim>
<claim id="CLM-00101">
<claim-text><highlight><bold>101</bold></highlight>. Tho function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, wherein the first multiple-signal group includes a ripple carry input signal. </claim-text>
</claim>
<claim id="CLM-00102">
<claim-text><highlight><bold>102</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 101</dependent-claim-reference>, wherein the first multiple-signal group and the second multiple-signal group include a ripple carry input signal. </claim-text>
</claim>
<claim id="CLM-00103">
<claim-text><highlight><bold>103</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 101</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry block for generating a ripple carry output signal from the two input signals of the third exclusive OR circuit and the ripple carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00104">
<claim-text><highlight><bold>104</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 101</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry multiplexer for selecting a signal from the ripple carry input signal and one of input signals of the third exclusive OR circuit depending on an output signal of the third exclusive OR circuit to output it as a ripple carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00105">
<claim-text><highlight><bold>105</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 101</dependent-claim-reference>, further comprising: 
<claim-text>a ripple carry block for generating a ripple carry output signal from the ripple carry input signal, two input signals and an output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00106">
<claim-text><highlight><bold>106</bold></highlight>. A function cell allowing programmable connection to an interconnection wire group including a plurality of interconnection wires, comprising: 
<claim-text>a programmable input selector for selecting a plurality of input signals from the interconnection wire group; </claim-text>
<claim-text>a function block for generating a plurality of output signals including at least an addition output signal and a carry output signal from the plurality of input signals; and </claim-text>
<claim-text>a programmable output selector for selecting a plurality of interconnection wires from the interconnection wire group to output the plurality of output signals to respective ones of the selected interconnection wires, </claim-text>
<claim-text>wherein the function block comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on a first input signal and a second input signal; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on a third input signal and a fourth input signal; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second input signals; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including a 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce the carry output signal depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit to produce the addition output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00107">
<claim-text><highlight><bold>107</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00111">claim 106</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a programmable signal switch for routing at least the addition output signal and the carry output signal from input terminals to output terminals according to a state changeable between a straight connection state and a cross connection state; </claim-text>
<claim-text>a first output selection block for selectively outputting a first output signal of the programmable signal switch to a first wire group of the interconnection wire group; and </claim-text>
<claim-text>a second output selection block for selectively outputting a second output signal of the programmable signal switch to a second wire group of the interconnection wire group, wherein the second wire group is different from the first wire group. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00108">
<claim-text><highlight><bold>108</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00111">claim 106</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a first programmable register block changeable between a direct transfer state and a temporal latch state of the addition output signal; </claim-text>
<claim-text>a second programmable register block changeable between a direct transfer state and a temporal latch state of the carry output signal; and </claim-text>
<claim-text>a signal transfer section connecting each of the first and second programmable register blocks to the function block without intervention of the interconnection wire group, </claim-text>
<claim-text>wherein, when each of the first and second programmable register blocks is set to the temporal latch state, an output signal of a corresponding one of the first and second programmable register blocks is transferred to the function block through the signal transfer section. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00109">
<claim-text><highlight><bold>109</bold></highlight>. The function cell according to <dependent-claim-reference depends_on="CLM-00111">claim 106</dependent-claim-reference>, wherein the programmable output selector comprises: 
<claim-text>a programmable signal switch for routing at least the addition output signal and the carry output signal from input terminals to output terminals according to a state changeable between a straight connection state and a cross connection state; </claim-text>
<claim-text>a first programmable register block changeable between a direct transfer state and a temporal latch state of one of two outputs of the programmable signal switch; </claim-text>
<claim-text>a second programmable register block changeable between a direct transfer state and a temporal latch state of the other one of the two outputs of the programmable signal switch; </claim-text>
<claim-text>a first output selection block for selectively outputting a direct-transfer output of the first programmable register block to a first wire group of the interconnection wire group; </claim-text>
<claim-text>a second output selection block for selectively outputting a direct-transfer output of the second programmable register block to a second wire group of the interconnection wire group, wherein the second wire group is different from the first wire group; and </claim-text>
<claim-text>a signal transfer section connecting each of the first and second programmable register blocks to the function block without intervention of the interconnection wire group, wherein, a temporal-latch output signal of each of the first and second programmable register blocks is transferred to the function block through the signal transfer section. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00110">
<claim-text><highlight><bold>110</bold></highlight>. A combined function block comprising a first function block and a second function block, wherein 
<claim-text>the first function block comprises: 
<claim-text>a first exclusive OR circuit A for performing an exclusive OR function on a first input signal and a second input signal; </claim-text>
<claim-text>a second exclusive OR circuit A for performing an exclusive OR function on a third input signal and a fourth input signal; </claim-text>
<claim-text>a 4-2 carry block A for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; </claim-text>
<claim-text>a third exclusive OR circuit A for performing an exclusive OR function on output signals of the first exclusive OR circuit A and the second exclusive OR circuit A; </claim-text>
<claim-text>a first signal generator A for generating a first signal A from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator A for generating a second signal A from at least one of the first and second input signals; </claim-text>
<claim-text>a third signal generator A for generating a third signal A from a first multiple-signal group including a 4-2 carry input signal, a ripple carry input signal, and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator A for generating a fourth signal A from a second multiple-signal group including the 4-2 carry input signal, the ripple carry input signal, and at least one logical input signal; </claim-text>
<claim-text>a selector A for selecting one of the second signal A and the third signal A to produce a carry output signal A depending on the first signal A; </claim-text>
<claim-text>a fourth exclusive OR circuit A for performing an exclusive OR function on the fourth signal A and the output signal of the third exclusive OR circuit A; and </claim-text>
<claim-text>a first AND circuit for performing AND function on the output signals of the first exclusive OR circuit A and the second exclusive OR circuit A, and </claim-text>
</claim-text>
<claim-text>the second function block comprises: 
<claim-text>a first exclusive OR circuit B for performing an exclusive OR function on a fifth input signal and a sixth input signal; </claim-text>
<claim-text>a second exclusive OR circuit B for performing an exclusive OR function on a seventh input signal and an eighth input signal; </claim-text>
<claim-text>a 4-2 carry block B for generating a 4-2 carry output signal from at least, one of the fifth and sixth input signals and one of the seventh and eighth input signals; </claim-text>
<claim-text>a third exclusive OR circuit B for performing an exclusive OR function on output signals of the first exclusive OR circuit B and the second exclusive OR circuit B; </claim-text>
<claim-text>a first signal generator B for generating a first signal B from at least an output signal of the third exclusive OR circuit B; </claim-text>
<claim-text>a second signal generator B for generating a second signal B from at least one of the fifth and sixth input signals; </claim-text>
<claim-text>a third signal generator B for generating a third signal B from a third multiple-signal group including the 4-2 carry output signal A, the carry output signal A, an output of the first AND circuit and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator B for generating a fourth signal B from a fourth multiple-signal group including the 4-2 carry output signal A, the carry output signal A and at least one logical input signal; </claim-text>
<claim-text>a selector B for selecting one of the second signal B and the third signal B to produce a carry output signal B depending on the first signal B; </claim-text>
<claim-text>a fourth exclusive OR circuit B for performing an exclusive OR function on the fourth signal B and the output signal of the third exclusive OR circuit B, </claim-text>
<claim-text>a second AND circuit for performing an AND function on an output signal of the third exclusive OR circuit A and an output signal of the third exclusive OR circuit B; and </claim-text>
<claim-text>an AND-OR circuit for performing a logical OR function on the carry output signal B and an AND of an output signal of the second AND circuit and the ripple carry input signal, to produce a ripple carry output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00111">
<claim-text><highlight><bold>111</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 110</dependent-claim-reference>, wherein the AND-OR circuit comprises: 
<claim-text>a first NAND circuit for inputting the output signal of the second AND circuit and the ripple carry input signal; and </claim-text>
<claim-text>a second NAND circuit for inputting an output signal of the first NAND circuit and NOT of the carry output signal B to produce the ripple output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00112">
<claim-text><highlight><bold>112</bold></highlight>. A function block having at least first, second, third, and fourth logical input terminals at which first, second, third, and fourth logical input signals are inputted, respectively, comprising: 
<claim-text>a first half-function block; and </claim-text>
<claim-text>a second half-function block, wherein </claim-text>
<claim-text>the first half-function block comprises: 
<claim-text>a first logical function generator having at least first and second input terminals and one output terminal, for generating a first logical output signal from first and second input signals according to a logical function selected from a plurality of 2-input/1-output logical functions depending on configuration data, wherein the first logical function generator has up to three input terminals, </claim-text>
<claim-text>wherein the first half-function block is allowed to configure a full adder for producing a first addition output signal and a 4-2 carry output signal by adding the first, second, and fourth logical input signals, and </claim-text>
</claim-text>
<claim-text>the second half-function block comprises: 
<claim-text>a second logical function generator having at least third and fourth input terminals and one output terminal, for generating a second logical output signal from third and fourth input signals according to a logical function selected from a plurality of 2-input/1-output logical functions depending on configuration data, wherein the second logical function generator has up to three input terminals, </claim-text>
</claim-text>
<claim-text>wherein the second half-function block is allowed to configure a full adder for producing a second addition output signal and a carry output signal by adding the first addition output signal, the third logical input signal, and the 4-2 carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00113">
<claim-text><highlight><bold>113</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, wherein the first half function block further comprises: 
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the fourth logical input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least the fourth logical input signal; </claim-text>
<claim-text>a 4-2 carry generator for generating a 4-2 carry output signal from the second signal and the first input signal of the first logical function generator; and </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the logical output signal and the third signal to produce the first addition output signal, </claim-text>
<claim-text>wherein the first input signal and the second input signal of the first logical function generator are the first signal and the second logical input signal, respectively, </claim-text>
<claim-text>the second half-function block further comprises: 
<claim-text>a fourth signal generator for generating a fourth signal from at least the first addition output signal; </claim-text>
<claim-text>a fifth signal generator for generating a fifth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a sixth signal generator for generating a sixth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a seventh signal generator for generating a seventh signal from the second logical output signal; </claim-text>
<claim-text>an eighth signal generator for generating an eighth signal from one input signal of the second logical function generator; </claim-text>
<claim-text>a carry generator for generating the carry output signal based on at least the fifth signal and the eighth signal; and </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the second logical output signal and the sixth signal to produce the second addition output signal, </claim-text>
</claim-text>
<claim-text>wherein the third input signal and the fourth input signal of the second logical function generator are the third logical input signal and the fourth signal, respectively, </claim-text>
</claim-text>
</claim>
<claim id="CLM-00114">
<claim-text><highlight><bold>114</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry generator comprises a first multiplexer which is controlled by the first logical output signal and selects a signal from the second signal and the first input signal of the first logical function generator to output it as the 4-2 carry output signal, and </claim-text>
<claim-text>a carry generator comprises a second multiplexer which is controlled by the seventh signal and selects s a signal from the fifth signal and the eighth signal to output it as the carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00115">
<claim-text><highlight><bold>115</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry generator comprises a first carry block which outputs a carry signal obtained from the second signal and the first input signal of the first logical function generator as the 4-2 carry output signal, and </claim-text>
<claim-text>a carry generator comprises a second carry block which outputs a carry signal obtained from the fifth signal and the third input signal of the second logical function generator as the carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00116">
<claim-text><highlight><bold>116</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the third signal generator is a selector for selecting a signal from a multiple-signal group including the fourth logical input signal. </claim-text>
</claim>
<claim id="CLM-00117">
<claim-text><highlight><bold>117</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the sixth signal generator is a selector for selecting a signal from a multiple-signal group including the 4-2 carry input signal. </claim-text>
</claim>
<claim id="CLM-00118">
<claim-text><highlight><bold>118</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the second signal generator and the third signal generator are one and the same circuit. </claim-text>
</claim>
<claim id="CLM-00119">
<claim-text><highlight><bold>119</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the fifth signal generator and the sixth signal generator are one and the same circuit. </claim-text>
</claim>
<claim id="CLM-00120">
<claim-text><highlight><bold>120</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the first signal generator selects a signal as the first signal from a multiple-signal group including the first and third logical input signals. </claim-text>
</claim>
<claim id="CLM-00121">
<claim-text><highlight><bold>121</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 113</dependent-claim-reference>, wherein the fourth signal generator selects a signal as the fourth signal from a multiple-signal group including the first addition output signal and the second logical input signal. </claim-text>
</claim>
<claim id="CLM-00122">
<claim-text><highlight><bold>122</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, further comprising: 
<claim-text>a supplying section for selectively supplying the third logical input signal and the second logical input signal to respective ones of the first input terminal of the first logical function generator and the fourth input terminal of the second logical function generator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00123">
<claim-text><highlight><bold>123</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, wherein the first addition output signal is transferred to the second half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between at plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00124">
<claim-text><highlight><bold>124</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 122</dependent-claim-reference>, wherein the second logical input signal is transferred to the second half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00125">
<claim-text><highlight><bold>125</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, wherein the third logical input signal is transferred to the first half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00126">
<claim-text><highlight><bold>126</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, further comprising: 
<claim-text>an addition output multiplexer for selecting a signal from the first addition output signal and the second addition output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00127">
<claim-text><highlight><bold>127</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 126</dependent-claim-reference>, wherein the addition output multiplexer is controlled by a signal that is selected in programmable fashion from a multiple-signal group including the fourth logical input signal. </claim-text>
</claim>
<claim id="CLM-00128">
<claim-text><highlight><bold>128</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, further comprising: 
<claim-text>a logical output multiplexer for selecting a signal from the first logical output signal and the second logical output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00129">
<claim-text><highlight><bold>129</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 128</dependent-claim-reference>, wherein the logical output multiplexer is controlled by the fourth logical input signal. </claim-text>
</claim>
<claim id="CLM-00130">
<claim-text><highlight><bold>130</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, further comprising: 
<claim-text>a preposition circuit connected to at least one of the second and third logical input terminals, wherein the preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00131">
<claim-text><highlight><bold>131</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein the preposition circuit is programmable with configuration data. </claim-text>
</claim>
<claim id="CLM-00132">
<claim-text><highlight><bold>132</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein a logical function of the preposition circuit is determined based on a signal selected in programmable fashion from a fixed logical value and a signal on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00133">
<claim-text><highlight><bold>133</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein the preposition circuit is a look-up table programmable with configuration data. </claim-text>
</claim>
<claim id="CLM-00134">
<claim-text><highlight><bold>134</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein the preposition circuit is a multiplexer that is allowed to be controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00135">
<claim-text><highlight><bold>135</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein the plurality of logical functions include an AND function. </claim-text>
</claim>
<claim id="CLM-00136">
<claim-text><highlight><bold>136</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 130</dependent-claim-reference>, wherein the preposition circuit is connected to each of the second and third input terminals. </claim-text>
</claim>
<claim id="CLM-00137">
<claim-text><highlight><bold>137</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 136</dependent-claim-reference>, wherein 
<claim-text>one of preposition circuits connected to the second and third input terminals is a look-up table programmable with configuration data; and </claim-text>
<claim-text>the other of the preposition circuits is set to a logical function determined based on a signal selected in programmable fashion from a fixed logical value and a dynamic signal on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00138">
<claim-text><highlight><bold>138</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 136</dependent-claim-reference>, wherein the preposition circuits are each multiplexers that are allowed to be controlled by dynamic signals. </claim-text>
</claim>
<claim id="CLM-00139">
<claim-text><highlight><bold>139</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 136</dependent-claim-reference>, wherein each of the preposition circuits is allowed to be set to an AND function. </claim-text>
</claim>
<claim id="CLM-00140">
<claim-text><highlight><bold>140</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 112</dependent-claim-reference>, wherein the first half-function block further comprises: 
<claim-text>a first ripple carry block for generating a first ripple carry output signal from a multiple signal group including a first ripple carry input signal, </claim-text>
<claim-text>wherein the first half-function block is allowed to configure a full adder for producing the first addition output signal and the first ripple carry output signal by adding the first logical input signal, the second logical input signal, and the first ripple carry input signal, and </claim-text>
<claim-text>the second half-function block further comprises: 
<claim-text>a second ripple carry block for generating a second ripple carry output signal from a multiple-signal group including a second ripple carry input signal, </claim-text>
</claim-text>
<claim-text>wherein the second half-function block is allowed to configure a full adder for producing the second addition output signal and the second carry output signal by adding the first addition output signal, the third logical input signal, and the second ripple carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00141">
<claim-text><highlight><bold>141</bold></highlight>. A function block having at least first, second, third, and fourth logical input terminals at which at least first, second, third, and fourth logical input signals are inputted, respectively, comprising: 
<claim-text>a first half-function block; and </claim-text>
<claim-text>a second half-function block, wherein </claim-text>
<claim-text>the first half-function block comprises: 
<claim-text>at least two exclusive OR circuits for generating a first logical output signal, </claim-text>
</claim-text>
<claim-text>wherein the first half-function block is allowed to configure, a full adder for producing the first addition output signal and a 4-2 carry output signal by adding the first, second, and third logical input signals, and </claim-text>
<claim-text>the second half-function block comprises: 
<claim-text>at least two exclusive OR circuits for generating a second logical output signal, </claim-text>
</claim-text>
<claim-text>wherein the second half-function block is allowed to configure a full adder for producing the second addition output signal and a carry output signal by adding the first addition output signal, the fourth logical input signal, and a 4-2 carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00142">
<claim-text><highlight><bold>142</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 141</dependent-claim-reference>, wherein 
<claim-text>the first half-function block further comprises: 
<claim-text>a first preposition circuit connected to the third logical input terminal, wherein the first preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions, and </claim-text>
</claim-text>
<claim-text>the second half-function block further comprises: 
<claim-text>a second preposition circuit connected to the fourth logical input terminal, wherein the second preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00143">
<claim-text><highlight><bold>143</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein 
<claim-text>the first half-function block further comprises: 
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on an output signal of the first preposition circuit and the first signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the second logical input signal; </claim-text>
<claim-text>a first selector for selecting a signal from the second signal and one of the output signal of the first preposition circuit and the first signal to output it as the 4-2 carry output signal, depending on an output signal of the first exclusive OR circuit; and </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the output signal of the first preposition circuit and the second signal, and </claim-text>
</claim-text>
<claim-text>the second half-function block further comprises: 
<claim-text>a third signal generator for generating a third signal from at least the first addition output signal; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on an output signal of the second preposition circuit and the third signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a fifth signal generator for generating a fifth signal from at least either the output signal of the second proposition circuit or the third signal; </claim-text>
<claim-text>a second selector for selecting a signal from the fourth signal and the fifth signal to output it as the carry output signal, depending on an output signal of the third exclusive OR circuit; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the output signal of the third exclusive OR circuit and the fourth signal to produce the second addition output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00144">
<claim-text><highlight><bold>144</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein 
<claim-text>the first half-function block further comprises a 4-2 carry block for generating the 4-2 carry output signal, and </claim-text>
<claim-text>the second half-function block further comprises a carry block for generating the carry output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00145">
<claim-text><highlight><bold>145</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, further comprising: 
<claim-text>a supplying section for supplying an output signal of the first preposition circuit to the second half-function block, </claim-text>
<claim-text>wherein the second half-function block is allowed to configure a full adder for producing the second addition output signal and the carry output signal by adding the output signal of the first preposition circuit, an output signal of the second preposition circuit, and the 4-2 carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00146">
<claim-text><highlight><bold>146</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 145</dependent-claim-reference>, wherein the output signal of the first preposition circuit is transferred to the second half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00147">
<claim-text><highlight><bold>147</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, further comprising: 
<claim-text>a supplying section for supplying an output signal of the second preposition circuit to the first half-function block, </claim-text>
<claim-text>wherein the first half-function block is allowed to configure a full adder for producing the first addition output signal and the 4-2 carry output signal by adding the output signal of the first preposition circuit, an output signal of the second preposition circuit, and the second logical input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00148">
<claim-text><highlight><bold>148</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 147</dependent-claim-reference>, wherein the output signal of the second preposition circuit is transferred to the first half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00149">
<claim-text><highlight><bold>149</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 141</dependent-claim-reference>, wherein the first addition output signal is transferred to the second half-function block via a dedicated wire that is provided separately from an interconnection wire providing programmable connections between a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00150">
<claim-text><highlight><bold>150</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 141</dependent-claim-reference>, further comprising: 
<claim-text>an addition output multiplexer for selecting one of the first addition output signal and the second addition output signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00151">
<claim-text><highlight><bold>151</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein each of the first and second preposition circuits is a multiplexer that is controlled by a dynamic signal. </claim-text>
</claim>
<claim id="CLM-00152">
<claim-text><highlight><bold>152</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein each of the first and second preposition circuits is allowed to be set to an AND function. </claim-text>
</claim>
<claim id="CLM-00153">
<claim-text><highlight><bold>153</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein the input signals of the first preposition circuit and the second preposition circuit are signals selected in programmable fashion from fixed logical values and signals on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00154">
<claim-text><highlight><bold>154</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 142</dependent-claim-reference>, wherein the second logical input signal is a signal selected in programmable fashion from a fixed logical value and signals on an interconnection network that allows programmable connections of a plurality of function blocks. </claim-text>
</claim>
<claim id="CLM-00155">
<claim-text><highlight><bold>155</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 141</dependent-claim-reference>, wherein 
<claim-text>the first half-function block further comprises: 
<claim-text>a first ripple carry block for generating a first ripple carry output signal from a multiple-signal group including a first ripple carry input signal, </claim-text>
<claim-text>wherein the first half-function block is allowed to configure a full adder for producing the first addition output signal and the first ripple carry output signal by adding the first logical input signal, the third logical input signal, and the first ripple carry input signal, and </claim-text>
</claim-text>
<claim-text>the second half-function block further comprises: 
<claim-text>a second ripple carry block for generating a second ripple carry output signal from a multiple-signal group including a second ripple carry input signal, </claim-text>
<claim-text>wherein the second half-function block is allowed to configure a full adder for producing the second addition output signal and the second carry output signal by adding the first addition output signal, the fourth logical input signal, and the second ripple carry input signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00156">
<claim-text><highlight><bold>156</bold></highlight>. A combined function block comprising N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>(N is a natural number greater than 0), each of which includes at least one of 4-2 carry function and a ripple carry function, 
<claim-text>wherein the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>are connected such that a carry output signal of a block B<highlight><subscript>i </subscript></highlight>is a carry input signal of a block B<highlight><subscript>i&plus;1</subscript></highlight>, where i is an arbitrary natural number greater than 0 and not greater than N&minus;1, wherein the carry output signal is produced by one of 4 2 carry function and a ripple carry function and the carry input signal is used by the one of 4-2 carry function and a ripple carry function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00157">
<claim-text><highlight><bold>157</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating an logical output signal from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth logical input signals; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output signal; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce a carry output signal; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output signal and the fourth signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00158">
<claim-text><highlight><bold>158</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 157</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>further comprises: 
<claim-text>a ripple carry generator for generating a ripple carry output signal based on at least, one of the first to fourth logical input signals and the ripple carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00159">
<claim-text><highlight><bold>159</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>comprises a first function block and a second function block, wherein 
<claim-text>the first function block comprises: 
<claim-text>a logical function generator A having at least four logical input terminals and one logical output terminal, for generating an logical output signal A from first, second, third, and fourth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block A for generating a 4-2 carry output signal A from the second, third, and fourth logical input signals; </claim-text>
<claim-text>a first signal generator A for generating a first signal A from at least the logical output signal A; </claim-text>
<claim-text>a second signal generator A for generating a second signal A from at least the first logical input signal; </claim-text>
<claim-text>a third signal generator A for generating a third signal A by selecting a signal as the third signal from a first multiple-signal group including at least a 4-2 carry input signal; </claim-text>
<claim-text>a fourth signal generator A for generating a fourth signal A by selecting a signal as the fourth signal from the second multiple-signal group including at least the 4-2 carry input signal; </claim-text>
<claim-text>a selector A for selecting one of the second signal A and the third signal A depending on the first signal A to produce a carry output signal A; </claim-text>
<claim-text>an exclusive OR circuit A for performing an exclusive OR function on the logical output signal A and the fourth signal A to produce an exclusive OR result A; and </claim-text>
<claim-text>a first AND circuit for performing an AND function on the first logical input signal and one of the second to fourth logical input signals, and </claim-text>
</claim-text>
<claim-text>the second function block comprises: 
<claim-text>a logical function generator B having at least four logical input terminals and one logical output terminal, for generating an logical output signal B from fifth, sixth, seventh, and eighth logical input signals thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block B for generating a 4-2 carry output signal B from the sixth, seventh, and eighth logical input signals; </claim-text>
<claim-text>a first signal generator B for generating a first signal B from at least the logical output signal B; </claim-text>
<claim-text>a second signal generator B for generating a second signal B from at least the fifth logical input signal; </claim-text>
<claim-text>a third signal generator B for generating a third signal B by selecting a signal as the third signal B from a third multiple-signal group including at least the 4-2 carry output signal A and an output of the first AND circuit; </claim-text>
<claim-text>a fourth signal generator B for generating a fourth signal B by selecting a signal as the fourth signal B from a fourth multiple-signal group including at least the 4-2 carry output signal A and the carry output signal A; </claim-text>
<claim-text>a selector B for selecting one of the second signal B and the third signal B depending on the first signal B to produce a carry output signal B; </claim-text>
<claim-text>an exclusive OR circuit B for performing an exclusive OR function on the logical output signal B and the fourth signal B to produce an exclusive OR result B; </claim-text>
<claim-text>a second AND circuit for performing an AND function on the logical output signal A and the logical output signal B; and </claim-text>
<claim-text>an AND-OR circuit for performing a logical OR function on the carry output signal B and an AND of an output signal of the second AND circuit and a ripple carry input signal, to produce a ripple carry output signal. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00160">
<claim-text><highlight><bold>160</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>is connected to a common signal line for supplying a common signal thereto. </claim-text>
</claim>
<claim id="CLM-00161">
<claim-text><highlight><bold>161</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 160</dependent-claim-reference>, wherein the common signal line is dedicated for signal inputting of each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N</subscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00162">
<claim-text><highlight><bold>162</bold></highlight>. A complex function block comprising: 
<claim-text>a plurality of combined function blocks, each of which comprises N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>(N is a natural number greater than 0), each of which includes at least one of 4-2 carry function and a ripple carry function, wherein the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>are connected such that a carry output signal of a block B<highlight><subscript>i </subscript></highlight>is a carry input signal of a block B<highlight><subscript>i</subscript></highlight>, where i is an arbitrary natural number greater than 0 and not greater than N&minus;1, wherein the carry output signal is produced by one of 4-2 carry function and a ripple carry function and the carry input signal is used by the one of 4-2 carry function and a ripple carry function, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>is connected to a common signal line for supplying a common signal thereto; and </claim-text>
<claim-text>a common signal connection circuit for selecting a signal in programmable fashion from a multiple-signal group including a common signal for one of the combined function blocks to supply the selected signal as a common signal to another one of the combined function blocks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00163">
<claim-text><highlight><bold>163</bold></highlight>. A combined function block comprising; 
<claim-text>a first block having at least a function of generating a 4-2 carry output signal; </claim-text>
<claim-text>a second block providing at least a predetermined function based on a 4-2 carry input signal; and </claim-text>
<claim-text>a 4-2 carry connection circuit connected between the first and second blocks, for selecting a signal from a multiple-signal group including the 4-2 carry output signal of the first block and another signal to supply the selected signal as the 4-2 carry input signal to the second block. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00164">
<claim-text><highlight><bold>164</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 157</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00165">
<claim-text><highlight><bold>165</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a function block according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 157</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00166">
<claim-text><highlight><bold>166</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00167">
<claim-text><highlight><bold>167</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00168">
<claim-text><highlight><bold>168</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein the other signal is a fixed logical value. </claim-text>
</claim>
<claim id="CLM-00169">
<claim-text><highlight><bold>169</bold></highlight>. A combined function block comprising: 
<claim-text>a first block having at least a function of generating a ripple carry output signal; </claim-text>
<claim-text>a second block providing at least a predetermined function based on a ripple carry input signal; and </claim-text>
<claim-text>a ripple carry connection circuit connected between the first and second blocks, for selecting a signal from a multiple-signal group including the ripple carry output signal of the first block and another signal to supply the selected signal as the ripple carry input signal to the second block. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00170">
<claim-text><highlight><bold>170</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 158</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a function block according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00171">
<claim-text><highlight><bold>171</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a function block according to <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 158</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00172">
<claim-text><highlight><bold>172</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00173">
<claim-text><highlight><bold>173</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00174">
<claim-text><highlight><bold>174</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein the other signal is a fixed logical value. </claim-text>
</claim>
<claim id="CLM-00175">
<claim-text><highlight><bold>175</bold></highlight>. An integrated circuit comprising an area in which a plurality of function blocks are arranged in a two-dimensional array, wherein each of the function blocks is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00176">
<claim-text><highlight><bold>176</bold></highlight>. An integrated circuit comprising an area in which a plurality of function blocks are arranged in a two-dimensional array, wherein each of the function blocks is a complex function block according to <dependent-claim-reference depends_on="CLM-00111">claim 162</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00177">
<claim-text><highlight><bold>177</bold></highlight>. An integrated circuit comprising an area in which a plurality of function blocks are arranged in a two-dimensional array, wherein each of function blocks is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00178">
<claim-text><highlight><bold>178</bold></highlight>. An integrated circuit comprising an area in which a plurality of function blocks are arranged in a two-dimensional array, wherein each of the function blocks is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00179">
<claim-text><highlight><bold>179</bold></highlight>. An integrated circuit comprising: 
<claim-text>a first area in which a plurality or first function blocks are arranged in a two-dimensional array, wherein each of the first function blocks is a combined function block according to claim <highlight><bold>156</bold></highlight>; and </claim-text>
<claim-text>a second area around the first area, wherein a plurality of second function blocks are placed in the second area and are allowed to be individually set to arbitrary logical function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00180">
<claim-text><highlight><bold>180</bold></highlight>. An integrated circuit comprising: 
<claim-text>a first area in which a plurality of first function blocks are arranged in a two-dimensional array, wherein each of the first function blocks is a complex function block according to claim <highlight><bold>162</bold></highlight>; and </claim-text>
<claim-text>a second area around the first area, wherein a plurality of second function blocks are placed in the second area and are allowed to be individually set to arbitrary logical function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00181">
<claim-text><highlight><bold>181</bold></highlight>. An integrated circuit comprising: 
<claim-text>a first area in which a plurality of first function blocks are arranged in a two-dimensional array, wherein each of the first function blocks is a combined function block according to claim <highlight><bold>163</bold></highlight>; and </claim-text>
<claim-text>a second area around the first area, wherein a plurality of second function blocks are placed in the second area and arc allowed to be individually set to arbitrary logical function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00182">
<claim-text><highlight><bold>182</bold></highlight>. An integrated circuit comprising: 
<claim-text>a first area in which a plurality of first function blocks are arranged in a two-dimensional array, wherein each of the first function blocks is a combined function block according to claim <highlight><bold>169</bold></highlight>; and </claim-text>
<claim-text>a second area around the first area, wherein a plurality of second function blocks are placed in the second area and are allowed to be individually set to arbitrary logical function. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00183">
<claim-text><highlight><bold>183</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on a first input signal and a second input signal; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on a third input signal and a fourth input signal; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second input signals; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including a 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input signal and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce a carry output signal depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00184">
<claim-text><highlight><bold>184</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 183</dependent-claim-reference>, wherein each or the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>further comprises: 
<claim-text>a ripple carry block for generating a ripple carry output signal from two input signals of the third exclusive OR circuit and the ripple carry input signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00185">
<claim-text><highlight><bold>185</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 156</dependent-claim-reference>, wherein each of the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>comprises a first function block and a second function block, wherein 
<claim-text>the first function block comprises: 
<claim-text>a first exclusive OR circuit A for performing an exclusive OR function on a first input signal and a second input signal; </claim-text>
<claim-text>a second exclusive OR circuit A for performing an exclusive OR function on a third input signal and a fourth input signal; </claim-text>
<claim-text>a 4-2 carry block A for generating a 4-2 carry output signal from at least, one of the first and second input signals and one of the third and fourth input signals; </claim-text>
<claim-text>a third exclusive OR circuit A for performing an exclusive OR function on output signals of the first exclusive OR circuit A and the second exclusive OR circuit A; </claim-text>
<claim-text>a first signal generator A for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator A for generating a second signal A from at least one of the first and second input signals; </claim-text>
<claim-text>a third signal generator A for generating a third signal A from a first multiple-signal group including a 4-2 carry input signal, a ripple carry input signal, and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator A for generating a fourth signal A from a second multiple-signal group including the 4-2 carry input signal, the ripple carry input signal, and at least one logical input signal; </claim-text>
<claim-text>a selector A for selecting one of the second signal A and the third signal A to produce a carry output signal A depending on the first signal A; </claim-text>
<claim-text>a fourth exclusive OR circuit A for performing an exclusive OR function on the fourth signal A and the output signal of the third exclusive OR circuit A; and </claim-text>
<claim-text>a first AND circuit for performing AND function on the output signals of the first exclusive OR circuit A and the second exclusive OR circuit A, and </claim-text>
</claim-text>
<claim-text>the second function block comprises: 
<claim-text>a first exclusive OR circuit B for performing an exclusive OR function on a fifth input signal and a sixth input signal; </claim-text>
<claim-text>a second exclusive OR circuit B for performing an exclusive OR function on a seventh input signal and an eighth input signal; </claim-text>
<claim-text>a 4-2 carry block B for generating a 4-2 carry output signal from at least, one of the fifth and sixth input signals and one of the seventh and eighth input signals; </claim-text>
<claim-text>a third exclusive OR circuit B for performing an exclusive OR function on output signals of the first exclusive OR circuit B and the second exclusive OR circuit B; </claim-text>
<claim-text>a first signal generator B for generating a first signal B from at least an output signal of the third exclusive OR circuit B; </claim-text>
<claim-text>a second signal generator B for generating a second signal B from at least one of the fifth and sixth input signals; </claim-text>
<claim-text>a third signal generator B for generating a third signal B from a third multiple-signal group including the 4-2 carry output signal A, the carry output signal A, an output of the first AND circuit and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator B for generating a fourth signal B from a fourth multiple-signal group including the 4-2 carry output signal A, the carry output signal A and at least one logical input signal; </claim-text>
<claim-text>a selector B for selecting one of the second signal B and the third signal B to produce a carry output signal B depending on the first signal B; </claim-text>
<claim-text>a fourth exclusive OR circuit B for performing an exclusive OR function on the fourth signal B and the output signal of the third exclusive OR circuit B; </claim-text>
<claim-text>a second AND circuit for performing an AND function on an output signal of the third exclusive OR circuit A and an output signal of the third exclusive OR circuit B; and </claim-text>
<claim-text>an AND-OR circuit for performing a logical OR function on the carry output signal B and an AND of an output signal of the second AND circuit and the ripple carry input signal, to produce a ripple carry output signal, </claim-text>
</claim-text>
<claim-text>wherein the N blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>are connected such that a 4-2 carry output signal of a second function block of a block B<highlight><subscript>i </subscript></highlight>is a carry input signal of a first function block of a block B<highlight><subscript>i&plus;1</subscript></highlight>, where i is an arbitrary natural number greater than 0 and not greater than N&minus;1. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00186">
<claim-text><highlight><bold>186</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 157</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00187">
<claim-text><highlight><bold>187</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a function block according to <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 157</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00188">
<claim-text><highlight><bold>188</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 110</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00189">
<claim-text><highlight><bold>189</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 110</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00190">
<claim-text><highlight><bold>190</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 163</dependent-claim-reference>, wherein the other signal is a fixed logical value. </claim-text>
</claim>
<claim id="CLM-00191">
<claim-text><highlight><bold>191</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 158</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a function block according to <dependent-claim-reference depends_on="CLM-00111">claim 103</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00192">
<claim-text><highlight><bold>192</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a function block according to <dependent-claim-reference depends_on="CLM-00111">claim 103</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 158</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00193">
<claim-text><highlight><bold>193</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 110</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00194">
<claim-text><highlight><bold>194</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein 
<claim-text>the first block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 110</dependent-claim-reference>, and </claim-text>
<claim-text>the second block is a combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 159</dependent-claim-reference>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00195">
<claim-text><highlight><bold>195</bold></highlight>. The combined function block according to <dependent-claim-reference depends_on="CLM-00111">claim 169</dependent-claim-reference>, wherein the other signal is a fixed logical value. </claim-text>
</claim>
<claim id="CLM-00196">
<claim-text><highlight><bold>196</bold></highlight>. A function block for generating 4-2 carry output O<highlight><bold>42</bold></highlight>, addition output OS, and carry output OC from at least first, second, third, and fourth logical inputs and a 4-2 carry input, wherein the function block is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula>
<claim-text>where S is a sum of the logical inputs and the 4-2 carry input. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00197">
<claim-text><highlight><bold>197</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein only one logical function generator is provided, which configures a logical function arbitrarily selected from a plurality of possible 4-input/1-output logical functions depending on configuration data. </claim-text>
</claim>
<claim id="CLM-00198">
<claim-text><highlight><bold>198</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein only one logical function generator is provided, which configures a logical function arbitrarily selected front a plurality of possible 3-input/1-output logical functions depending on configuration data. </claim-text>
</claim>
<claim id="CLM-00199">
<claim-text><highlight><bold>199</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein two logical function generators are provided, each of which configures a logical function arbitrarily selected from a plurality of possible 3-input/1-output logical functions depending on configuration data. </claim-text>
</claim>
<claim id="CLM-00200">
<claim-text><highlight><bold>200</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein n logical function generators are provided, each of which configures a logical function arbitrarily selected from a plurality of possible 2-input/1-output logical functions depending on configuration data, wherein n is a natural number greater than 1 and not greater than 4. </claim-text>
</claim>
<claim id="CLM-00201">
<claim-text><highlight><bold>201</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 197</dependent-claim-reference>, wherein the function block is allowed to implement any of all 4-input/1-output logical functions depending on configuration data. </claim-text>
</claim>
<claim id="CLM-00202">
<claim-text><highlight><bold>202</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 199</dependent-claim-reference>, wherein the function block concurrently configures both a first full adder having first ripple carry input and first ripple carry output and a second full adder having second ripple carry input and second ripple carry output. </claim-text>
</claim>
<claim id="CLM-00203">
<claim-text><highlight><bold>203</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 200</dependent-claim-reference>, wherein the function block concurrently configures both a first full adder having first ripple carry input and first ripple carry output and A second full adder having second ripple carry input and second ripple carry output. </claim-text>
</claim>
<claim id="CLM-00204">
<claim-text><highlight><bold>204</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein at least one exclusive OR circuit is provided. </claim-text>
</claim>
<claim id="CLM-00205">
<claim-text><highlight><bold>205</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein a single full adder having ripple carry input and ripple carry output is implemented. </claim-text>
</claim>
<claim id="CLM-00206">
<claim-text><highlight><bold>206</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, wherein the function block concurrently configures both a first full adder having first ripple carry input and first ripple carry output and a second full adder having second ripple carry input and second ripple carry output. </claim-text>
</claim>
<claim id="CLM-00207">
<claim-text><highlight><bold>207</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00111">claim 196</dependent-claim-reference>, further comprising: 
<claim-text>at least one preposition circuit provides at least one of the first, second, third, and fourth logical inputs, wherein said at least one preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions without intervention of a interconnection wire providing programmable connections of a plurality of function blocks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00208">
<claim-text><highlight><bold>208</bold></highlight>. A function block for generating 4-2 carry output O<highlight><bold>42</bold></highlight>, addition output OS, and carry output OC from at least first, second, third, and fourth logical inputs and 4-2 carry input, the function block comprising: 
<claim-text>a logical function generator for generating a logical function selected from a plurality of logical functions including a 4-input/1-output exclusive OR function depending on configuration data; </claim-text>
<claim-text>a4-2 carry block for generating the 4-2 carry output from at least three ones of the first to fourth logical inputs; </claim-text>
<claim-text>a carry block for generating the carry output from a multiple-signal group including the 4-2 carry input and at least one of the first to fourth logical inputs; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on an output of the logical function generator and the 4-2 carry input to produce the addition output, </claim-text>
<claim-text>wherein the function block is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the logical inputs and the 4-2 carry input. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00209">
<claim-text><highlight><bold>209</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 208</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry block output as the 4-2 carry output an OR of an AND of the first and second logical inputs and an AND of the third and fourth logical inputs, and </claim-text>
<claim-text>the carry block outputs the carry output one selected from a signal group consisting of the 4-2 carry input and an AND of an OR of the first and second logical inputs and an OR of the third and fourth logical inputs, depending on the output of the logical function generator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00210">
<claim-text><highlight><bold>210</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 208</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry block outputs as the 4-2 carry output an AND of an OR of the first and second logical inputs and an OR of the third and fourth logical inputs, and </claim-text>
<claim-text>the carry block outputs the carry output one selected from a signal group consisting of the 4-2 carry input and an OR of an AND of the first and second logical inputs and an AND or the third and fourth logical inputs, depending on the output of the logical function generator. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00211">
<claim-text><highlight><bold>211</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 208</dependent-claim-reference>, further comprising: 
<claim-text>at least one preposition circuit provides at least one of the four logical inputs, wherein said at least one preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00212">
<claim-text><highlight><bold>212</bold></highlight>. A function block comprising: 
<claim-text>a 4-2 adder block for generating 4-2 carry output O<highlight><bold>42</bold></highlight>, addition output OS, and carry output OC from at least first, second, third, and fourth logical inputs and a 4-2 carry input; </claim-text>
<claim-text>at least one preposition circuit provides at least one of the first to fourth logical inputs, wherein said at least one preposition circuit is a programmable circuit that is allowed to be set to an arbitrary one of a plurality of logical functions, </claim-text>
<claim-text>wherein the function block is allowed to be set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the logical inputs and the 4-2 carry input, </claim-text>
<claim-text>wherein the function block allows a plurality of 4-input/1-output logical functions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00213">
<claim-text><highlight><bold>213</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 212</dependent-claim-reference>, wherein the 4-2 adder block comprises: 
<claim-text>a 5-input exclusive OR circuit for output the addition output from the first to fourth logical inputs and the 4-2 carry input; </claim-text>
<claim-text>a 4-2 carry block for generating the 4-2 carry output from at least three ones of the first to fourth logical inputs; </claim-text>
<claim-text>a carry block for generating the carry output from a first multiple-signal group including the 4-2 carry input and at least one of the first to fourth logical inputs. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00214">
<claim-text><highlight><bold>214</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 213</dependent-claim-reference>, wherein 
<claim-text>the 5 input exclusive OR circuit comprises a 4-input exclusive OR circuit performing an exclusive OR function on the first to fourth logical inputs, </claim-text>
<claim-text>the carry block is controlled by an output of the 4-input exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00215">
<claim-text><highlight><bold>215</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 214</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry block outputs as the 4-2 carry output an OR of an AND of the first and second logical inputs and an AND of the third and fourth logical inputs, and </claim-text>
<claim-text>the carry block outputs the carry output one selected from a signal group consisting of the 4-2 carry input and an AND of an OR of the first and second logical inputs and an OR of the third and fourth logical inputs, depending on the output of the 4-input exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00216">
<claim-text><highlight><bold>216</bold></highlight>. The function block according to <dependent-claim-reference depends_on="CLM-00222">claim 214</dependent-claim-reference>, wherein 
<claim-text>the 4-2 carry block outputs as the 4-2 carry output an AND of an OR of the first and second logical inputs and an OR of the third and fourth logical inputs, and </claim-text>
<claim-text>the carry block outputs the carry output one selected from a signal group consisting of the 4-2 carry input and an OR of an AND of the first and second logical inputs and an AND of the third and fourth logical inputs, depending on the output of the 4-input exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00217">
<claim-text><highlight><bold>217</bold></highlight>. A function block for generating 4-2 carry output, addition output, carry output and ripple carry output from at least 4-2 carry input and ripple carry input, the function block implementing: 
<claim-text>a 4-input/1-output multiplexer controlled by at least a dynamic signal without intervention of an interconnection wire providing programmable connections between a plurality of function blocks; </claim-text>
<claim-text>a plurality of 4-input/1-output logical functions; </claim-text>
<claim-text>a 4-2 adder for generating the 4-2 carry output, the addition output, and the carry output from the 4-2 carry input; and </claim-text>
<claim-text>a full adder for generating the addition output and the ripple carry output from the ripple carry input. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00218">
<claim-text><highlight><bold>218</bold></highlight>. An N-bit 4-2 adder for generating multi-bit addition output and multi-bit carry output from first, second, third, and fourth N-bit argument inputs (N is a natural number greater than 1), comprising: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output; wherein 
<claim-text>the first N-bit argument input, second N-bit argument input, third N-bit argument input and fourth N-bit argument input consist of the first argument inputs of the N function blocks, second argument inputs of the N function blocks, third argument inputs of the N function blocks and fourth argument inputs of the N function blocks, respectively, </claim-text>
<claim-text>the multi-bit addition output includes addition outputs of the N function blocks, and </claim-text>
<claim-text>the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks B<highlight><subscript>1</subscript></highlight>-B<highlight><subscript>N </subscript></highlight>are connected such that a 4-2 carry output of a function block B<highlight><subscript>i </subscript></highlight>is a 4-2 carry input of a function block B<highlight><subscript>i&plus;1</subscript></highlight>, where i in an arbitrary natural number greater than 0 and not greater than N&minus;1, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
</claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00219">
<claim-text><highlight><bold>219</bold></highlight>. The N-bit 4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 218</dependent-claim-reference>, wherein the N-bit 4-2 adder is implemented on an integrated circuit which has the N function blocks and an interconnection network formed thereon, the interconnection network providing programmable connections between the N function blocks. </claim-text>
</claim>
<claim id="CLM-00220">
<claim-text><highlight><bold>220</bold></highlight>. The N-bit 4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 218</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating a logical output from the first, second, third, and fourth argument inputs thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth argument inputs; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first argument input; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least the 4-2 carry input; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce the carry output; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output and the fourth signal to produce the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00221">
<claim-text><highlight><bold>221</bold></highlight>. The N-bit 4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 218</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the first and second argument inputs; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the third and fourth argument inputs; </claim-text>
<claim-text>a 4-2 carry block for generating the 4-2 carry output from at least, one of the first and second argument inputs and one of the third and fourth argument inputs; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second argument inputs; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce the carry output depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00222">
<claim-text><highlight><bold>222</bold></highlight>. A multi-bit multi-argument 4-2 adder comprising a plurality of multi-bit 4-2 adders, 
<claim-text>each of the multi-bit 4-2 adders comprising: 
<claim-text>at least first, second, third, and fourth multi-bit argument inputs, multi-bit addition output and multi-bit carry output; </claim-text>
<claim-text>a plurality of function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output; </claim-text>
<claim-text>wherein the first multi-bit argument input, second multi-bit argument input, third multi-bit argument input and fourth multi-bit argument input consist of the first argument inputs of the function blocks, second argument inputs of the function blocks, third argument inputs of the function blocks, and fourth argument inputs of the function blocks, respectively, </claim-text>
<claim-text>the multi-bit addition output includes addition outputs of the function blocks, and </claim-text>
<claim-text>the multi-bit carry output includes carry outputs of the function blocks, </claim-text>
<claim-text>wherein the function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, <highlight><bold>042</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output, </claim-text>
</claim-text>
<claim-text>wherein the multi-bit multi-argument 4-2 adder has at least one of six configurations as follows: 
<claim-text>1) a first configuration in which a I-bit 4-2 adder (I is a natural number greater than 1), a J-bit 4-2 adder (J is a natural number greater than 1),and a K-bit 4-2 adder (K is a natural number greater than 1) are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the I-bit 4-2 adder and at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the J-bit 4-2 adder are supplied to first, second, third and fourth K-bit argument inputs of the K-bit 4-2 adder; </claim-text>
<claim-text>2) a second configuration in which the I-bit 4-2 adder and the J-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the I-bit 4-2 adder are supplied to any of first, second, third and fourth J-bit argument inputs of the J-bit 4-2 adder; </claim-text>
<claim-text>3) a third configuration in which 
<claim-text>the I-bit 4-2 adder and the J-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the I-bit 4-2 adder are supplied to any of first, second, third and fourth J-bit argument inputs of the J-bit 4-2 adder, and </claim-text>
<claim-text>the J-bit 4-2 adder and the K-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the J-bit 4-2 adder are supplied to any of first, second, third and fourth K-bit argument inputs of the K-bit 4-2 adder; </claim-text>
</claim-text>
<claim-text>4) a fourth configuration in which a multi-bit full adder having a multi-bit addition output and first and second multi-bit argument inputs and a N-bit 4-2 adder (N is a natural number greater than 1) are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the N-bit 4-2 adder are supplied to respective ones or the first and second multi-bit argument inputs of the multi-bit full adder; </claim-text>
<claim-text>5) a fifth configuration in which 
<claim-text>the I-bit 4-2 adder and the J-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the I-bit 4-2 adder are supplied to any of first, second, third and fourth J-bit argument inputs of the J-bit 4-2 adder, </claim-text>
<claim-text>the K-bit 4-2 adder and a L-bit 4-2 adder (L is a natural number greater than 1) are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the K-bit 4-2 adder are supplied to any of first, second, third and fourth L-bit argument inputs of the L-bit 4-2 adder, and </claim-text>
<claim-text>the J-bit 4-2 adder, the L-bit 4-2 adder, and a M-bit 4-2 adder (M is a natural number greater than 1) are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the J-bit 4-2 adder and at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the L-bit 4-2 adder are supplied to first, second, third and fourth M-bit argument inputs of the M-bit 4-2 adder; and </claim-text>
</claim-text>
<claim-text>6) a sixth configuration in which 
<claim-text>the I-bit 4-2 adder and the J-bit 4-2 adder are connected such that at least one portion or a multi-bit carry output and at least one portion of a multi-bit addition output of the I-bit 4-2 adder are supplied to any of first, second, third and fourth J-bit argument inputs of the J-bit 4-2 adder, </claim-text>
<claim-text>the J-bit 4-2 adder, the K-bit 4-2 adder, and the L-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the J-bit 4-2 adder and at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the K-bit 4-2 adder are supplied to first, second, third and fourth I-bit argument inputs of the L-bit 4-2 adder, and </claim-text>
<claim-text>the M-bit 4-2 adder, the N-bit 4-2 adder, and the K-bit 4-2 adder are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the M-bit 4-2 adder and at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of the N bit 4-2 adder are supplied to first, second, third and fourth K-bit argument inputs of the K-bit 4-2 adder. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00223">
<claim-text><highlight><bold>223</bold></highlight>. An N-bit 4AND4-2 adder for generating multi-bit addition output and multi-bit carry output (N is a natural number greater than 1), comprising: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output, wherein the first to fourth argument inputs are supplied from respective ones of AND circuits; </claim-text>
<claim-text>wherein the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00224">
<claim-text><highlight><bold>224</bold></highlight>. The N-bit 4AND4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 223</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating a logical output from the first, second, third, and fourth argument inputs thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth argument inputs; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first argument input; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least the 4-2 carry input; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce the carry output; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output and the fourth signal to produce the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00225">
<claim-text><highlight><bold>225</bold></highlight>. The N-bit 4AND4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 223</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the first and second argument inputs; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the third and fourth argument inputs; </claim-text>
<claim-text>a 4-2 carry block for generating the 4-2 carry output from at least, one of the first and second argument inputs and one of the third and fourth argument inputs; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second argument inputs; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce the carry output depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00226">
<claim-text><highlight><bold>226</bold></highlight>. A multiplier comprising: 
<claim-text>a plurality of N-bit 4AND4-2 adders, each of which has multi-bit addition output and multi-bit carry output (N is a natural number greater than 1); and </claim-text>
<claim-text>a plurality of multi-bit multi-argument 4-2 adders, each of which includes a plurality of multi-bit 4-2 adders, </claim-text>
<claim-text>each of the N-bit 4AND4-2 adders comprising: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output, wherein the first to fourth inputs are supplied from respective ones of AND circuits; </claim-text>
<claim-text>wherein the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output, and </claim-text>
</claim-text>
<claim-text>each of the multi-bit 4-2 adders comprises: 
<claim-text>at least first, second, third, and fourth multi-bit argument inputs, multi-bit addition output and multi-bit carry output; </claim-text>
<claim-text>a plurality of function blocks which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output; </claim-text>
<claim-text>wherein the first multi-bit argument input, second multi-bit argument input, third multi-bit argument input and fourth multi-bit argument input consist of the first argument inputs of the function blocks, second argument inputs of the function blocks, third argument inputs of the function blocks, and fourth argument inputs of the function blocks, respectively, </claim-text>
<claim-text>the multi-bit addition output includes addition outputs of the function blocks, and </claim-text>
<claim-text>the multi-bit carry output includes carry outputs of the function blocks, </claim-text>
<claim-text>wherein the function blocks are connected such that a 4-2 carry output of a i-th function block as a 4-2 carry input of a (i&plus;1) -th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00227">
<claim-text><highlight><bold>227</bold></highlight>. An N-bit 2AND4-2 adder for generating multi-bit addition output and multi-bit carry output from first and second N-bit argument inputs (N is a natural number greater than 1), comprising: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output, wherein the first and second argument inputs are supplied from respective ones of AND circuits; </claim-text>
<claim-text>wherein the first N-bit argument input and the second N-bit argument input consist of the first argument inputs of the N function blocks and second argument inputs of the N function blocks, respectively, the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input or a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00228">
<claim-text><highlight><bold>228</bold></highlight>. The N-bit 2AND4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 227</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating a logical output from the first, second, third, and fourth argument inputs thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth argument inputs; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first argument input; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least the 4-2 carry input; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce the carry output; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output and the fourth signal to produce the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00229">
<claim-text><highlight><bold>229</bold></highlight>. The N-bit 2AND4-2 adder according to <dependent-claim-reference depends_on="CLM-00222">claim 227</dependent-claim-reference>, wherein each of the N function blocks comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the first and second argument inputs; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the third and fourth argument inputs; </claim-text>
<claim-text>a 4-2 carry block for generating the 4-2 carry output from at least, one of the first and second argument inputs and one of the third and fourth argument inputs; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second argument inputs; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input and at least one logical input signal, </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce the carry output depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00230">
<claim-text><highlight><bold>230</bold></highlight>. A multiplier comprising: 
<claim-text>M N-bit 2AND4-2 adders, each of which has multi-bit addition output, multi-bit carry output, and first and second N-bit argument inputs (M, N is a natural number greater than 1) and comprises: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output, wherein the first and second argument inputs are supplied from respective ones of AND circuits; </claim-text>
<claim-text>wherein the first N-bit argument input and the second N-bit argument input consist of the first argument inputs of the N function blocks and second argument inputs of the N function blocks, respectively, the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output, </claim-text>
<claim-text>wherein the M N-bit 2AND4-2 adders are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of an j-th N-bit 2AND4-2 adder are supplied to the first and second N-bit argument inputs of an (j&plus;1) -th N-bit 2AND4-2 adder, wherein j is a natural number greater than 1 and not greater than M&minus;1. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00231">
<claim-text><highlight><bold>231</bold></highlight>. A multiplier comprising: 
<claim-text>an N-bit 2AND4-2 adder having multi-bit addition output, multi-bit carry output, and at least first and second N-bit argument inputs (M, N is a natural number greater than 1), wherein the N-bit 2AND4-2 adder comprises: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a 4-2 carry output, an addition output, and a carry output, wherein the first and second argument inputs are supplied from respective ones of AND circuits; </claim-text>
<claim-text>wherein the first N-bit argument input and the second N-bit argument input consist of the first argument inputs of the N function blocks and second argument inputs of the N function blocks, respectively, the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of the N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00232">
<claim-text><highlight><bold>232</bold></highlight>. A multiplier comprising: 
<claim-text>at least two block circuits, each of which comprises: 
<claim-text>M N-bit 2AND4-2 adders, each of which has multi-bit addition output, multi-bit carry output, and at least first and second N-bit argument inputs (M, N is a natural number greater than 1) and comprises: 
<claim-text>N function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions, wherein each of the N function blocks has at least first to fourth argument inputs, a 4-2 carry input, a4-2 carry output, an addition output, and a carry output, wherein the first and second argument inputs are supplied from to respective ones of AND circuits; </claim-text>
<claim-text>wherein the first N-bit argument input and the second N-bit argument input consist of the first argument inputs of the N function blocks and second argument inputs of the N function blocks, respectively, the multi-bit addition output includes addition outputs of the N function blocks, and the multi-bit carry output includes carry outputs of the N function blocks, </claim-text>
<claim-text>wherein the N function blocks are connected such that a 4-2 carry output of a i-th function block is a 4-2 carry input of a (i&plus;1)-th function block, where i is an arbitrary natural number greater than 0, </claim-text>
<claim-text>wherein each of tho N function blocks is set to satisfying the following equation: </claim-text>
<claim-text><in-line-formula><highlight><italic>S&equals;</italic></highlight>(<highlight><italic>O</italic></highlight>42<highlight><italic>&plus;OC</italic></highlight>)&times;2<highlight><italic>&plus;OS, </italic></highlight></in-line-formula></claim-text>
<claim-text>where S is a sum of the first to fourth argument inputs and the 4-2 carry input, O<highlight><bold>42</bold></highlight> is the 4-2 carry output, OC is the carry output, and OS is the addition output, </claim-text>
<claim-text>wherein the M N-bit 2AND4-2 adders are connected such that at least one portion of a multi-bit carry output and at least one portion of a multi-bit addition output of an j-th N-bit 2AND4-2 adder are supplied to the first and second N-bit argument inputs of an (j&plus;1) -th N-bit 2AND4-2 adder, wherein j is a natural number greater than 1 and not greater than M&minus;1. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00233">
<claim-text><highlight><bold>233</bold></highlight>. A barrel shifter comprising: 
<claim-text>a plurality of function blocks, each of which is set to an arbitrary logical function selected from a plurality of logical functions, </claim-text>
<claim-text>wherein the function blocks are arrayed in a plurality of stages and are connected in programmable fashion by an interconnection network, </claim-text>
<claim-text>wherein a 4-input/1-output multiplexer controlled by a dynamic signal is configured in each of the function blocks. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00234">
<claim-text><highlight><bold>234</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein an i-th input of n-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (n&minus;i&times;4<highlight><superscript>k</superscript></highlight>)-th bit of multi-bit data output from a previous stage, wherein i is one of 0, 1, 2, and 3, k is an integer equal to or greater than 0, n is an integer equal to or greater than 3&times;4<highlight><superscript>k</superscript></highlight>. </claim-text>
</claim>
<claim id="CLM-00235">
<claim-text><highlight><bold>235</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein an i-th input of n-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (n&plus;i&times;4<highlight><superscript>k</superscript></highlight>)-th bit of multi-bit data output from a previous stage, wherein i is one of 0, 1, 2, and 3, k and n is an integer equal to or greater than 0. </claim-text>
</claim>
<claim id="CLM-00236">
<claim-text><highlight><bold>236</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein the plurality of function blocks are divided into a first section and a second section, 
<claim-text>wherein in the first section, an i-th input of m-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (m&minus;i&times;4<highlight><superscript>k</superscript></highlight>)-th bit of multi-bit data output from a previous stage, wherein i is one of 0, 1, 2, and 3, k is an integer equal to or greater than 0, and m is an integer equal to or greater than 3&times;4<highlight><superscript>k</superscript></highlight>, and </claim-text>
<claim-text>wherein in the second section, an j-th input of n-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (n&minus;j&times;4<highlight><superscript>k&plus;1</superscript></highlight>)-th bit of output data from the first section, wherein j is one of 0, 1, 2, and 3, and n is an integer equal to or greater than 3&times;4<highlight><superscript>k&plus;1</superscript></highlight>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00237">
<claim-text><highlight><bold>237</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein the plurality of function blocks are divided into a first section and a second section, 
<claim-text>wherein in the first section, an i-th input of m-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (m&plus;i&times;4<highlight><superscript>k</superscript></highlight>)-th bit of multi-bit data output from a previous stage, wherein i is one of 0, 1, 2, and 3, k and m is an integer equal to or greater than 0, and </claim-text>
<claim-text>wherein in the second section, an j-th input of n-th 4-input/1-output multiplexer in arbitrary stage is supplied with a (n&plus;j&times;4<highlight><superscript>k&plus;1</superscript></highlight>)-th bit of output data from the first section, wherein j is one of 0, 1, 2, and 3, and n is an integer equal to or greater than 3&times;4<highlight><superscript>k&plus;1</superscript></highlight>. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00238">
<claim-text><highlight><bold>238</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein each of the function blocks comprises: 
<claim-text>a logical function generator having at least four logical input terminals and one logical output terminal, for generating a logical output from the first, second, third, and fourth argument inputs thereof according to a logical function selected from a plurality of 4-input/1-output logical functions depending on configuration data; </claim-text>
<claim-text>a 4-2 carry block for generating a 4-2 carry output signal from the second, third, and fourth argument inputs; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least the logical output; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least the first argument input; </claim-text>
<claim-text>a third signal generator for generating a third signal from at least the 4-2 carry input; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from at least the 4-2 carry input; </claim-text>
<claim-text>a selector for selecting one of the second and third signals depending on the first signal to produce the carry output; and </claim-text>
<claim-text>an exclusive OR circuit for performing an exclusive OR function on the logical output and the fourth signal to produce the addition output. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00239">
<claim-text><highlight><bold>239</bold></highlight>. The barrel shifter according to <dependent-claim-reference depends_on="CLM-00222">claim 233</dependent-claim-reference>, wherein each of the function blocks comprises: 
<claim-text>a first exclusive OR circuit for performing an exclusive OR function on the first and second argument inputs; </claim-text>
<claim-text>a second exclusive OR circuit for performing an exclusive OR function on the third and fourth argument inputs, </claim-text>
<claim-text>a 4-2 carry block for generating the 4-2 carry output from at least, one of the first and second argument inputs and one of the third and fourth argument inputs; </claim-text>
<claim-text>a third exclusive OR circuit for performing an exclusive OR function on output signals of the first exclusive OR circuit and the second exclusive OR circuit; </claim-text>
<claim-text>a first signal generator for generating a first signal from at least an output signal of the third exclusive OR circuit; </claim-text>
<claim-text>a second signal generator for generating a second signal from at least one of the first and second argument inputs; </claim-text>
<claim-text>a third signal generator for generating a third signal from a first multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a fourth signal generator for generating a fourth signal from a second multiple-signal group including the 4-2 carry input and at least one logical input signal; </claim-text>
<claim-text>a selector for selecting one of the second and third signals to produce the carry output depending on the first signal; and </claim-text>
<claim-text>a fourth exclusive OR circuit for performing an exclusive OR function on the fourth signal and the output signal of the third exclusive OR circuit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00240">
<claim-text><highlight><bold>240</bold></highlight>. A combined function block comprising: 
<claim-text>two function blocks, each of which is programmed to provide an arbitrary logical function selected from a plurality of logical functions; and </claim-text>
<claim-text>a 2-bit carry look-ahead circuit having a ripple carry input and a ripple carry output, </claim-text>
<claim-text>wherein the 2-bit carry look-ahead circuit includes a first NAND circuit and a second NAND circuit, wherein the ripple carry output is supplied by the first NAND circuit, </claim-text>
<claim-text>one input of the first NAND circuit is supplied by the second NAND circuit, and </claim-text>
<claim-text>one input of the second NAND circuit is supplied by the ripple carry input. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00241">
<claim-text><highlight><bold>241</bold></highlight>. A multiplier implemented on an integrated circuit comprising: 
<claim-text>a plurality of function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions; and </claim-text>
<claim-text>an interconnection wiring network allowing programmable connections among the plurality of function blocks, </claim-text>
<claim-text>wherein the multiplier comprises: 
<claim-text>at least one 4-2 adder, each of which is implemented in a different one of the plurality of function blocks, </claim-text>
<claim-text>wherein the multiplier does not include any modified booth partial product generator. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00242">
<claim-text><highlight><bold>242</bold></highlight>. A multiplier implemented on an integrated circuit comprising: 
<claim-text>a plurality of function blocks, each of which is set to an arbitrary logical function selected in programmable fashion from a plurality of logical functions; and </claim-text>
<claim-text>an interconnection wiring network allowing programmable connections among the plurality of function blocks, </claim-text>
<claim-text>wherein the multiplier comprises: 
<claim-text>at least one 4-2 adder, each of which is implemented in a different one of the plurality of function blocks, wherein at least one input of each 4-2 adder has an output of an AND circuit connected thereto, </claim-text>
<claim-text>wherein the multiplier does not include any modified booth partial product generator.</claim-text>
</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>40</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001613A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001613A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001613A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001613A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001613A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001613A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001613A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001613A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001613A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001613A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001613A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001613A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001613A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030001613A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030001613A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030001613A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030001613A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030001613A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030001613A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030001613A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030001613A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030001613A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030001613A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030001613A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030001613A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030001613A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030001613A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030001613A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030001613A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030001613A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00030">
<image id="EMI-D00030" file="US20030001613A1-20030102-D00030.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00031">
<image id="EMI-D00031" file="US20030001613A1-20030102-D00031.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00032">
<image id="EMI-D00032" file="US20030001613A1-20030102-D00032.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00033">
<image id="EMI-D00033" file="US20030001613A1-20030102-D00033.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00034">
<image id="EMI-D00034" file="US20030001613A1-20030102-D00034.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00035">
<image id="EMI-D00035" file="US20030001613A1-20030102-D00035.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00036">
<image id="EMI-D00036" file="US20030001613A1-20030102-D00036.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00037">
<image id="EMI-D00037" file="US20030001613A1-20030102-D00037.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00038">
<image id="EMI-D00038" file="US20030001613A1-20030102-D00038.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00039">
<image id="EMI-D00039" file="US20030001613A1-20030102-D00039.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00040">
<image id="EMI-D00040" file="US20030001613A1-20030102-D00040.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00041">
<image id="EMI-D00041" file="US20030001613A1-20030102-D00041.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00042">
<image id="EMI-D00042" file="US20030001613A1-20030102-D00042.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00043">
<image id="EMI-D00043" file="US20030001613A1-20030102-D00043.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00044">
<image id="EMI-D00044" file="US20030001613A1-20030102-D00044.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00045">
<image id="EMI-D00045" file="US20030001613A1-20030102-D00045.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00046">
<image id="EMI-D00046" file="US20030001613A1-20030102-D00046.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00047">
<image id="EMI-D00047" file="US20030001613A1-20030102-D00047.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00048">
<image id="EMI-D00048" file="US20030001613A1-20030102-D00048.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00049">
<image id="EMI-D00049" file="US20030001613A1-20030102-D00049.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00050">
<image id="EMI-D00050" file="US20030001613A1-20030102-D00050.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00051">
<image id="EMI-D00051" file="US20030001613A1-20030102-D00051.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00052">
<image id="EMI-D00052" file="US20030001613A1-20030102-D00052.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00053">
<image id="EMI-D00053" file="US20030001613A1-20030102-D00053.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00054">
<image id="EMI-D00054" file="US20030001613A1-20030102-D00054.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00055">
<image id="EMI-D00055" file="US20030001613A1-20030102-D00055.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00056">
<image id="EMI-D00056" file="US20030001613A1-20030102-D00056.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00057">
<image id="EMI-D00057" file="US20030001613A1-20030102-D00057.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00058">
<image id="EMI-D00058" file="US20030001613A1-20030102-D00058.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00059">
<image id="EMI-D00059" file="US20030001613A1-20030102-D00059.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00060">
<image id="EMI-D00060" file="US20030001613A1-20030102-D00060.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00061">
<image id="EMI-D00061" file="US20030001613A1-20030102-D00061.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00062">
<image id="EMI-D00062" file="US20030001613A1-20030102-D00062.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00063">
<image id="EMI-D00063" file="US20030001613A1-20030102-D00063.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00064">
<image id="EMI-D00064" file="US20030001613A1-20030102-D00064.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00065">
<image id="EMI-D00065" file="US20030001613A1-20030102-D00065.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00066">
<image id="EMI-D00066" file="US20030001613A1-20030102-D00066.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00067">
<image id="EMI-D00067" file="US20030001613A1-20030102-D00067.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00068">
<image id="EMI-D00068" file="US20030001613A1-20030102-D00068.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00069">
<image id="EMI-D00069" file="US20030001613A1-20030102-D00069.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00070">
<image id="EMI-D00070" file="US20030001613A1-20030102-D00070.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00071">
<image id="EMI-D00071" file="US20030001613A1-20030102-D00071.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00072">
<image id="EMI-D00072" file="US20030001613A1-20030102-D00072.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00073">
<image id="EMI-D00073" file="US20030001613A1-20030102-D00073.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00074">
<image id="EMI-D00074" file="US20030001613A1-20030102-D00074.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00075">
<image id="EMI-D00075" file="US20030001613A1-20030102-D00075.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00076">
<image id="EMI-D00076" file="US20030001613A1-20030102-D00076.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00077">
<image id="EMI-D00077" file="US20030001613A1-20030102-D00077.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00078">
<image id="EMI-D00078" file="US20030001613A1-20030102-D00078.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00079">
<image id="EMI-D00079" file="US20030001613A1-20030102-D00079.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00080">
<image id="EMI-D00080" file="US20030001613A1-20030102-D00080.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00081">
<image id="EMI-D00081" file="US20030001613A1-20030102-D00081.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00082">
<image id="EMI-D00082" file="US20030001613A1-20030102-D00082.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00083">
<image id="EMI-D00083" file="US20030001613A1-20030102-D00083.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00084">
<image id="EMI-D00084" file="US20030001613A1-20030102-D00084.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00085">
<image id="EMI-D00085" file="US20030001613A1-20030102-D00085.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00086">
<image id="EMI-D00086" file="US20030001613A1-20030102-D00086.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00087">
<image id="EMI-D00087" file="US20030001613A1-20030102-D00087.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00088">
<image id="EMI-D00088" file="US20030001613A1-20030102-D00088.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00089">
<image id="EMI-D00089" file="US20030001613A1-20030102-D00089.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00090">
<image id="EMI-D00090" file="US20030001613A1-20030102-D00090.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00091">
<image id="EMI-D00091" file="US20030001613A1-20030102-D00091.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00092">
<image id="EMI-D00092" file="US20030001613A1-20030102-D00092.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00093">
<image id="EMI-D00093" file="US20030001613A1-20030102-D00093.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00094">
<image id="EMI-D00094" file="US20030001613A1-20030102-D00094.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00095">
<image id="EMI-D00095" file="US20030001613A1-20030102-D00095.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00096">
<image id="EMI-D00096" file="US20030001613A1-20030102-D00096.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00097">
<image id="EMI-D00097" file="US20030001613A1-20030102-D00097.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00098">
<image id="EMI-D00098" file="US20030001613A1-20030102-D00098.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00099">
<image id="EMI-D00099" file="US20030001613A1-20030102-D00099.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00100">
<image id="EMI-D00100" file="US20030001613A1-20030102-D00100.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00101">
<image id="EMI-D00101" file="US20030001613A1-20030102-D00101.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00102">
<image id="EMI-D00102" file="US20030001613A1-20030102-D00102.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00103">
<image id="EMI-D00103" file="US20030001613A1-20030102-D00103.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00104">
<image id="EMI-D00104" file="US20030001613A1-20030102-D00104.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00105">
<image id="EMI-D00105" file="US20030001613A1-20030102-D00105.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00106">
<image id="EMI-D00106" file="US20030001613A1-20030102-D00106.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00107">
<image id="EMI-D00107" file="US20030001613A1-20030102-D00107.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
