<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005255A1-20030102-D00000.TIF SYSTEM "US20030005255A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00001.TIF SYSTEM "US20030005255A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00002.TIF SYSTEM "US20030005255A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00003.TIF SYSTEM "US20030005255A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00004.TIF SYSTEM "US20030005255A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00005.TIF SYSTEM "US20030005255A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00006.TIF SYSTEM "US20030005255A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00007.TIF SYSTEM "US20030005255A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00008.TIF SYSTEM "US20030005255A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00009.TIF SYSTEM "US20030005255A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005255A1-20030102-D00010.TIF SYSTEM "US20030005255A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005255</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10178269</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020625</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>201000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>167000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and system for fast data access using a memory array</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60301435</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Robert</given-name>
<family-name>Beat</family-name>
</name>
<residence>
<residence-non-us>
<city>Bristol</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Broadcom Corporation</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>STERNE, KESSLER, GOLDSTEIN &amp; FOX PLLC</name-1>
<name-2></name-2>
<address>
<address-1>1100 NEW YORK AVENUE, N.W., SUITE 600</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20005-3934</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">First and second address-selection information, as well as first and second read/write information, is contemporaneously provided to various enabling circuits. The enabling circuits can then enable one or more first memory cells based on the first address-selection and first read/write information, and further enable the one or more second memory cells based on the second address-selection information and read/write information. Data can then be written to, or read from, the enabled memory cells in a single memory-access cycle. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority to Provisional U.S. Patent Application No. 60/301,435, filed Jun. 29, 2001, which is incorporated herein by reference in its entirety.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention relates to methods and systems for fast access of computer-based memories. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Modern computer-based systems often use wide memories that have a constant width. However, these systems must often manipulate a variety of variables having different data widths. For instance, a particular processor can have a thirty-two bit (four byte) wide bus with a thirty-two bit-wide random access memory (RAM), but must manipulate any number of variables having eight bit (one byte), sixteen bit (two bytes) or thirty-two bit widths. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One problem that can arise with such systems is that data can become misaligned with the physical boundaries of the available memory. For example, a first variable in a block of thirty-two bit-wide RAM may be a byte-wide variable while a second variable may be a four-byte variable. As a result, the first variable will occupy the first byte of a first memory location, while the second variable will occupy the remaining three bytes of the first memory location plus the first byte of the next memory location. One unfortunate consequence of this situation is that a computer accessing the second variable can take two separate memory-access cycles to either read or write the second variable. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> While various approaches are available to align various variables having different bit-widths with the address boundaries of a memory, these approaches typically require a wasteful use of available memory resources or otherwise cannot be used with practicable systems. Accordingly, new technologies that can eliminate multiple-cycle memory accesses for misaligned data are desirable. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The invention provides techniques directed to accessing misaligned data words in an array of memory cells. In various embodiments, techniques directed to reading a misaligned data variable are provided where a first portion of the misaligned data variable resides in one or more first memory cells associated with a first address and a second portion of the misaligned data variable resides in one or more second memory cells associated with a second address. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> By contemporaneously providing first and second address-selection information as well as first and second read information, enabling circuits can read-enable one or more of the first memory cells based on the first address-selection and first read information, and further read-enable the one or more of the second memory cells based on the second address-selection information and second read information. The data from the enabled memory cells can then be received and assembled by a device, such as buffer circuitry, optionally shifted, then provided to an external device. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In various other embodiments, techniques directed to writing a misaligned data variables are provided where a first portion of the misaligned data variable is directed to one or more first memory cells associated with a first address and a second portion of the misaligned data variable is directed one or more second memory cells associated with a second address. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> By contemporaneously providing first and second address-selection information as well as first and second write information, enabling circuits can write-enable one or more of the first memory cells based on the first address-selection and first write information, and further write-enable the one or more of the second memory cells based on the second address-selection information and second write information. Meanwhile, a device, such as buffer circuitry, can receive the misaligned data variable from an external source, appropriately shift the misaligned data variable and provide the shifted data of the misaligned data variable to the write-enabled memory cells of the two memory locations. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Accordingly, data access operations that would take two memory-access cycles on a conventional memory system are reduced to using a single memory-access cycle. Others features and advantages will become apparent in the following descriptions and accompanying figures.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The invention is described in detail with regard to the following figures, wherein like numerals reference like elements, and wherein: </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary system capable of accessing misaligned data in a single memory-access cycle; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts the location-enable device of the system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of the cell-enable device of the system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>D depict a first memory access operation according to the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>D depict a second memory access operation according to the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram of the memory array of the system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart outlining a first exemplary operation according to the present invention; and </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart outlining a second exemplary operation according to the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A frequent problem that arises with modem computer-based systems is that, while the widths of an available physical memory are fixed, the widths of various data types can vary. For example, a particular microcomputer may have a thirty-two bit-wide memory, but may be required to access and manipulate eight-bit, sixteen-bit and thirty-two bit data. One problem that can arise with such systems is that different variables can become misaligned with the address boundaries of the physical memories. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> For instance, a first data variable in a block of thirty-two bit-wide RAM may be a byte-wide variable while a second data variable may be a four-byte variable. As a result, the first data variable will occupy the first byte of a first memory location, while the second data variable will occupy the remaining three bytes of the first memory location plus the first byte of the next memory location. One unfortunate consequence of this situation is that a computer accessing the second data variable can take two separate memory-access cycles to either read or write the second variable. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> However, by providing a memory array that allows contemporaneous access to two consecutive memory locations, e.g., the first and second memory locations, and that can simultaneously receive an array of read/write enable signals for the various bytes of both the even and odd memory addresses of the memory array, the misaligned data variable can be written to or read from the memory array in a single memory-access cycle. Using the example immediately above, the second data variable (represented by data bytes &lcub;d3, d2, d1, d0&rcub;) is misaligned such that the low three data variable bytes &lcub;d2, d1, d0&rcub; must be written to or read from the high three bytes &lcub;b<highlight><subscript>0</subscript></highlight>3, b<highlight><subscript>0</subscript></highlight>2, b<highlight><subscript>0</subscript></highlight>1&rcub; of memory location zero and the low data variable byte &lcub;d0&rcub; must be written to or read from to the low byte &lcub;b<highlight><subscript>1</subscript></highlight>0&rcub; of memory location one. That is, data variable bytes &lcub;d3, d2, d1, d0&rcub; must be written to or read from memory bytes &lcub;b<highlight><subscript>1</subscript></highlight>0, b<highlight><subscript>0</subscript></highlight>3, b<highlight><subscript>0</subscript></highlight>2, b<highlight><subscript>0</subscript></highlight>1&rcub; respectively. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Accordingly, by enabling the consecutive address selection signals for both of memory location zero (an even address) and memory address one (an odd address), and further providing arrays of even and odd write-enable signals &lcub;WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb;&rcub; and &lcub;WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb;&rcub;, the second data variable can be written to the memory array if the second data variable &lcub;d3, d2, d1, d0&rcub; were circular-shifted to &lcub;d0, d3, d2, d1&rcub;, write-enable signals WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb; and WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb; are active and write-enable signals WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, and WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb; are inactive. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Similarly, misaligned data variables can be read by the enabling consecutive address selection signals for both of memory location zero and memory address one, providing the requisite active read-enable signals for the two memory locations, i.e., RE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb; and RE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb;, reading the enabled bytes, appropriately combining the data from enabled bytes, and then circular-shifting the combined data from &lcub;d0, d3, d2, d1&rcub; to &lcub;d3, d2, d1, d0&rcub;. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a memory system <highlight><bold>100</bold></highlight> capable of accessing misaligned data in a single memory-access cycle. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the system <highlight><bold>100</bold></highlight> includes a first data buffer block <highlight><bold>110</bold></highlight>, a second data buffer block <highlight><bold>140</bold></highlight>, a memory array <highlight><bold>120</bold></highlight> and an address device <highlight><bold>130</bold></highlight>. The address device <highlight><bold>130</bold></highlight> in turn contains an address-selection device <highlight><bold>132</bold></highlight> and a cell-enable device <highlight><bold>133</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> For the purposes of the following discussion, the exemplary memory array <highlight><bold>120</bold></highlight> can have <highlight><bold>262</bold></highlight>,<highlight><bold>144</bold></highlight> (2<highlight><superscript>18</superscript></highlight>) separately addressable memory locations with each memory location containing four byte-wide cells &lcub;b3, b2, b1, b0&rcub;. However, it should be appreciated that, in various embodiments, the number of addressable memory locations as well as the width of the individual memory locations/cells can vary without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In a first operation, an external device (not shown) can write a misaligned data variable to the memory system <highlight><bold>100</bold></highlight> in a single memory-access cycle. During the operation, the external device can provide a data variable to the first data buffer block <highlight><bold>110</bold></highlight> via link <highlight><bold>102</bold></highlight>, and further provide address and control signals to the address device <highlight><bold>130</bold></highlight> via links <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> respectively. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> receives the address and control signals, the address device <highlight><bold>130</bold></highlight> can make a determination whether a particular variable is misaligned, i.e., whether the particular data variable resides in, or is directed to, two separate memory locations of the memory array <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> If a particular data variable is misaligned, the address device <highlight><bold>130</bold></highlight> can provide an offset to the first data buffer block <highlight><bold>110</bold></highlight> via link <highlight><bold>138</bold></highlight>-W. For example, if a particular four-byte data variable is misaligned such that the first byte of the misaligned data variable is located at the third byte of a memory location, the address device <highlight><bold>130</bold></highlight> can provide an offset of two to the first data buffer block <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> provides the offset to the first data buffer <highlight><bold>110</bold></highlight>, the address device <highlight><bold>130</bold></highlight> can further provide address-selection information, such as an array of address-enable signals, to the memory array <highlight><bold>120</bold></highlight>. For example, if a data variable must be written to a portion of memory location <highlight><bold>1000</bold></highlight>, the address device <highlight><bold>130</bold></highlight> can activate an address signal for that memory location. Furthermore, if the a data variable must be written to a portion of memory location <highlight><bold>1000</bold></highlight> plus a portion of memory location <highlight><bold>1001</bold></highlight>, the address device <highlight><bold>130</bold></highlight> can contemporaneously activate address signals for both memory locations. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> provides address-selection information, the cell-enable device <highlight><bold>133</bold></highlight> can provide write information to the memory array <highlight><bold>120</bold></highlight>. The exemplary cell-enable device <highlight><bold>133</bold></highlight> can provide write information in the form of eight write-enable signals with four write-enable signals (WE<highlight><subscript>even</subscript></highlight>) being directed to all of the memory cells having even addresses &lcub;0, 2, 4, 6, . . . &rcub; and four write-enable signals (WE<highlight><subscript>odd</subscript></highlight>) being directed to all of the memory cells having odd addresses &lcub;1, 3, 5, 7 . . . &rcub;. Using the example above, assuming that a four-byte data variable is misaligned such that the low three data variable bytes &lcub;d2, d1, d0&rcub; must be written to the high three bytes &lcub;b<highlight><subscript>0</subscript></highlight>3, b<highlight><subscript>0</subscript></highlight>2, b<highlight><subscript>0</subscript></highlight>1&rcub; of memory location zero and the remaining high byte &lcub;d3&rcub; must be written to the low byte &lcub;b<highlight><subscript>1</subscript></highlight>0&rcub; of memory location one, the cell-enable device <highlight><bold>133</bold></highlight> can activate write-enable signals WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb; and WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb; while keeping the remaining write-enable signals WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, and WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb; inactive. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> provides address, control and offset information, the first data buffer block <highlight><bold>110</bold></highlight> can receive the data variable along with the offset information, manipulate the data of the data variable and appropriately provide the manipulated data to the memory array <highlight><bold>120</bold></highlight>. For example, if a received four-byte data variable is received has an offset of one, the first data buffer block <highlight><bold>110</bold></highlight> can shift the low three bytes of the data variable &lcub;d2, d1, d0&rcub; to the high bytes while shifting the high byte of the data variable &lcub;d3&rcub; to the low byte to form a modified data variable &lcub;d2, d1, d0, d3&rcub;. Once appropriately manipulated, the first data buffer block <highlight><bold>110</bold></highlight> can provide the modified data variable to the memory array <highlight><bold>120</bold></highlight> via the link connected therebetween. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> As modified data variables are provided to the memory array <highlight><bold>120</bold></highlight>, the memory array <highlight><bold>120</bold></highlight> can further receive address-selection information and write cell-enable information and appropriately store the data in the modified data variable. Again using the example above, assuming that a four-byte data variable is misaligned such that the low three data variable bytes &lcub;d2, d1, d0&rcub; must be written to the high three bytes &lcub;b<highlight><subscript>0</subscript></highlight>3, b<highlight><subscript>0</subscript></highlight>2, b<highlight><subscript>0</subscript></highlight>1&rcub; of memory location zero and the high data variable byte &lcub;d3&rcub; must be written to the low byte &lcub;b<highlight><subscript>1</subscript></highlight>0&rcub; of memory location one, the memory array <highlight><bold>120</bold></highlight> can receive a modified data variable &lcub;d2, d1, d0, d3&rcub; from the first data buffer block <highlight><bold>110</bold></highlight>, receive address-selection signals for memory locations zero and one from the address-selection device <highlight><bold>132</bold></highlight> and receive write-enable information in the form of activated write-enable signals WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb; and WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb; and inactive write-enable signals WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, and WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb;. Once the data, address and enable information is received, the memory array <highlight><bold>120</bold></highlight> can appropriately store the data. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In a second operation, the system <highlight><bold>100</bold></highlight> can read a misaligned data variable from the memory array <highlight><bold>120</bold></highlight>. During operation, as an external device provides the appropriate address and control signals via links <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> respectively, the address device <highlight><bold>130</bold></highlight> can receive the address and control signals, provide an offset to the second data buffer <highlight><bold>140</bold></highlight> via link <highlight><bold>138</bold></highlight>-R, provide the appropriate address-selection information to memory array <highlight><bold>120</bold></highlight> via links <highlight><bold>132</bold></highlight> and further provide the appropriate read cell-enable information to memory array <highlight><bold>120</bold></highlight> via link <highlight><bold>134</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The memory array <highlight><bold>120</bold></highlight> can receive the address-selection and read cell-enable information and provide the appropriate bytes of data to the second data buffer block <highlight><bold>140</bold></highlight> via link <highlight><bold>122</bold></highlight>. The second data buffer block <highlight><bold>140</bold></highlight> in turn can receive the data bytes from the memory array <highlight><bold>120</bold></highlight> and combine the received data bytes into a single data variable taking into account the offset provided by the address device <highlight><bold>130</bold></highlight>. For example, assuming that a four-byte data variable is read with the low two bytes provided from location zero and the high two bytes provided from location one (which assumes a data offset of two), the second data buffer block <highlight><bold>140</bold></highlight> can receive the various bytes of data, combine the various data bytes into a single contiguous data variable having four bytes, appropriately shift the combined data by two bytes and provide the combined/shifted data variable to an external device. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The exemplary first data buffer block <highlight><bold>110</bold></highlight> can be a portion of integrated circuit containing various logic circuits that can receive a data variable of a given size, effectively perform a circular-barrel shift/multiplexing operation on the received data variable and provide portions of the shifted/multiplexed data variable to the memory array <highlight><bold>120</bold></highlight>. However, it should be appreciated that, in various embodiments, the first data variable can use any combination of elements, such as shifters, barrel shifters, multiplexers, various sum-of-products-based logic, or any other known or later developed combination of systems and devices that can receive a data variable, perform the equivalent of a shifting operation on the received data variable and provide the shifted data to the memory array <highlight><bold>120</bold></highlight> without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The second data buffer block <highlight><bold>140</bold></highlight>, like the first data buffer <highlight><bold>110</bold></highlight>, can be a portion of an integrated circuit containing various logic circuits. However, like the first data buffer block <highlight><bold>110</bold></highlight>, it should be appreciated that the second data buffer block <highlight><bold>140</bold></highlight> can be any device capable of receiving various portions of data from multiple memories, combine the received data portions, and provide the combined data to an external device without departing from the spirit and scope of the present invention. Furthermore, in various embodiments, it should be appreciated that the functions of the first buffer block <highlight><bold>110</bold></highlight> and second buffer block <highlight><bold>140</bold></highlight> can be combined into a single buffering device and that the combined buffering device can interact with the memory array using a bi-directional bus system. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The address device <highlight><bold>130</bold></highlight>, like the first and second data buffer blocks <highlight><bold>110</bold></highlight> and <highlight><bold>140</bold></highlight>, can be a collection of logic circuits on a portion of an integrated circuit. However, it should be appreciated that the address device <highlight><bold>130</bold></highlight> can be any combination of systems and devices capable of receiving address and control signals from an external device and providing address-selection and enable information to memory array <highlight><bold>120</bold></highlight> as well as offset information to the data buffer blocks <highlight><bold>110</bold></highlight> and <highlight><bold>130</bold></highlight> without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts the address-selection device <highlight><bold>132</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the address-selection device <highlight><bold>132</bold></highlight> contains a number of sequential address decoders <highlight><bold>210</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>210</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>210</bold></highlight>-<highlight><italic>m </italic></highlight>and a number of logical &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>220</bold></highlight>-<highlight><bold>2</bold></highlight> . . . <highlight><bold>220</bold></highlight>-<highlight><italic>m</italic></highlight>. In operation, the address decoders <highlight><bold>210</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>210</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>210</bold></highlight>-<highlight><italic>m </italic></highlight>can receive an address &lcub;A<highlight><subscript>n </subscript></highlight>. . . A<highlight><subscript>0</subscript></highlight>&rcub; using address lines <highlight><bold>204</bold></highlight>-<highlight><bold>0</bold></highlight> . . . <highlight><bold>204</bold></highlight>-<highlight><italic>n </italic></highlight>and provide address-selection signals &lcub;. . . , x&minus;2, x&minus;1, x, x&plus;1, . . . &rcub; to the &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>220</bold></highlight>-<highlight><bold>2</bold></highlight> . . . <highlight><bold>220</bold></highlight>-<highlight><italic>m </italic></highlight>based on the received address. For example, if the received address is zero, then address decoder <highlight><bold>210</bold></highlight>-<highlight><bold>1</bold></highlight> &lcub;x&minus;2&rcub; can generate an active address signal, while the remaining address decoders <highlight><bold>210</bold></highlight>-<highlight><bold>2</bold></highlight>, <highlight><bold>210</bold></highlight>-<highlight><bold>3</bold></highlight>, . . . <highlight><bold>210</bold></highlight>-<highlight><italic>m </italic></highlight>generate inactive address signals. Further, if the received address is one, then address decoder <highlight><bold>210</bold></highlight>-<highlight><bold>2</bold></highlight> &lcub;x&minus;1&rcub; can generate an active address signal. Still further, if the received address is two, then address decoder <highlight><bold>210</bold></highlight>-<highlight><bold>3</bold></highlight> &lcub;x&rcub; can generate an active address signal, and so on. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> As the appropriate address decoder generates an active address signal, the various address signals, active and inactive, are provided to the &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>220</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>220</bold></highlight>-<highlight><italic>m </italic></highlight>via links <highlight><bold>112</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>112</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>112</bold></highlight>-<highlight><italic>m</italic></highlight>. The &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>220</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>220</bold></highlight>-<highlight><italic>m </italic></highlight>can receive the address signals and then provide address-selection signals to a device, such as a memory array via links <highlight><bold>132</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>132</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>132</bold></highlight>-<highlight><italic>m</italic></highlight>. Accordingly, for each address signal generated by an address decoder, two &ldquo;OR&rdquo; gates will generate address-selection signals. For example, if address decoder <highlight><bold>210</bold></highlight>-<highlight><bold>2</bold></highlight> generates an active address signal, then &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><bold>2</bold></highlight> and <highlight><bold>220</bold></highlight>-<highlight><bold>3</bold></highlight> will generate active address-selection signals. Similarly, in order to provide a memory wrap-around function, if address decoder <highlight><bold>212</bold></highlight>-<highlight><italic>m </italic></highlight>generates an active address signal, then &ldquo;OR&rdquo; gates <highlight><bold>220</bold></highlight>-<highlight><italic>m </italic></highlight>and <highlight><bold>220</bold></highlight>-<highlight><bold>0</bold></highlight> (not shown) will generate active address-selection signals as &ldquo;OR&rdquo; gate <highlight><bold>220</bold></highlight>-<highlight><bold>0</bold></highlight> receives an address signal from address decoder <highlight><bold>220</bold></highlight>-<highlight><italic>m </italic></highlight>via link <highlight><bold>212</bold></highlight>-<highlight><italic>m. </italic></highlight></paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of the exemplary cell-enable device <highlight><bold>133</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the cell-enable device <highlight><bold>133</bold></highlight> includes a shift device <highlight><bold>310</bold></highlight> and an enable signal generator <highlight><bold>320</bold></highlight>. In operation, the shift device <highlight><bold>310</bold></highlight> can receive data strobe information via link <highlight><bold>302</bold></highlight> and offset information via link <highlight><bold>304</bold></highlight>. The shift device <highlight><bold>310</bold></highlight> can then perform a circular-shift on the received strobe information according to the offset information. For example, if a misaligned two-byte data variable &lcub;0, 0, d1, d0&rcub; is to be written/read, the shift device <highlight><bold>310</bold></highlight> can receive a four-bit strobe pattern of &ldquo;0011&rdquo;. Assuming that the respective offset is three and the low byte &lcub;d0&rcub; is to be written to an even address and &lcub;d1&rcub; is to be written to an odd address, the shift device <highlight><bold>310</bold></highlight> can store the four-bit pattern in an eight-bit register to form a second pattern &ldquo;0000 0011&rdquo; and then circular-shift the second pattern three bits to the left to form a third pattern &ldquo;0001 1000&rdquo;. The shift device <highlight><bold>310</bold></highlight> can then provide the third pattern to the enable signal generator <highlight><bold>320</bold></highlight> via link <highlight><bold>312</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The enable signal generator <highlight><bold>320</bold></highlight> can receive the third strobe pattern, further receive a read/write indication via link <highlight><bold>306</bold></highlight>, combine the third pattern and read/write indication and generate eight write-enable signals &lcub;WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb;&rcub; and eight read-enable signals &lcub;RE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, RE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, RE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, RE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb;, RE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb;&rcub;. Depending on the state of the read/write indication, only a subset of one of the write-enable signals or read-enable signals will be activated. For the example above, assuming the enable signal generator <highlight><bold>320</bold></highlight> receives a pattern of &ldquo;0001 1000&rdquo; and a write indication, only WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb; and WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb; will activate while the remaining enable signals will remain inactive. Conversely, assuming the enable signal generator <highlight><bold>320</bold></highlight> receives a pattern of &ldquo;0111 1000&rdquo; and a read indication, only RE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, RE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, RE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb; and RE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb; will activate. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Once the enable signals are generated, the read-enable strobes can be provided to a device, such as a memory array via link <highlight><bold>134</bold></highlight> and the write enable signals can be provided via link <highlight><bold>136</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>D depict the operations of a misaligned data word being written to a system, such as a memory system depicted in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 4A, a</cross-reference> data variable &lcub;d3, d2, d1, d0&rcub; can be misaligned with respect to a physical memory having a number of memory locations <highlight><bold>402</bold></highlight>, <highlight><bold>404</bold></highlight>, <highlight><bold>406</bold></highlight> and <highlight><bold>408</bold></highlight> with each memory location having four bytes &lcub;b3, b2, b1, b0&rcub;. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Because the exemplary data variable is offset by two bytes, the low two data variable bytes &lcub;d1, d0&rcub; can be written to bytes &lcub;b3, b2&rcub; of memory location <highlight><bold>408</bold></highlight>, while data variable bytes &lcub;d3, d2&rcub; can be written to memory bytes &lcub;b1, b0&rcub; of memory location <highlight><bold>406</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> depicts the data variable <highlight><bold>430</bold></highlight> &lcub;d3, d2, d1, d0&rcub; shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> as it would be presented to a buffering device capable of performing a circular-shift. <cross-reference target="DRAWINGS">FIG. 4C</cross-reference> depicts a circular-shifted data variable <highlight><bold>440</bold></highlight> &lcub;d1, d0, d3, d2&rcub; derived from the data variable <highlight><bold>430</bold></highlight> &lcub;d3, d2, d1, d0&rcub; shown in <cross-reference target="DRAWINGS">FIG. 4B</cross-reference>. <cross-reference target="DRAWINGS">FIG. 4D</cross-reference> depicts the data variable <highlight><bold>430</bold></highlight> &lcub;d3, d2, d1, d0&rcub; shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> divided into an even portion <highlight><bold>452</bold></highlight> and an odd portion <highlight><bold>454</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>D, because only the high two bytes &lcub;b3, b2&rcub; of the even portion <highlight><bold>452</bold></highlight> are to be written to, a write enable pattern&equals;&ldquo;1100&rdquo; representing an array of write-enable signals can be provided to an array of individual byte-wide memory cells of an even memory location (at a relative address of &ldquo;00000&rdquo;) to enable write operations at the appropriate memory cells. Similarly, because only the low two bytes &lcub;b1, b0&rcub; of the odd portion <highlight><bold>454</bold></highlight> are to be written, a write enable pattern of &ldquo;0011&rdquo; can be similarly applied to another array of memory cells located at a relative address of &ldquo;0100&rdquo; to enable write operations at the appropriate odd memory cells. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>D depict a second memory access operation where a misaligned two-byte data variable &lcub;d1, d0&rcub; is read from a memory array in a single memory-access cycle. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, the data variable &lcub;d1, d0&rcub; can be misaligned with respect to a physical memory having a number of memory locations <highlight><bold>502</bold></highlight>, <highlight><bold>504</bold></highlight>, <highlight><bold>506</bold></highlight> and <highlight><bold>508</bold></highlight> with each memory location having four bytes &lcub;b3, b2, b1, b0&rcub;. The exemplary data variable &lcub;d1, d0&rcub; has an offset of three bytes such that data variable byte &lcub;d0&rcub; can be read from memory byte &lcub;b3&rcub; of even memory location <highlight><bold>508</bold></highlight> and data variable byte &lcub;d1&rcub; can be read from memory byte &lcub;b0&rcub; of odd memory location <highlight><bold>506</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> depicts the data variable &lcub;d1, d0&rcub; of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> as it would be received from a memory array including an even portion <highlight><bold>522</bold></highlight> and an odd portion <highlight><bold>524</bold></highlight> with data variable byte &lcub;d0&rcub; included in the even portion <highlight><bold>522</bold></highlight> and data variable byte &lcub;d1&rcub; included in the odd portion <highlight><bold>524</bold></highlight>. Also shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>B, because only the upper byte &lcub;b3&rcub; of the even portion <highlight><bold>522</bold></highlight> is to be read, a read enable pattern of &ldquo;1000&rdquo; can be applied to an array of byte-wide memory cells of an even memory location. Similarly, because only data byte &lcub;b0&rcub; is to be read from the odd portion <highlight><bold>524</bold></highlight>, a read enable pattern of &ldquo;0001&rdquo; can be applied to an array of byte-wide memory cells of an odd memory location. The x values (&ldquo;don&apos;t care&rdquo;) indicate that we are not concerned with the data of these bytes for the purposes of this explanation. <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> demonstrates that the received bytes &lcub;d1&rcub; and &lcub;d0&rcub; can be received by a device, such as a data buffer block, and combined to form a combined data variable <highlight><bold>530</bold></highlight> &lcub;d0, x, x, d1&rcub;. <cross-reference target="DRAWINGS">FIG. 5D</cross-reference> depicts a combined/shifted data variable <highlight><bold>540</bold></highlight> &lcub;x, x, d1, d0&rcub; derived from the combined data variable <highlight><bold>530</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5C</cross-reference>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> As shown in FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>D and <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>D, the respective even and odd enable patterns are disjoint. That is, there are no odd write signals active at the same time their respective even write pattern. By making the even and odd patterns disjoint, there will be no contention problems during read operations or erroneous write operations, e.g., double writes to bytes in both the first and second memory locations. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts an exemplary embodiment of the memory array <highlight><bold>120</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the memory array <highlight><bold>120</bold></highlight> contains a number of byte-wide memory cells <highlight><bold>604</bold></highlight> coupled to a number of respective &ldquo;AND&rdquo; gates <highlight><bold>602</bold></highlight>. In operation, each &ldquo;AND&rdquo; gate <highlight><bold>602</bold></highlight> can receive address-selection information in the form of an even or odd address select signal &lcub;x&minus;2, x&minus;1, x, x&plus;1&rcub;, and further receive write information in the form of one of various available write-enable signals &lcub;WE<highlight><subscript>even</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;3&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;2&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;1&rsqb;, WE<highlight><subscript>even</subscript></highlight>&lsqb;0&rsqb;, WE<highlight><subscript>odd</subscript></highlight>&lsqb;0&rsqb;&rcub;. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> As the &ldquo;AND&rdquo; gates <highlight><bold>602</bold></highlight> receive their address-selection information and write information, the &ldquo;AND&rdquo; gates <highlight><bold>602</bold></highlight> can produce a logical &ldquo;AND&rdquo; operation on the received information and provide the result to their respective memory cells <highlight><bold>604</bold></highlight>. If a particular &ldquo;AND&rdquo; gate <highlight><bold>602</bold></highlight> receives both an active address-select signal and active write-enable signal, the particular &ldquo;AND&rdquo; gate <highlight><bold>602</bold></highlight> can enable its respective memory cell <highlight><bold>604</bold></highlight> to receive and store data. Accordingly, any data placed on a respective data byte line <highlight><bold>610</bold></highlight>, <highlight><bold>612</bold></highlight>, <highlight><bold>614</bold></highlight> or <highlight><bold>616</bold></highlight> can be stored in the enabled memory cells <highlight><bold>604</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> While <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts a memory array having the logic required to write data to the various memory cells <highlight><bold>604</bold></highlight>, it should be appreciated that respective read operations can be performed by substituting or complementing the write-enable lines with read-enable lines to receive read-enable information. Accordingly, a particular memory cell <highlight><bold>604</bold></highlight> can be read-enabled by providing address-selection information and read information to the respective &ldquo;AND&rdquo; gate associated with the particular memory cell <highlight><bold>604</bold></highlight>. Any data residing in the particular memory cells <highlight><bold>604</bold></highlight> could then be placed on the appropriate data byte line <highlight><bold>610</bold></highlight>, <highlight><bold>612</bold></highlight>, <highlight><bold>614</bold></highlight> or <highlight><bold>616</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> depicts a flowchart outlining a first exemplary memory-access operation directed to reading a misaligned data variable from a memory in a single memory-access cycle. The process starts at step <highlight><bold>700</bold></highlight> where the size of the data variable to be read as well as the address of the data variable are determined. Next, in step <highlight><bold>710</bold></highlight>, first address-selection information relating to a first address is provided to an array of memory cells, such as the memory cells of the memory system depicted in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>6</bold></highlight>. Then, in step <highlight><bold>720</bold></highlight>, second address-selection information relating to a second address is provided to the array of memory cells. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As discussed above, the first and second address-selection information can be based on a single received address and, in various embodiments, the second address can be incrementally larger than the first address. Also as discussed above, the first and second address-selection information can be provided within a single memory-access cycle or otherwise contemporaneously provided such that a read operation can be executed in a single memory-access cycle. Control continues to step <highlight><bold>730</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In step <highlight><bold>730</bold></highlight>, first and second read information are provided to the first and second memory addresses respectively. Next, in step <highlight><bold>740</bold></highlight>, a first subset of the available memory cells of the first memory address as well as a second subset of the available memory cells of the second memory address are enabled based on the address-selection and read information. Then, in step <highlight><bold>745</bold></highlight>, the first and second enabled memory cells are read. That is, a first portion of the data variable residing in the first enabled memory cells and a second portion of the data variable residing in the second enabled memory cells are received by a device, such as a data buffer. Control continues to step <highlight><bold>750</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> In step <highlight><bold>750</bold></highlight>, the first and second data portions are assembled into a single data variable. As discussed above, assembling a data variable can include logically combining the data portions by performing a logical &ldquo;OR&rdquo; operation. Next, in step <highlight><bold>760</bold></highlight>, the assembled data can be shifted by a predetermined number of bits such that the assembled data can be aligned with the least significant bit/byte of a logical bus or other device. While the exemplary technique uses a shifting operation, as discussed above, it should be appreciated that various other equivalent operations can be performed, such as a multiplexing operation. Control continues to step <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In step <highlight><bold>770</bold></highlight>, the assembled/shifted data can be provided to an external device. Next, in step <highlight><bold>780</bold></highlight>, a determination is made as to whether to continue reading data variables. If further data variables are to be read, control jumps back to step <highlight><bold>700</bold></highlight>; otherwise, control continues to step <highlight><bold>790</bold></highlight> where the process stops. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts a flowchart outlining a second exemplary operation directed to writing a misaligned data variable to a memory in a single memory-access cycle. As shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the process starts at step <highlight><bold>800</bold></highlight> where the size and address of the data variable are determined. Next, in step <highlight><bold>810</bold></highlight>, first address-selection information relating to a first address is provided to an array of memory cells. Then, in step <highlight><bold>820</bold></highlight>, second address-selection information relating to a second address is provided to the array of memory cells. Control continues to step <highlight><bold>830</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In step <highlight><bold>830</bold></highlight>, the data variable of step <highlight><bold>800</bold></highlight> is acquired by a device, such as a data buffer. Then, in step <highlight><bold>840</bold></highlight>, the data in the data variable can be shifted by a predetermined amount such that a first portion of the data variable can be written to an appropriate number of memory cells associated with the first address and a second portion of the data variable can be written to an appropriate number of memory cells associated with the second address. Next, in step <highlight><bold>860</bold></highlight>, the data of the shifted data variable is divided into first and second portions, and the first and second portions are provided to the appropriate memory cells of the first and second addresses. Control continues to step <highlight><bold>860</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In step <highlight><bold>860</bold></highlight>, first and second write information are provided to the first and second memory addresses. Next, in step <highlight><bold>870</bold></highlight>, the appropriate memory cells of the first memory address as well as the appropriate memory cells of the second memory address are enabled to perform write operations, i.e., the appropriate memory cells are enabled to store the data of the data variable. Then, in step <highlight><bold>880</bold></highlight>, a determination is made as to whether to continue to write various data variables. If the operation is to continue, control jumps back to step <highlight><bold>800</bold></highlight>; otherwise, control continues to step <highlight><bold>890</bold></highlight> where the process stops. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> After a particular write operation, it should be appreciated that the various data variables written according to the technique outlined in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may eventually be read. Accordingly, it should be appreciated that the read techniques outlined in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> and otherwise described in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>6</bold></highlight> can be applied to read the various data variables. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> As shown in FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>6</bold></highlight>, the systems and methods of this invention are preferably implemented using dedicated logic or other integrated circuits. However, the systems and methods can also be implemented using any combination of one or more general purpose computers, special purpose computers, program microprocessors or microcontroller and peripheral integrating circuit elements, hardware electronic or logic circuits such as application specific integrated circuits (ASICs), discrete element circuits, programmable logic devices such as PLAs, FPGAs, PALs or the like. In general, any device on which exists a finite state machine capable of implementing the various elements of FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>6</bold></highlight> and the flowcharts of <cross-reference target="DRAWINGS">FIGS. 7 and 8</cross-reference> can be used to implement the sequence of functions. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> While this invention has been described in conjunction with the specific embodiments thereof, it is evident that many alternatives, modifications, and variations will be apparent to those skilled in the art. Accordingly, preferred embodiments of the invention as set forth herein are intended to be illustrative, not limiting. There are changes that may be made without departing from the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for reading a misaligned data variable from an array of memory cells, wherein a first portion of the misaligned data variable resides in one or more first memory cells relating to a first address, and wherein a second portion of the misaligned data variable resides in one or more second memory cells relating to a second address, the method comprising: 
<claim-text>providing first address-selection information relating to the first memory address; </claim-text>
<claim-text>providing second address-selection information relating to the second memory address, wherein the second address is not equal to the first address, and wherein the first address-selection information and the second address-selection information are contemporaneously provided; </claim-text>
<claim-text>providing first read information; </claim-text>
<claim-text>providing second read information; </claim-text>
<claim-text>read enabling the one or more first memory cells based on the first address-selection information and first read information; </claim-text>
<claim-text>read enabling the one or more second memory cells based on the second address-selection information and second read information; and </claim-text>
<claim-text>assembling the data variable from the first data portion of the one or more first enabled memory cells and the second data portion of the one or more second enabled memory cells. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first address-selection information and the second address-selection information are provided based on a single received address. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the second address is incrementally larger than the first memory address. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the misaligned data variable is read in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising performing a shift operation on the assembled data variable. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the first and second enabled memory cells are disjoint and wherein the first enabled memory cells are a subset of memory cells available at the first address. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method for writing a misaligned data variable to an array of memory cells, wherein a first portion of the misaligned data variable is directed to one or more first memory cells relating to a first address, and wherein a second portion of the misaligned data variable is directed to one or more second memory cells relating to a second address, the method comprising: 
<claim-text>providing first address-selection information relating to the first memory address; </claim-text>
<claim-text>providing second address-selection information relating to the second memory address, wherein the second address is not equal to the first address, and wherein the first address-selection information and the second address-selection information are contemporaneously provided; </claim-text>
<claim-text>providing first write information; </claim-text>
<claim-text>providing second write information; </claim-text>
<claim-text>write enabling the one or more first memory cells based on the first address-selection information and first write information; </claim-text>
<claim-text>write enabling the one or more second memory cells based on the second address-selection information and second write information; </claim-text>
<claim-text>providing and the first data portion to the one or more first enabled memory cells; and </claim-text>
<claim-text>providing the second data portion to the one or more second enabled memory cells. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the first address-selection information and the second address-selection information are provided based on a single received address. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the second address is incrementally larger than the first memory address. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the misaligned data variable is written in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising performing a shift operation on the data variable before providing the first data portion to the one or more first enabled memory cells. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the first and second enabled memory cells are disjoint and wherein the first enabled memory cells are a subset of memory cells available at the first address. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprising performing a single-cycle read operation of the misaligned data variable, the single-cycle read operation including the steps of: 
<claim-text>contemporaneously receiving the first data portion from the one or more first enabled memory cells and the second data portion from the one or more second enabled memory cells; and </claim-text>
<claim-text>assembling the first received data portion with the second received data portion to form the data variable. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A memory system that can read a misaligned data variable from an array of memory cells, comprising: 
<claim-text>an address device that contemporaneously provides at least first address-selection information relating to a first memory address and second address-selection information relating to a second memory address, wherein the second address is not equal to the first address, and wherein the address device further provides first read information and second read information; </claim-text>
<claim-text>first enabling circuits that enable one or more first memory cells relating to the first address based on the first address-selection information and first read information; </claim-text>
<claim-text>second enabling circuits that enable one or more second memory cells relating to the second address based on the second address-selection information and second read information; and </claim-text>
<claim-text>a buffer circuitry that receives a first data portion of the misaligned data variable from the first enabled memory cells and a second data portion of the misaligned data variable from the second enabled memory cells, assembles the first and second data portions and provides the assembled data portions to an external device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the misaligned data variable is read in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the address device provides the first and second address-selection information based on a single received address. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the second address is incrementally larger than the first memory address. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the buffer circuitry further performs a shift operation on the assembled data variable. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the first and second enabled memory cells are disjoint and wherein the first enabled memory cells are a subset of memory cells available at the first address. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A memory system that can write a misaligned data variable to an array of memory cells, comprising: 
<claim-text>an address device that contemporaneously provides at least first address-selection information relating to a first memory address and second address-selection information relating to a second memory address, wherein the second address is not equal to the first address, wherein the address device further provides first write information and second write information; </claim-text>
<claim-text>first enabling circuits that write-enable one or more first memory cells relating to the first address based on the first address-selection information and first write information; </claim-text>
<claim-text>second enabling circuits that write-enable one or more second memory cells relating to the second address based on the second address-selection information and second write information; and </claim-text>
<claim-text>a buffer circuitry that provides a first portion of the misaligned data variable to the first enabled memory cells, and further provides a second portion of the misaligned data variable to the second enabled memory cells. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference>, wherein the misaligned data variable is written in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the address device can further provide first read information and second read information; 
<claim-text>wherein the first enabling circuits can read-enable the one or more first memory cells based on the first address-selection and read information, and the second enabling circuits can read-enable one or more second memory cells based on the second address-selection and read information; and </claim-text>
<claim-text>wherein the buffer circuitry can receive the first data portion from the first enabled memory cells and the second data portion from the second read-enabled memory cells, assemble the first and second data portions and provide the assembled data portions to an external device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the address device provides the first and second address-selection information based on a single received address. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the second address is incrementally larger than the first memory address. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the buffer further performs a shift operation on the data variable before providing the first data portion to the one or more first enabled memory cells. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A memory system for performing single-cycle accesses of data variables held in a memory array; including data variables which are misaligned with respect to an address boundary of the memory array such that a first portion of a data variable is held at a first address location and a second portion of the data variable is held at a second, different address location, the memory system comprising: 
<claim-text>address selection circuitry operable to provide first address selection information and second address selection information, the first and second address selection information respectively indicating different address locations for the first and second portion of the data variable and being provided substantially simultaneously; </claim-text>
<claim-text>enable circuitry operable to provide an enable signal to enable an access of a predetermined type to selected ones of the memory locations; and </claim-text>
<claim-text>buffer circuitry operable to hold and, manipulate the first and second data portions as necessary for supply between the memory system and other circuitry. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein a first portion of the data variable is held at an even address location and the second portion of the data variable is held at an odd address location, and wherein the address selection circuitry is operable to provide even and odd address selection information substantially simultaneously.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005255A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005255A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005255A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005255A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005255A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005255A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005255A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005255A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005255A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005255A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005255A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
