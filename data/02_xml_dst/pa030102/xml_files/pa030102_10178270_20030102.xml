<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002376A1-20030102-D00000.TIF SYSTEM "US20030002376A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00001.TIF SYSTEM "US20030002376A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00002.TIF SYSTEM "US20030002376A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00003.TIF SYSTEM "US20030002376A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00004.TIF SYSTEM "US20030002376A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00005.TIF SYSTEM "US20030002376A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00006.TIF SYSTEM "US20030002376A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002376A1-20030102-D00007.TIF SYSTEM "US20030002376A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002376</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10178270</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020625</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G11C008/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>365</class>
<subclass>230030</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method and system for fast memory access</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60301458</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Robert</given-name>
<family-name>Beat</family-name>
</name>
<residence>
<residence-non-us>
<city>Bristol</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Broadcom Corporation</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>STERNE, KESSLER, GOLDSTEIN &amp; FOX PLLC</name-1>
<name-2></name-2>
<address>
<address-1>1100 NEW YORK AVENUE, N.W., SUITE 600</address-1>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20005-3934</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">An address device simultaneously provides a first address to a first memory section using a first address bus and a second, incrementally higher, address to a second memory section using a second address bus. A buffer can then read from or write to the first and second memory sections. During a read operation, the buffer can receive a first portion of a misaligned data word from the first memory section and read a second portion of the misaligned data word from the second memory section and assemble the data in the data word from the first and second portions. When the access operation is a write operation, the buffer can effectively perform a shift operation on the data in the data word, then write a first portion of the word to the first memory section and write a second portion of the word to the second memory section. Accordingly, data accesses that would take two memory-access cycles on a conventional memory system are reduced to a single memory-access cycle. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority to Provisional U.S. Patent Application No. 60/301,458, filed Jun. 29, 2001, which is incorporated herein by reference in its entirety.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention relates to methods and systems for fast access of computer-based memories. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Modern computer-based systems often use wide memories that have a constant width. However, these systems must often manipulate a variety of variables having different data widths. For instance, a particular processor can have a thirty-two bit (four byte) wide bus with a thirty-two bit wide random access memory (RAM), but must manipulate any number of variables having eight bit (one byte), sixteen bit (two bytes) or thirty-two bit widths. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One problem that can arise with such systems is that data can become misaligned with the physical boundaries of the available memory. For example, a first variable in a block of thirty-two bit wide RAM may be a byte-wide variable while a second variable may be a four-byte variable. As a result, the first variable will occupy the first byte of a first memory location, while the second variable will occupy the remaining three bytes of the first memory location plus the first byte of the next memory location. One unfortunate consequence of this situation is that a computer accessing the second variable can take two separate memory-access cycles to either read or write the second variable. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> While various approaches are available to align various variables having different bit-widths with the address boundaries of a memory, these approaches typically require a wasteful use of available memory resources or otherwise cannot be used with practicable systems. Accordingly, new technologies that can eliminate multiple-cycle memory accesses for misaligned data are desirable. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The invention provides techniques to access a misaligned data word in a single memory-access cycle. In various embodiments, the techniques use a first memory section connected to a first address bus, a second memory section connected to a second address bus and an address device that simultaneously provides a first address to the first memory section using the first address bus and a second, incrementally higher, address to the second memory section using the second address bus. The first and second memory sections are preferably separate memory arrays. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> When the access operation is a read operation, buffer circuitry can receive a first portion of the misaligned data word from the first memory section and receive a second portion of the misaligned data word from the second memory section and assemble the data in the data word from the first and second portions. When the access operation is a write operation, the buffer circuitry can effectively perform a shift operation on the data in the data word, then write a first portion of the shifted word to the first memory section and write a second portion of the shifted word to the second memory section. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Accordingly, data accesses that would take two memory-access cycles on a conventional memory system are reduced to a single memory-access cycle. Others features and advantages will become apparent in the following descriptions and accompanying figures.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> The invention is described in detail with regard to the following figures, wherein like numerals reference like elements, and wherein: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary system capable of accessing misaligned data in a single memory-access cycle according to the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of the memories of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> depicts a first memory access operation according to the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>C depicts a second memory access operation according to the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a second exemplary system capable of accessing misaligned data in a single cycle according to the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart outlining a first exemplary operation according to the present invention; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart outlining a second exemplary operation according to the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF RELATED ART </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A frequent problem that arises with modern computer-based systems is that, while the widths of an available physical memory are fixed, the widths of various data types can vary. For example, a particular microcomputer may have a sixty-four bit wide memory, but may be required to access and manipulate eight-bit, sixteen-bit, thirty-two bit and sixty-four bit data. One problem that can arise with such systems is that different data variables can become misaligned with the address boundaries of the physical memories. For example, the first variable in a block of sixty-four bit wide memory may be a single byte-wide variable, while the second variable may be an eight byte-wide variable. As a result, the first variable will occupy a first byte of the first memory location, and the second variable will occupy the remaining seven bytes of the first memory location plus the first byte of the next memory location. One unfortunate consequence of this situation is that a processor accessing the second variable can require two separate memory-access cycles to either read or write the second variable. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> However, by providing two separate physical memories each being sixty-four bits wide and further providing various circuitry that can make the two memories appear as a single memory where the addressed memory locations of the first memory are interleaved with those of the second memory location, misaligned data can be accessed in a single memory-access cycle. For the example above, the eight-byte misaligned data variable can be written in a single memory-access cycle by splitting the eight-byte variable into a first portion having the first seven bytes and a second portion having the last byte. Assuming that separate addresses and control signals are provided for each of the two physical memories, the first portion of the data variable can then be written to the last seven bytes of the first memory while the second portion can be simultaneously written to the first byte of the second memory. Similarly, data can be read by providing consecutive addresses to the first and second memories, selectively reading the desired bytes and then appropriately combining the selected bytes. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a system <highlight><bold>100</bold></highlight> capable of accessing misaligned data in a single cycle according to the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the system <highlight><bold>100</bold></highlight> includes a first data buffer block <highlight><bold>110</bold></highlight>, and address device <highlight><bold>130</bold></highlight>, a second data buffer block <highlight><bold>140</bold></highlight>, an even memory section <highlight><bold>120</bold></highlight>-A and an odd memory section <highlight><bold>120</bold></highlight>-B. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In a first operation, misaligned data can be written to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B in a single memory-access cycle. The exemplary memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B are each sixty-four bit wide (eight byte) devices each having 262,144 (2<highlight><superscript>18</superscript></highlight>) separate locations. However, rather than appear as single memory having a width of 128 bits by 262,144 locations, the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B can appear as a single physical memory having a width of sixty-four bits and 524,288 interleaved memory locations. For example, the first four memory locations of memory section <highlight><bold>120</bold></highlight>-A can appear as addressed locations zero, two, four, six and eight, while the first four memory locations of memory section <highlight><bold>120</bold></highlight>-B can appear as addressed locations one, three, five, seven and nine. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> During operation, an external device (not shown) writing to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B can provide a data word to the first data buffer block <highlight><bold>110</bold></highlight> via link <highlight><bold>102</bold></highlight>, and further provide address and control signals to the address device <highlight><bold>130</bold></highlight> via links <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> respectively. As the address device <highlight><bold>130</bold></highlight> receives the address and control signals, the address device <highlight><bold>130</bold></highlight> can make a determination whether a particular variable is misaligned, i.e., whether a particular data variable crosses the sixty-four bit physical memory boundary. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> If a particular data variable is misaligned, the address device <highlight><bold>130</bold></highlight> can provide an offset to the first data buffer <highlight><bold>110</bold></highlight> via link <highlight><bold>138</bold></highlight>-W. For example, if a particular eight-byte data variable is misaligned such that the first byte of the misaligned data variable is located at the sixth byte of the physical memory, the address device <highlight><bold>130</bold></highlight> can provide an offset of five to the first data buffer block <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> provides the offset to the first data buffer block <highlight><bold>110</bold></highlight>, the address device <highlight><bold>130</bold></highlight> can further provide address and control information to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B. The appropriate addressing information is provided to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B via links <highlight><bold>132</bold></highlight>-A and <highlight><bold>132</bold></highlight>-B, respectively. The write control information is provided to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B via links <highlight><bold>134</bold></highlight>-A and <highlight><bold>134</bold></highlight>-B, respectively. For the example immediately above, the address device <highlight><bold>130</bold></highlight> can provide a first address to memory section <highlight><bold>120</bold></highlight>-A and a second address to memory location <highlight><bold>120</bold></highlight>-B, where the second address is incrementally larger than the first address. Simultaneously, the address device <highlight><bold>130</bold></highlight> can provide write control information that can cause a write operation for the upper three bytes of the first memory section <highlight><bold>120</bold></highlight>-A and the lower five bytes of the second memory section <highlight><bold>120</bold></highlight>-B. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As the address device <highlight><bold>130</bold></highlight> provides address, control and offset information, the first data buffer block <highlight><bold>110</bold></highlight> can receive the data variable along with the offset information, manipulate and divide the data into a first portion and second portion and appropriately feed the first portion to one memory section <highlight><bold>120</bold></highlight>-A or <highlight><bold>120</bold></highlight>-B and the second portion to the other memory section <highlight><bold>120</bold></highlight>-B or <highlight><bold>120</bold></highlight>-A. A link <highlight><bold>112</bold></highlight>-A conveys data from the first data buffer <highlight><bold>110</bold></highlight> to the first memory section <highlight><bold>120</bold></highlight>-A and another link <highlight><bold>112</bold></highlight>-B conveys data from the first buffer <highlight><bold>110</bold></highlight> to the second memory section <highlight><bold>120</bold></highlight>-B. Again, for the example above, assuming the received data variable is eight bytes wide and has an offset of five, the first data buffer block <highlight><bold>110</bold></highlight> can direct the low three bytes of the data variable to the high three bytes of memory section <highlight><bold>120</bold></highlight>-A, and further provide the high five bytes of the data variable to the low five bytes of memory section <highlight><bold>120</bold></highlight>-B. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> As the data variable is provided to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B, the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B can receive their respective data portions along with the address and control information and appropriately store the data. That is, memory section <highlight><bold>120</bold></highlight>-A can store the low three bytes of the data variable in the high three bytes of a memory location having a first address, while memory section <highlight><bold>120</bold></highlight>-B can store the high five bytes of the data variable in the low five bytes of a memory location having a second address, where the second address will be one location higher than the first address. Accordingly, as data is provided to the various memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B, the address and control information can simultaneously accommodate a misaligned write operation to both memory locations in a single cycle. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In a second operation, the system <highlight><bold>100</bold></highlight> can read a misaligned data variable from the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B. During operation, as an external device provides the appropriate address and control signals via links <highlight><bold>104</bold></highlight> and <highlight><bold>106</bold></highlight> respectively, the address device <highlight><bold>130</bold></highlight> can receive the address and control signals, provide an offset to the second data buffer block <highlight><bold>140</bold></highlight> via link <highlight><bold>138</bold></highlight>-R, provide the appropriate addressing information to memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B via links <highlight><bold>132</bold></highlight>-A and <highlight><bold>132</bold></highlight>-B respectively and further provide the appropriate read control information to memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B via links <highlight><bold>136</bold></highlight>-A and <highlight><bold>136</bold></highlight>-B respectively. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B can receive the address and read control information and provide the appropriate bytes of data to the second data buffer <highlight><bold>140</bold></highlight> via links <highlight><bold>122</bold></highlight>-A and <highlight><bold>122</bold></highlight>-B. The second data buffer block <highlight><bold>140</bold></highlight> in turn can receive the data bytes from the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B and combine the received data bytes into a single data variable taking into account the offset provided by the address device <highlight><bold>130</bold></highlight>. For example, assuming that an eight-byte data variable is read with the low two bytes provided by the high two bytes of memory section <highlight><bold>120</bold></highlight>-A and the remaining six bytes provided by the low six bytes of memory section <highlight><bold>120</bold></highlight>-B (which assumes a data offset of six), the second data buffer block <highlight><bold>140</bold></highlight> can receive the various bytes, combine the various bytes into a single contiguous data variable having eight bytes, appropriately shift the combined data variable by six bytes and provide the combined/shifted data variable to an external device. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The exemplary first data buffer block <highlight><bold>110</bold></highlight> can be a portion of integrated circuit containing various logic circuits that can receive a data variable of a given size, effectively perform a circular-barrel shift/multiplexing operation on the received data variable and provide portions of the shifted/multiplexed data variable to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B. However, it should be appreciated that, in various embodiments, the first data buffer block can use any combination of elements, such as shifters, barrel shifters, multiplexers, various sum-of-products-based logic, or any other known or later developed combination of systems and devices that can receive a data variable, perform the equivalent of a shifting operation on the received data variable and provide the shifted data to the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The second data buffer block <highlight><bold>140</bold></highlight>, like the first data buffer <highlight><bold>110</bold></highlight>, can be a portion of an integrated circuit containing various logic circuits. However, like the first data buffer block <highlight><bold>110</bold></highlight>, it should be appreciated that the second data buffer block <highlight><bold>140</bold></highlight> can be any device capable of receiving various portions of data from multiple memories, combine the received data portions, and provide the combined data to an external device without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The address device <highlight><bold>130</bold></highlight>, like the first and second data buffer blocks <highlight><bold>110</bold></highlight> and <highlight><bold>140</bold></highlight>, can be a collection of logic circuits on a portion of an integrated circuit. However, it should be appreciated that the address device <highlight><bold>130</bold></highlight> can be any combination of systems and devices capable of receiving address and control signals from an external device and providing address and control information to memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>-B as well as offset information to the data buffers <highlight><bold>110</bold></highlight> and <highlight><bold>130</bold></highlight> without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a memory system, such as the memory sections <highlight><bold>120</bold></highlight>-A and <highlight><bold>120</bold></highlight>B of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the memory system <highlight><bold>120</bold></highlight> includes a number of byte-wide memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight> . . . <highlight><bold>1</bold></highlight>:<highlight><bold>20</bold></highlight>-k. The various memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k each have a data input port <highlight><bold>112</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>112</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>112</bold></highlight>-k, a data output port <highlight><bold>122</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>122</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>122</bold></highlight>-k, an address port <highlight><bold>132</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>132</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>132</bold></highlight>-k, a write port <highlight><bold>134</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>134</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>134</bold></highlight>-k and a read port <highlight><bold>136</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>136</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>136</bold></highlight>-k. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> In a first operation, a data can be selectively written to any combination of the memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k by providing the appropriate data to each of the data input ports <highlight><bold>112</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>112</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>112</bold></highlight>-k via bus <highlight><bold>112</bold></highlight> while applying the appropriate address information to the address ports <highlight><bold>132</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>132</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>132</bold></highlight>-k via bus <highlight><bold>132</bold></highlight> and write control information, such as write strobes, to the appropriate write ports <highlight><bold>134</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>134</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>134</bold></highlight>-k via bus <highlight><bold>134</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Similarly, data can be read from the memory system <highlight><bold>120</bold></highlight>, by providing the appropriate address information to the various address ports <highlight><bold>132</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>132</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>132</bold></highlight>-k via bus <highlight><bold>132</bold></highlight> as well as the appropriate read control information, such as read strobes, to the various read ports <highlight><bold>136</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>136</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>136</bold></highlight>-k via bus <highlight><bold>136</bold></highlight>. As the address and read control information are received by the various memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k, it should be appreciated that the appropriate memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k will enable output buffers associated with their output ports <highlight><bold>122</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>122</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>122</bold></highlight>-k such that data stored within each module <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k can be provided to data-bus <highlight><bold>122</bold></highlight>. It should also be appreciated that because read operations do not generally alter the contents of a memory module, the array of individual read strobes can be replace by a single read strobe with the understanding that using a single read strobe may cause the memory system <highlight><bold>120</bold></highlight> to use more power. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> While the exemplary memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k are controlled using read and write strobes, it should be appreciated that in various embodiments, the various memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k can be controlled using a variety of signals including read strobes, write strobes, chip selects, output enable signals, or any other signal useful for selectively writing data to, or reading data from, a memory device without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The exemplary memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k are high-speed random access memory (RAM) integrated circuits with each device being eight bits wide and having <highlight><bold>242</bold></highlight>,<highlight><bold>144</bold></highlight> separate locations. However, it should be appreciated that the various memory modules <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k can be any other known memory device capable of being selectively read or written to, such as RAMs, read only memories (ROMs), EPROMs, EEPROMs, and the like. It should further be appreciated that the particular width and depth of each memory module, <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, . . . <highlight><bold>120</bold></highlight>-k can vary as desired or otherwise required by design, without departing from the spirit and scope of the present invention. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> depict the operations of a misaligned data word being written to a system, such as a memory system depicted in <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 3A, a</cross-reference> data variable &lcub;d<highlight><bold>7</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; can be misaligned with respect to a physical memory consisting of eight bytes &lcub;b<highlight><bold>7</bold></highlight> . . . b<highlight><bold>0</bold></highlight>&rcub;. Although the logical width of a physical memory may appear as eight bytes &lcub;b<highlight><bold>7</bold></highlight> . . . b<highlight><bold>0</bold></highlight>&rcub;, as discussed above the actual physical data width can be sixteen bytes &lcub;b<highlight><bold>7</bold></highlight> . . . b<highlight><bold>0</bold></highlight>, b<highlight><bold>7</bold></highlight> . . . b<highlight><bold>0</bold></highlight>&rcub; of data including a number of odd memory bytes <highlight><bold>312</bold></highlight> and even memory bytes <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Because the exemplary data variable is offset by two bytes, the low six bytes of the data variable &lcub;d<highlight><bold>5</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; can be written to the high bytes &lcub;b<highlight><bold>7</bold></highlight> . . . b<highlight><bold>2</bold></highlight>&rcub; respectively of the even memory bytes <highlight><bold>314</bold></highlight>. Similarly, high two data variable bytes &lcub;d<highlight><bold>7</bold></highlight>, d<highlight><bold>6</bold></highlight>&rcub; can be written to the two low memory bytes &lcub;b<highlight><bold>1</bold></highlight>, b<highlight><bold>0</bold></highlight>&rcub; respectively of the odd memory bytes <highlight><bold>312</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3B</cross-reference> depicts the data variable &lcub;d<highlight><bold>7</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; shown in <cross-reference target="DRAWINGS">FIG. 3A</cross-reference> broken into an even portion <highlight><bold>322</bold></highlight> consisting of data variable bytes &lcub;d<highlight><bold>5</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; and an odd portion <highlight><bold>334</bold></highlight> consisting of data variable bytes &lcub;d<highlight><bold>7</bold></highlight>, d<highlight><bold>6</bold></highlight>&rcub;. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B, because only the high six bytes of the even portion <highlight><bold>322</bold></highlight> are to be written to, write enable signals&equals;&ldquo;11111100&rdquo; representing an array of write strobes can be provided to an array of individual byte-wide memory modules of an even memory (at a relative address of &ldquo;00000&rdquo;) to activate write operations at the appropriate memory modules. Similarly, because only the low two bytes of the odd portion <highlight><bold>324</bold></highlight> are to be written, a write enable signals of &ldquo;00000011&rdquo; can be similarly applied to another array of memory modules at a relative address of &ldquo;01000&rdquo; to activate write operations at the appropriate odd memory modules. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>C depict a second memory access operation where a four-byte data variable &lcub;d<highlight><bold>3</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; can be read from a memory system capable of reading a misaligned data variable in a single cycle. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, the data variable &lcub;d<highlight><bold>3</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; has an offset of five bytes such that data variable bytes &lcub;d<highlight><bold>2</bold></highlight>, d<highlight><bold>1</bold></highlight>, d<highlight><bold>0</bold></highlight>&rcub; can be read from the high three memory bytes &lcub;b<highlight><bold>7</bold></highlight>, b<highlight><bold>6</bold></highlight>, b<highlight><bold>5</bold></highlight>&rcub; of even memory bytes <highlight><bold>414</bold></highlight> and data variable byte &lcub;d<highlight><bold>3</bold></highlight>&rcub; can be read from the low memory byte &lcub;b<highlight><bold>0</bold></highlight>&rcub; of odd memory bytes <highlight><bold>412</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> depicts the data variable &lcub;d<highlight><bold>3</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> broken into an even portion <highlight><bold>422</bold></highlight> and an odd portion <highlight><bold>424</bold></highlight> with data variable bytes &lcub;d<highlight><bold>2</bold></highlight>, d<highlight><bold>1</bold></highlight>, d<highlight><bold>0</bold></highlight>&rcub; included in the even portion <highlight><bold>422</bold></highlight> and data variable byte &lcub;d<highlight><bold>3</bold></highlight>&rcub; included in the odd portion <highlight><bold>424</bold></highlight>. Since only the upper three bytes &lcub;b<highlight><bold>7</bold></highlight>, b<highlight><bold>6</bold></highlight>, b<highlight><bold>5</bold></highlight>&rcub; of the even portion <highlight><bold>422</bold></highlight> are to be read, read enable signals of &ldquo;11100000&rdquo; can be applied to respective byte-wide memory modules of an even portion memory. Similarly, because only data byte &lcub;b<highlight><bold>0</bold></highlight>&rcub; is to be read from the odd portion <highlight><bold>424</bold></highlight>, read enable signals of &ldquo;00000001&rdquo; can be applied to an array of memory modules that comprise an odd memory. <cross-reference target="DRAWINGS">FIG. 4C</cross-reference> demonstrates that the bytes of the data variable &lcub;d<highlight><bold>3</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; can be combined and shifted such that the various bytes &lcub;d<highlight><bold>3</bold></highlight> . . . d<highlight><bold>0</bold></highlight>&rcub; of the data variable are respectively aligned with memory bytes &lcub;b<highlight><bold>3</bold></highlight> . . . b<highlight><bold>0</bold></highlight>&rcub;. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a second exemplary embodiment of a system <highlight><bold>500</bold></highlight> capable of reading and writing misaligned data variables in a single memory-access cycle. As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the system <highlight><bold>500</bold></highlight> includes a controller <highlight><bold>502</bold></highlight>, an even memory section <highlight><bold>520</bold></highlight>-A and an odd memory section <highlight><bold>520</bold></highlight>-B. The controller <highlight><bold>502</bold></highlight> includes a data buffer block <highlight><bold>510</bold></highlight> and an address device <highlight><bold>530</bold></highlight>. As with the memory system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the second memory system <highlight><bold>500</bold></highlight> can read and write misaligned data bytes. However, unlike the memory system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the second memory system <highlight><bold>500</bold></highlight> can read and write data using a bidirectional bussed system. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In a write operation, the data buffer block <highlight><bold>510</bold></highlight> can generate or otherwise derive data from controller <highlight><bold>502</bold></highlight>, optionally shift the data, and provide the data to the even and odd memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B. Simultaneously, the address device <highlight><bold>530</bold></highlight> can provide even address information and even write control information to the even memory section <highlight><bold>520</bold></highlight>-A via links <highlight><bold>114</bold></highlight>-A and <highlight><bold>118</bold></highlight>-A respectively, and further provide odd address information and odd write control information to the odd memory section <highlight><bold>520</bold></highlight>-B via links <highlight><bold>114</bold></highlight>-B and <highlight><bold>118</bold></highlight>-B respectively. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> As discussed above, if a particular data variable is misaligned, the address device <highlight><bold>530</bold></highlight> can provide different address information to the different memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B, as well as a different write control information, such as an array of write strobes. Accordingly, by using the above-described technique, a data variable can be written to the memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B in a single memory-access cycle regardless of how the data variable is aligned. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In a second operation, the controller <highlight><bold>502</bold></highlight> can read a data variable from the memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B in a single cycle regardless of the alignment of the data variable. During operation, the address device <highlight><bold>530</bold></highlight> can provide the appropriate addresses information as well as the appropriate read control information, such as an array of read strobes, to each of the even and odd memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B. As the memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B provide the requisite data bytes to the data buffer <highlight><bold>510</bold></highlight>, the data buffer block <highlight><bold>510</bold></highlight> can receive the appropriate data bytes, then combine and shift the data bytes as is required by a particular operation of the controller <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> While the address device <highlight><bold>530</bold></highlight> is depicted as generating two different addresses using two disjoint address busses <highlight><bold>114</bold></highlight>-A and <highlight><bold>114</bold></highlight>-B, it should be appreciated that in various embodiments, the address device <highlight><bold>530</bold></highlight> can provide address information using address busses that are partially disjoint. For example, assuming the address device <highlight><bold>530</bold></highlight> is a sixteen-bit address device, the address device <highlight><bold>530</bold></highlight> can provide the most significant eight address bits to both the even and odd memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B using eight shared address lines &lcub;A<highlight><bold>15</bold></highlight> . . . A<highlight><bold>8</bold></highlight>&rcub;, while providing two separate sets of least significant address bits &lcub;A<highlight><bold>7</bold></highlight> . . . A<highlight><bold>0</bold></highlight>&rcub;<highlight><subscript>even </subscript></highlight>and &lcub;A<highlight><bold>7</bold></highlight> . . . A<highlight><bold>0</bold></highlight>&rcub;<highlight><subscript>odd </subscript></highlight>to memory sections <highlight><bold>520</bold></highlight>-A and <highlight><bold>520</bold></highlight>-B respectively. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> While providing partially disjoint address busses does not allow the system <highlight><bold>500</bold></highlight> to access every possible misaligned memory location in a single memory-access cycle, the total number of address lines is otherwise reduced. For the example above, assuming the address bus is sixteen bits wide with the upper most eight bits being shared, a single memory-access cycle access can be performed for 255 out of every 256 memory locations. However, the controller <highlight><bold>502</bold></highlight> requires eight fewer address ports/pins and supporting electronic circuits. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The exemplary controller <highlight><bold>502</bold></highlight> can be a microcontroller-type device on an integrated circuit. However, it should be appreciated that the controller <highlight><bold>502</bold></highlight> can be any of various sequential instruction machines, such as a controller, a microcontroller, microprocessor, a processor, a digital signal processor or any other known or later developed device that can act as a sequential instruction machine and access various memories. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram of a flowchart of a first exemplary operation according to the present invention. The process starts at step <highlight><bold>600</bold></highlight> where a data variable type is determined, i.e., the size of the data variable, as well as the address that the data variable is to be read from. Next, in step <highlight><bold>610</bold></highlight>, a determination is made as to whether the data variable is aligned. That is, it is determined whether the data of the data variable exists in two separate logical memory locations. If the data variable is aligned, control jumps to steps <highlight><bold>680</bold></highlight>; otherwise, control continues to step <highlight><bold>620</bold></highlight>. In step <highlight><bold>680</bold></highlight>, data is read from a memory and control continues to step <highlight><bold>650</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In step <highlight><bold>620</bold></highlight>, even and odd address information, as well as even and odd read control information, is provided to each of two memory sections, such as the even and odd memory sections shown in <cross-reference target="DRAWINGS">FIGS. 1 and 5</cross-reference>. Next, in step <highlight><bold>630</bold></highlight>, even and odd portions of the data variable are read from the even and odd memory sections. Then, in step <highlight><bold>640</bold></highlight>, the even and odd portions are assembled into a single data variable. As discussed above, assembling a data variable can include logically combining the even and odd portions as well as shifting the combined portions such that the shifted data portions can be provided to an external device as a single data variable aligned with the least significant bytes of a logical bus. Control continues to step <highlight><bold>650</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> In step <highlight><bold>650</bold></highlight>, the assembled data of <highlight><bold>640</bold></highlight> is provided to another device, such as an integrated sequential instruction machine. Next, in step <highlight><bold>660</bold></highlight>, a determination is made as to whether to continue reading data variables. If further data variables are to be read, control jumps back to step <highlight><bold>600</bold></highlight>; otherwise, control continues to step <highlight><bold>670</bold></highlight> where the process stops. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart outlining a second exemplary operation according to the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the process starts at step <highlight><bold>700</bold></highlight> where the type and address of a particular data variable is determined. Next, at step <highlight><bold>710</bold></highlight>, a determination is made as to whether the data variable is aligned. If the data variable is aligned, control jumps to step <highlight><bold>800</bold></highlight>; otherwise, control continues to step <highlight><bold>720</bold></highlight>. In step <highlight><bold>800</bold></highlight>, data is written to a memory and control continues to step <highlight><bold>760</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In step <highlight><bold>720</bold></highlight>, even and odd address information, as well as even and odd write control information, is provided to even and odd memory sections. Next, in step <highlight><bold>730</bold></highlight>, the data in the data variable is appropriately adjusted/manipulated by any of several operations that effectively perform a shifting operation such that the data can be provided to the appropriate memory modules of both an even and odd memory section. Then, in step <highlight><bold>740</bold></highlight>, the data of the data variable is divided into an even portion and an odd portion with the even portion provided to an even memory section and the odd portion provided to an odd memory section. Control continues to step <highlight><bold>750</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In step <highlight><bold>750</bold></highlight>, the even and odd portions are effectively written to the even and odd memory sections. Next, in step <highlight><bold>760</bold></highlight>, a determination is made as to whether the data written in steps <highlight><bold>700</bold></highlight>-<highlight><bold>750</bold></highlight> is to be read. If data is to be read, control jumps to step <highlight><bold>810</bold></highlight>; otherwise, control continues to step <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> In step <highlight><bold>810</bold></highlight>, the appropriate data is read. In various embodiments, the data read can be performed according to any number of techniques, such as the technique outlined in the flowchart of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> or described according to FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight>. Control continues to step <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In step <highlight><bold>770</bold></highlight>, a determination is made as to whether to continue to write and optionally read various data variables. If the operation is to continue, control jumps back to step <highlight><bold>700</bold></highlight>; otherwise, control continues to step <highlight><bold>780</bold></highlight> where the process stops. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>-<highlight><bold>5</bold></highlight>, the systems and methods of this invention are preferably implemented using dedicated logic or other integrated circuits. However, the systems and methods can also be implemented using any combination of one or more general purpose computers, special purpose computers, program microprocessors or microcontroller and peripheral integrating circuit elements, hardware electronic or logic circuits such as application specific integrated circuits (ASICs), discrete element circuits, programmable logic devices such as PLAs, FPGAs, PALs or the like. In general, any device on which exists a finite state machine capable of implementing the various elements of FIGS. <highlight><bold>1</bold></highlight>-<highlight><bold>5</bold></highlight> and the flowcharts of <cross-reference target="DRAWINGS">FIGS. 6 and 7</cross-reference> can be used to implement the sequence of functions. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> While this invention has been described in conjunction with the specific embodiments thereof, it is evident that many alternatives, modifications, and variations will be apparent to those skilled in the art. Accordingly, preferred embodiments of the invention as set forth herein are intended to be illustrative, not limiting. There are changes that may be made without departing from the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for reading a misaligned data word in a memory having a first section and a second section, comprising: 
<claim-text>providing a first address to the first memory section; </claim-text>
<claim-text>providing a second address to the second memory section, wherein the second address is not equal to the first address; </claim-text>
<claim-text>receiving a first portion of the data word from the first memory section; </claim-text>
<claim-text>receiving a second portion of the data word from the second memory section; and </claim-text>
<claim-text>assembling the data word from the first and second portions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first memory section contains a same number of bits as the second memory section. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the second address is one location higher than the first memory location. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the first and second data word portions are received and assembled in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the first address is provided to the first memory section using a first address bus and the second address is provided to the second memory section using a second address bus, and wherein the first and second address busses have at least one disjoint address line. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the first and second address busses have at least a plurality of disjoint address lines. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the address lines of the first and second address busses are completely disjoint. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising providing a plurality of first read control information signals to a plurality of respective first modules of the first memory section, wherein the first read control information signals activate read operations on only those first modules containing data word information. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising providing a plurality of second read control information signals to a plurality of respective second modules of the second memory section, wherein the second read control information signals activate read operations on only those second modules containing data word information. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein assembling the data word includes performing a shift operation. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method for writing a data word to a memory having a first section and a second section, comprising: 
<claim-text>providing a first address to the first memory section; </claim-text>
<claim-text>providing a second address to the second memory section, wherein the second address is not equal to the first address; </claim-text>
<claim-text>writing a first portion of the data word to the first memory section; and </claim-text>
<claim-text>writing a second portion of the data word to the second memory section; </claim-text>
<claim-text>wherein the data word is misaligned with the memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the first memory section contains a same number of bits as the second memory section. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the second address is one location higher than the first memory location. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the first and second data word portions are written in a single memory-access cycle. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the first address is provided to the first memory section using a first address bus and the second address is provided to the second memory section using a second address bus, and wherein the first and second address busses have at least one disjoint address line. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the first and second address busses have at least a plurality of disjoint address lines. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the address lines of the first and second address busses are completely disjoint. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising providing a plurality of first write control information signals to a plurality of respective first modules of the first memory section, wherein the first write control information signals activate write operations on only those first modules designated to receive data word information. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 18</dependent-claim-reference>, further comprising providing a plurality of second write control information signals to a plurality of respective second modules of the second memory section, wherein the second write control information signals activate write operations on only those second modules designated to receive data word information. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising adjusting the data in the data word before writing the first and second data portions. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>reading the first portion of the data word from the first memory section; </claim-text>
<claim-text>reading the second portion of the data word from the second memory section; and </claim-text>
<claim-text>assembling the data word from the first and second portions. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A memory system that can access a misaligned data word, comprising: 
<claim-text>a first memory section connected to a first address bus; </claim-text>
<claim-text>a second memory section connected to a second address bus; </claim-text>
<claim-text>an address device that simultaneously provides a first address to the first memory section using the first address bus and a second address to the second memory section using the second address bus, wherein the second address is not equal to the first address; and </claim-text>
<claim-text>buffer circuitry that performs an access operation, wherein the access operation is at least one of a simultaneous read operation to the first and second memory sections or a simultaneous write operation to the first and second memory sections. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the access operation is performed in a single cycle. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the buffer circuitry reads a first portion of a data word from the first memory section and reads a second portion of the word from the second memory section. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the buffer circuitry receives the first and second word portions and assembles the word from the first and second word portions. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the buffer circuitry writes a first portion of a word to the first memory section and writes a second portion of the word to the second memory section. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the buffer circuitry effectively performs a shift operation on the word before the buffer circuitry performs the write operations. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the first memory section contains a same number of bits as the second memory section. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the second address is one location higher than the first memory location. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the first and second address busses have at least one disjoint address line. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference>, wherein the first and second address busses have at least a plurality of disjoint address lines. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference>, wherein the address lines of the first and second address busses are completely disjoint. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the address device further provides a plurality of read control information signals to a plurality of first modules of the first memory section, wherein the read control information signal activates read operations on only those first modules containing word data. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein the address device further provides a plurality of write control information signals to a plurality of first modules of the first memory section, wherein the write control information signals activate write operations on only those first modules designated for data word information. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the address device further provides write control information signals to a plurality of first modules of the first memory section, wherein the write control information signals activate write operations on only those first modules designated for data word information. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A memory system that can access a misaligned data word held in first and second separately addressable memory sections, comprising: 
<claim-text>a first memory section; for holding a first portion of the data word at a first location; </claim-text>
<claim-text>a second memory section; for holding a second portion of the data word at a second location; </claim-text>
<claim-text>an addressing means that simultaneously provides a first address to the first memory and a second address to the second memory section, the first and second memory addresses respectively indicating the locations of first and second portions of the misaligned data word in the first and second memory sections; and </claim-text>
<claim-text>a buffering means that performs an access operation in a single memory-access cycle, wherein the access operation is at least one of a simultaneous read operation from the first and second memory sections or a simultaneous write operation to the first and second memory sections. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The memory system of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the first memory section is an array comprising even address locations and the second memory section is a different memory array comprising old address locations.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002376A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002376A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002376A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002376A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002376A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002376A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002376A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002376A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
