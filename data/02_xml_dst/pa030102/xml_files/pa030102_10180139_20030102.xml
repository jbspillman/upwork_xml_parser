<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002063A1-20030102-P00900.TIF SYSTEM "US20030002063A1-20030102-P00900.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-P00901.TIF SYSTEM "US20030002063A1-20030102-P00901.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00000.TIF SYSTEM "US20030002063A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00001.TIF SYSTEM "US20030002063A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00002.TIF SYSTEM "US20030002063A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00003.TIF SYSTEM "US20030002063A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00004.TIF SYSTEM "US20030002063A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00005.TIF SYSTEM "US20030002063A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00006.TIF SYSTEM "US20030002063A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00007.TIF SYSTEM "US20030002063A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00008.TIF SYSTEM "US20030002063A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00009.TIF SYSTEM "US20030002063A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00010.TIF SYSTEM "US20030002063A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00011.TIF SYSTEM "US20030002063A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00012.TIF SYSTEM "US20030002063A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00013.TIF SYSTEM "US20030002063A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00014.TIF SYSTEM "US20030002063A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00015.TIF SYSTEM "US20030002063A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030002063A1-20030102-D00016.TIF SYSTEM "US20030002063A1-20030102-D00016.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002063</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10180139</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020627</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-197287</doc-number>
</priority-application-number>
<filing-date>20010628</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-197286</doc-number>
</priority-application-number>
<filing-date>20010628</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/21</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06K015/02</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>358</class>
<subclass>001110</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>707</class>
<subclass>542000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>707</class>
<subclass>911000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Printing control apparatus and printing control method capable of accurately printing embedded font</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Hiroshi</given-name>
<family-name>Oomura</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Masanari</given-name>
<family-name>Toda</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Tatsuro</given-name>
<family-name>Uchida</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FITZPATRICK CELLA HARPER &amp; SCINTO</name-1>
<name-2></name-2>
<address>
<address-1>30 ROCKEFELLER PLAZA</address-1>
<city>NEW YORK</city>
<state>NY</state>
<postalcode>10112</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Disclosed is a printing control apparatus in which a printing instruction is once converted into an intermediate code format and then converted into a printer control command, and which can correctly print an embedded font. In this invention, a spooler for converting a printing instruction into an intermediate code format and storing this intermediate code format detects the presence/absence of an embedded font on the basis of font attributes contained in the printing instruction. If an embedded font is detected, the spooler acquires the embedded font (S<highlight><bold>3.3</bold></highlight>) and spools the font by the intermediate code format (S<highlight><bold>3.4</bold></highlight>). The despooler registers the spooled embedded font in a graphic engine (D<highlight><bold>3</bold></highlight>), and a printer driver generates a control command by using the registered embedded font (Drv<highlight><bold>3.1</bold></highlight>). </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a printing control apparatus and printing control method of supplying printing control commands to a printing apparatus such as a printer and, more particularly, to a printing control apparatus and printing control method which once convert a printing instruction from an application program into a data format (a so-called intermediate code) different from printing data to be finally supplied to the printer, and again convert the intermediate code into the control command. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram showing an outline of a functional configuration related to a printing process in a host computer as a printing control apparatus which designates printing to a printer <highlight><bold>1500</bold></highlight> connected to this host computer directly or across a network. The printing process is started when a user of the host computer designates printing from an application <highlight><bold>201</bold></highlight> such as a wordprocessor program or spreadsheet program. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The application <highlight><bold>201</bold></highlight> analyzes application data containing character drawing data and the like, and calls a graphic engine <highlight><bold>202</bold></highlight> provided by an OS (basic software). </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The graphic engine <highlight><bold>202</bold></highlight> loads a printer driver <highlight><bold>203</bold></highlight> prepared in accordance with the type of the printer <highlight><bold>1500</bold></highlight>, and transfers the output from the application <highlight><bold>201</bold></highlight> to this printer driver <highlight><bold>203</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> then converts a GDI (Graphic Device Interface) function received from the application <highlight><bold>201</bold></highlight> into a DDI (Device Driver Interface) function, and outputs this DDI function to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> On the basis of the DDI function received from the graphic engine <highlight><bold>202</bold></highlight>, the printer driver <highlight><bold>203</bold></highlight> converts the data into a control command, e.g., a PDL (Page Description Language), which can be recognized by the printer. The converted printer control command is output as printing data from a system spooler <highlight><bold>204</bold></highlight> to the printer <highlight><bold>1500</bold></highlight> via an interface <highlight><bold>21</bold></highlight>. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The printer <highlight><bold>1500</bold></highlight> interprets and expands this control command into bitmap data, and finally outputs the printing result onto a printing medium such as paper. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic view showing information necessary for character drawing in the printing process. As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the following information is generally required for character drawing. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Character Code </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Character information to be expressed by character drawing. A code based on a predetermined code system such as ASCII, ShiftJIS, or Unicode is used. Some OSs support only a predetermined character code (e.g., ShiftJIS). ShiftJIS has no definitions for British pound (not &ldquo;&pound;&rdquo; but a character formed by adding a lateral bar to &ldquo;L&rdquo;. In this specification, British pound indicates this character) and a Euro symbol. Therefore, these characters must be expressed by using another character code such as Unicode which supports these characters. If an OS supports only ShiftJIS, British pound cannot be expressed on the OS. An OS uses various means to avoid this event. These means will be explained later. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Font Attributes </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Information such as a face name suited to character drawing, the presence/absence of designation of Italic/bald representing modification to a glyph, and the number of points indicating the size of a character. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Font </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Information representing the shape of character drawing designated by a face name such as Gothic, Mincho, Times New Roman or Arial. This information contains drawing shape information (called a glyph) of each character. Font information formats are roughly divided into a bitmap font and an outline font, and various formats such as TrueType and OpenType are defined. Internal information of a font will be explained in more detail later. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Drawing Attributes </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Information representing the drawing position, color, clip condition, and the like of a character. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> If not all of these pieces of information are obtained, character drawing intended by the user is not accomplished. A font is information representing a character drawing shape. However, necessary fonts are not always present in all environments owing to, e.g., the copyright. In other words, a font present in an environment in which a user forms character drawing data may not be present in an environment in which character drawing is performed. As means for performing character drawing with a font intended by a user or with a font having a shape similar to the font intended by the user even if the font intended by the user does not exist in an environment in which the drawing is to be performed, 1) font replacement, 2) bitmap replacement, and 3) font embedding are conventionally known. These means will be explained below with reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference> which shows the drawing results when these means are used. </paragraph>
<paragraph id="P-0017" lvl="7"><number>&lsqb;0017&rsqb;</number> 1. Font Replacement </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> A method of performing drawing using a font close to font attributes in character drawing data in a character drawing execution environment. Since a font different from the intended font is used, as shown in the upper right row in <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> character having a shape entirely different from the one intended by the user maybe drawn. In the worst case, a font corresponding to the intended character code does not exist in a character drawing execution environment, so drawing (printing) which cannot be perceived as a character may be performed. </paragraph>
<paragraph id="P-0019" lvl="7"><number>&lsqb;0019&rsqb;</number> 2. Bitmap Replacement </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> A method of converting a character into a bitmap when character drawing data is to be formed, thereby converting character drawing into bitmap drawing. This bitmap drawing normally looks the same as character drawing intended by the user. Since the character is drawn as a bitmap, however, the character quality sometimes lowers owing to the influence of the bitmap resolution if the character is enlarged/reduced as shown in the middle right row in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0021" lvl="7"><number>&lsqb;0021&rsqb;</number> 3. Font Embedding </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A method of embedding a font into character drawing data and thereby carrying the font to an environment in which character drawing is actually performed. The embedded font is registered in a character drawing execution environment before character drawing. Therefore, all information is obtained, so character drawing is performed by the format intended by the user. However, when the embedded font is to be registered, caution should be exercised so as not to infringe the copyright. For example, if the embedded font is originally not present in a drawing environment, the registered font must be erased after printing is completed. When printing by an application is completed, therefore, the registered font is discarded from the system so as not to be used by another application. This font embedding has the advantage that an output intended by the user can be obtained even if the designated font does not exist in a character drawing environment. However, character drawing data often increases in size because font information is embedded in the character drawing data. This problem is particularly notable when a font such as a Japanese font having a larger number of character types is embedded. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The operations of the application <highlight><bold>201</bold></highlight>, the graphic engine <highlight><bold>202</bold></highlight>, and the printer driver <highlight><bold>203</bold></highlight> of the conventional apparatus when character drawing data in which a font is embedded is to be printed will be explained below with reference to a sequence chart shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Step A<highlight><bold>1</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that a print job is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and transfers this DDI function to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Step Drv<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job start control. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Step A<highlight><bold>2</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is to be started (the graphic engine <highlight><bold>202</bold></highlight> transfers the function to the printer driver <highlight><bold>203</bold></highlight> as in step A<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Step Drv<highlight><bold>2</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for page start control. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Step A<highlight><bold>3</bold></highlight>. The application <highlight><bold>201</bold></highlight> registers an embedded font in application data into the graphic engine <highlight><bold>202</bold></highlight>. This registration makes it possible to use information of the font essential to character drawing even in this environment. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> holds the font information. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Step A<highlight><bold>4</bold></highlight>. The application <highlight><bold>201</bold></highlight> performs character drawing by a GDI function using the font registered in step A<highlight><bold>3</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> transfers the function to the printer driver <highlight><bold>203</bold></highlight> as in step A<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> acquires a glyph of the character by the following processing, in order to generate a character drawing command. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> issues a character glyph acquisition request to the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Step G<highlight><bold>2</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> generates a character glyph from the font registered in step G<highlight><bold>1</bold></highlight>, and transfers the glyph to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Step A<highlight><bold>5</bold></highlight>. The application <highlight><bold>201</bold></highlight> deletes the font registered in step A<highlight><bold>3</bold></highlight> from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Step G<highlight><bold>3</bold></highlight>. The embedded font held by the graphic engine <highlight><bold>202</bold></highlight> is discarded. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Step A<highlight><bold>6</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> transfers the function to the printer driver <highlight><bold>203</bold></highlight> as in step A<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Step Drv<highlight><bold>4</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for page end control. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Step A<highlight><bold>7</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> transfers the function to the printer driver <highlight><bold>203</bold></highlight> as in step A<highlight><bold>1</bold></highlight>). </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Step Drv<highlight><bold>5</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job end control. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The information stored in a font will be described in more detail below with reference to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. A font contains primarily the following information. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Face Name </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> An identification name for identifying a font to be used. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Number of Glyph Definitions </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The number of definitions of a glyph representing the shape of a character defined in a font. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Glyph Index Table </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> To use various character codes with a single font, a font such as TrueType or OpenType defines an identifier independent of a character code for each glyph in the font, thereby managing glyphs independently of character codes. This glyph identifier is generally called a glyph index. By preparing a correspondence table of character codes and corresponding glyph indices for each character code system, various character codes can be used with a single font. This correspondence table is called a glyph index table. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows two glyph index tables. A common glyph index table has a data format in which a glyph index is extracted from a character code. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Glyph </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Information representing the shape of a character. Bitmaps, paths, and curves are examples of a method of representing a glyph. Each defined glyph is identified by a font-dependent glyph index in a font. Since a glyph index is font-dependent, as shown in <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> glyph index of &ldquo;A&rdquo; is 0&times;0001 in a &ldquo;Gothic&rdquo; font and is 0&times;0011 in an &ldquo;Arial&rdquo; font. Usually, a glyph index changes in accordance with a font even for the same character. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Like British pound in the &ldquo;Gothic font&rdquo; and &ldquo;<custom-character file="US20030002063A1-20030102-P00900.TIF" wi="20" he="20" id="custom-character-00001"/>&rdquo; and &ldquo;<custom-character file="US20030002063A1-20030102-P00901.TIF" wi="20" he="20" id="custom-character-00002"/>&rdquo; in the &ldquo;Arial&rdquo; font (alphanumeric font), some characters have no defined glyphs depending on fonts. When characters like these are to be printed, as shown on the right-hand side of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, characters representing glyph-undefined characters such as &ldquo;&bull;&rdquo; and &ldquo;&square;&rdquo; are printed in accordance with a designated font. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> When an OS which supports only ShiftJIS as an internal character code is used, British pound cannot be displayed even by the &ldquo;Arial&rdquo; font in which the glyph of British pound is defined, because no definition of a ShiftJIS character code for British pound exists. For commercial uses of an OS, inability to display general symbols such as British pound (a character formed by adding a lateral bar to &ldquo;L&rdquo;) and a Euro symbol is unpreferable. Therefore, an OS exists which designates information for character drawing by using a font-dependent glyph index instead of a character code. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The operations of the application <highlight><bold>201</bold></highlight>, the graphic engine <highlight><bold>202</bold></highlight>, and the printer driver <highlight><bold>203</bold></highlight> when conventional glyph index printing is to be performed in a printing control apparatus using an OS which cannot use Unicode as an internal structure will be described below with reference to a sequence chart shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. Note that the same reference numerals as in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> denote the same processes in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, and a repetitive explanation thereof will be omitted. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Steps A<highlight><bold>1</bold></highlight> to Drv<highlight><bold>2</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Step A<highlight><bold>3</bold></highlight>. The application <highlight><bold>201</bold></highlight> uses Unicode to request character drawing which cannot be expressed by ShiftJIS. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. Since Unicode cannot be used in the OS, the graphic engine <highlight><bold>202</bold></highlight> looks up a glyph index table corresponding to a font of the character designated by Unicode, converts into a glyph index contained in the table and corresponding to Unicode, and transfers the glyph index as a character code of character drawing to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>. To generate a character drawing command, the printer driver <highlight><bold>203</bold></highlight> acquires a character glyph by performing the following processing by using the glyph index. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> acquires a character glyph by designating the glyph index to the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Step G<highlight><bold>2</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> acquires a glyph of the designated glyph index from the font data, and transfers the glyph to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The processing is completed by executing steps A<highlight><bold>6</bold></highlight> and A<highlight><bold>7</bold></highlight> as in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The processing shown in <cross-reference target="DRAWINGS">FIGS. 9 and 10</cross-reference> is performed by a single process; when the application <highlight><bold>201</bold></highlight> calls a GDI function, those process routines of the graphic engine <highlight><bold>202</bold></highlight> and the printer driver <highlight><bold>203</bold></highlight>, which are required to realize functions of the called GDI function start operating, thereby generating a PDL command corresponding to the contents of the call. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Since the GDI function call by the application <highlight><bold>201</bold></highlight> is completely linked to the processes by the graphic engine <highlight><bold>202</bold></highlight> and the printer driver <highlight><bold>203</bold></highlight>, the operation procedure between the application <highlight><bold>201</bold></highlight>, the graphic engine <highlight><bold>202</bold></highlight>, and the printer driver <highlight><bold>203</bold></highlight> is assured. This ensures that a font is held by the graphic engine <highlight><bold>202</bold></highlight> in Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight> Character Glyph Acquisition which is the processing step by the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a functional block diagram of a host computer including a spooler and a despooler and its related functions in addition to the configuration shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Before printing data to be transmitted to a printer is generated, the spooler temporarily saves data in a data format (a so-called intermediate code) different from the printing data to be finally transmitted to the printer. From this data temporarily saved in the intermediate code format, the despooler generates the printing data to be finally transmitted to the printer. That is, in the host computer shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, when a printing instruction is to be transmitted from a graphic engine <highlight><bold>202</bold></highlight> to a printer driver <highlight><bold>203</bold></highlight>, a spool file <highlight><bold>303</bold></highlight> made up of intermediate codes is once generated. After that, the despooler converts this spool file into printing data and outputs the data to the printer. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In the host computer shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> described earlier, the application <highlight><bold>201</bold></highlight> is released from the printing process when the printer driver <highlight><bold>203</bold></highlight> has completely converted all printing instructions from the graphic engine <highlight><bold>202</bold></highlight> into control commands of the printer <highlight><bold>1500</bold></highlight>. In contrast, in the host computer shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the application <highlight><bold>201</bold></highlight> is released from the printing process when a spooler <highlight><bold>302</bold></highlight> has converted all printing instructions into intermediate code data and output the data to the spool file <highlight><bold>303</bold></highlight>. Usually, the application <highlight><bold>201</bold></highlight> is released from the printing process within a shorter time period in the latter case (the configuration shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Also, when the configuration shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is used, the contents of the spool file <highlight><bold>303</bold></highlight> can be processed before printing. This can realize functions which the application does not have, e.g., enlarged/reduced printing and N-up printing by which a plurality of (N) pages are printed as they are reduced into one page. Note that the spool file <highlight><bold>303</bold></highlight> is usually processed by performing settings from a window provided by the printer driver <highlight><bold>203</bold></highlight>, and saving the set contents on a memory such as a RAM or HD by the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> From the above advantages, transition from the configuration shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> to the configuration in which spooling is performed using intermediate code data as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is advancing. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> A process of printing font-embedded data in the host computer having the functional arrangement shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> will be explained below with reference to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> This processing cannot be done by a single process, unlike the processing by the functional arrangement shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. To control a plurality of jobs, queue processing between an application process and a despooler process must be realized. In practice, communication between these two processes is performed via a spool file manager <highlight><bold>304</bold></highlight>. To simplify the explanation, however, the spool file manager <highlight><bold>304</bold></highlight> including the queue processing is regarded as one communication medium and omitted from <cross-reference target="DRAWINGS">FIG. 11</cross-reference> and from the following explanation. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Step A<highlight><bold>1</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that a print job is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to a dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Step S<highlight><bold>1</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a job file which holds information, such as a paper size, concerning the job, and activates a despooler <highlight><bold>305</bold></highlight> as another process. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Step D<highlight><bold>1</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> reads the job file and calls a GDI function for starting the print job (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Step Drv<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job start control. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Step A<highlight><bold>2</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Step S<highlight><bold>2</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a page file which holds information concerning a page. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Step A<highlight><bold>3</bold></highlight>. The application <highlight><bold>201</bold></highlight> registers an embedded font in application data into the graphic engine <highlight><bold>202</bold></highlight>. This registration makes it possible to use information of the font essential to character drawing even in this environment. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> holds the font information. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Step A<highlight><bold>4</bold></highlight>. The application <highlight><bold>201</bold></highlight> performs character drawing by using a font including the font registered in step A<highlight><bold>3</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> converts a GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Step S<highlight><bold>3</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> writes information representing character drawing as an intermediate code into the page file of the spool file. This intermediate code contains only &ldquo;character code, font attributes, and drawing attributes&rdquo; obtainable from the DDI function, and does not contain any font. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Step A<highlight><bold>5</bold></highlight>. The application <highlight><bold>201</bold></highlight> deletes the font registered in step A<highlight><bold>3</bold></highlight> from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Step G<highlight><bold>3</bold></highlight>. The embedded font held by the graphic engine <highlight><bold>202</bold></highlight> is discarded. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Step A<highlight><bold>6</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Step S<highlight><bold>4</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the page file and requests the despooler <highlight><bold>305</bold></highlight> to reproduce the page. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Step A<highlight><bold>7</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Step S<highlight><bold>5</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the job file and notifies the despooler <highlight><bold>305</bold></highlight> that no more pages are present. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Step D<highlight><bold>2</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> calls a GDI function for page start in order to reproduce the intermediate code described in the page file generated in step S<highlight><bold>2</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Step Drv<highlight><bold>2</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for page start control. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Step D<highlight><bold>3</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> calls a GDI function to reproduce character drawing described in the intermediate code (the graphic engine <highlight><bold>202</bold></highlight> converts the GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>. To generate a character drawing command, the printer driver <highlight><bold>203</bold></highlight> acquires a character glyph by the following processing. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> acquires a character glyph from the graphic engine. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Step G<highlight><bold>4</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> searches for a font having the face name designated in the font attributes. However, the font (which is embedded and originally not present in this environment) is already discarded in step G<highlight><bold>3</bold></highlight>, and so the glyph of this font cannot be transferred even if requested. Therefore, on the basis of a predetermined relationship a glyph is formed using an alternate font of a type close to the font whose glyph is requested, and the result is transferred to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Step D<highlight><bold>6</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Step Drv<highlight><bold>4</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL code for page end control. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Step D<highlight><bold>7</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Step Drv<highlight><bold>5</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job end control. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Processing when the host computer as a printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> prints font-embedded data by using an OS which cannot use Unicode as an internal structure is indicated by a sequence chart shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, this processing cannot be performed by a single process as in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> described above. To control a plurality of jobs, queue processing between an application process and a despooler process must be realized. In practice, communication between these two processes is performed via the spool file manager <highlight><bold>304</bold></highlight>. To simplify the explanation, however, the spool file manager <highlight><bold>304</bold></highlight> including the queue processing is regarded as one communication medium and omitted from <cross-reference target="DRAWINGS">FIG. 12</cross-reference> and from the following explanation. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Also, the same reference numerals as in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> denote the same processes in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, and a repetitive explanation thereof will be omitted. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Processes in steps A<highlight><bold>1</bold></highlight> to S<highlight><bold>2</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Step A<highlight><bold>3</bold></highlight>&prime;. The application <highlight><bold>201</bold></highlight> uses Unicode to request character drawing which cannot be expressed by ShiftJIS. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Step G<highlight><bold>1</bold></highlight>&prime;. Since Unicode cannot be used in the OS, the graphic engine <highlight><bold>202</bold></highlight> looks up a glyph index table corresponding to a font of the character designated by Unicode, and transfers to the printer driver <highlight><bold>203</bold></highlight> a glyph index corresponding to the designated character code (Unicode) as a character code of character drawing. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Step S<highlight><bold>3</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> writes information representing character drawing as an intermediate code into the page file of the spool file. This intermediate code contains only &ldquo;character code, font attributes, and drawing attributes&rdquo; obtainable from the DDI function, and does not contain any font. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Steps A<highlight><bold>6</bold></highlight> to Drv<highlight><bold>2</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Step D<highlight><bold>3</bold></highlight>&prime;. The despooler <highlight><bold>305</bold></highlight> calls a GDI function to reproduce character drawing described in the intermediate code. The character code of this intermediate code contains a font-dependent glyph index code (the graphic engine <highlight><bold>202</bold></highlight> converts the GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>&prime;. To generate a character drawing command, the printer driver <highlight><bold>203</bold></highlight> acquires a character glyph by the following processing by using the glyph index as a character code. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>&prime;. The printer driver <highlight><bold>203</bold></highlight> acquires a character glyph from the graphic engine by using the glyph index. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Step G<highlight><bold>4</bold></highlight>&prime;. The graphic engine <highlight><bold>202</bold></highlight> searches for a font having the face name designated in the font attributes. If a font having the designated face name exists, a glyph can be acquired by the font-dependent glyph index. However, if this font is an embedded font, the application <highlight><bold>201</bold></highlight> has discarded the font registered in the OS in some cases. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> If a font having the designated face name does not exist on the graphic engine <highlight><bold>202</bold></highlight>, a glyph is formed using another font of a close type by font replacement. When this font replacement is performed, it is highly likely that a glyph different from the character intended by the user is acquired if the glyph is acquired using a font-dependent glyph index. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> After that, the processing is completed by executing steps D<highlight><bold>6</bold></highlight> to Drv<highlight><bold>5</bold></highlight> in the same manner as in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference>, the above processing is performed by the two processes, i.e., the application process and despooler process. It is not ensured that a font registered in the graphic engine <highlight><bold>202</bold></highlight> by the application <highlight><bold>201</bold></highlight> is present in the graphic engine <highlight><bold>202</bold></highlight> when a spool file is reproduced by the despooler. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> If no embedded font is present in the graphic engine <highlight><bold>202</bold></highlight>, font replacement occurs as explained in step G<highlight><bold>4</bold></highlight>, so the font designated by the intermediate data is replaced with another font. In the processing shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, therefore, as indicated in the uppermost right row in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the data may be output in a shape different from the shape intended by the user. Also, in the processing shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, it is highly likely that no intended character glyph is acquired by the use of a font-dependent glyph index. Furthermore, since not a character code but a font-dependent glyph index code is supplied to the printer driver <highlight><bold>203</bold></highlight>, a font replacement function using a built-in font of the printer cannot be applied. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> To avoid this problem, a method of performing bitmap replacement during spooling can be performed to prevent font replacement of step G<highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> First, a possible operation as a printing process in which bitmap replacement is performed during spooling will be described with reference to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Step A<highlight><bold>1</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that a print job is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Step S<highlight><bold>1</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a job file which holds information, such as a paper size, concerning the job, and activates the despooler <highlight><bold>305</bold></highlight> as another process. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Step D<highlight><bold>1</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> reads the job file and calls a GDI function for starting the print job (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Step Drv<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job start control. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Step A<highlight><bold>2</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Step S<highlight><bold>2</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a page file which holds information concerning a page. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Step A<highlight><bold>3</bold></highlight>. The application <highlight><bold>201</bold></highlight> registers an embedded font in application data into the graphic engine <highlight><bold>202</bold></highlight>. This registration makes it possible to use information of the font essential to character drawing even in this environment. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> holds the font information. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Step A<highlight><bold>4</bold></highlight>. The application <highlight><bold>201</bold></highlight> performs character drawing by using a font including the font registered in step A<highlight><bold>3</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> converts a GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Step S<highlight><bold>3</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> writes information representing character drawing as an intermediate code into the page file of the spool file. If the font attribute contained in this intermediate code is an embedded font, the following processing is performed to eliminate the difference between drawn characters resulting from font replacement. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Step S<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> acquires a character glyph from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Step G<highlight><bold>2</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> generates a character glyph from the font and transfers the generated glyph to the spooler <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Step S<highlight><bold>3</bold></highlight>.<highlight><bold>2</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> uses the received character glyph to convert character drawing into bitmap drawing, and spools as an intermediate code. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Step A<highlight><bold>5</bold></highlight>. The application <highlight><bold>201</bold></highlight> deletes the font registered in step A<highlight><bold>3</bold></highlight> from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> Step G<highlight><bold>3</bold></highlight>. The embedded font held by the graphic engine <highlight><bold>202</bold></highlight> is discarded. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> Step A<highlight><bold>6</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Step S<highlight><bold>4</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the page file and requests the despooler <highlight><bold>305</bold></highlight> to reproduce the page. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> Step A<highlight><bold>7</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Step S<highlight><bold>5</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the job file and notifies the despooler <highlight><bold>305</bold></highlight> that no more pages are present. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Step D<highlight><bold>2</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> calls a GDI function for page start in order to reproduce the intermediate code described in the page file generated in step S<highlight><bold>2</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> converts the called GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Step Drv<highlight><bold>2</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for page start control. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Step D<highlight><bold>8</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> converts the intermediate code, of bitmap drawing converted from character drawing, on the page file into a GDI function call (the graphic engine <highlight><bold>202</bold></highlight> converts the called GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Step Drv<highlight><bold>6</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> converts bitmap drawing into a PDL command. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Step D<highlight><bold>6</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Step Drv<highlight><bold>4</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL code for page end control. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Step D<highlight><bold>7</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Step Drv<highlight><bold>5</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job end control. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Next, a possible operation as a printing process in which bitmap replacement is performed during spooling in accordance with the processing shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> will be described below with reference to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Referring to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the same reference numerals as in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> denote the same processes, and a repetitive explanation thereof will be omitted. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Processes in steps A<highlight><bold>1</bold></highlight> to S<highlight><bold>2</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Step A<highlight><bold>3</bold></highlight>&prime;. The application <highlight><bold>201</bold></highlight> uses Unicode to request character drawing which cannot be expressed by ShiftJIS. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Step G<highlight><bold>1</bold></highlight>&prime;. Since Unicode cannot be used in the OS, the graphic engine <highlight><bold>202</bold></highlight> looks up a glyph index table corresponding to a font of the character designated by Unicode, and transfers to the printer driver <highlight><bold>203</bold></highlight> a glyph index corresponding to the designated character code (Unicode) as a character code of character drawing. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> After that, steps S<highlight><bold>3</bold></highlight> to Drv<highlight><bold>5</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> In the processing explained with reference to <cross-reference target="DRAWINGS">FIGS. 13 and 14</cross-reference>, even if the printer driver <highlight><bold>203</bold></highlight> requests a glyph of an embedded font (which is not originally present), no font replacement by the graphic engine occurs. Basically, therefore, a character output having a shape intended by the user is obtained. However, the conversion from character drawing into bitmap drawing has the following problems. </paragraph>
<paragraph id="P-0144" lvl="7"><number>&lsqb;0144&rsqb;</number> 1. Deterioration of Quality Upon Enlargement </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> As indicated in the middle right row in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the quality of a character deteriorates if enlargement is performed after spooling. </paragraph>
<paragraph id="P-0146" lvl="7"><number>&lsqb;0146&rsqb;</number> 2. Problem of Color Processing </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> Information concerning character drawing disappears when the data is converted into a bitmap. Therefore, color processing of character drawing cannot be applied to color conversion performed during color printing. </paragraph>
<paragraph id="P-0148" lvl="7"><number>&lsqb;0148&rsqb;</number> 3. Problem of Compression </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> A compression process effective to a bitmap of a character glyph cannot be applied. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> As described above, the conventional printing control apparatus includes a spooler, despooler, and printer driver. Before printing data to be transmitted to a printer is generated, the spooler temporarily saves data in a data format (a so-called intermediate code) different from the printing data to be finally transmitted to the printer. From this data temporarily saved in the intermediate code format, the despooler generates the printing data to be finally transmitted to the printer. The printer driver generates printer control commands. When character drawing using an embedded font is to be performed in this printing control apparatus, font replacement or bitmap replacement occurs. When the font replacement occurs, no intended output result can be obtained. When the bitmap replacement occurs, the printing quality lowers, and problems arise in color processing and in a compression process. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Also, when a code (glyph index) which identifies a font-dependent code is used instead of a character code, the character may be garbled if font replacement occurs in the despooler. Additionally, a font-dependent glyph index is not a character code and hence cannot be converted into a character code usable by a built-in font of the printer. Therefore, a process of replacement to a built-in font of the printer cannot be applied. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> It is an object of the present invention to solve the above conventional problems and provide a printing control apparatus and printing control method in which a printing instruction is once converted into an intermediate code format and then converted into a control command, and which can correctly print an embedded font. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> It is another object of the present invention to provide a printing control apparatus and printing control method in which a printing instruction is once converted into an intermediate code format and then converted into a control command, and which can print data without any garbled characters even if an application designates a character code of a system which cannot be processed as a character code in the printing control apparatus. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> According to an aspect of the present invention, a printing control apparatus for converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: intermediate data generating means for converting the printing instruction into intermediate data having a format different from the control command, and storing the intermediate data; and control command generating means for converting the intermediate data into the control command and outputting the control command, wherein said intermediate data generating means comprises: font determining means for determining whether en embedded font is contained in the printing instruction; and storage means for, when it is determined that the embedded font is contained, acquiring the embedded font and storing the embedded font together with the intermediate data, and said control command generating means converts the intermediate data into the control command by using the embedded font stored together with the intermediate data. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> According to another aspect of the present invention, a printing control method of converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: the intermediate data generation step of converting the printing instruction into intermediate data having a format different from the control command, and storing the intermediate data; and the control command generation step of converting the intermediate data into the control command and outputting the control command, wherein the intermediate data generation step comprises: the font determination step of determining whether an embedded font is contained in the printing instruction; and the storage step of, when it is determined that the embedded font is contained, acquiring the embedded font and storing the embedded font together with the intermediate data, and in the control command generation step, the intermediate data is converted into the control command by using the embedded font stored together with the intermediate data. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> According to a further aspect of the present invention, a printing control apparatus comprising: spooler which, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requests acquisition of the font, and stores the acquired font as intermediate data into a spool file; a despooler which registers the font embedded in the spool file; and a driver which acquires a character glyph on the basis of the font registered by said despooler, and converts information representing the character drawing into a PDL. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> According to still further aspect of the present invention, a printing control method comprising: the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; the registration step of registering the font embedded in the spool file; and the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> According to another aspect of the present invention, a computer program comprising: a program of the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; a program of the registration step of registering the font embedded in the spool file; and a program of the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> According to another aspect of the present invention, a computer-readable storage medium storing: </paragraph>
<paragraph id="P-0160" lvl="2"><number>&lsqb;0160&rsqb;</number> a program of the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; </paragraph>
<paragraph id="P-0161" lvl="2"><number>&lsqb;0161&rsqb;</number> a program of the registration step of registering the font embedded in the spool file; and </paragraph>
<paragraph id="P-0162" lvl="2"><number>&lsqb;0162&rsqb;</number> a program of the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> According to another aspect of the present invention, a printing control apparatus for converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: data converting means for converting the printing instruction into a first data format containing a character code or glyph index; intermediate data generating means for converting the printing instruction having a first data format into intermediate data having a format different from the control command, and storing the intermediate data; and control command generating means for converting the intermediate data into the control command and outputting the control command, wherein said intermediate data generating means comprises character code acquiring means for, if the printing instruction having the first data format contains the glyph index, acquiring a character code corresponding to the glyph index, and generates the intermediate code by using the character code contained in the printing instruction having the first data format, or the character code acquired by said character code acquiring means. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> According to another aspect of the present invention, a printing control method of converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: the data conversion step of converting the printing instruction into a first data format containing a character code or glyph index; the intermediate data generation step of converting the printing instruction having a first data format into intermediate data having a format different from the control command, and storing the intermediate data; and the control command generation step of converting the intermediate data into the control command and outputting the control command, wherein the intermediate data generation step comprises the character code acquisition step of, if the printing instruction having the first data format contains the glyph index, acquiring a character code corresponding to the glyph index, and the intermediate code is generated by using the character code contained in the printing instruction having the first data format, or the character code acquired in the character code acquisition step. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> According to another aspect of the present invention, a printing control apparatus comprising: a spooler which acquires a glyph index, converts the acquired glyph index into a character code, and spools character drawing information by an intermediate data format by using the converted character code; and a driver which acquires a glyph index corresponding to the character code contained in a character drawing instruction spooled by said spooler, and acquires a character glyph by using the acquired glyph index. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> According to another aspect of the present invention, a printing control method comprising the steps of: acquiring a glyph index; converting the acquired glyph index into a character code; spooling character drawing information by an intermediate data format by using the converted character code; acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and acquiring a character glyph by using the acquired glyph index. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> According to another aspect of the present invention, a computer program comprising programs of the steps of: acquiring a glyph index; converting the acquired glyph index into a character code; spooling character drawing information by an intermediate data format by using the converted character code; acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and acquiring a character glyph by using the acquired glyph index. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> According to another aspect of the present invention, a computer-readable storage medium storing programs of the steps of: acquiring a glyph index; converting the acquired glyph index into a character code; spooling character drawing information by an intermediate data format by using the converted character code; acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and acquiring a character glyph by using the acquired glyph index. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings, in which like reference characters designate the same or similar parts throughout the figures thereof.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a sectional view showing the arrangement of a laser beam printer as an example of a printer to which a printing control apparatus of the present invention can be connected; </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing the hardware configurations of a host computer as a printing control apparatus according to an embodiment of the present invention, and a printer connected to the host computer; </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a representative functional block diagram of a conventional printing control apparatus in which a printing instruction from an application is converted into a printer control command without being converted into intermediate code data; </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a representative functional block diagram of a printing control apparatus, applicable to a printing control apparatus of the present invention, in which a printing instruction from an application is converted into intermediate code data and then converted into a printer control command; </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a view for explaining information necessary for character drawing and printing results; </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a view for explaining other examples of information necessary for character drawing and printing results; </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a view showing examples of printing results when font replacement and bitmap replacement occur in character drawing; </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a view showing examples of glyph index tables; </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a view showing a sequence of a printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a view showing another sequence of the printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a view showing a sequence when font replacement occurs, as a printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a view showing another sequence when font replacement occurs, as a printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a view showing a sequence when bitmap replacement occurs, as a printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a view showing another sequence when bitmap replacement occurs, as a printing process in the printing control apparatus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a view showing the sequence of a printing process in a printing control apparatus according to the first embodiment of the present invention; and </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a view showing the sequence of a printing process in a printing control apparatus according to the second embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> Preferred embodiments of the present invention will now be described in detail in accordance with the accompanying drawings. </paragraph>
<paragraph id="P-0188" lvl="7"><number>&lsqb;0188&rsqb;</number> (First Embodiment) </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> Before an explanation of a printing control apparatus according to an embodiment of the present invention, the arrangement of a printing apparatus controllable by a printing control apparatus of an embodiment of the present invention will be explained. </paragraph>
<paragraph id="P-0190" lvl="7"><number>&lsqb;0190&rsqb;</number> (Structure of Printer) </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic sectional view for explaining the arrangement of a printing apparatus controllable by a printing control apparatus according to an embodiment of the present invention. In this embodiment, a printing apparatus <highlight><bold>1500</bold></highlight> is, e.g., a laser beam printer. However, it is of course also possible to use an inkjet printer or a printing apparatus using some other printing system. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> This printing apparatus (to be referred to as a printer hereinafter) <highlight><bold>1500</bold></highlight> forms an image on a printing sheet as an example of a printing medium, on the basis of, e.g., a printer control command supplied from a printing control apparatus directly or across a network or the like. A printer body <highlight><bold>740</bold></highlight> includes a printer control unit <highlight><bold>1000</bold></highlight>, an operation unit <highlight><bold>1501</bold></highlight>, a laser driver <highlight><bold>702</bold></highlight>, a semiconductor laser <highlight><bold>703</bold></highlight>, a rotary polyhedral mirror <highlight><bold>705</bold></highlight>, an electrostatic drum <highlight><bold>706</bold></highlight>, a developing unit <highlight><bold>707</bold></highlight>, a paper cassette <highlight><bold>708</bold></highlight>, conveyor rollers <highlight><bold>710</bold></highlight>, an external memory <highlight><bold>711</bold></highlight>, a face-down discharge unit <highlight><bold>715</bold></highlight>, and a paper delivery tray <highlight><bold>716</bold></highlight>. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> Each component and its operation will be described in detail below. The printer control unit <highlight><bold>1000</bold></highlight> controls the whole printer body <highlight><bold>740</bold></highlight>. This printer control unit <highlight><bold>1000</bold></highlight> primarily converts printer control commands into video signals and outputs the signals to the laser driver <highlight><bold>702</bold></highlight>. The external memory <highlight><bold>711</bold></highlight> which supplies font data, an emulation program of a page description language (PDL), and the like can be connected to the printer control unit <highlight><bold>1000</bold></highlight>. The operation unit <highlight><bold>1501</bold></highlight> has keys, a display means (e.g., an LED display), and the like for operating and setting the printer <highlight><bold>1500</bold></highlight>. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> The laser driver <highlight><bold>702</bold></highlight> is a circuit for driving the semiconductor laser <highlight><bold>703</bold></highlight>. In accordance with an input video signal, the laser driver <highlight><bold>702</bold></highlight> drives the semiconductor laser <highlight><bold>703</bold></highlight> and turns on and off a laser beam <highlight><bold>704</bold></highlight> emitted from the semiconductor laser <highlight><bold>703</bold></highlight>. The semiconductor laser <highlight><bold>703</bold></highlight> emits a laser beam toward the rotary polyhedral mirror <highlight><bold>705</bold></highlight>. The rotary polyhedral mirror <highlight><bold>705</bold></highlight> reflects the laser beam <highlight><bold>704</bold></highlight> in the horizontal direction to allow this laser beam <highlight><bold>704</bold></highlight> to scan the electrostatic drum <highlight><bold>706</bold></highlight>. When this electrostatic drum <highlight><bold>706</bold></highlight> charged to a predetermined potential beforehand is scanned by the laser beam <highlight><bold>704</bold></highlight> which is turned on and off, an electrostatic latent image corresponding to the output video signal from the printer control unit <highlight><bold>1000</bold></highlight> is formed on the drum surface. The developing unit <highlight><bold>707</bold></highlight> is placed near the electrostatic drum <highlight><bold>706</bold></highlight> and develops (visualizes) the electrostatic latent image by using a developing agent (toner). </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> The paper cassette <highlight><bold>708</bold></highlight> contains, e.g., cut sheets as printing sheets. A paper feed roller <highlight><bold>709</bold></highlight> and the conveyor rollers <highlight><bold>710</bold></highlight> convey a cut printing sheet in the paper feed cassette <highlight><bold>708</bold></highlight> into the printer body <highlight><bold>740</bold></highlight>, and supply the sheet to a position where the sheet opposes the electrostatic drum <highlight><bold>706</bold></highlight>. A printing sheet can be supplied not only from the paper cassette <highlight><bold>708</bold></highlight> but also from a manual feed tray (not shown) on the upper surface of a lid of the paper cassette <highlight><bold>708</bold></highlight>. The latent image (toner image) developed on the drum is transferred onto the printing sheet conveyed by a transfer roller and the like. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> A fixing unit <highlight><bold>712</bold></highlight> gives heat and pressure to the toner image transferred to the cut printing sheet, thereby fixing this toner image on the cut printing sheet. When a switching wedge <highlight><bold>713</bold></highlight> is pointed up, the printing sheet having the image formed on it is discharged from a face-up discharge unit <highlight><bold>714</bold></highlight> to the paper delivery tray <highlight><bold>716</bold></highlight> with the image bearing surface facing up. When this switching wedge <highlight><bold>713</bold></highlight> is pointed down, the printing sheet is discharged from the face-down discharge unit <highlight><bold>715</bold></highlight> with the image bearing surface facing down. </paragraph>
<paragraph id="P-0197" lvl="7"><number>&lsqb;0197&rsqb;</number> (Arrangement of Printing Control Apparatus) </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> The arrangement of a host computer as an example of a printing control apparatus according to an embodiment of the present invention will be described below with reference to a block diagram in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Note that this printing control apparatus can be any of a single apparatus, a system made up of a plurality of apparatuses, and a system which operates as it is connected across a network such as a LAN (Local Area Network) or WAN (Wide Area Network), provided that the functions of the printing control apparatus explained below are implemented. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> host computer <highlight><bold>3000</bold></highlight> as an example of the printing control apparatus according to an embodiment of the present invention is connected to the printer <highlight><bold>1500</bold></highlight> to configure a printing system. This host computer <highlight><bold>3000</bold></highlight> includes a CPU <highlight><bold>1</bold></highlight>, a RAM <highlight><bold>2</bold></highlight>, a ROM <highlight><bold>3</bold></highlight>, a keyboard controller (KBC) <highlight><bold>5</bold></highlight>, a CRT controller (CRTC) <highlight><bold>6</bold></highlight>, a disk controller (DKC) <highlight><bold>7</bold></highlight>, a printer controller (PRTC) <highlight><bold>8</bold></highlight>, a keyboard (KB) <highlight><bold>9</bold></highlight>, a CRT display (CRT) <highlight><bold>10</bold></highlight>, and an external memory <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> First, each component of the host computer <highlight><bold>3000</bold></highlight> will be explained below. The CPU <highlight><bold>1</bold></highlight> is a central processing unit which generally controls individual devices connected to a system bus. On the basis of an application program such as a document processing program stored in a program ROM <highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>(to be described later) of the ROM <highlight><bold>3</bold></highlight> or in the external memory <highlight><bold>11</bold></highlight>, the CPU <highlight><bold>1</bold></highlight> processes a document containing graphics, images, characters, tables (including spreadsheets), and the like. Also, the CPU <highlight><bold>1</bold></highlight> rasterizes an outline font into, e.g., a display information RAM set on the RAM <highlight><bold>2</bold></highlight>, thereby enabling WYSIWYG (What You See Is What You Get: a function capable of printing an image with the size and shape shown on the CRT display screen) on the CRT display <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> Furthermore, on the basis of commands designated by, e.g., a mouse cursor (not shown) on the CRT display <highlight><bold>10</bold></highlight>, the CPU <highlight><bold>1</bold></highlight> opens various registered windows and executes various data processing. When printing data by using the printer <highlight><bold>1500</bold></highlight>, the user can open a window concerning settings of printing and set a printing method, including settings of the printer <highlight><bold>1500</bold></highlight> and selection of a printing mode, with respect to the printer driver. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> The RAM <highlight><bold>2</bold></highlight> functions as a main memory, work area, and the like of the CPU <highlight><bold>1</bold></highlight>. The ROM <highlight><bold>3</bold></highlight> includes a font ROM <highlight><bold>3</bold></highlight><highlight><italic>a</italic></highlight>, the program ROM <highlight><bold>3</bold></highlight><highlight><italic>b</italic></highlight>, and a data ROM <highlight><bold>3</bold></highlight><highlight><italic>c</italic></highlight>. The font ROM <highlight><bold>3</bold></highlight><highlight><italic>a </italic></highlight>or the external memory <highlight><bold>11</bold></highlight> stores, e.g., font data for use in the document processing described above. The program ROM <highlight><bold>3</bold></highlight><highlight><italic>b </italic></highlight>or the external memory <highlight><bold>11</bold></highlight> stores, e.g., an operating system (to be referred to as an OS hereinafter) which is a control program of the CPU <highlight><bold>1</bold></highlight>. The data ROM <highlight><bold>3</bold></highlight><highlight><italic>c </italic></highlight>or the external memory <highlight><bold>11</bold></highlight> stores various data used when the document processing and the like are performed. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> The keyboard controller (KBC) <highlight><bold>5</bold></highlight> controls key inputs from the keyboard <highlight><bold>9</bold></highlight> and a pointing device (not shown). The CRT controller (CRTC) <highlight><bold>6</bold></highlight> controls a display on the CRT display (CRT) <highlight><bold>10</bold></highlight>. The disk controller (DKC) <highlight><bold>7</bold></highlight> controls access to the external memory <highlight><bold>11</bold></highlight>. The printer controller (PRTC) <highlight><bold>8</bold></highlight> is connected to the printer <highlight><bold>1500</bold></highlight> via a bidirectional interface <highlight><bold>21</bold></highlight> and controls communication with the printer <highlight><bold>1500</bold></highlight>. The keyboard <highlight><bold>9</bold></highlight> has various keys. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The CRT display (CRT) <highlight><bold>10</bold></highlight> displays graphics, image characters, tables, and the like. The external memory <highlight><bold>11</bold></highlight> is, e.g., a hard disk (HD) or a floppy disk (FD), and stores a boot program, various applications, font data, user files, edit files, a printer control command generation program (to be referred to as a printer driver hereinafter), and the like. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> The CPU <highlight><bold>1</bold></highlight>, the RAM <highlight><bold>2</bold></highlight>, the ROM <highlight><bold>3</bold></highlight>, the keyboard controller (KBC) <highlight><bold>5</bold></highlight>, the CRT controller (CRTC) <highlight><bold>6</bold></highlight>, the disk controller (DKC) <highlight><bold>7</bold></highlight>, and the printer controller (PRTC) <highlight><bold>8</bold></highlight> described above are arranged on a computer control unit <highlight><bold>2000</bold></highlight>. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> The host computer <highlight><bold>3000</bold></highlight> like this can be implemented by, e.g., a general-purpose personal computer having the interface <highlight><bold>21</bold></highlight> connectable to the printer <highlight><bold>1500</bold></highlight>. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> Next, each component of the printer <highlight><bold>1500</bold></highlight> will be explained in detail below. A CPU <highlight><bold>12</bold></highlight> is a central processing unit for generally controlling individual devices connected to a system bus <highlight><bold>15</bold></highlight>. On the basis a control program stored in a program ROM <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>(to be described later) of a ROM <highlight><bold>13</bold></highlight> or in an external memory <highlight><bold>14</bold></highlight>, the CPU <highlight><bold>12</bold></highlight> outputs an image signal as output information to a printing unit (printer engine) <highlight><bold>17</bold></highlight>. Also, this CPU <highlight><bold>12</bold></highlight> can communicate with the host computer <highlight><bold>3000</bold></highlight> via an input unit <highlight><bold>18</bold></highlight> and notify the host computer <highlight><bold>3000</bold></highlight> of internal information of the printer <highlight><bold>1500</bold></highlight>. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> A RAM <highlight><bold>19</bold></highlight> functions as a main memory, work area, and the like of the CPU <highlight><bold>12</bold></highlight>. The memory capacity of this RAM <highlight><bold>19</bold></highlight> can be extended by an optional RAM (not shown) connected to an expansion port. Note that the RAM <highlight><bold>19</bold></highlight> is used as, e.g., an output information rasterization area, environmental data storage area, and NVRAM. The ROM <highlight><bold>13</bold></highlight> includes a font ROM <highlight><bold>13</bold></highlight><highlight><italic>a</italic></highlight>, the program ROM <highlight><bold>13</bold></highlight>, and a data ROM <highlight><bold>13</bold></highlight><highlight><italic>c</italic></highlight>. The font ROM <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>stores, e.g., font data used when the output information is to be generated. The program ROM <highlight><bold>13</bold></highlight><highlight><italic>b </italic></highlight>stores a control program of the CPU <highlight><bold>12</bold></highlight> and the like. The data ROM <highlight><bold>13</bold></highlight><highlight><italic>c </italic></highlight>stores, e.g., information used on the host computer <highlight><bold>3000</bold></highlight> if the external memory <highlight><bold>711</bold></highlight> such as a hard disk is not connected to the printer <highlight><bold>1500</bold></highlight>. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> The input unit <highlight><bold>18</bold></highlight> exchanges data between the printer <highlight><bold>1500</bold></highlight> and the host computer <highlight><bold>3000</bold></highlight> via the bidirectional interface <highlight><bold>21</bold></highlight>. A printing unit interface (I/F) <highlight><bold>16</bold></highlight> exchanges data between the CPU <highlight><bold>12</bold></highlight> and the printing unit <highlight><bold>17</bold></highlight>. A memory controller (MC) <highlight><bold>20</bold></highlight> controls access to the external memory <highlight><bold>711</bold></highlight>. The printing unit <highlight><bold>17</bold></highlight> performs printing under the control of the CPU <highlight><bold>12</bold></highlight>. The operation unit <highlight><bold>1501</bold></highlight> includes, e.g., switches and a display means (e.g., an LED display) for various operations. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> The external memory <highlight><bold>711</bold></highlight> is a hard disk (HD), an IC card, or the like and connected as an optional device to the printer <highlight><bold>1500</bold></highlight>. This external memory <highlight><bold>711</bold></highlight> stores font data, an emulation program, form data, and the like. Access to the external memory <highlight><bold>711</bold></highlight> is controlled by the memory controller (MC) <highlight><bold>20</bold></highlight>. Note that a plurality of external memories <highlight><bold>711</bold></highlight> can also be included. That is, in addition to a built-in font, a plurality of optional cards and external memories storing programs for interpreting printer control languages different in language system can be connected. Furthermore, an NVRAM (not shown) can be used to store printer mode setting information from the operation unit <highlight><bold>1501</bold></highlight>. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> The CPU <highlight><bold>12</bold></highlight>, the RAM <highlight><bold>19</bold></highlight>, the ROM <highlight><bold>13</bold></highlight>, the input unit <highlight><bold>18</bold></highlight>, the printing unit interface (I/F) <highlight><bold>16</bold></highlight>, and the memory controller (MC) <highlight><bold>20</bold></highlight> described above are arranged on the printer control unit <highlight><bold>1000</bold></highlight>. </paragraph>
<paragraph id="P-0212" lvl="7"><number>&lsqb;0212&rsqb;</number> (Functional Configuration of Printing Control Apparatus) </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> The functional configuration of the host computer <highlight><bold>3000</bold></highlight> as a printing control apparatus of the present invention can be the same as the configuration shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> described above, so a repetitive explanation thereof will be omitted. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> Note that in this embodiment, an application <highlight><bold>201</bold></highlight>, a graphic engine <highlight><bold>202</bold></highlight>, a dispatcher <highlight><bold>301</bold></highlight>, a printer driver <highlight><bold>203</bold></highlight>, a spooler <highlight><bold>302</bold></highlight>, a spool file manager <highlight><bold>304</bold></highlight>, a despooler <highlight><bold>305</bold></highlight>, and a system spooler <highlight><bold>204</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> are program modules present as files saved in the external memory <highlight><bold>11</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and executed as they are loaded into the RAM <highlight><bold>2</bold></highlight> by the OS or by modules which use these program modules. </paragraph>
<paragraph id="P-0215" lvl="0"><number>&lsqb;0215&rsqb;</number> Note also that the application <highlight><bold>201</bold></highlight> and the printer driver <highlight><bold>203</bold></highlight> can be added to an FD or CD-ROM as the external memory <highlight><bold>11</bold></highlight> or to an HD as the external memory <highlight><bold>11</bold></highlight> across a network (not shown). The application <highlight><bold>201</bold></highlight> saved in the external memory <highlight><bold>11</bold></highlight> is executed as it is loaded into the RAM <highlight><bold>2</bold></highlight>. When this application <highlight><bold>201</bold></highlight> is to perform printing with respect to the printer <highlight><bold>1500</bold></highlight>, the application <highlight><bold>201</bold></highlight> outputs (draws) data by using the graphic engine <highlight><bold>202</bold></highlight> which is similarly executable as it is loaded into the RAM <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> The graphic engine <highlight><bold>202</bold></highlight> loads the printer driver <highlight><bold>203</bold></highlight> prepared for each printing apparatus (printer) from the external memory <highlight><bold>11</bold></highlight> into the RAM <highlight><bold>2</bold></highlight>, generates a printing instruction (DDI function) from an output (GDI function) of the application <highlight><bold>201</bold></highlight>, and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>. </paragraph>
<paragraph id="P-0217" lvl="0"><number>&lsqb;0217&rsqb;</number> The dispatcher <highlight><bold>301</bold></highlight> receives the printing instruction from the graphic engine <highlight><bold>202</bold></highlight>. If this printing instruction received from the graphic engine <highlight><bold>202</bold></highlight> is issued from the application <highlight><bold>201</bold></highlight> to the graphic engine <highlight><bold>202</bold></highlight>, the dispatcher <highlight><bold>301</bold></highlight> loads the spooler <highlight><bold>302</bold></highlight> stored in the external memory <highlight><bold>11</bold></highlight> into the RAM <highlight><bold>2</bold></highlight>, and transfers the printing instruction to the spooler <highlight><bold>302</bold></highlight>, not to the printer driver <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> The spooler <highlight><bold>302</bold></highlight> converts the received printing instruction into an intermediate code and outputs this intermediate code to a spool file <highlight><bold>303</bold></highlight>. Also, the spooler <highlight><bold>302</bold></highlight> acquires, from the printer driver <highlight><bold>203</bold></highlight>, process settings concerning printing data set for the printer driver <highlight><bold>203</bold></highlight>, and saves the acquired process settings in the spool file <highlight><bold>303</bold></highlight>. Although this spool file <highlight><bold>303</bold></highlight> is generated as a file on the external memory <highlight><bold>11</bold></highlight>, the spool file <highlight><bold>303</bold></highlight> can also be generated on the RAM <highlight><bold>2</bold></highlight>. In addition, the spooler <highlight><bold>302</bold></highlight> loads the spool file manager <highlight><bold>304</bold></highlight> stored in the external memory <highlight><bold>11</bold></highlight> into the RAM <highlight><bold>2</bold></highlight>, and notifies this spool file manager <highlight><bold>304</bold></highlight> of the generation status of the spool file <highlight><bold>303</bold></highlight>. </paragraph>
<paragraph id="P-0219" lvl="0"><number>&lsqb;0219&rsqb;</number> After that, the spool file manager <highlight><bold>304</bold></highlight> checks whether printing can be performed in accordance with the contents of the process settings concerning the printing data saved in the spool file <highlight><bold>303</bold></highlight>. If determining that printing can be performed by using the graphic engine <highlight><bold>202</bold></highlight>, the spool file manager <highlight><bold>304</bold></highlight> loads the despooler <highlight><bold>305</bold></highlight> stored in the external memory <highlight><bold>11</bold></highlight> into the RAM <highlight><bold>2</bold></highlight>, and instructs the despooler <highlight><bold>305</bold></highlight> to print the intermediate code described in the spool file <highlight><bold>303</bold></highlight>. </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> The despooler <highlight><bold>305</bold></highlight> processes the intermediate code contained in the spool file <highlight><bold>303</bold></highlight> in accordance with the contents of the process settings contained in the spool file <highlight><bold>303</bold></highlight>, and outputs the result to the graphic engine <highlight><bold>202</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> generates a printing instruction (DDI function) from the output (GDI function) of the despooler <highlight><bold>305</bold></highlight>, and outputs this printing instruction to the dispatcher <highlight><bold>301</bold></highlight>. If the printing instruction received from the graphic engine <highlight><bold>202</bold></highlight> is issued from the despooler <highlight><bold>305</bold></highlight> to the graphic engine <highlight><bold>202</bold></highlight>, the dispatcher <highlight><bold>301</bold></highlight> transfers this printing instruction to the printer driver <highlight><bold>203</bold></highlight>, not to the spooler <highlight><bold>302</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a printer control command and outputs the command to the printer <highlight><bold>1500</bold></highlight> via the system spooler <highlight><bold>204</bold></highlight>. </paragraph>
<paragraph id="P-0221" lvl="7"><number>&lsqb;0221&rsqb;</number> (Processing of Printing Data Having Embedded Font) </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> Processing of printing data having an embedded font performed in the host computer <highlight><bold>3000</bold></highlight> of this embodiment will be described below with reference to a sequence chart in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. Similar to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, this processing cannot be done by a single process. To control a plurality of jobs, queue processing between an application process and a despooler process must be realized. In practice, communication between these two processes is performed via the spool file manager <highlight><bold>304</bold></highlight>. To simplify the explanation, however, the spool file manager <highlight><bold>304</bold></highlight> including the queue processing is regarded as one communication medium and omitted from <cross-reference target="DRAWINGS">FIG. 15</cross-reference> and from the following explanation. </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> Step A<highlight><bold>1</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that a print job is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDT function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0224" lvl="0"><number>&lsqb;0224&rsqb;</number> Step S<highlight><bold>1</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a job file which holds information, such as a paper size, concerning the job, and activates the despooler <highlight><bold>305</bold></highlight> as another process. </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> Step D<highlight><bold>1</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> reads the job file and calls a GDI function for starting the print job (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> Step Drv<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job start control. </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> Step A<highlight><bold>2</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is to be started (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> Step S<highlight><bold>2</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> generates, in the spool file <highlight><bold>303</bold></highlight>, a page file which holds information concerning a page. </paragraph>
<paragraph id="P-0229" lvl="0"><number>&lsqb;0229&rsqb;</number> Step A<highlight><bold>3</bold></highlight>. The application <highlight><bold>201</bold></highlight> registers an embedded font in application data into the graphic engine <highlight><bold>202</bold></highlight>. This registration makes it possible to use information of the font essential to character drawing even in this environment. </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> holds the font information. </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> Step A<highlight><bold>4</bold></highlight>. The application <highlight><bold>201</bold></highlight> performs character drawing by using a font including the font registered in step A<highlight><bold>3</bold></highlight> (the graphic engine <highlight><bold>202</bold></highlight> converts a GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> Step S<highlight><bold>3</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> writes information representing character drawing as an intermediate code into the page file of the spool file. This intermediate code contains only &ldquo;character code, font attributes, and drawing attributes&rdquo; obtainable from the DDI function, and does not contain any font. If the font is an embedded font, the following processing is performed to eliminate the difference between drawn characters resulting from font replacement. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> Step S<highlight><bold>3</bold></highlight>.<highlight><bold>3</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> checks the graphic engine <highlight><bold>202</bold></highlight> for the font attributes used in character drawing and, if font acquisition is permitted, calls a GDI function and requests the graphic engine <highlight><bold>202</bold></highlight> to acquire a font. </paragraph>
<paragraph id="P-0234" lvl="0"><number>&lsqb;0234&rsqb;</number> By thus calling a GDI function from the spooler <highlight><bold>302</bold></highlight>, font information which cannot be directly acquired from a DDI function can be acquired and spooled. </paragraph>
<paragraph id="P-0235" lvl="0"><number>&lsqb;0235&rsqb;</number> Step G<highlight><bold>4</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> transfers the font to the spooler <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> Step S<highlight><bold>3</bold></highlight>.<highlight><bold>4</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> spools, in an intermediate code format, the font acquired from the graphic engine <highlight><bold>202</bold></highlight> into the spool file <highlight><bold>303</bold></highlight>. </paragraph>
<paragraph id="P-0237" lvl="0"><number>&lsqb;0237&rsqb;</number> Step A<highlight><bold>5</bold></highlight>. The application <highlight><bold>201</bold></highlight> deletes the font registered in step A<highlight><bold>3</bold></highlight> from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> Step G<highlight><bold>3</bold></highlight>. The embedded font held by the graphic engine <highlight><bold>202</bold></highlight> is discarded. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> Step A<highlight><bold>6</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Step S<highlight><bold>4</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the page file and requests the despooler <highlight><bold>305</bold></highlight> to reproduce the page. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> Step A<highlight><bold>7</bold></highlight>. The application <highlight><bold>201</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the spooler <highlight><bold>302</bold></highlight>). </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> Step S<highlight><bold>5</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> closes the job file and notifies the despooler <highlight><bold>305</bold></highlight> that no more pages are present. </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> Step D<highlight><bold>2</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> calls a GDI function for page start in order to reproduce the intermediate code described in the page file generated in step S<highlight><bold>2</bold></highlight>. (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> Step Drv<highlight><bold>2</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for page start control. </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> Step D<highlight><bold>3</bold></highlight>. If an embedded font is contained in the spool file <highlight><bold>303</bold></highlight>, the despooler <highlight><bold>305</bold></highlight> changes the identification name (face name) of the embedded font and registers the name in the graphic engine <highlight><bold>202</bold></highlight>. The face name is changed before registration to avoid double registration of this font and the font of the application <highlight><bold>201</bold></highlight> in step A<highlight><bold>3</bold></highlight>. By this registration, a font essential to character drawing can be used even in this environment. In this case, the face name of the font attributes, corresponding the face name, of the intermediate code stored in the spool file is also changed accordingly. </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> If the face name is changed in accordance with a predetermined rule, a glyph can be acquired by changing the face name in glyph acquisition in step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> Step G<highlight><bold>1</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> holds the font information. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> Step D<highlight><bold>4</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> calls a GDI function to reproduce character drawing on the page file (the graphic engine <highlight><bold>202</bold></highlight> converts this GDI function called upon drawing into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0249" lvl="0"><number>&lsqb;0249&rsqb;</number> To call a GDI function, the name changed in step D<highlight><bold>3</bold></highlight> is used as the font attribute face name as the identification name of the font. This is realized by temporarily storing, in the RAM <highlight><bold>2</bold></highlight> or the like, the face name changed in step D<highlight><bold>3</bold></highlight> and the face name before the change and, if the face name before the change is found in face names contained in the intermediate data, converting this face name into the changed face name. However, some other method can also be used. </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> converts information representing character drawing in the spool file into a PDL command by the following processing. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> acquires a character glyph from the graphic engine <highlight><bold>202</bold></highlight>. That is, the printer driver <highlight><bold>203</bold></highlight> transfers to the graphic engine <highlight><bold>202</bold></highlight> the font attributes (containing the face name) contained in the information representing character drawing. </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> Step G<highlight><bold>2</bold></highlight>. The graphic engine <highlight><bold>202</bold></highlight> generates a character glyph from the font and transfers the generated glyph to the printer driver <highlight><bold>203</bold></highlight> via the dispatcher <highlight><bold>301</bold></highlight>. That is, the graphic engine <highlight><bold>202</bold></highlight> searches for a font having the face name designated in the font attributes contained in the information representing character drawing. Since the font is embedded in the process in step D<highlight><bold>3</bold></highlight>, the font can be transferred to the driver. The printer driver <highlight><bold>203</bold></highlight> acquires the generated character glyph and forms a character drawing command (PDL) for printing the acquired character glyph (character image data). </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> Step D<highlight><bold>5</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> deletes the font registered in step D<highlight><bold>3</bold></highlight> from the graphic engine <highlight><bold>202</bold></highlight>. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> Step G<highlight><bold>3</bold></highlight>. The embedded font held by the graphic engine <highlight><bold>202</bold></highlight> is discarded. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> Step D<highlight><bold>6</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the page printing is completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> Step Drv<highlight><bold>4</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL code for page end control. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> Step D<highlight><bold>7</bold></highlight>. The despooler <highlight><bold>305</bold></highlight> notifies the graphic engine <highlight><bold>202</bold></highlight> via a GDI function that the print job is to be completed (the graphic engine <highlight><bold>202</bold></highlight> converts the notified GDI function into a DDI function and outputs this DDI function to the dispatcher <highlight><bold>301</bold></highlight>, and the dispatcher <highlight><bold>301</bold></highlight> transfers the contents to the printer driver <highlight><bold>203</bold></highlight>). </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> Step Drv<highlight><bold>5</bold></highlight>. The printer driver <highlight><bold>203</bold></highlight> generates a PDL command for job end control. </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> In the printing control apparatus according to this embodiment as described above, when spooling is to be performed, font information which cannot be directly acquired from a DDI function is acquired and spooled by calling a GDI function. In despooling, the spooled font information is registered after the face name as the identification name of a font is changed. By calling a GDI function from the despooler by using the changed face name, printing data containing an embedded font can be correctly output. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> Note that the font registered by the despooler has the problem of copyright and hence is always deleted from the printing control apparatus after being used. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> In a Japanese font in which vertical writing information and lateral writing information are integrated, information indicating vertical writing is sometimes added to the face name. In this case, this information indicating vertical writing must be remained in the changed face name used in registration by the despooler. The changed face name can be formed by any method. However, it is desirable to use a method which is simple and in which the changed font name is less likely to duplicate a font name before change or a font name originally present in a printing environment. For example, a character of a predetermined number in the face name is replaced with a character which is not usually used in a font name. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> Furthermore, some fonts do not permit acquisition of font information of an embedded font. When this is the case, it is possible to detect the font attributes during spooling and perform conversion to conventional font replacement or bitmap drawing as explained in <cross-reference target="DRAWINGS">FIGS. 11 and 13</cross-reference>. </paragraph>
<paragraph id="P-0263" lvl="7"><number>&lsqb;0263&rsqb;</number> (Second Embodiment) </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> Processing of printing data when a glyph index table must be used in a host computer <highlight><bold>3000</bold></highlight> described above will be explained below with reference to a sequence chart shown in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. Similar to the processing in the first embodiment, this processing cannot be done by a single process. To control a plurality of jobs, queue processing between an application process and a despooler process must be realized. In practice, communication between these two processes is performed via a spool file manager <highlight><bold>304</bold></highlight>. To simplify the explanation, however, the spool file manager <highlight><bold>304</bold></highlight> including the queue processing is regarded as one communication medium and omitted from <cross-reference target="DRAWINGS">FIG. 16</cross-reference> and from the following explanation. </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> Also, the same reference numerals as in <cross-reference target="DRAWINGS">FIG. 15</cross-reference> denote the same processes in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, and a repetitive explanation thereof will be omitted. </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> In the following embodiment, assume that an OS running on the host computer <highlight><bold>3000</bold></highlight> as a printing control apparatus supports only ShiftJIS, and that a glyph index table of a font registered in the OS contains a character code system (in this embodiment, Unicode) other than ShiftJIS. </paragraph>
<paragraph id="P-0267" lvl="0"><number>&lsqb;0267&rsqb;</number> Steps A<highlight><bold>1</bold></highlight> to S<highlight><bold>2</bold></highlight> are the same as explained in the first embodiment with reference to <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> Step A<highlight><bold>3</bold></highlight>&prime;. An application <highlight><bold>201</bold></highlight> uses, e.g., Unicode to request character drawing which cannot be expressed by, e.g., ShiftJIS (i.e., no corresponding characters of which are defined in ShiftJIS) (the application <highlight><bold>201</bold></highlight> calls a GDI function). </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> Step G<highlight><bold>1</bold></highlight>&prime;. From the called GDI function, a graphic engine <highlight><bold>202</bold></highlight> detects that the used character code is Unicode. Since Unicode cannot be used in the OS, the graphic engine <highlight><bold>202</bold></highlight> looks up a glyph index table corresponding to the character font designated by Unicode, and transfers, to a printer driver <highlight><bold>203</bold></highlight>, a glyph index corresponding to the designated character code (Unicode) as a character code of character drawing in the form of a DDI function. The graphic engine <highlight><bold>202</bold></highlight> indicates that the DDI function contains the glyph index, rather than a character code. </paragraph>
<paragraph id="P-0270" lvl="0"><number>&lsqb;0270&rsqb;</number> Step S<highlight><bold>3</bold></highlight>&prime;. A spooler <highlight><bold>302</bold></highlight> performs spooling in an intermediate code format by using a character code, rather than the glyph index (information obtainable from a DDI function are only &ldquo;glyph index, font attributes, and drawing attributes&rdquo;, and no actual font (glyph) is contained) transferred by the DDI function from the graphic engine <highlight><bold>202</bold></highlight>. To convert the glyph index acquired from the DDI function into a character code, the spooler <highlight><bold>302</bold></highlight> executes step S<highlight><bold>3</bold></highlight>.<highlight><bold>4</bold></highlight>&prime; below. </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> Step S<highlight><bold>3</bold></highlight>.<highlight><bold>4</bold></highlight>&prime;. The spooler <highlight><bold>302</bold></highlight> uses font attributes of the information received by the DDI function to request the graphic engine <highlight><bold>202</bold></highlight> to acquire information of the glyph index table. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> Step G<highlight><bold>4</bold></highlight>&prime;. The graphic engine <highlight><bold>202</bold></highlight> acquires the glyph index table corresponding to the font attributes received from the spooler <highlight><bold>302</bold></highlight>, and transfers the table to the spooler <highlight><bold>302</bold></highlight>. The spooler <highlight><bold>302</bold></highlight> uses the acquired glyph index table to obtain a character code (in this case Unicode, but it can also be another code system) corresponding to the glyph index, and spools the character drawing information in an intermediate data format by using the character code (Unicode). </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> Steps A<highlight><bold>6</bold></highlight> to Drv<highlight><bold>2</bold></highlight> are the same as in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> Step D<highlight><bold>3</bold></highlight>&prime;. A despooler <highlight><bold>305</bold></highlight> calls a GDI function to reproduce character drawing described in the intermediate code spooled by the spooler <highlight><bold>302</bold></highlight>. The character code of this intermediate code is font-independent Unicode converted in step S<highlight><bold>3</bold></highlight>.<highlight><bold>4</bold></highlight>&prime;. </paragraph>
<paragraph id="P-0275" lvl="0"><number>&lsqb;0275&rsqb;</number> Step G<highlight><bold>1</bold></highlight>&prime;. From the called GDI function, the graphic engine <highlight><bold>202</bold></highlight> detects that the character code used is Unicode. Since Unicode cannot be used in the OS, the graphic engine <highlight><bold>202</bold></highlight> looks up a glyph index table corresponding to the character font designated by Unicode, and transfers, to the printer driver <highlight><bold>203</bold></highlight>, a glyph index corresponding to the designated character code (Unicode) as a character code of character drawing in the form of a DDI function. The graphic engine <highlight><bold>202</bold></highlight> indicates that the DDI function contains the glyph index, rather than a character code. </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>&prime;. To generate a character drawing command, the printer driver <highlight><bold>203</bold></highlight> acquires a character glyph by the following processing by using the glyph index as a character code. </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> Step Drv<highlight><bold>3</bold></highlight>.<highlight><bold>1</bold></highlight>&prime;. The printer driver <highlight><bold>203</bold></highlight> acquires a character glyph from the graphic engine <highlight><bold>202</bold></highlight> by using the glyph index. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> Step G<highlight><bold>3</bold></highlight>&prime;. The graphic engine <highlight><bold>202</bold></highlight> searches for a font having the face name designated by the font attributes. If a font having the designated face name exists, a glyph can be acquired by the font-dependent glyph index. However, if this font of interest is an embedded font, the application has already discarded the font registered in the system (OS). If the designated font is not present on the graphic engine <highlight><bold>202</bold></highlight>, the graphic engine <highlight><bold>202</bold></highlight> performs font replacement to form a glyph by using a font of a type close to the designated font or by using a predetermined replacement font. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> When this is the case, the printer driver <highlight><bold>203</bold></highlight> acquires a glyph by using a font-independent code (in this embodiment, Unicode). Therefore, even when the designated font is unusable, only the type of font changes, so the character is not garbled and is always output. Consequently, a glyph of the character intended by the user can be acquired. </paragraph>
<paragraph id="P-0280" lvl="0"><number>&lsqb;0280&rsqb;</number> After that, processes in steps D<highlight><bold>6</bold></highlight> to Drv<highlight><bold>5</bold></highlight> are performed in the same manner as in the first embodiment to complete the whole processing. </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> In the second embodiment as described above, when spooling is to be performed, information of a font which cannot be directly obtained from a DDI function is obtained by calling a GDI function. A glyph index table is acquired from this font, and a glyph index transferred from a DDI function is converted into a character code and spooled. Accordingly, an intermediate code of character drawing reproduced by the despooler <highlight><bold>305</bold></highlight> is no longer font-dependent, so no character deformation occurs even when the designated font is replaced with another font. Also, the processing is performed using a general character code, and this facilitates processing in the despooler <highlight><bold>305</bold></highlight> such as replacement to a built-in font of a printer. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> Some fonts define two or more glyph indices for the same character code by modification applied to character drawing, e.g., Japanese vertical writing or the formation of a single character by narrowing of the spacing between two characters. If a glyph index transferred in relation to such a font is inversely converted into a character code and spooled, information of character modification may be lost. Therefore, when a glyph index is converted into a character code by using a glyph index table in step S<highlight><bold>3</bold></highlight>.<highlight><bold>4</bold></highlight>, whether there is such a problem is checked. If it is desirable not to inversely convert into a character code, a glyph index is not converted into a character code, and bitmap conversion of character drawing as explained in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is performed. This can minimize a difference from the output intended by the user. </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> Also, glyph index tables of some fonts do not support a character code supported by a built-in font of a printer. If this is the case, a command is generated as a character glyph without any replacement to the built-in font of the printer. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> In this embodiment, the spooler converts a glyph index into Unicode which is the same character code as designated by the application. However, a glyph index need not be converted into a character code of the same system as designated. That is, a glyph index can be spooled as it is converted into a character code of an arbitrary system contained in a glyph index table. </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> When a glyph index is to be converted into a character code by using a glyph index table, however, this glyph index is preferably converted into a character code of a code system which supports as many types of characters as possible. </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> The present invention can be applied to a system constituted by a plurality of devices (e.g., a host computer, interface, reader, and printer) or to an apparatus (e.g., a copying machine, printer, or facsimile apparatus) comprising a single device. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> Further, the object of the present invention can also be achieved when a computer (or a CPU or MPU) of a system or apparatus reads out and executes program codes, stored in a storage medium, of software for implementing the functions of the above embodiments. </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> In this case, the program codes read out from the storage medium implement the functions of the present invention, and the storage medium storing these program codes constitutes the invention. </paragraph>
<paragraph id="P-0289" lvl="0"><number>&lsqb;0289&rsqb;</number> As this storage medium for supplying the program codes, it is possible to use, e.g., a floppy disk, hard disk, optical disk, magnetooptical disk, CD-ROM, CD-R, magnetic tape, nonvolatile memory card, and ROM. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> Furthermore, besides the functions of the above embodiments are implemented by executing the readout program codes by the computer, the present invention includes a case where an OS (Operating System) or the like running on the computer performs part or the whole of actual processing in accordance with designations by the program codes and thereby implements the functions of the above embodiments. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> Furthermore, the present invention also includes a case where the program codes read out from the storage medium are written in a memory of a function extension card inserted into the computer or of a function extension unit connected to the computer, and, in accordance with designations by the program codes, a CPU or the like of the function extension card or function extension unit performs part or the whole of actual processing and thereby implements the functions of the above embodiments. </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> When the present invention is applied to the storage medium, this storage medium stores at least program codes corresponding to the sequence charts (shown in <cross-reference target="DRAWINGS">FIGS. 15 and 16</cross-reference>) explained previously. </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> Furthermore, the present invention can be applied to the system comprising either a plurality of units or a single unit. It is needless to say that the present invention can be applied to the case which can be attained by supplying programs which execute the process defined by the present system or invention. </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof, it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A printing control apparatus for converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: 
<claim-text>intermediate data generating means for converting the printing instruction into intermediate data having a format different from the control command, and storing the intermediate data; and </claim-text>
<claim-text>control command generating means for converting the intermediate data into the control command and outputting the control command, </claim-text>
<claim-text>wherein said intermediate data generating means comprises: 
<claim-text>font determining means for determining whether en embedded font is contained in the printing instruction; and </claim-text>
<claim-text>storage means for, when it is determined that the embedded font is contained, acquiring the embedded font and storing the embedded font together with the intermediate data, and </claim-text>
<claim-text>said control command generating means converts the intermediate data into the control command by using the embedded font stored together with the intermediate data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said control command generating means uses the stored embedded font as a font having a font name different from a font name used when said storage means stores the embedded font. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if said font storage means fails to acquire the embedded font, said intermediate data generating means generates the intermediate data by performing bitmap replacement for the embedded font. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein if said font storage means fails to acquire the embedded font, said control command generating means generates the control command by replacing the embedded font with another font. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A printing control method of converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: 
<claim-text>the intermediate data generation step of converting the printing instruction into intermediate data having a format different from the control command, and storing the intermediate data; and </claim-text>
<claim-text>the control command generation step of converting the intermediate data into the control command and outputting the control command, </claim-text>
<claim-text>wherein the intermediate data generation step comprises: 
<claim-text>the font determination step of determining whether an embedded font is contained in the printing instruction; and </claim-text>
<claim-text>the storage step of, when it is determined that the embedded font is contained, acquiring the embedded font and storing the embedded font together with the intermediate data, and </claim-text>
<claim-text>in the control command generation step, the intermediate data is converted into the control command by using the embedded font stored together with the intermediate data. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein in the control command generation step, the stored embedded font is used as a font having a font name different from a font name used when embedded font is stored in the storage step. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein if the embedded font cannot be acquired in the font storage step, the intermediate data is generated in the intermediate data generation step by performing bitmap replacement for the embedded font. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein if the embedded font cannot be acquired in the font storage step, the control command is generated in the control command generation step by replacing the embedded font with another font. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A computer program for allowing a computer to function as a printing control apparatus according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer-readable storage medium storing a computer program according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A printing control apparatus comprising: 
<claim-text>spooler which, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requests acquisition of the font, and stores the acquired font as intermediate data into a spool file; </claim-text>
<claim-text>a despooler which registers the font embedded in the spool file; and </claim-text>
<claim-text>a driver which acquires a character glyph on the basis of the font registered by said despooler, and converts information representing the character drawing into a PDL. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein said despooler changes a face name when registering the font. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A printing control method comprising: 
<claim-text>the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; </claim-text>
<claim-text>the registration step of registering the font embedded in the spool file; and </claim-text>
<claim-text>the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein in the registration step, a face name is changed when registering the font. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A computer program comprising: 
<claim-text>a program of the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; </claim-text>
<claim-text>a program of the registration step of registering the font embedded in the spool file; and </claim-text>
<claim-text>a program of the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The program according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the program of the registration step changes a face name when registering the font. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer-readable storage medium storing: 
<claim-text>a program of the storage step of, if a font is an embedded font when information representing character drawing is to be written as an intermediate code, requesting acquisition of the font, and storing the acquired font as intermediate data into a spool file; </claim-text>
<claim-text>a program of the registration step of registering the font embedded in the spool file; and </claim-text>
<claim-text>a program of the conversion step of acquiring a character glyph on the basis of the registered font, and converting information representing the character drawing into a PDL. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The medium according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the program of the registration step changes a face name when registering the font. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A printing control apparatus for converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: 
<claim-text>data converting means for converting the printing instruction into a first data format containing a character code or glyph index; </claim-text>
<claim-text>intermediate data generating means for converting the printing instruction having a first data format into intermediate data having a format different from the control command, and storing the intermediate data; and </claim-text>
<claim-text>control command generating means for converting the intermediate data into the control command and outputting the control command, </claim-text>
<claim-text>wherein said intermediate data generating means comprises character code acquiring means for, if the printing instruction having the first data format contains the glyph index, acquiring a character code corresponding to the glyph index, and </claim-text>
<claim-text>generates the intermediate code by using the character code contained in the printing instruction having the first data format, or the character code acquired by said character code acquiring means. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said data converting means converts the printing instruction into a printing instruction which has the first data format and contains the glyph index, if the character code designated by the printing instruction is a character code of a system which cannot be processed as a character code by said printing control apparatus, or converts the printing instruction into a printing instruction which has the first data format and contains the character code, if the character code designated by the printing instruction is some other character code. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein said data converting means converts a character code contained in the printing instruction into a corresponding glyph index by using a glyph index table in which character codes of a plurality of different systems are related to one glyph index. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said character code acquiring means acquires a character code corresponding to the glyph index contained in the printing instruction having the first data format by using the glyph index table. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein if a plurality of character codes correspond to the glyph index when said character code acquiring means acquires a character code corresponding to the glyph index, said intermediate data generating means stores the result of bitmap conversion from the glyph index as the intermediate data. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A printing control method of converting a printing instruction from an application into a control command suited to a predetermined printing apparatus, and outputting the control command, comprising: 
<claim-text>the data conversion step of converting the printing instruction into a first data format containing a character code or glyph index; </claim-text>
<claim-text>the intermediate data generation step of converting the printing instruction having a first data format into intermediate data having a format different from the control command, and storing the intermediate data; and </claim-text>
<claim-text>the control command generation step of converting the intermediate data into the control command and outputting the control command, </claim-text>
<claim-text>wherein the intermediate data generation step comprises the character code acquisition step of, if the printing instruction having the first data format contains the glyph index, acquiring a character code corresponding to the glyph index, and </claim-text>
<claim-text>the intermediate code is generated by using the character code contained in the printing instruction having the first data format, or the character code acquired in the character code acquisition step. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein in the data conversion step, the printing instruction into a printing instruction which has the first data format and contains the glyph index, if the character code designated by the printing instruction is a character code of a system which cannot be processed as a character code by the printing control method, or the printing instruction into a printing instruction which has the first data format and contains the character code, if the character code designated by the printing instruction is some other character code. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein in the data conversion step, a character code contained in the printing instruction is converted into a corresponding glyph index by using a glyph index table in which character codes of a plurality of different systems are related to one glyph index. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein in the character code acquisition step, a character code corresponding to the glyph index contained in the printing instruction having the first data format is acquired by using the glyph index table. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein if a plurality of character codes correspond to the glyph index when a character code corresponding to the glyph index is acquired in the character code acquisition step, the result of bitmap conversion from the glyph index is stored as the intermediate data in the intermediate data generation step. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A computer program for allowing a computer to function as a printing control apparatus according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A computer-readable storage medium storing a computer program according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A printing control apparatus comprising: 
<claim-text>a spooler which acquires a glyph index, converts the acquired glyph index into a character code, and spools character drawing information by an intermediate data format by using the converted character code; and </claim-text>
<claim-text>a driver which acquires a glyph index corresponding to the character code contained in a character drawing instruction spooled by said spooler, and acquires a character glyph by using the acquired glyph index. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A printing control method comprising the steps of: 
<claim-text>acquiring a glyph index; </claim-text>
<claim-text>converting the acquired glyph index into a character code; </claim-text>
<claim-text>spooling character drawing information by an intermediate data format by using the converted character code; </claim-text>
<claim-text>acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and </claim-text>
<claim-text>acquiring a character glyph by using the acquired glyph index. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A computer program comprising programs of the steps of: 
<claim-text>acquiring a glyph index; </claim-text>
<claim-text>converting the acquired glyph index into a character code; </claim-text>
<claim-text>spooling character drawing information by an intermediate data format by using the converted character code; </claim-text>
<claim-text>acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and </claim-text>
<claim-text>acquiring a character glyph by using the acquired glyph index. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A computer-readable storage medium storing programs of the steps of: 
<claim-text>acquiring a glyph index; </claim-text>
<claim-text>converting the acquired glyph index into a character code; </claim-text>
<claim-text>spooling character drawing information by an intermediate data format by using the converted character code; </claim-text>
<claim-text>acquiring a glyph index corresponding to the character code contained in a spooled character drawing instruction; and </claim-text>
<claim-text>acquiring a character glyph by using the acquired glyph index.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>7</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002063A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002063A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002063A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002063A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002063A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002063A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002063A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002063A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002063A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030002063A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030002063A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030002063A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030002063A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030002063A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030002063A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030002063A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030002063A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
