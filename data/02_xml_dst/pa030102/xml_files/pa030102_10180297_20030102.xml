<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005393A1-20030102-D00000.TIF SYSTEM "US20030005393A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00001.TIF SYSTEM "US20030005393A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00002.TIF SYSTEM "US20030005393A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00003.TIF SYSTEM "US20030005393A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00004.TIF SYSTEM "US20030005393A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00005.TIF SYSTEM "US20030005393A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00006.TIF SYSTEM "US20030005393A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00007.TIF SYSTEM "US20030005393A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00008.TIF SYSTEM "US20030005393A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00009.TIF SYSTEM "US20030005393A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00010.TIF SYSTEM "US20030005393A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00011.TIF SYSTEM "US20030005393A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00012.TIF SYSTEM "US20030005393A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00013.TIF SYSTEM "US20030005393A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00014.TIF SYSTEM "US20030005393A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00015.TIF SYSTEM "US20030005393A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00016.TIF SYSTEM "US20030005393A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00017.TIF SYSTEM "US20030005393A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00018.TIF SYSTEM "US20030005393A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00019.TIF SYSTEM "US20030005393A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00020.TIF SYSTEM "US20030005393A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00021.TIF SYSTEM "US20030005393A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00022.TIF SYSTEM "US20030005393A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00023.TIF SYSTEM "US20030005393A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030005393A1-20030102-D00024.TIF SYSTEM "US20030005393A1-20030102-D00024.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005393</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10180297</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020627</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-200446</doc-number>
</priority-application-number>
<filing-date>20010702</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>716</class>
<subclass>003000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>716</class>
<subclass>018000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method for converting a logic circuit model</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Isao</given-name>
<family-name>Kawamoto</family-name>
</name>
<residence>
<residence-non-us>
<city>Hyogo</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>MATSUSHITA ELECTRIC INDUSTRIAL CO., LTD.</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>Jack Q. Lever, Jr.</name-1>
<name-2>McDERMOTT, WILL &amp; EMERY</name-2>
<address>
<address-1>600 Thirteenth Street, N.W.</address-1>
<city>Washington</city>
<state>DC</state>
<postalcode>20005-3096</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The states of a logic circuit block are set as operation start states and operation end states. An instruction to be analyzed is selected from input/output instruction information. An input signal corresponding to the selected instruction is applied to an RT (Register Transfer)-level model that is in the operation start state. Then, the input signal value applied to the RT-level model is changed. In order to extract operation of the logic circuit block, the RT-level model is analyzed until it reaches the operation end state. An operation model of the logic circuit block is produced based on the extracted operations. In this way, the model of the logic circuit block specifically described at RT level can be converted into a high abstraction-level model including no concept of time. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a method for converting a logic circuit model specifically described at RT (Register Transfer) level into a high abstraction-level operation model including no concept of time. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> In the conventional logic circuit design, an RT-level model based on logic synthesis is produced using a hardware description language (HDL) such as Verilog-HDL, and logic circuit blocks are designed and verified with such an RT-level model. However, simulation using the RT-level model is time-consuming because it is specifically described based on the clock and the like. It is therefore difficult to simulate a large-scale system. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> For example, the following methods are conventionally disclosed for improved simulation speed: a method for eliminating a part of a logic circuit by partially fixing the inputs and registers according to the verification purposes (Japanese Laid-Open Publication No. 2001-22808); a method for integrating operations of a plurality of clocks that are not susceptible to an input/output signal into operation of one clock in a hardware model used in hardware-software cooperated simulation for connecting an instruction level simulator and a logic circuit simulator (Japanese Laid-Open Publication No. 10-187789); and a method for removing a clock signal from a logic circuit model in which the start and end of operations are defined (Japanese Laid-Open Publication No. 11-96196). </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> As a method for designing a system having logic circuits is disclosed a method for verifying the overall operation specification of the system based on a higher abstraction-level model and then refining the model in a stepwise manner (U.S. Pat. No. 5,870,588). High abstraction-level models used in such a design method are described in C language or the like and do not include the concept of time. Connection between such models is not implemented with a signal but with an instruction applied from block to bock of a logic circuit. In the simulation using such models, operations of the blocks are executed serially, not in parallel. Accordingly, if one block gives an instruction to another, the operation of the former block will not proceed until the operation of the latter is completed. The use of such high abstraction-level models thus enables the simulation without complicated scheduling based on the parallel operation. This improves the simulation speed and also enables the model to be produced in the early stages before a detailed specification at RL level is determined. As a result, in the early stages of design, the overall operation specification of the system can be verified and the system architecture can be reviewed by using statistical data such as the number of times each block is called. Accordingly, the system can be efficiently designed. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> At the time of reusing the design resources, the models specifically described at RT-level may be present, but high abstraction-level models for use in verification of the operation specification may no longer be present. Accordingly, in order to reuse a block, a high abstraction-level model must be developed based on the specification or a specifically described model. Development and verification of such a model takes a great deal of time. Moreover, since both the specifically described model and the high abstraction-model model must be developed, mismatch of operation may possibly occur. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Of the aforementioned conventional methods for improved simulation speed, the method for partially fixing the inputs and registers would not produce a model having a sufficiently high abstraction model. Moreover, the method using only an instruction simulator for connection between blocks and the method in which the start and end of operations are defined are applicable only to the limited types of models. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> It is an object of the present invention to provide a versatile method for converting a model of a logic circuit block specifically described at RT level into a high abstraction-level model for use in simulation for processing each block serially. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> More specifically, according to one aspect of the present invention, a method for converting an RT-level model of a logic circuit block into a high abstraction-level operation model includes the steps of: setting one or more states of the logic circuit block as operation start states and operation end states by using input/output instruction information that represents a relation between an input/output instruction of the logic circuit block and an input/output signal corresponding to the input/output instruction; and analyzing operation of the logic circuit block. The operation analyzing step is conducted by selecting one input instruction to be analyzed from those included in the input/output instruction information, applying an input signal corresponding to the selected input instruction to the RT-level model that is in a first state selected from the operation start states, and analyzing the RT-level model and extracting an operation of the logic circuit block by varying the input signal, until the RT-level model reaches a second state of the operation end states. The operation analyzing step is repeatedly conducted for at least one or all combinations of the operation start state and the input instruction included in the input/output instruction information, and the operation model of the logic circuit block is produced based on the extracted operations. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> According to the present invention, state transition of the logic circuit block according to a change in input signal caused by an input instruction, and an output instruction corresponding to a change in output signal are extracted based on the input/output instruction information that represents the relation between an input/output signal of the logic circuit block and a high abstraction-level input/output instruction. Based on the extracted result, the RT-level model can be converted into an operation model having no concept of time. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Preferably, the operation analyzing step includes the steps of producing a time series of one or more input signals corresponding to the instruction to be analyzed, producing a time series of an output signal by executing the RT-level model using the time series of the input signals until the RT-level model reaches the second state, extracting a state where the RT-level model reaches the second state as an operation of the logic circuit block, and comparing the time series of the output signal with the relation between an output instruction and an output signal corresponding thereto as defined in the input/output instruction information, and extracting the output instruction from those included in the input/output instruction information as an operation of the logic circuit block. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Preferably, the operation analyzing step includes the steps of producing at every clock one or more input signals corresponding to an input instruction included in the instruction to be analyzed, executing the RT-level model at every clock using the input signals, and producing an output signal at every clock, extracting at every clock a state where the RT-level model reaches the second state as an operation of the logic circuit block, and comparing the output signal with the relation between an output instruction and an output signal corresponding thereto as defined in the input/output instruction information, and extracting at every clock the output instruction from those included in the input/output instruction information as an operation of the logic circuit block. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Preferably, the input/output instruction information includes as an output instruction an output instruction with a response signal. The output instruction with the response signal is an instruction having both an output signal and an input signal associated therewith as a response signal thereof. In the operation analyzing step, when the output instruction with the response signal is extracted at one clock, operation of the RT-level model at a clock later than the one clock is analyzed by using the response signal produced by varying a value of the response signal corresponding to the output instruction with the response signal at a timing designated by the input/output instruction information. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Preferably, the input/output instruction information includes as an input instruction an input instruction with a response signal. The input instruction with the response signal is an instruction having both an input signal and an output signal associated therewith as a response signal thereof. In the operation analyzing step, when the input instruction with the response signal is selected at one clock as the instruction to be analyzed, operation of the RT-level model at a clock later than the one clock is analyzed by using the response signal produced based on a value of the response signal corresponding to the input instruction with the response signal, which varies at a timing designated by the input/output instruction information. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Preferably, the input/output instruction information includes as an output instruction an output instruction with a return value. The output instruction with the return value is an instruction having an input signal associated therewith as a return value. In the operation analyzing step, when operation of the RT-level model varies according to a value of the input signal serving as the return value of the output instruction, operation of the RT-level model is analyzed for every possible combination of values of the return value. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Preferably, the input/output instruction information includes as an input instruction an input instruction with a return value. The input instruction with the return value is an instruction having an output signal associated therewith as a return value. In the operation analyzing step, a value of the output signal at a clock designated by the input/output instruction information is extracted as the return value of the input instruction, and operation of the RT-level model is analyzed based on the extracted value. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Preferably, in the state setting step, a state where a state of the logic circuit block does not change in the absence of an input instruction or a state where a finite number of states of the logic circuit block are repeated in the absence of an input instruction are set as the operation start states and the operation end states. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Preferably, of state variables specifying a state of the logic circuit block, any state variable that affects an output signal used to recognize an output instruction included in the input/output instruction information is selected as a control variable, and one or more states specified by the selected control variable are set as the operation start states and the operation end states in the state setting step. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Preferably, of the one or more states designated by the control variable, states where all or at least one of the control variables have the same value are regarded as a single state when the operation start states and the operation end states are set in the state setting step. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Preferably, in the state setting step, any state variable that contributes to updating of the control variable in one-clock operation of the RT-level model is also selected as the control variable.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically illustrates a method for converting a logic circuit model according to first to fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows an example of an RT-level model according to the first, second and fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an example of input/output instruction information according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart illustrating a method for converting a logic circuit model according to the first to fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating a method for setting operation start states and operation end states according to the first to fourth embodiments of the present invention; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating a method for analyzing operation of a logic circuit model according to the first, second and fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> shows the operation start states and operation end states according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows input signals corresponding to an input instruction in according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows output signals corresponding to the input instruction in according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows register values corresponding to the input instruction in according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows the operation analysis result for the input instruction in according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows an example of the resultant operation model according to the first embodiment of the present invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows an example of input/output instruction information according to the second and fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows the operation start states and operation end states according to the second embodiment of the present invention; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows input signals corresponding to an input instruction in according to the second embodiment of the present invention; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows output signals corresponding to the input instruction in according to the second embodiment of the present invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows register values corresponding to the input instruction in according to the second embodiment of the present invention; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> shows the operation analysis result for the input instruction in according to the second embodiment of the present invention; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows an example of the resultant operation model according to the second and fifth embodiments of the present invention; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows an example of an RT-level model according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows an example of input/output instruction information according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a flowchart illustrating a method for analyzing operation of a logic circuit model according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> shows input signals corresponding to an input instruction in according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows output signals corresponding to the input instruction in according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> shows a register value corresponding to the input instruction in according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> shows the operation analysis result according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> shows an example of the resultant operation model according to the third embodiment of the present invention; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> shows an example of an RT-level model according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 29</cross-reference> shows an example of input/output instruction information according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 30</cross-reference> is a flowchart illustrating a method for analyzing operation of a logic circuit model according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 31</cross-reference> shows input signals corresponding to an input instruction out according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 32</cross-reference> shows output signals corresponding to the input instruction out according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 33</cross-reference> shows a register value corresponding to the input instruction out according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 34</cross-reference> shows the operation analysis result according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 35</cross-reference> shows an example of the resultant operation model according to the fourth embodiment of the present invention; </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 36</cross-reference> is a flowchart illustrating a method for selecting control variables from state variables according to the fifth embodiment of the present invention; </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 37</cross-reference> shows input signals corresponding to an input instruction in according to the fifth embodiment of the present invention; </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 38</cross-reference> shows output signals corresponding to the input instruction in according to the fifth embodiment of the present invention; </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 39</cross-reference> shows register values corresponding to the input instruction in according to the fifth embodiment of the present invention; and </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 40</cross-reference> shows the operation analysis result according to the fifth embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Hereinafter, embodiments of the present invention will be described with reference to the accompanying drawings. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> (First Embodiment) </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The first embodiment of the present invention will now be described with reference to FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> schematically shows a method for converting a logic circuit model according to each embodiment of the present invention. In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an RT-level model A<highlight><bold>1</bold></highlight> refers to a model in which operations of a logic circuit block are specifically described at RT level, and input/output instruction information A<highlight><bold>2</bold></highlight> refers to information indicating the relation between input/output signal and input/output instruction of the logic circuit block. An operation model A<highlight><bold>3</bold></highlight> is a high abstraction-level operation model produced by the method of the first embodiment. In the method of each embodiment, a description converting means <highlight><bold>1</bold></highlight> converts the RT-level model A<highlight><bold>1</bold></highlight> into the operation model A<highlight><bold>3</bold></highlight> based on the input/output instruction information A<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows an RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block to be converted in the present embodiment. The RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is described in Verilog-HDL, and includes a declaration section of input/output signals (second and third lines in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>), a decoration section of internal registers (fourth line), and an operation description section describing operation of every clock (signal clk) (sixth to twelfth lines). The operation description section has operation of updating the internal registers (seventh line and ninth to eleventh lines) and conditional determination operation (sixth line). Hereinafter, the input/output instruction information A<highlight><bold>2</bold></highlight> used in the first embodiment will be described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows an example of the input/output instruction information A<highlight><bold>2</bold></highlight> in the present embodiment. The input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> includes functions representing input/output instructions (&ldquo;function&rdquo;), input/output signal name (&ldquo;port&rdquo;), and the relation between input/output signal and input/output instruction (&ldquo;type&rdquo;). The &ldquo;type&rdquo; includes two types of declarations, &ldquo;high&rdquo; and &ldquo;change&rdquo;. The declaration &ldquo;high&rdquo; (information <highlight><bold>3</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>3</bold></highlight><highlight><italic>e, </italic></highlight><highlight><bold>3</bold></highlight><highlight><italic>f </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) means that the signal value &ldquo;1&rdquo; represents generation of an instruction, and &ldquo;0&rdquo; indicates absence of an input instruction. The declaration &ldquo;change&rdquo; (information <highlight><bold>3</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>3</bold></highlight><highlight><italic>c, </italic></highlight><highlight><bold>3</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>) means that a change in signal value represents generation of an instruction, and the signal value is retained at that value in the absence of an input instruction. At the bottom of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> (information <highlight><bold>3</bold></highlight><highlight><italic>g </italic></highlight>in the figure), a declaration &ldquo;CLOCK&rdquo; is shown as a function, and &ldquo;clk&rdquo; indicates a clock signal. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Hereinafter, a description conversion method by the description converting means <highlight><bold>1</bold></highlight> will be described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart illustrating a method for converting a logic circuit model according to each embodiment of the present invention. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, operation start states and operation end states of the logic circuit block are set in step B<highlight><bold>1</bold></highlight>. For example, the states of the logic circuit block can be represented by combinations of input signals and internal register values. Note that the terms &ldquo;operation start state&rdquo; and &ldquo;operation end state&rdquo; respectively refer to the states where analysis of each operation of the logic circuit block in step B<highlight><bold>4</bold></highlight> (described below) is started and ended. In step B<highlight><bold>2</bold></highlight>, one input instruction (corresponding to an instruction to be analyzed) to the logic circuit block is selected from the input/output instruction information A<highlight><bold>2</bold></highlight>. In step B<highlight><bold>3</bold></highlight>, one of the operation start states in step B<highlight><bold>1</bold></highlight> (which corresponds to a first state) is selected. In step B<highlight><bold>4</bold></highlight>, the input instruction selected in step B<highlight><bold>2</bold></highlight> is applied to the RT-level model A<highlight><bold>1</bold></highlight> in the operation start state selected in step B<highlight><bold>3</bold></highlight>, and operation of the RT-level model A<highlight><bold>1</bold></highlight> is analyzed. Operation of the logic circuit block is thus extracted until the logic circuit block reaches one of the operation end states (which corresponds to a second state). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In step B<highlight><bold>5</bold></highlight>, it is determined whether or not extraction of operation has been completed for every combination of operation start state of step B<highlight><bold>1</bold></highlight> and input instruction of step B<highlight><bold>2</bold></highlight>. If there is any operation start state to be processed (YES in step B<highlight><bold>5</bold></highlight>), the routine returns to step B<highlight><bold>3</bold></highlight>. Steps B<highlight><bold>3</bold></highlight> to B<highlight><bold>5</bold></highlight> are then repeated until extraction of operation is completed for every operation start state. On the other hand, if extraction of operation has been completed for every operation start state (NO in step B<highlight><bold>5</bold></highlight>), it is then determined in step B<highlight><bold>6</bold></highlight> whether or not extraction of operation has been completed for every input instruction in the input/output instruction information A<highlight><bold>2</bold></highlight>. If there is any input instruction to be processed (YES in step B<highlight><bold>6</bold></highlight>), the routine returns to step B<highlight><bold>2</bold></highlight>. Steps B<highlight><bold>2</bold></highlight> to B<highlight><bold>6</bold></highlight> are then repeated until extraction of operation is completed for every input instruction. On the other hand, if extraction of operation has been completed for every input instruction (NO in step B<highlight><bold>6</bold></highlight>), the operation model A<highlight><bold>3</bold></highlight> of the logic circuit block is then produced in step B<highlight><bold>7</bold></highlight> based on the operations extracted in step B<highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating step B<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, that is, a method for setting operation start states and operation end states. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, in step F<highlight><bold>1</bold></highlight>, input signals and registers are extracted as state variables representing the states of the logic circuit block. In step F<highlight><bold>2</bold></highlight>, a fixed value is assigned to an input signal having a predetermined value in the absence of an input instruction. As a result, at least one of the state variables extracted in step F<highlight><bold>1</bold></highlight> is fixed to a constant. In step F<highlight><bold>3</bold></highlight>, the RT-level model A<highlight><bold>1</bold></highlight> is analyzed, and state transition is analyzed at every clock without changing the input signals other than the clock signal. Steady states are thus extracted. The term &ldquo;steady state&rdquo; herein refers to the state that does not change after one clock, or the state that is restored after a plurality of clocks. Note that, since the input signals are included in the state variables, there is no branch in state transition. Moreover, the input signals will not be changed by the state transition. Therefore, in order to determine whether a certain state is a steady state or not, the state transition need only be examined at most over the same number of clocks as that of combinations of register values. Note that, in the present invention, the method for extracting the steady states is not limited to that described above. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Finally, in step F<highlight><bold>4</bold></highlight>, the steady states extracted in step F<highlight><bold>3</bold></highlight> are set as operation start states and operation end states. Note that, in the present invention, the method for setting operation start states and operation end states is not limited to that described above. For example, the user may manually set operation start states and operation end states. Although the same states are herein used as operation start states and operation end states, different states may alternatively be used. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart illustrating the operation analysis process (step B<highlight><bold>4</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). Referring to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, in step C<highlight><bold>1</bold></highlight>, an input signal is produced using both a change in input signal caused by the input instruction selected in step B<highlight><bold>2</bold></highlight> (i.e., the input instruction to be analyzed) and an input signal value in the operation start state. In step C<highlight><bold>2</bold></highlight>, an output signal value in the absence of the input instruction, that is, an original output signal value, is recorded in the operation start state selected as a first state in step B<highlight><bold>3</bold></highlight>. In step C<highlight><bold>3</bold></highlight>, the input signal value is updated according to the input signal produced in step C<highlight><bold>1</bold></highlight>. In step C<highlight><bold>4</bold></highlight>, an output signal value for the updated input signal value in step C<highlight><bold>3</bold></highlight> is recorded. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In step C<highlight><bold>5</bold></highlight>, the state of the logic circuit block is examined in order to determine whether the logic circuit block has reached the end state or not. If the logic circuit block has not reached the operation end state as a second state or if the change in input signal value corresponding to the input instruction has not been completed, it is determined that the logic circuit block has not reached the end state (NO in step C<highlight><bold>5</bold></highlight>), and the routine proceeds to step C<highlight><bold>6</bold></highlight>. On the other hand, if the logic circuit block has reached the operation end state and the change in input signal value has been completed, it is determined that the logic circuit block has reached the end state (YES in step C<highlight><bold>5</bold></highlight>), and the routine proceeds to step C<highlight><bold>7</bold></highlight>. In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed in order to update the state of the logic circuit block, and the routine then returns to step C<highlight><bold>3</bold></highlight>. Steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>6</bold></highlight> are repeated until the logic circuit block reaches the end state in step C<highlight><bold>5</bold></highlight>. In step C<highlight><bold>7</bold></highlight>, the operation end state that the logic circuit block has reached is extracted. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Finally, in step C<highlight><bold>8</bold></highlight>, the output signal sequence recorded in steps C<highlight><bold>2</bold></highlight>, C<highlight><bold>4</bold></highlight> is compared with an output signal pattern of the output instructions defined by the input/output instruction information A<highlight><bold>1</bold></highlight>. Based on the comparison result, a corresponding output instruction or instructions are extracted to produce an output instruction sequence. If a plurality of output instructions are extracted in step C<highlight><bold>8</bold></highlight>, the output instruction that was recognized first is arranged at the head of the output instruction sequence. If the plurality of output instructions are recognized simultaneously, the output instructions may be arranged into the output instruction sequence in any order. Note that, in the present invention, the order of the output instructions in the output instruction sequence is not limited to that described above. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> If the clock is advanced in the absence of the input instruction, every state would reach any one of the steady states. In the present embodiment, the steady states are used as operation end states. In this case, if the clock is advanced for every combination of operation start state and input instruction, the logic circuit block would reach any one of the operation end states. Accordingly, the operation analysis in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> can be completed properly. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> On the other hand, if the operation end states are set manually, the logic circuit block does not reach the operation end state in step C<highlight><bold>5</bold></highlight>, and the operation analysis in <cross-reference target="DRAWINGS">FIG. 6</cross-reference> may not be completed. In this case, whether the logic circuit block reaches the operation end state or not is determined for every combination of operation start state and input instruction before or during execution of step B<highlight><bold>4</bold></highlight>. It should be appreciated that, if it is determined that the logic circuit block does not reach the operation end state, operation can be terminated with notification that setting of the operation start states and operation end states is unsatisfactory. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> When operation is analyzed for every combination of input instruction and operation start state, the operation start state is changed before the input instruction. However, the present invention is not limited to this. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Note that, a means for setting the operation start state for each input instruction is required for simulation with the resultant operation model A<highlight><bold>3</bold></highlight>. Such a means can be easily added to the operation model A<highlight><bold>3</bold></highlight> by separately setting the initial operation start state (i.e., the operation start state upon startup) and the operation start state for the input instruction applied after each operation end state is reached. In the present embodiment, the same states are used as the operation start states and operation end states. This eliminates the need to specify the relation between the operation start state and the operation end state. In the present embodiment, the initial operation start state is set from the outside at the start of the simulation, and therefore is not specified in the resultant operation model A<highlight><bold>3</bold></highlight>. Alternatively, the initial operation start state may be set based on the operation end state reached with every input signal value and every register value being set to &ldquo;0&rdquo;. In this case, the operation start state corresponding to that operation end state is used as the initial operation start state. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In the present embodiment, operation is analyzed for every combination of the operation start states. However, it should be understood that unlikely operation start states may be omitted from the analysis. In other words, operation may be analyzed only for the likely operation start states. For example, operation for the initial operation start state is analyzed first. An operation end state corresponding to the initial operation start state is then obtained, and an operation start state corresponding to that operation end state is used as a likely operation start state. Thereafter, operation is sequentially analyzed for each likely operation start state. In this way, only the operations for the likely operation start states can be obtained. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Based on the above method for converting a logic circuit model, a process of producing the operation model A<highlight><bold>3</bold></highlight> by the description converting means <highlight><bold>1</bold></highlight> will now be described specifically. The description converting means <highlight><bold>1</bold></highlight> herein produces the operation model A<highlight><bold>3</bold></highlight> based on the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> according to the conversion method in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> In step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> sets operation start states and operation end states according to the method of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. More specifically, in step F<highlight><bold>1</bold></highlight>, input signals in, sel, din and registers ff_in, oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight>, dout of the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> are selected as state variables. The input signal value is then fixed in step F<highlight><bold>2</bold></highlight>. Since the information <highlight><bold>3</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> includes declaration &ldquo;high&rdquo; for input signal in, the input signal value is &ldquo;0&rdquo; in the absence of input instruction. Accordingly, the input signal value is fixed to &ldquo;0&rdquo;. In step F<highlight><bold>3</bold></highlight>, the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is analyzed, and eight states <highlight><bold>7</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>h </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> are extracted as steady states. In step F<highlight><bold>4</bold></highlight>, the extracted eight steady states are set as operation start states and operation end states. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The description converting means <highlight><bold>1</bold></highlight> then proceeds to step B<highlight><bold>2</bold></highlight> and selects one instruction from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> as an instruction to be analyzed. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects an input instruction in of information <highlight><bold>3</bold></highlight><highlight><italic>a. </italic></highlight>In step B<highlight><bold>3</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one of the operation start states in step B<highlight><bold>1</bold></highlight> as a first state, and then proceeds to step B<highlight><bold>4</bold></highlight>. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects the state <highlight><bold>7</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. In step B<highlight><bold>4</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> analyzes operation of the RT-level model A<highlight><bold>1</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) for the input instruction in according to the operation analysis method in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Hereinafter, the operation analysis process in step B<highlight><bold>4</bold></highlight> will be specifically described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and <cross-reference target="DRAWINGS">FIGS. 2, 7</cross-reference>, <highlight><bold>8</bold></highlight>, <highlight><bold>9</bold></highlight> and <highlight><bold>10</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows input signals, <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows output signals, and <cross-reference target="DRAWINGS">FIG. 10</cross-reference> show internal register values. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> First, an input signal is produced by using both a change in input signal caused by application of the input instruction in selected in step B<highlight><bold>2</bold></highlight> to the logic circuit block and an input signal value in the operation start state <highlight><bold>7</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> (step C<highlight><bold>1</bold></highlight>). In the information <highlight><bold>3</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, &ldquo;high&rdquo; is declared for the input signal in. Therefore, the input signal in is set to &ldquo;1&rdquo; right after the input instruction in is applied to the logic circuit block, and set to &ldquo;0&rdquo; in the following clocks. In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, input signal value <highlight><bold>8</bold></highlight><highlight><italic>a </italic></highlight>indicates an input signal value before application of the input instruction in, input signal value <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>indicates an input signal value at the first clock, i.e., an input signal value upon application of the input instruction in, and input signal value <highlight><bold>8</bold></highlight><highlight><italic>c </italic></highlight>is an input signal value at the second clock. Since the signal for the input instruction in is applied at the first clock, the input signal has the same value in the following clocks. Thereafter, an output signal value <highlight><bold>9</bold></highlight><highlight><italic>a </italic></highlight>corresponding to the input signal value <highlight><bold>8</bold></highlight><highlight><italic>a </italic></highlight>(i.e., an output signal value before the start of operation) is recorded (step C<highlight><bold>2</bold></highlight>). The input signal value is then updated to the input signal value <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>(step C<highlight><bold>3</bold></highlight>), and an output signal value <highlight><bold>9</bold></highlight><highlight><italic>b </italic></highlight>at the first clock is recorded (step C<highlight><bold>4</bold></highlight>). The current input signal value and the current state are then examined in step C<highlight><bold>5</bold></highlight>. The change in input signal in is not completed at the first clock. Therefore, it is determined that the logic circuit block has not reached the end state, and the routine then proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed and each internal register value is updated to an internal register value <highlight><bold>10</bold></highlight><highlight><italic>c </italic></highlight>in order to change the state. It should be noted that the internal register values <highlight><bold>10</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> are register values in the operation start state. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The routine then returns to step C<highlight><bold>3</bold></highlight>, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are repeated at the second clock. In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. At the second clock, the register value ff_in is &ldquo;1&rdquo; and thus does not match the operation end state as a second state. Accordingly, it is determined that the logic circuit block has not reached the end state, and the routine proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are then repeated at the third clock. In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. At the third clock, the register value oe<highlight><bold>1</bold></highlight> is &ldquo;1&rdquo; and thus does not match the operation end state. Accordingly, it is determined that the logic circuit block has not reached the end state, and the routine proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are then repeated at the fourth clock. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. This time, the change in input signal value corresponding to the input instruction in has been completed, and the input signals and the register values match the operation end state <highlight><bold>7</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Therefore, it is determined that the logic circuit block has reached the end state, and the routine proceeds to step C<highlight><bold>7</bold></highlight> (YES in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>7</bold></highlight>, the operation end state <highlight><bold>7</bold></highlight><highlight><italic>d </italic></highlight>of the logic circuit block is extracted. Finally, in step C<highlight><bold>8</bold></highlight>, the output signal sequence in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> recorded in steps C<highlight><bold>2</bold></highlight>, C<highlight><bold>4</bold></highlight> is compared with an output signal pattern of the output instructions defined by the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In this example, the output signal dout changes at the second clock (output signal value <highlight><bold>9</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>), and this change corresponds to an output instruction dout. Moreover, the output signal oe<highlight><bold>1</bold></highlight> changes to &ldquo;1&rdquo; at the third clock (output signal value <highlight><bold>9</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>), and this change corresponds to an output instruction oe<highlight><bold>1</bold></highlight>. The operations dout, oe<highlight><bold>1</bold></highlight> are thus extracted in step C<highlight><bold>8</bold></highlight>. Note that the extraction result in this example corresponds to an extraction result <highlight><bold>11</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> described below. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> After the operation analysis process of step B<highlight><bold>4</bold></highlight> is completed, the routine proceeds to step B<highlight><bold>5</bold></highlight>. In this way, steps B<highlight><bold>2</bold></highlight> to B<highlight><bold>6</bold></highlight> are repeatedly conducted according to the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> in order to extract the operation for every combination of operation start state in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> and input instruction. <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows the extraction result obtained when the input instruction in is applied to each state <highlight><bold>7</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>h </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. More specifically, <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows the values of input signal sel, input signal din and output signal dout before application of the input instruction in, the values of input signal sel, input signal din and output signal dout after execution of the input instruction in, and the extracted output instruction sequence. Note that input signal in and register values ff_in, oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> are omitted because each has the same value in all operation start states and operation end states. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> After operation is extracted for every combination of operation start state in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> and input instruction, the routine proceeds to step B<highlight><bold>7</bold></highlight>, and the operation model A<highlight><bold>3</bold></highlight> of the logic circuit is produced based on the extracted operations. The operation model A<highlight><bold>3</bold></highlight> may be described in C language. In this case, the operation model A<highlight><bold>3</bold></highlight> is produced by defining variables for storing a value representing the state of the logic circuit block and functions corresponding to the output instructions, and for every input instruction, describing operation of each function for every operation start state, and also defining functions that describe operation of calling a function sequence corresponding to an output instruction sequence and operation of changing the operation end state. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Some of the values representing the states of the logic circuit block may have the same value in every operation start state and every operation end state. Such values are not necessary to distinguish between operation start states and between operation end states, and therefore can be omitted from production of the operation model A<highlight><bold>3</bold></highlight>. Incorporating a variable value representing an operation start state into a conditional expression or the right side of an assignment statement to a variable would enable the same output instruction and a change in variable which are included in the analysis process for a plurality of operation start states to be collectively described. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows an example of the resultant operation model A<highlight><bold>3</bold></highlight>. Referring to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the operation model A<highlight><bold>3</bold></highlight> produced in the present embodiment is described in C language. The operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> includes declarations of variables for storing state variables used to identify the state of the logic circuit block (first line in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>), declarations of functions for output instructions (third to fifth lines), and functions corresponding to input instructions (seventh to thirtieth lines). A block module name is added to the function name of each input instruction in order to distinguish the functions from those of another block. Operation for the input instruction in is described in the seventh to nineteenth lines. It is herein assumed that the state <highlight><bold>7</bold></highlight><highlight><italic>a </italic></highlight>of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> (the state where every variable value is zero) corresponds to an initial operation start state, and each operation end state corresponds to the following operation start state. Pointers to functions are herein used as the declarations of functions for output instructions so that a plurality of blocks may be connected together by substituting addresses of input instruction functions of another block for the pointers. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Note that, in the present invention, a method for producing the operation model A<highlight><bold>3</bold></highlight> based on the extracted operations is not limited to that described above. Moreover, the above description style of the operation model is by way of illustration only, and the present invention is not limited to this. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> As has been described above, according to the method for converting a logic circuit model in the present embodiment, the input/output instruction information A<highlight><bold>2</bold></highlight> indicating the relation between input/output signal and input/output instruction of the logic circuit block is applied to the logic circuit model specifically described at RT level. As a result, operation of the logic circuit block is extracted for every input instruction, facilitating production of a high abstraction-level operation model A<highlight><bold>3</bold></highlight> for use in serial simulation including no concept of clock. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Note that, in the present embodiment, the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is described in Verilog-HDL, and the operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is described in C language. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> However, the present embodiment is not limited to these description languages. The present embodiment can be similarly implemented with another description language such as VHDL and C&plus;&plus;. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> In the present embodiment, every input signal to the RT-level model A<highlight><bold>1</bold></highlight> corresponds to any one of instructions. However, a fixed value may be assigned to an input signal used in the functions that are not required for the operation model A<highlight><bold>3</bold></highlight> (such as an input signal to the test circuitry), and unnecessary logic may be eliminated according to the method disclosed in Japanese Laid-Open Publication No. 2001-22808. It should be understood such an RT-level model can also be efficiently converted into the operation model A<highlight><bold>3</bold></highlight> by using the method of the present embodiment. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> (Second Embodiment) </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Hereinafter, the second embodiment of the present invention will be described with reference to FIGS. <highlight><bold>2</bold></highlight> to <highlight><bold>6</bold></highlight> and FIGS. <highlight><bold>13</bold></highlight> to <highlight><bold>19</bold></highlight>. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In the first embodiment, a one-clock value of each input/output signal corresponds to a single input/output instruction. However, there may be the cases where combination of a plurality of signals corresponds to a single instruction, where a part of a signal serves as a parameter corresponding to a single instruction, and where a change in signal in a plurality of clocks corresponds to a single instruction. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> A method for converting an RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block into an operation model A<highlight><bold>3</bold></highlight> according to the present embodiment is applied to the case where a change in a plurality of input/output signals over a plurality of clocks corresponds to a single input/output instruction. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows an example of the input/output instruction information A<highlight><bold>2</bold></highlight> according to the present embodiment. In the input/output instruction information A<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the timing when the signal changes (&ldquo;timing&rdquo;) is described in addition to the information of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> in the first embodiment. Like information <highlight><bold>13</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>13</bold></highlight><highlight><italic>c </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the blank in &ldquo;function&rdquo; means that the information is about the instruction corresponding to the function designated in the line right above the blank. For example, the instruction corresponding to a function in in information <highlight><bold>13</bold></highlight>a is associated with three input/output signals in, din, sel (&ldquo;port&rdquo;). The declaration &ldquo;parameter&rdquo; as in information <highlight><bold>13</bold></highlight><highlight><italic>b, </italic></highlight><highlight><bold>13</bold></highlight><highlight><italic>c </italic></highlight>means as follows: if the signal having a declaration &ldquo;parameter&rdquo; is an input signal, this declaration means that an argument value of a corresponding input instruction is used as an input signal at the designated timing; and if the signal having a declaration &ldquo;parameter&rdquo; is an output signal, a signal value that is output at the designated timing is used as an argument of a corresponding output instruction. Moreover, if an input signal is a parameter, the signal value has a predetermined value only at the designated timing. In other words, the input signal may have any value at the timing other than the designated timing. Therefore, it is assumed that the input signal is zero at the timing other than the designated timing. If an output signal is a parameter, the value of the output signal will not be used to determine whether an output instruction is generated or not in the step of extracting an output instruction. The timing is designated as follows: the timing (clock) when an input instruction or output instruction is started is regarded as the zeroth clock. Therefore, the timing of changing a signal and the timing of fetching a parameter signal are designated by the clock. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Hereinafter, a method for producing the operation model A<highlight><bold>3</bold></highlight> according to the present embodiment will be described. Like the first embodiment, the operation model A<highlight><bold>3</bold></highlight> is produced according to the flowcharts of <cross-reference target="DRAWINGS">FIGS. 4 and 6</cross-reference>. In step B<highlight><bold>2</bold></highlight>, however, each value of the parameter is regarded as a different instruction. If an output signal having an argument is extracted in step B<highlight><bold>4</bold></highlight>, the output signal value at the timing designated in the input/output instruction information A<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is used as an argument value. If a plurality of output instructions are extracted, the output instruction recognized first is arranged at the head of the output instruction sequence. If the plurality of output instructions are recognized simultaneously, the output instructions may be arranged into the output instruction sequence in any order. Note that, in the present invention, the order of the output instructions is not limited to that described above. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Hereinafter, the process of producing the operation model A<highlight><bold>3</bold></highlight> by the description converting means <highlight><bold>1</bold></highlight> will be described specifically. The description converting means <highlight><bold>1</bold></highlight> herein produces the operation model A<highlight><bold>3</bold></highlight> based on the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> In step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> sets operation start states and operation end states according to the method of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Steady states of the logic circuit block can be represented using the values of input signals in, sel, din and registers ff_in, oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight>, dout of the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The steady states as operation start states and operation end states are obtained in the same manner as that of the first embodiment. In the present embodiment, however, &ldquo;parameter&rdquo; is declared for input signals sel, din, as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. Therefore, the input signals sel, din are fixed to zero in the absence of an input instruction. Two states <highlight><bold>14</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> are thus set in step B<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In step B<highlight><bold>2</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one instruction from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> as an instruction to be analyzed. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects an instruction in of information <highlight><bold>13</bold></highlight><highlight><italic>a, </italic></highlight>and selects &ldquo;1&rdquo; as respective arguments corresponding to the input signals din, sel serving as parameter signals. In step B<highlight><bold>3</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one of the operation start states in step B<highlight><bold>1</bold></highlight> as a first state. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects the state <highlight><bold>14</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. In step B<highlight><bold>4</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> analyzes operation of the RT-level model A<highlight><bold>1</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) for the input instruction in according to the operation analysis method in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Hereinafter, the operation analysis process in step B<highlight><bold>4</bold></highlight> will be specifically described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and FIGS. <highlight><bold>13</bold></highlight> to <highlight><bold>17</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 15</cross-reference> shows input signals, <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows output signals, and <cross-reference target="DRAWINGS">FIG. 17</cross-reference> show internal register values. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> First, an input signal is produced by using both a change in input signal caused by application of the input instruction in selected in step B<highlight><bold>2</bold></highlight> to the logic circuit block and an input signal value in the operation start state <highlight><bold>14</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> (step C<highlight><bold>1</bold></highlight>). In the information <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, &ldquo;high&rdquo; is declared for the input signal in. Therefore, the input signal in is set to &ldquo;1&rdquo; right after the input instruction in is applied to the logic circuit block, and set to &ldquo;0&rdquo; in the following clocks. For the input signal din, &ldquo;parameter&rdquo; is declared and the timing is &ldquo;0&rdquo;. Therefore, the input signal din is set to &ldquo;1&rdquo; (i.e., the value selected as an argument) right after the input instruction in is applied to the logic circuit block, and set to &ldquo;0&rdquo; in the following clocks. For the input signal sel, &ldquo;parameter&rdquo; is declared and the timing is &ldquo;1&rdquo;. Therefore, the input signal sel is set to &ldquo;1&rdquo; (i.e., the value selected as an argument) at the second clock and set to &ldquo;0&rdquo; in the following clocks. In <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, input signal value <highlight><bold>15</bold></highlight><highlight><italic>a </italic></highlight>indicates an input signal value before the input instruction in is applied, input signal value <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>indicates an input signal value at the first clock, i.e., an input signal value upon application of the input instruction in, and input signal value <highlight><bold>15</bold></highlight><highlight><italic>c </italic></highlight>is an input signal value at the second clock. Since the signal corresponding to the input instruction in is applied at the second clock, the input signal has the same value in the following clocks. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Thereafter, an output signal value <highlight><bold>16</bold></highlight><highlight><italic>a </italic></highlight>corresponding to the input signal value <highlight><bold>15</bold></highlight><highlight><italic>a, </italic></highlight>(i.e., an output signal value before the start of operation) is recorded (step C<highlight><bold>2</bold></highlight>). The input signal value is then updated to the input signal value <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>(step C<highlight><bold>3</bold></highlight>), and an output signal value <highlight><bold>16</bold></highlight><highlight><italic>b </italic></highlight>at the first clock is recorded (step C<highlight><bold>4</bold></highlight>). The current input signal value and the current state are then examined in step C<highlight><bold>5</bold></highlight>. The change in input signals corresponding to the input instruction is not completed at the first clock. Therefore, it is determined that the logic circuit block has not reached the end state, and the routine then proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed and each internal register value is updated to an internal register value <highlight><bold>17</bold></highlight><highlight><italic>c </italic></highlight>in order to change the state. It should be noted that the internal register values <highlight><bold>17</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>17</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> are register values in the operation start state. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The routine then returns to step C<highlight><bold>3</bold></highlight>, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are repeated at the second clock. In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. At the second clock, the change in input signals corresponding to the input instruction in has not been completed. Accordingly, it is determined that the logic circuit block has not reached the end state, and the routine proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are then repeated at the third clock. In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. At the third clock, the internal register value oe<highlight><bold>2</bold></highlight> is &ldquo;1&rdquo; and thus does not match the operation end state as a second state. Accordingly, it is determined that the logic circuit block has not reached the end state, and the routine proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed, and steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>5</bold></highlight> are then repeated at the fourth clock. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. This time, the change in input signals corresponding to the input instruction in has been completed, and the input signals and the register values match the operation end state <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Therefore, it is determined that the logic circuit block has reached the end state, and the routine proceeds to step C<highlight><bold>7</bold></highlight> (YES in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>7</bold></highlight>, the operation end state <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>of the logic circuit block is extracted. Finally, in step C<highlight><bold>8</bold></highlight>, the output signal sequence in <cross-reference target="DRAWINGS">FIG. 16</cross-reference> recorded in steps C<highlight><bold>2</bold></highlight>, C<highlight><bold>4</bold></highlight> is compared with an output signal pattern of the output instructions defined by the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. In this example, the output signal oe<highlight><bold>2</bold></highlight> changes to &ldquo;1&rdquo; at the third clock (output signal value <highlight><bold>16</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>), and this change corresponds to an output instruction oe<highlight><bold>2</bold></highlight>. The operation oe<highlight><bold>2</bold></highlight> is thus extracted in step C<highlight><bold>8</bold></highlight>. The output signal dout is used as an argument of the output instruction oe<highlight><bold>2</bold></highlight>, and the timing of the output signal dout is &ldquo;1&rdquo;. Therefore, the output signal dout at the clock right after the clock the output signal oe<highlight><bold>2</bold></highlight> becomes &ldquo;1&rdquo; is used as an argument of the output instruction oe<highlight><bold>2</bold></highlight>. More specifically, value &ldquo;1&rdquo; in output signal value <highlight><bold>16</bold></highlight><highlight><italic>e </italic></highlight>is used as an argument of the output instruction oe<highlight><bold>2</bold></highlight>. Note that this extraction result corresponds to an extraction result <highlight><bold>18</bold></highlight><highlight><italic>g </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 18</cross-reference> described below. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> After the operation analysis process of step B<highlight><bold>4</bold></highlight> is completed, the routine proceeds to step B<highlight><bold>5</bold></highlight>. In this way, steps B<highlight><bold>2</bold></highlight> to B<highlight><bold>6</bold></highlight> are repeatedly conducted according to the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> in order to extract the operation for every combination of operation start state in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> and input instruction. <cross-reference target="DRAWINGS">FIG. 18</cross-reference> shows the extraction result obtained when the input instruction in is applied in each state <highlight><bold>14</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. More specifically, <cross-reference target="DRAWINGS">FIG. 18</cross-reference> shows an input instruction including an argument, the value of output signal dout before application of the input instruction in, the value of output signal dout after execution of the input instruction in, and the extracted output instruction sequence. Note that input signals in, sel, din and register values ff_in, oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> are omitted because each has the same value in every operation start state and every operation end state. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> After operation is extracted for every combination of operation start state in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> and input instruction, the routine proceeds to step B<highlight><bold>7</bold></highlight>, and the operation model A<highlight><bold>3</bold></highlight> of the logic circuit is produced based on the extracted operations, as shown in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows an example of the operation model A<highlight><bold>3</bold></highlight> produced in the present embodiment. The operation model A<highlight><bold>3</bold></highlight> is herein described in C language. The operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 19</cross-reference> includes declarations of variables for storing state variables used to identify the state of the logic circuit block (first line in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>), declarations of functions for output instructions (third and fourth lines), and functions corresponding to input instructions (sixth to fifteenth lines). A block module name is added to the function name of each input instruction in order to distinguish the functions from those of another block. Regarding the operation for each combination of operation start state and argument of input instruction, the same output instruction and a change in state variable are described collectively. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> As has been described above, according to the method for converting a logic circuit model in the present embodiment, the input/output instruction information A<highlight><bold>2</bold></highlight> indicating the relation between input/output signal and input/output instruction of the logic circuit block is applied to the logic circuit model specifically described at RT level. Even if the input/output instruction information includes the relation between a change of a plurality of clocks in a plurality of clocks and a single instruction, operation of the RT-level model A<highlight><bold>1</bold></highlight> is extracted for every input instruction, facilitating production of a high abstraction-level operation model A<highlight><bold>3</bold></highlight> for use in serial simulation including no concept of clock. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> (Third Embodiment) </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Hereinafter, the third embodiment of the present invention will be described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and FIGS. <highlight><bold>20</bold></highlight> to <highlight><bold>27</bold></highlight>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> In the first and second embodiments, each input instruction corresponds only to an input signal, and each output instruction corresponds only to an output signal. However, the first the second embodiments are inapplicable if there is an instruction requiring a response signal as in a handshake protocol. The reason for this is as follows: if there is an output instruction requiring a response signal, it is impossible to analyze the operation beyond the state of waiting for the response signal to change. Therefore, the logic circuit block cannot reach the operation end state. As a result, required operations cannot be extracted, and thus the operation model A<highlight><bold>3</bold></highlight> cannot be produced. Moreover, if there is an input instruction requiring a response signal and an input signal changes according to a change in response signal, the input signal cannot be produced. Therefore, operation cannot be analyzed and thus the operation model A<highlight><bold>3</bold></highlight> cannot be produced. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In the third embodiment of the present invention, a method for converting an RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block having an input/output instruction requiring a response signal into an operation model A<highlight><bold>3</bold></highlight> will be described. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In the third embodiment, an RT-level model A<highlight><bold>1</bold></highlight> of the logic circuit block in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is converted into an operation model A<highlight><bold>3</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows an example of the RT-level model A<highlight><bold>1</bold></highlight> described in Verilog-HDL. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> First, input/output instruction information A<highlight><bold>2</bold></highlight> used in the present embodiment will be described with reference to <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. <cross-reference target="DRAWINGS">FIG. 21</cross-reference> shows an example of the input/output instruction information A<highlight><bold>2</bold></highlight> of the present embodiment. The input/output instruction information A<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 21</cross-reference> includes declarations of functions representing input/output instructions (&ldquo;function&rdquo;), input/output signal name (&ldquo;port&rdquo;), relation between input/output signal and input/output instruction (&ldquo;type&rdquo;), and timing (&ldquo;timing&rdquo;). The input instruction in is an input instruction having a response signal. In information <highlight><bold>21</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 21</cross-reference> (i.e., information about an output signal ack for the input instruction in), &ldquo;x&rdquo; means that the timing the output signal ack becomes &ldquo;1&rdquo; is indefinite. In information <highlight><bold>21</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 21</cross-reference> (i.e., information about an input signal in for the input instruction in), &ldquo;0&rdquo;, &ldquo;$x&rdquo; means that the input signal in is &ldquo;1&rdquo; until timing &ldquo;x&rdquo; (i.e., from the start of the input instruction until the output signal ack becomes &ldquo;1&rdquo;), and the input signal in is &ldquo;0&rdquo; after timing &ldquo;x&rdquo;. The output instruction oe<highlight><bold>1</bold></highlight> is an output instruction having a response signal. In information <highlight><bold>21</bold></highlight><highlight><italic>g </italic></highlight>(i.e., information about an input signal ack<highlight><bold>1</bold></highlight> for the output instruction oe<highlight><bold>1</bold></highlight>), &ldquo;x&plus;1&rdquo; means that the input signal ack<highlight><bold>1</bold></highlight> becomes &ldquo;1&rdquo; at the second or later clock after the signal for the output instruction is changed. In information <highlight><bold>21</bold></highlight><highlight><italic>f </italic></highlight>(i.e., information about an output signal dout), &ldquo;$x&plus;1&rdquo; means that the clock value &ldquo;x&plus;1&rdquo; (the timing the input signal ack<highlight><bold>1</bold></highlight> becomes &ldquo;1&rdquo;) is used as an argument. Note that input instructions and output instructions can be distinguished according to the direction of the initially designated signal. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Hereinafter, a description conversion method by the description converting means <highlight><bold>1</bold></highlight> will be described. The description conversion method of the third embodiment is the same as the method of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> described in the above embodiments except the operation analysis process B<highlight><bold>4</bold></highlight>. Therefore, only the operation analysis process B<highlight><bold>4</bold></highlight> is herein described with reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a flowchart illustrating the operation analysis process B<highlight><bold>4</bold></highlight> of the present embodiment. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 22</cross-reference>, in step D<highlight><bold>1</bold></highlight>, an output signal value in the absence of an input instruction, that is, an original output signal value, is recorded in the operation start state selected as a first state in step B<highlight><bold>3</bold></highlight>. In step D<highlight><bold>2</bold></highlight>, an input signal corresponding to one clock is produced as an input signal to the logic circuit block. Note that, based on the input/output instruction information A<highlight><bold>2</bold></highlight>, a change in input signal value of the selected input instruction is reflected on the input signal, if necessary. If an input signal of the input instruction changes depending on the timing an output signal changes, the timing the input signal changes is determined based on the timing the output signal recognized in step D<highlight><bold>5</bold></highlight> (described below) changes. In step D<highlight><bold>4</bold></highlight> described below (the step of extracting an output instruction having a response signal), a change in input signal value of the extracted output instruction is reflected on the input signal according to the input/output instruction information A<highlight><bold>2</bold></highlight>. If the input signal of the extracted output instruction changes at an indefinite timing, it is assumed that the input signal changes at the earliest timing within the designated range. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In step D<highlight><bold>3</bold></highlight>, an output signal value corresponding to the updated input signal value of step D<highlight><bold>2</bold></highlight> is added to an output signal sequence. In step D<highlight><bold>4</bold></highlight>, the output signal recorded in step D<highlight><bold>3</bold></highlight> is compared with an output signal of an output instruction designated in the input/output instruction information A<highlight><bold>2</bold></highlight>, and a new output instruction is extracted, if any. Whether a new output instruction is generated or not is determined by determining whether the output signal has changed to a prescribed value or not. If an output instruction having an argument is extracted in step D<highlight><bold>4</bold></highlight>, the output signal value at a prescribed clock is extracted as the argument of the output instruction. In step D<highlight><bold>5</bold></highlight>, an output signal of the input instruction having a response signal is examined in order to determine whether or not the response signal has changed as designated in the input/output instruction information A<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> In step D<highlight><bold>6</bold></highlight>, whether the logic circuit block has reached the end state or not is determined. If the logic circuit block has reached the end state (YES in step D<highlight><bold>6</bold></highlight>), the routine proceeds to step D<highlight><bold>8</bold></highlight>. Otherwise (NO in step D<highlight><bold>6</bold></highlight>), the routine proceeds to step D<highlight><bold>7</bold></highlight>. The term &ldquo;end state&rdquo; herein refers to the state satisfying the following requirements: the logic circuit block has reached any one of the operation end states as a second state; a change in input/output signal of the input instruction has been completed; and a change in input/output signal of the output instruction extracted in step D<highlight><bold>4</bold></highlight> has been completed. In step D<highlight><bold>7</bold></highlight>, operation of one clock is executed to update the state of the logic circuit block. The routine then returns to step D<highlight><bold>2</bold></highlight>, and steps D<highlight><bold>2</bold></highlight> to D<highlight><bold>7</bold></highlight> are repeated until the logic circuit state reaches the end state in step D<highlight><bold>6</bold></highlight> (YES in step D<highlight><bold>6</bold></highlight>). In step D<highlight><bold>8</bold></highlight>, the operation end state that the logic circuit block has reached in step D<highlight><bold>6</bold></highlight> is extracted, and the operation analysis process B<highlight><bold>4</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is completed. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> If no response signal to the input instruction is generated, a change in input signal of the input instruction will not be completed. Therefore, the operation analysis process in <cross-reference target="DRAWINGS">FIG. 22</cross-reference> may not be completed. In this case, whether the input signal of the input instruction changes or not is determined before or during execution of the operation analysis process in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. If the input signal does not change, operation analysis is not conducted or discontinued with a failure report. It should be understood that, if combination of that input instruction and operation start state occurs, the process can be terminated by producing the operation model A<highlight><bold>3</bold></highlight> reporting the error. Hereinafter, the process of producing the operation model A<highlight><bold>3</bold></highlight> by the description converting means <highlight><bold>1</bold></highlight> will be specifically described. The description converting means <highlight><bold>1</bold></highlight> herein produces the operation model A<highlight><bold>3</bold></highlight> based on the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> and the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> In step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> sets operation start states and operation end states according to the method of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. More specifically, the description converting means <highlight><bold>1</bold></highlight> obtains steady states of the logic circuit block in the same manner as that of the above embodiments. In the illustrated example, the following three states are extracted as steady states: every input signal value in the RT-level model A<highlight><bold>1</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is &ldquo;0&rdquo; and the register state is &ldquo;0&rdquo;, &ldquo;1&rdquo;, &ldquo;2&rdquo;. These three states may be set as both operation start states and operation end states. However, it is herein assumed that only one of the three states (the state where every input signal value is &ldquo;0&rdquo; and the register state is &ldquo;0&rdquo;) is set as an operation start state. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In step B<highlight><bold>2</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> then selects one instruction from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 21</cross-reference> as an instruction to be analyzed. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects an input instruction in of information <highlight><bold>21</bold></highlight><highlight><italic>a, </italic></highlight>and sets the respective arguments of input signals sel, din to &ldquo;1&rdquo;. In step B<highlight><bold>3</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one of the operation start states in step B<highlight><bold>1</bold></highlight> as a first state. Since only one operation start state is set as an operation start state in step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects that operation start state as a first state. In step B<highlight><bold>4</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> analyzes operation of the RT-level model A<highlight><bold>1</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 20</cross-reference>) for the input instruction in according to the operation analysis method in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> Hereinafter, the operation analysis process in step B<highlight><bold>4</bold></highlight> will be specifically described with reference to <cross-reference target="DRAWINGS">FIG. 22</cross-reference> and FIGS. <highlight><bold>23</bold></highlight> to <highlight><bold>26</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 23</cross-reference> shows input signals produced during the process, <cross-reference target="DRAWINGS">FIG. 24</cross-reference> shows output signals, and <cross-reference target="DRAWINGS">FIG. 25</cross-reference> show an internal register value. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> First, an output signal value <highlight><bold>24</bold></highlight><highlight><italic>a </italic></highlight>corresponding to an input signal value <highlight><bold>23</bold></highlight><highlight><italic>a </italic></highlight>in the operation start state, i.e., an original output signal value, is recorded (step D<highlight><bold>1</bold></highlight>). An input signal <highlight><bold>23</bold></highlight><highlight><italic>b </italic></highlight>is then produced according to the change in signal at the first clock, i.e., the change in signal caused by application of the input instruction in. The input signal <highlight><bold>23</bold></highlight><highlight><italic>b </italic></highlight>thus produced is applied to the logic circuit block (step D<highlight><bold>2</bold></highlight>). An output signal value <highlight><bold>24</bold></highlight><highlight><italic>b </italic></highlight>at the first clock is then recorded (step D<highlight><bold>3</bold></highlight>), and the recorded output signal sequence is examined in order to determine whether a new output instruction is generated or not (step D<highlight><bold>4</bold></highlight>). A corresponding output signal has not yet been recognized. Thereafter, a response signal ack of the input instruction in is examined (step D<highlight><bold>5</bold></highlight>). The response signal ack has not yet changed. In step D<highlight><bold>6</bold></highlight>, it is determined whether the logic circuit block has reached the end state or not. Since the change in input signal has not been completed, the routine proceeds to step D<highlight><bold>7</bold></highlight> (NO in step D<highlight><bold>6</bold></highlight>). In step D<highlight><bold>7</bold></highlight>, operation of one clock is executed and the internal register value is updated to an internal register value <highlight><bold>25</bold></highlight><highlight><italic>c </italic></highlight>in order to change the state. It should be noted that the internal register values <highlight><bold>25</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>25</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 25</cross-reference> are register values in the operation start state. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> The routine then returns to step D<highlight><bold>2</bold></highlight>, and steps D<highlight><bold>2</bold></highlight> to D<highlight><bold>7</bold></highlight> are repeatedly conducted on a clock-by-clock basis. Since the output signal oe<highlight><bold>2</bold></highlight> changes to &ldquo;1&rdquo; at the second clock, an output instruction oe<highlight><bold>2</bold></highlight> is recognized. The output instruction oe<highlight><bold>2</bold></highlight> is therefore extracted in step D<highlight><bold>4</bold></highlight> at the second clock. Since a response signal ack<highlight><bold>2</bold></highlight> of the recognized output instruction oe<highlight><bold>2</bold></highlight> has a timing &ldquo;x&plus;1&rdquo;, the input signal ack<highlight><bold>2</bold></highlight> is changed to &ldquo;1&rdquo; at the earliest timing (i.e., after one cycle). More specifically, the input signal ack<highlight><bold>2</bold></highlight> is changed to &ldquo;1&rdquo; in step D<highlight><bold>2</bold></highlight> at the third clock, and changed back to &ldquo;0&rdquo; in step D<highlight><bold>2</bold></highlight> at the fourth clock. An output signal dout as a parameter of the output instruction oe<highlight><bold>2</bold></highlight> has a timing &ldquo;$x&plus;1&rdquo;, and &ldquo;$x&rdquo; (corresponding to the value &ldquo;x&rdquo; used to determine the timing of the response signal ack<highlight><bold>2</bold></highlight> of the output instruction oe<highlight><bold>2</bold></highlight>) is set to &ldquo;0&rdquo;. Therefore, in step D<highlight><bold>4</bold></highlight> of the third cycle (one cycle after the output instruction oe<highlight><bold>2</bold></highlight> is started), the output signal oe<highlight><bold>2</bold></highlight> (i.e., &ldquo;1&rdquo;) is extracted as an argument of the output instruction oe<highlight><bold>2</bold></highlight>. Note that, although the output signal oe<highlight><bold>2</bold></highlight> is still &ldquo;1&rdquo; in the third cycle, this is not recognized as a new output instruction. The reason for this is as follows: the output instruction oe<highlight><bold>2</bold></highlight> already recognized in the second cycle indicates that the output signal oe<highlight><bold>2</bold></highlight> is held at &ldquo;1&rdquo; during a period &ldquo;$x&plus;1&rdquo;, and &ldquo;$x&rdquo; is set to &ldquo;0&rdquo;. Therefore, the output signal oe<highlight><bold>2</bold></highlight> is held at &ldquo;1&rdquo; until one clock after the output instruction oe<highlight><bold>2</bold></highlight> is generated, that is, until the third cycle. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In step D<highlight><bold>5</bold></highlight> of the third cycle, the response signal ack of the input instruction in is &ldquo;1&rdquo;. Since the response signal ack of the input instruction in has a timing &ldquo;x&rdquo;, &ldquo;$x&rdquo; (corresponding to the value &ldquo;x&rdquo; of the input instruction in) is set to &ldquo;3&rdquo;. As a result, the input signal in is held at &ldquo;1&rdquo; until two cycles after the input instruction in is generated, that is, until the third clock. The input signal in is therefore set to &ldquo;0&rdquo; in step D<highlight><bold>2</bold></highlight> of the fourth cycle. In step D<highlight><bold>6</bold></highlight> of the fourth cycle, it is determined that the logic circuit block has reached the end state, and the change in input signal caused by the input instruction and the change in signal corresponding to the recognized output instruction have been completed. Therefore, the routine proceeds to step D<highlight><bold>8</bold></highlight> (YES in step D<highlight><bold>6</bold></highlight>). In step D<highlight><bold>8</bold></highlight>, the operation end state is extracted as a second state, whereby the operation analysis process B<highlight><bold>4</bold></highlight> is completed. Note that the extraction result in this example corresponds to the state <highlight><bold>26</bold></highlight><highlight><italic>d </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 26</cross-reference> described below. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> After the operation analysis process of step B<highlight><bold>4</bold></highlight> is completed, the routine proceeds to step B<highlight><bold>5</bold></highlight>. In this way, steps B<highlight><bold>2</bold></highlight> to B<highlight><bold>6</bold></highlight> are repeatedly conducted according to the flowchart of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> in order to extract operation of every input instruction. <cross-reference target="DRAWINGS">FIG. 26</cross-reference> shows the extraction result for each combination of input instruction and argument. More specifically, <cross-reference target="DRAWINGS">FIG. 26</cross-reference> shows instructions including arguments, and the resultant output instruction sequences. In the illustrated example, there is only one operation start state. Therefore, it is not necessary to distinguish between operation start state and operation end state, and the variables representing the state are omitted. Since there is no output instruction corresponding to the input instruction reset, the output instruction sequence of the state <highlight><bold>26</bold></highlight><highlight><italic>e </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is left blank. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Finally, in step B<highlight><bold>7</bold></highlight>, the operation model A<highlight><bold>3</bold></highlight> of the logic circuit is produced based on the extracted operations. <cross-reference target="DRAWINGS">FIG. 27</cross-reference> shows an example of the operation model A<highlight><bold>3</bold></highlight> produced in the present embodiment. The operation model A<highlight><bold>3</bold></highlight> is herein described in C language. The operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 27</cross-reference> includes declarations of functions for output instructions (first and second lines in <cross-reference target="DRAWINGS">FIG. 27</cross-reference>), and functions corresponding to input instructions (fourth to sixteenth lines). A block module name is added to the function name of each input instruction in order to distinguish the functions from those of another block. Regarding the operation for each combination of operation start state and argument of input instruction, the same output instruction and a change in state variable are described collectively. Note that, in this example, there is only one operation start state. Therefore, no variable for identifying the state will be required. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> As has been described above, according to the method for converting a logic circuit model in the present embodiment, the input/output instruction information A<highlight><bold>2</bold></highlight> indicating the relation between input/output signal and input/output instruction of the logic circuit block is applied to the logic circuit model described at RT level. Even if the input/output instruction information A<highlight><bold>2</bold></highlight> includes an output instruction having an input response signal and/or an input instruction having an output response signal, operation of the RT-level model A<highlight><bold>1</bold></highlight> is extracted for every input instruction, facilitating production of a high abstraction-level operation model A<highlight><bold>3</bold></highlight> for use in serial simulation including no concept of clock. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> (Fourth Embodiment) </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Hereinafter, the fourth embodiment of the present invention will be described with reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference> and FIGS. <highlight><bold>28</bold></highlight> to <highlight><bold>35</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> The first to third embodiments are inapplicable to the following cases: like a data read instruction, an output instruction fetches an input signal as a parameter and operation of the logic circuit block varies according to the fetched value; and like a data read instruction, an input instruction requires a return value. The reason for this is as follows: in the case where an output instruction fetches an input signal as a parameter, no further operation can be analyzed because the input signal value is not determined. As a result, the operation model A<highlight><bold>3</bold></highlight> cannot be produced. Moreover, in the case where an input instruction requires a return value, the operation model A<highlight><bold>3</bold></highlight> cannot be produced because the return value is unknown. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> In the fourth embodiment of the present invention, a method for converting an RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block into an operation model A<highlight><bold>3</bold></highlight>, which is applicable to the above cases, will be described. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> An RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block in <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is converted in the fourth embodiment. <cross-reference target="DRAWINGS">FIG. 28</cross-reference> shows an example of the RT-level model A<highlight><bold>1</bold></highlight> described in Verilog-HDL. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> First, input/output instruction information A<highlight><bold>2</bold></highlight> used in the present embodiment will be described with reference to <cross-reference target="DRAWINGS">FIG. 29</cross-reference>. <cross-reference target="DRAWINGS">FIG. 29</cross-reference> shows an example of the input/output instruction information A<highlight><bold>2</bold></highlight> in the fourth embodiment. The input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 29</cross-reference> describes declarations of functions indicating input/output instructions (&ldquo;function&rdquo;), input/output signal name (&ldquo;port&rdquo;), relation between input/output signal and input/output instruction (&ldquo;type&rdquo;), and timing (&ldquo;timing&rdquo;). As shown in information <highlight><bold>29</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 29, a</cross-reference> signal dout of an input instruction out is an output signal, and &ldquo;parameter&rdquo; is declared for the signal dout. Therefore, the signal dout is regarded as a return value to the input instruction out. Since the timing of the return signal dout is &ldquo;1&rdquo;, the signal value dout at one clock after the start of the input instruction out is used as a return value. As shown in information <highlight><bold>29</bold></highlight><highlight><italic>d, </italic></highlight><highlight><bold>29</bold></highlight><highlight><italic>e, </italic></highlight>signals din, err of an output instruction rd are input signals, and &ldquo;parameter&rdquo; is declared for the signals din, err. Therefore, the signals din, err are regarded as return values to the output instruction rd. Since the timing of the return signals din, err is &ldquo;1&rdquo;, the signal values din, err at one clock after the start of the output instruction rd are used as return values. In this case, the return values are not determined during the operation analysis. Therefore, operation is analyzed using not constants but variable values as the return values. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Hereinafter, a description conversion method by the description converting means <highlight><bold>1</bold></highlight> will be described. The description conversion method of the fourth embodiment is the same as the method of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> described in the above embodiments except the operation analysis process B<highlight><bold>4</bold></highlight>. Therefore, only the operation analysis process B<highlight><bold>4</bold></highlight> is herein described with reference to <cross-reference target="DRAWINGS">FIG. 30</cross-reference>. <cross-reference target="DRAWINGS">FIG. 30</cross-reference> is a flowchart illustrating the operation analysis process B<highlight><bold>4</bold></highlight> of the present embodiment. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 30</cross-reference>, in step E<highlight><bold>1</bold></highlight>, an output signal value in the absence of an input instruction, that is, an original output signal value, is recorded in the operation start state selected as a first state in step B<highlight><bold>3</bold></highlight>. In step E<highlight><bold>2</bold></highlight>, an input signal corresponding to one clock is produced as an input signal to the logic circuit block. Note that if an output instruction having a return value is extracted in step E<highlight><bold>7</bold></highlight> described below, each input signal corresponding to the extracted output instruction is set to a variable value, based on the input/output instruction information A<highlight><bold>2</bold></highlight>. In step E<highlight><bold>3</bold></highlight>, an output signal value corresponding to the input signal value obtained in step E<highlight><bold>2</bold></highlight> is added to an output signal sequence. If the input signals or the state variables representing the state of the logic circuit block are set to variable values, it is determined in step E<highlight><bold>4</bold></highlight> whether operation of this clock can be analyzed with the variable values or not. If either an output signal value for determining whether an output instruction is generated or not in step E<highlight><bold>7</bold></highlight> or a state variable for determining whether the logic operation state has reached the end state or not in step E<highlight><bold>8</bold></highlight> is given by a variable value or an expression including a variable value, it is determined that operation cannot be analyzed. Even if the output signal or the state variable is set to a variable value, however, the same determination may be made in step E<highlight><bold>7</bold></highlight> or E<highlight><bold>8</bold></highlight> for every possible combination of the values of the variable values. In such a case, it can be determined in step E<highlight><bold>4</bold></highlight> that operation can be analyzed. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> If it is determined in step E<highlight><bold>4</bold></highlight> that operation cannot be analyzed (NO in step E<highlight><bold>4</bold></highlight>), the output instruction sequence extracted so far and the current state of the block are saved in step E<highlight><bold>5</bold></highlight>. Thereafter, in step E<highlight><bold>6</bold></highlight>, one of the possible combinations of the values is selected for the variable values that make the operation analysis impossible, and these variable values are set to the selected values. The routine then proceeds to step E<highlight><bold>7</bold></highlight>. If it is determined in step E<highlight><bold>4</bold></highlight> that operation can be analyzed (YES in step E<highlight><bold>4</bold></highlight>), the routine proceeds directly to step E<highlight><bold>7</bold></highlight>. In step E<highlight><bold>7</bold></highlight>, a new output instruction is extracted based on the output signal sequence, and the routine then proceeds to step E<highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> In step E<highlight><bold>8</bold></highlight>, it is determined whether the logic circuit block has reached the end state or not. If it is determined that the logic circuit block has reached the end state (YES in step E<highlight><bold>8</bold></highlight>), the routine proceeds to step E<highlight><bold>10</bold></highlight>. Otherwise (NO in step E<highlight><bold>8</bold></highlight>), the routine proceeds to step E<highlight><bold>9</bold></highlight>. In step E<highlight><bold>9</bold></highlight>, operation of one clock is executed in order to update the state of the logic circuit block, and the routine then returns to step E<highlight><bold>2</bold></highlight>. Steps E<highlight><bold>2</bold></highlight> to E<highlight><bold>9</bold></highlight> are then repeatedly conducted, and operation is analyzed by the process described below. Note that each state variable may be given by a variable value or an expression including a variable value. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> In step E<highlight><bold>10</bold></highlight> (YES in step E<highlight><bold>8</bold></highlight>), the operation end state that the logic circuit block has reached in step E<highlight><bold>8</bold></highlight> is extracted as a second state. In step E<highlight><bold>11</bold></highlight>, a signal value as a return value to the input instruction is extracted based on the output signal sequence. In step E<highlight><bold>12</bold></highlight>, it is determined whether or not every combination of the values has been selected for the variable values in step E<highlight><bold>6</bold></highlight>. If every combination of the values has been selected (NO in step E<highlight><bold>12</bold></highlight>), the operation analysis process is completed. Otherwise (YES in step E<highlight><bold>12</bold></highlight>), the routine proceeds to step E<highlight><bold>13</bold></highlight>. In step E<highlight><bold>13</bold></highlight>, the state saved in step E<highlight><bold>5</bold></highlight> is reproduced, and the routine returns to step E<highlight><bold>6</bold></highlight>. In step E<highlight><bold>6</bold></highlight>, another combination of the values is selected for the variable values and operation is analyzed. In this way, steps E<highlight><bold>2</bold></highlight> to E<highlight><bold>13</bold></highlight> are repeatedly conducted according to the flowchart of <cross-reference target="DRAWINGS">FIG. 30</cross-reference> until it is determined in step E<highlight><bold>12</bold></highlight> that every combination of the values has been selected for the variable values (NO in step E<highlight><bold>12</bold></highlight>). Finally, the operation analysis process B<highlight><bold>4</bold></highlight> is completed. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> Hereinafter, the process of producing the operation model A<highlight><bold>3</bold></highlight> by the description converting means <highlight><bold>1</bold></highlight> will be specifically described. The description converting means <highlight><bold>1</bold></highlight> herein produces the operation model A<highlight><bold>3</bold></highlight> based on the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 28</cross-reference> and the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 29</cross-reference>. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> sets operation start states and operation end states according to the method of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. More specifically, the description converting means <highlight><bold>1</bold></highlight> obtains steady states of the logic circuit block in the same manner as that of the above embodiments. The description converting means <highlight><bold>1</bold></highlight> then extract the state where every input signal value and every register value of the RT-level model A<highlight><bold>1</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is &ldquo;0&rdquo;. In the illustrated example, this state is set as an operation start state and an operation end state. In step B<highlight><bold>2</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one input instruction from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 29</cross-reference>. It is herein assumed that the description converting means <highlight><bold>1</bold></highlight> selects only an input instruction out of information <highlight><bold>29</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 29</cross-reference> as an instruction to be analyzed. Since only one state is set as an operation start state in step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects that state as a first state in step B<highlight><bold>3</bold></highlight>. In step B<highlight><bold>4</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> analyzes operation of the RT-level model A<highlight><bold>1</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 28</cross-reference>) for the input instruction out according to the operation analysis method in <cross-reference target="DRAWINGS">FIG. 30</cross-reference>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Hereinafter, the operation analysis process in step B<highlight><bold>4</bold></highlight> will be specifically described with reference to <cross-reference target="DRAWINGS">FIG. 30</cross-reference> and FIGS. <highlight><bold>31</bold></highlight> to <highlight><bold>34</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 31</cross-reference> shows input signals produced during the process, <cross-reference target="DRAWINGS">FIG. 32</cross-reference> shows output signals, and <cross-reference target="DRAWINGS">FIG. 33</cross-reference> show an internal register value. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> First, an output signal value <highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>corresponding to an input signal value <highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>in the operation start state, i.e., an original output signal value, is recorded (step E<highlight><bold>1</bold></highlight>). An input signal <highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>is then produced according to the change in signal at the first clock, i.e., the change in signal caused by the input instruction out. The input signal <highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>thus produced is applied to the logic circuit block (step E<highlight><bold>2</bold></highlight>). An output signal value <highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>at the first clock is then recorded (step E<highlight><bold>3</bold></highlight>), and it is determined whether the operation analysis can be continued or not (step E<highlight><bold>4</bold></highlight>). Since there is neither state variable nor output signal having a variable value, the process proceeds to step E<highlight><bold>7</bold></highlight> (YES in step E<highlight><bold>4</bold></highlight>). In step E<highlight><bold>7</bold></highlight>, whether a new output instruction is generated or not is determined based on the recorded output signal sequence. In the illustrated example, the output signal rd changes to &ldquo;1&rdquo; at the first clock. Therefore, an output instruction rd is recognized. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> In step E<highlight><bold>8</bold></highlight>, it is determined whether the logic circuit block has reached the end state or not. Since the change in signal corresponding to the input instruction out has not been completed, the routine proceeds to step E<highlight><bold>9</bold></highlight> (NO in step E<highlight><bold>8</bold></highlight>). In step E<highlight><bold>9</bold></highlight>, operation of one clock is executed and the internal register value is updated to an internal register value <highlight><bold>33</bold></highlight><highlight><italic>c </italic></highlight>in order to change the state. The routine then returns to step E<highlight><bold>2</bold></highlight>. It should be noted that internal register values <highlight><bold>33</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>33</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 33</cross-reference> are register values in the operation start state. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Thereafter, steps E<highlight><bold>2</bold></highlight> to E<highlight><bold>9</bold></highlight> are repeatedly conducted. In the illustrated example, the output instruction rd is recognized at the first clock. The output instruction rd has input signals din, err which use a return value as a parameter at the second clock. Therefore, in step E<highlight><bold>2</bold></highlight> of the second clock, the input signals din, err are set to variable values in_din, in_err. As a result, the output signal dout having a variable value is recorded in step E<highlight><bold>3</bold></highlight>. In step E<highlight><bold>4</bold></highlight>, it is determined whether operation can be analyzed or not. At the second clock, both the state required to determine whether the logic circuit block has reached the operation end state or not and the input signals have a variable value. Therefore, it is determined that operation cannot be analyzed, and the routine proceeds to step E<highlight><bold>5</bold></highlight> (NO in step E<highlight><bold>4</bold></highlight>). The current state and the output instruction sequence extracted so far are saved in step E<highlight><bold>5</bold></highlight>. In step E<highlight><bold>6</bold></highlight>, one of the possible combinations of the values is selected for the variable values in_din, in_err, and the routine then proceeds to step E<highlight><bold>7</bold></highlight>. It is herein assumed that both variable values in_din, in_err are set to &ldquo;0&rdquo;. In this case, a new output instruction is not extracted in step E<highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In step E<highlight><bold>8</bold></highlight>, it is determined that the logic circuit block has reached the end state, and the routine proceeds to step E<highlight><bold>10</bold></highlight> (YES in step E<highlight><bold>8</bold></highlight>). In step E<highlight><bold>10</bold></highlight>, the operation end state is extracted as a second state. In step E<highlight><bold>11</bold></highlight>, the signal dout of the second clock is extracted as a return value to the input instruction out. Referring to <cross-reference target="DRAWINGS">FIG. 32</cross-reference>, the signal dout is set to a variable value in_din at the second clock. Since the variable value in_din is set to &ldquo;0&rdquo; in step E<highlight><bold>6</bold></highlight>, the return value is &ldquo;0&rdquo;. Note that the extraction result in this example corresponds to the state <highlight><bold>34</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 34</cross-reference> described below. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> The routine then proceeds to step E<highlight><bold>12</bold></highlight>. Since not every combination of the values has been selected for the variable values in_din, in_err, the routine proceeds to step E<highlight><bold>13</bold></highlight> (YES in step E<highlight><bold>12</bold></highlight>). In step E<highlight><bold>13</bold></highlight>, the state saved in step E<highlight><bold>5</bold></highlight> is reproduced, and the routine then returns to step E<highlight><bold>6</bold></highlight>. In step E<highlight><bold>6</bold></highlight>, another combination of the values is selected for the variable values in_din, in_err. It is herein assumed that the variable value in_din is set to &ldquo;0&rdquo; and the variable value in_err is set to &ldquo;1&rdquo;. As a result, an output instruction irq is recognized at the fourth clock. At the fifth clock, it is determined that the logic circuit block has reached the end state. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Thereafter, the above operation is repeatedly conducted for every possible combination of the variable values, and the operation analysis process B<highlight><bold>4</bold></highlight> is completed. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> As a result, the operation analysis result of <cross-reference target="DRAWINGS">FIG. 34</cross-reference> is obtained. <cross-reference target="DRAWINGS">FIG. 34</cross-reference> shows an output instruction sequence before generation of the branch by the variable values, combination of variable values upon generation of the branch, an output instruction sequence after generation of the branch, and a return value to the input instruction. Note that only one branch is generated by the variable values in the present embodiment. However, the operation analysis process of the present embodiment can be similarly conducted even when two or more branches are generated. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> In the present embodiment, there is only one operation start state and only one input instruction. Therefore, after the operation analysis process B<highlight><bold>4</bold></highlight> is completed, the routine proceeds to step B<highlight><bold>5</bold></highlight>, step B<highlight><bold>6</bold></highlight> and then step B<highlight><bold>7</bold></highlight>. Finally, in step B<highlight><bold>7</bold></highlight>, the operation model A<highlight><bold>3</bold></highlight> of the logic circuit block in <cross-reference target="DRAWINGS">FIG. 35</cross-reference> is produced based on the operation analysis result in <cross-reference target="DRAWINGS">FIG. 34</cross-reference>. <cross-reference target="DRAWINGS">FIG. 35</cross-reference> shows an example of the operation model A<highlight><bold>3</bold></highlight> described in C language. The operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 35</cross-reference> includes declarations of functions for the output instructions (first and second lines in <cross-reference target="DRAWINGS">FIG. 35</cross-reference>), and functions corresponding to the input instruction (fourth to twenty-fourth lines). A block module name is added to the function name of each instruction in order to distinguish the functions from those of another block. In the operation model A<highlight><bold>3</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 35</cross-reference>, the return value of each function is transferred using a pointer to a variable used as an argument of the function. The sixth line in <cross-reference target="DRAWINGS">FIG. 35</cross-reference> is a declaration of variables for which the return values of the output instruction are substituted. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> As has been described above, according to the method for converting a logic circuit model in the present embodiment, the input/output instruction information A<highlight><bold>2</bold></highlight> indicating the relation between input/output signal and input/output instruction of the logic circuit block is applied to the logic circuit model described at RT level. Even if the input/output instruction information A<highlight><bold>2</bold></highlight> includes an output instruction having a return signal and/or an input instruction having a return signal, operation of the RT-level model A<highlight><bold>1</bold></highlight> is extracted for every input instruction, facilitating production of a high abstraction-level operation model A<highlight><bold>3</bold></highlight> for use in serial simulation including no concept of clock. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> It should be understood that combination of the present embodiment and the third embodiment would allow the RT-level model A<highlight><bold>1</bold></highlight> to be converted into the operation model A<highlight><bold>3</bold></highlight> even if there is an input/output instruction having both a return signal and a response signal. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> In the operation analysis process of the present embodiment, only the return values of the output instructions are set to variable values. However, an argument of an input instruction may be set to a variable value so that operation for the input instruction having different argument values can be simultaneously analyzed. Alternatively, one or more of the variables representing the state of the logic circuit block may be set to a variable value in order to integrate a plurality of operation start states into one operation start state. As a result, operations for the plurality of operation start states can be analyzed simultaneously. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> (Fifth Embodiment) </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> Hereinafter, the fifth embodiment of the present invention will be described with reference to <cross-reference target="DRAWINGS">FIGS. 2, 4</cross-reference>, <highlight><bold>6</bold></highlight>, <highlight><bold>19</bold></highlight> and FIGS. <highlight><bold>36</bold></highlight> to <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> In the above embodiments, every state variable of the logic circuit block is used to set the operation start states and operation end states. Therefore, if there are a large number of state variables, the logic circuit block would have an extremely large number of states. In this case, an extremely large amount of operation may be required to extract the steady states described in the first embodiment. Moreover, since it is necessary to set a large number of operation start states, a large amount of operation may be required to extract the operation. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> In the fifth embodiment of the present invention, a method for converting an RT-level model A<highlight><bold>1</bold></highlight> into an operation model A<highlight><bold>3</bold></highlight> with a reduced amount of operation will be described. This is realized by reducing the number of state variables required to set the operation start states and operation end states. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> It is herein assumed that the operation model A<highlight><bold>3</bold></highlight> is produced according to the flowcharts of <cross-reference target="DRAWINGS">FIGS. 4 and 6</cross-reference>. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> In the present embodiment, only control variables are extracted from the state variables of the logic circuit block in order to set the operation start states and operation end states. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> A method for extracting control variables from the state variables will be described with reference to <cross-reference target="DRAWINGS">FIG. 36</cross-reference>. <cross-reference target="DRAWINGS">FIG. 36</cross-reference> is a flowchart illustrating a method for selecting control variables from the state variables (input signals and registers) according to the present embodiment. In step GI, variables contributing to any control output signal value are selected as control variables from the state variables. The &ldquo;control output signal&rdquo; herein refers to an output signal whose change in value is associated with generation of an output instruction in the input/output instruction information A<highlight><bold>2</bold></highlight>. The control output signal does not include an output signal used as a parameter of an output instruction or a return value of an input instruction. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> In step G<highlight><bold>2</bold></highlight>, it is determined whether or not every control variable extracted in step G<highlight><bold>1</bold></highlight> or step G<highlight><bold>4</bold></highlight> has been selected in step G<highlight><bold>3</bold></highlight>. If there is any control variable that has not been selected in step G<highlight><bold>3</bold></highlight>, the routine proceeds to step G<highlight><bold>3</bold></highlight> (YES in step G<highlight><bold>2</bold></highlight>). Otherwise, the routine is completed (NO in step G<highlight><bold>2</bold></highlight>). In step G<highlight><bold>3</bold></highlight>, one of the non-selected control variables is selected. In step G<highlight><bold>4</bold></highlight>, the RT-level model A<highlight><bold>1</bold></highlight> is analyzed, and state variables that contribute to a change in value of the control variable selected in step G<highlight><bold>3</bold></highlight> in operation of one clock are extracted. If the extracted state variables are not included in the control variables, they are added to the control variables. The routine then returns to step G<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Thereafter, steps G<highlight><bold>2</bold></highlight> to G<highlight><bold>4</bold></highlight> are repeatedly conducted until it is determined in step G<highlight><bold>2</bold></highlight> that every control variable has been selected (NO in step G<highlight><bold>2</bold></highlight>). The state transition represented by the control variables thus obtained in the above method is not affected by the values of other state variables. In steps G<highlight><bold>1</bold></highlight>, G<highlight><bold>4</bold></highlight>, if a signal used as an input parameter is present among the signals contributing to the value of the control output signals or the control variables, such a signal is extracted as a control parameter. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> Only the control variables extracted by the above method are used to set the operation start states and operation end states in step B<highlight><bold>1</bold></highlight>. Note that the operation start states and operation end states may be set by extracting steady states from the states represented by the control variables according to the method of the first embodiment. Alternatively, the operation start states and operation end states may be set manually. Since the state variables other than the control variables do not affect the control variables, the steady states can be extracted based only on the control variables. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Thereafter, steps B<highlight><bold>2</bold></highlight> to B<highlight><bold>7</bold></highlight> are repeatedly conducted for the operation start states and operation end states, whereby the operation model A<highlight><bold>3</bold></highlight> is produced. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> It should be noted that, if there is any input parameter that is not included in the control parameters, each value of such an input parameter will not be regarded as a different instruction in step B<highlight><bold>2</bold></highlight>, and operation is analyzed with the input parameter being set to a variable value. Moreover, a variable value is assigned to the state variables other than the input signals having a fixed value and the control variables in order to collectively select a plurality of states in step B<highlight><bold>3</bold></highlight>. Regarding the state variables or parameters that are given by variable values, the variable values are used in each step of the operation analysis process B<highlight><bold>4</bold></highlight>. As a result, a parameter value of the output instruction extracted in step C<highlight><bold>8</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and a register value updated in step C<highlight><bold>6</bold></highlight> may be given by an expression represented with one or plurality of variables, not by a constant. It should be noted that, since the control parameters and the initial control variables are not given by variable values, the control output signals and the control variables will not be given by a variable value. Accordingly, no variable value will be involved in determining whether an output instruction is generated or not in step C<highlight><bold>8</bold></highlight> and in determining whether the logic circuit block has reached the end state or not in step C<highlight><bold>5</bold></highlight>. This ensures that the determination will always be conducted successfully. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Hereinafter, the process of producing the operation model A<highlight><bold>3</bold></highlight> by the description converting means <highlight><bold>1</bold></highlight> will be described specifically. The description converting means <highlight><bold>1</bold></highlight> herein produces the operation model A<highlight><bold>3</bold></highlight> by using the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> In step B<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the description converting means <highlight><bold>1</bold></highlight> sets operation start state and operation end states. The description converting means <highlight><bold>1</bold></highlight> first selects control variables according to the flowchart of <cross-reference target="DRAWINGS">FIG. 36</cross-reference>. In step G<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> extract output signals oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> (i.e., signals associated with generation of an output instruction) from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> as control output signals, and then selects state variables oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> contributing these signals as control variables. Since the control variables oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> have not been selected in step G<highlight><bold>2</bold></highlight>, the routine proceeds to step G<highlight><bold>3</bold></highlight> (YES in step G<highlight><bold>2</bold></highlight>). In step G<highlight><bold>3</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> first selects the control variable oe<highlight><bold>1</bold></highlight>. The description converting means <highlight><bold>1</bold></highlight> then analyses the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Since the control variable oe<highlight><bold>1</bold></highlight> is updated at every clock (tenth line in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>), variables sel, ff_in contributing to this updating are added to the control variables (step G<highlight><bold>4</bold></highlight>). </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> The routine then returns to step G<highlight><bold>2</bold></highlight>, and steps G<highlight><bold>2</bold></highlight> to G<highlight><bold>4</bold></highlight> are repeatedly conducted until every control variable is selected (NO in step G<highlight><bold>2</bold></highlight>). As a result, state variables oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight>, sel, ff_in are selected as control variables. Note that a state variable dout is not associated with generation of an output instruction. Therefore, the state variable dout is not selected as a control variable. Moreover, an input parameter din does not contribute to the value of the control variables. Therefore, the input parameter din is not selected as a control parameter. As shown in the first embodiment, after the steady states are obtained in step B<highlight><bold>1</bold></highlight>, one of the steady states, a state having the selected four control variables being set to zero, is selected. Accordingly, in step B<highlight><bold>1</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> sets this state as an operation start state and an operation end state. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> In step B<highlight><bold>2</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one instruction from the input/output instruction information A<highlight><bold>2</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. In the illustrated example, the only input instruction in is selected. Of the arguments of the selected input instruction in, the input parameter din is not a control parameter, whereas the input parameter sel is a control parameter. Therefore, the input parameter din is set to a variable value in_din, and each value of the input parameter sel is regarded as a different instruction. In this example, &ldquo;1&rdquo; is selected as a value of the control parameter sel. In step B<highlight><bold>3</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> selects one of the operation start states obtained in step B<highlight><bold>1</bold></highlight>. Since there is only one operation start state, the description converting means <highlight><bold>1</bold></highlight> selects this state as a first state. The state variable dout is set to a variable value dout. In step B<highlight><bold>4</bold></highlight>, the description converting means <highlight><bold>1</bold></highlight> analyzes operation of the RT-level model A<highlight><bold>1</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> for the input instruction in. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> Hereinafter, the operation analysis process B<highlight><bold>4</bold></highlight> will be described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference> and FIGS. <highlight><bold>37</bold></highlight> to <highlight><bold>40</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 37</cross-reference> shows input signals produced during the process, <cross-reference target="DRAWINGS">FIG. 38</cross-reference> shows output signals, and <cross-reference target="DRAWINGS">FIG. 39</cross-reference> shows internal register values. First, an input signal is produced using both a change in input signal caused by the input instruction in selected in step B<highlight><bold>2</bold></highlight> (i.e., the input instruction to be analyzed) and an input signal value in the operation start state (step C<highlight><bold>1</bold></highlight>). In <cross-reference target="DRAWINGS">FIG. 37, 37</cross-reference><highlight><italic>a </italic></highlight>denotes an input signal value before application of the input instruction in, <highlight><bold>37</bold></highlight><highlight><italic>b </italic></highlight>denotes an input signal value at the first clock upon application of the input instruction in, and <highlight><bold>37</bold></highlight><highlight><italic>c </italic></highlight>denotes an input signal value at the second clock. Since the argument of the input signal din is given by a variable value, the input signal din has a variable value in_din at the first clock (input signal <highlight><bold>37</bold></highlight><highlight><italic>b</italic></highlight>). </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> Thereafter, an original output signal value <highlight><bold>38</bold></highlight><highlight><italic>a </italic></highlight>corresponding to the input signal value <highlight><bold>37</bold></highlight><highlight><italic>a </italic></highlight>is recorded (step C<highlight><bold>2</bold></highlight>). Since a state variable corresponding to the register dout is given by a variable value dout, the output signal dout has a variable value dout. The input signal value is then updated to the input signal value <highlight><bold>37</bold></highlight><highlight><italic>b </italic></highlight>(step C<highlight><bold>3</bold></highlight>), and the output signal value <highlight><bold>38</bold></highlight><highlight><italic>b </italic></highlight>at the first clock is recorded (step C<highlight><bold>4</bold></highlight>). In step C<highlight><bold>5</bold></highlight>, the current input signal value and the current state are examined. Since the change in input signal caused by the input instruction in is not completed at the first clock, it is determined that the logic circuit block has not reached the end state, and the routine proceeds to step C<highlight><bold>6</bold></highlight> (NO in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>6</bold></highlight>, operation of one clock is executed in order to change the state. More specifically, in step C<highlight><bold>6</bold></highlight>, the internal register value is changed to the internal register value <highlight><bold>39</bold></highlight><highlight><italic>c. </italic></highlight>The routine then returns to step C<highlight><bold>3</bold></highlight>. It should be noted that the internal register values <highlight><bold>39</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 39</cross-reference> are register values in the operation start state. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> Thereafter, steps C<highlight><bold>3</bold></highlight> to C<highlight><bold>6</bold></highlight> are repeatedly conducted until the logic circuit block reaches the end state in step C<highlight><bold>5</bold></highlight>. In step C<highlight><bold>5</bold></highlight> of the fourth clock, the change in signal caused by the input instruction in has been completed. Moreover, the control variables in the input signal value <highlight><bold>37</bold></highlight><highlight><italic>e </italic></highlight>and the register value <highlight><bold>39</bold></highlight><highlight><italic>e </italic></highlight>match the operation end state as a second state. Therefore, it is determined that the logic circuit block has reached the end state, and the routine proceeds to step C<highlight><bold>7</bold></highlight> (YES in step C<highlight><bold>5</bold></highlight>). In step C<highlight><bold>7</bold></highlight>, the operation end state of the logic circuit block is extracted. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Finally, in step C<highlight><bold>8</bold></highlight>, the output signal sequence of <cross-reference target="DRAWINGS">FIG. 38</cross-reference> recorded in steps C<highlight><bold>2</bold></highlight>, C<highlight><bold>4</bold></highlight> is compared with an output signal pattern of the output instructions defined by the input/output instruction information A<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. In <cross-reference target="DRAWINGS">FIG. 38</cross-reference>, the output signal oe<highlight><bold>2</bold></highlight> is set to &ldquo;1&rdquo; at the third clock (output signal value <highlight><bold>38</bold></highlight><highlight><italic>d</italic></highlight>). This corresponds to an output instruction oe<highlight><bold>2</bold></highlight>. Therefore, the output instruction oe<highlight><bold>2</bold></highlight> is extracted in step C<highlight><bold>8</bold></highlight>. Moreover, the output instruction oe<highlight><bold>2</bold></highlight> uses the output signal dout as an argument, and the output signal dout has timing &ldquo;1&rdquo;. As can be seen from the output signal value <highlight><bold>38</bold></highlight><highlight><italic>e, </italic></highlight>the output signal dout has a variable value in_din at the fourth clock (i.e., one clock after the output signal oe<highlight><bold>2</bold></highlight> is set to &ldquo;1&rdquo;). Therefore, the variable value in_din is used as an argument of the output instruction oe<highlight><bold>2</bold></highlight>. The extraction result in this example corresponds to the extraction result <highlight><bold>40</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 40</cross-reference> described below. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> The operation analysis result in <cross-reference target="DRAWINGS">FIG. 40</cross-reference> is thus obtained by the operation analysis process B<highlight><bold>4</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 40</cross-reference> shows the analysis result for the input instruction in. More specifically, <cross-reference target="DRAWINGS">FIG. 40</cross-reference> shows the input instruction including an argument, the output signal dout in the operation start state, the output signal dout after execution of the instruction, and the extracted output instruction sequence. Note that the input signals in, sel, din and the register values ff_in, oe<highlight><bold>1</bold></highlight>, oe<highlight><bold>2</bold></highlight> are omitted because each has the same value in every operation start state and every operation end state. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> After the operation analysis process B<highlight><bold>4</bold></highlight> is completed, the routine proceeds to step B<highlight><bold>5</bold></highlight>. Since there is only one operation start state and only one input instruction in the present embodiment, the routine then proceeds to step B<highlight><bold>6</bold></highlight> and step B<highlight><bold>7</bold></highlight>. Finally, in step B<highlight><bold>7</bold></highlight>, the operation model A<highlight><bold>3</bold></highlight> is produced based on the operation analysis result of <cross-reference target="DRAWINGS">FIG. 40</cross-reference>. It is herein assumed that the operation model A<highlight><bold>3</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is produced as in the second embodiment. Note that, although the same operation model A<highlight><bold>3</bold></highlight> as the second embodiment is produced in the present embodiment, the steady states do not necessarily have the same values after execution of the instruction. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> As has been described above, when a logic circuit model described at RT level is converted into a high abstraction-level operation model A<highlight><bold>3</bold></highlight> according to the method of the present embodiment, state variables that affect an output signal used to recognize an output instruction are selected as control variables. Moreover, state variables that affect a change in control variable are also added to the control variables. In the step of setting the operation start states and operation end states, every state where all or at least one of the control variables has the same value is regarded as a single state. This enables reduction in the number of operation start states and operation end states, and thus enables reduction in the amount of operation required to select an operation start state and the like and to analyze operation of the RT-level model A<highlight><bold>1</bold></highlight> of the logic circuit block. </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> In the method of the present embodiment, the RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block having neither response signal nor return signal is converted into the operation model A<highlight><bold>3</bold></highlight>. However, combination of the method for setting operation start states and operation end states in the present embodiment and the operation analysis method of the third or fourth embodiment would allow the number of operation start states and operation end states to be reduced even when the RT-level model A<highlight><bold>1</bold></highlight> of a logic circuit block having a return signal and/or a response signal is converted into the operation model A<highlight><bold>3</bold></highlight>. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for converting an RT (Register Transfer)-level model of a logic circuit block into a high abstraction-level operation model, comprising the steps of: 
<claim-text>setting one or more states of the logic circuit block as operation start states and operation end states by using input/output instruction information that represents a relation between an input/output instruction of the logic circuit block and an input/output signal corresponding to the input/output instruction; and </claim-text>
<claim-text>analyzing operation of the logic circuit block, the operation analyzing step being conducted by selecting one input instruction to be analyzed from those included in the input/output instruction information, applying an input signal corresponding to the selected input instruction to the RT-level model that is in a first state selected from the operation start states, and analyzing the RT-level model and extracting an operation of the logic circuit block by varying the input signal, until the RT-level model reaches a second state of the operation end states, wherein 
<claim-text>the operation analyzing step is repeatedly conducted for at least one or all combinations of the operation start state and the input instruction included in the input/output instruction information, and the operation model of the logic circuit block is produced based on the extracted operations. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the operation analyzing step includes the steps of 
<claim-text>producing a time series of one or more input signals corresponding to the instruction to be analyzed, </claim-text>
<claim-text>producing a time series of an output signal by executing the RT-level model using the time series of the input signals until the RT-level model reaches the second state, </claim-text>
<claim-text>extracting a state where the RT-level model reaches the second state as an operation of the logic circuit block, and </claim-text>
<claim-text>comparing the time series of the output signal with the relation between an output instruction and an output signal corresponding thereto as defined in the input/output instruction information, and extracting the output instruction from those included in the input/output instruction information as an operation of the logic circuit block. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein 
<claim-text>the operation analyzing step includes the steps of 
<claim-text>producing at every clock one or more input signals corresponding to an input instruction included in the instruction to be analyzed, </claim-text>
<claim-text>executing the RT-level model at every clock using the input signals, and producing an output signal at every clock, </claim-text>
<claim-text>extracting at every clock a state where the RT-level model reaches the second state as an operation of the logic circuit block, and </claim-text>
<claim-text>comparing the output signal with the relation between an output instruction and an output signal corresponding thereto as defined in the input/output instruction infromation, and extracting at every clock the output instruction from those included in the input/output instruction information as an operation of the logic circuit block. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the input/output instruction information includes as an output instruction an output instruction with a response signal, the output instruction with the response signal being an instruction having both an output signal and an input signal associated therewith as a response signal thereof, and </claim-text>
<claim-text>in the operation analyzing step, when the output instruction with the response signal is extracted at one clock, operation of the RT-level model at a clock later than the one clock is analyzed by using the response signal produced by varying a value of the response signal corresponding to the output instruction with the response signal at a timing designated by the input/output instruction information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the input/output instruction information includes as an input instruction an input instruction with a response signal, the input instruction with the response signal being an instruction having both an input signal and an output signal associated therewith as a response signal thereof, and </claim-text>
<claim-text>in the operation analyzing step, when the input instruction with the response signal is selected at one clock as the instruction to be analyzed, operation of the RT-level model at a clock later than the one clock is analyzed by using the response signal produced based on a value of the response signal corresponding to the input instruction with the response signal, which varies at a timing designated by the input/output instruction information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the input/output instruction information includes as an output instruction an output instruction with a return value, the output instruction with the return value being an instruction having an input signal associated therewith as a return value, and </claim-text>
<claim-text>in the operation analyzing step, when operation of the RT-level model varies according to a value of the input signal serving as the return value of the output instruction, operation of the RT-level model is analyzed for every possible combination of values of the return value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein 
<claim-text>the input/output instruction information includes as an input instruction an input instruction with a return value, the input instruction with the return value being an instruction having an output signal associated therewith as a return value, and </claim-text>
<claim-text>in the operation analyzing step, a value of the output signal at a clock designated by the input/output instruction information is extracted as the return value of the input instruction, and operation of the RT-level model is analyzed based on the extracted value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein, in the state setting step, a state where a state of the logic circuit block does not change in the absence of an input instruction or a state where a finite number of states of the logic circuit block are repeated in the absence of an input instruction are set as the operation start states and the operation end states. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein, of state variables specifying a state of the logic circuit block, any state variable that affects an output signal used to recognize an output instruction included in the input/output instruction information is selected as a control variable, and one or more states specified by the selected control variable are set as the operation start states and the operation end states in the state setting step. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein, of the one or more states designated by the control variable, states where all or at least one of the control variables have the same value are regarded as a single state when the operation start states and the operation end states are set in the state setting step. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein, in the state setting step, any state variable that contributes to updating of the control variable in one-clock operation of the RT-level model is also selected as the control variable.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005393A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005393A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005393A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005393A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005393A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005393A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005393A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005393A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005393A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005393A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005393A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005393A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005393A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005393A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005393A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005393A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005393A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005393A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005393A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005393A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005393A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005393A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005393A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005393A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030005393A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
