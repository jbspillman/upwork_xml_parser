<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005241A1-20030102-D00000.TIF SYSTEM "US20030005241A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00001.TIF SYSTEM "US20030005241A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00002.TIF SYSTEM "US20030005241A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00003.TIF SYSTEM "US20030005241A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00004.TIF SYSTEM "US20030005241A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00005.TIF SYSTEM "US20030005241A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00006.TIF SYSTEM "US20030005241A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00007.TIF SYSTEM "US20030005241A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00008.TIF SYSTEM "US20030005241A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00009.TIF SYSTEM "US20030005241A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00010.TIF SYSTEM "US20030005241A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00011.TIF SYSTEM "US20030005241A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00012.TIF SYSTEM "US20030005241A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00013.TIF SYSTEM "US20030005241A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00014.TIF SYSTEM "US20030005241A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00015.TIF SYSTEM "US20030005241A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00016.TIF SYSTEM "US20030005241A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00017.TIF SYSTEM "US20030005241A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00018.TIF SYSTEM "US20030005241A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00019.TIF SYSTEM "US20030005241A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00020.TIF SYSTEM "US20030005241A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00021.TIF SYSTEM "US20030005241A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00022.TIF SYSTEM "US20030005241A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00023.TIF SYSTEM "US20030005241A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00024.TIF SYSTEM "US20030005241A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00025.TIF SYSTEM "US20030005241A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00026.TIF SYSTEM "US20030005241A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00027.TIF SYSTEM "US20030005241A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030005241A1-20030102-D00028.TIF SYSTEM "US20030005241A1-20030102-D00028.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005241</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10180876</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020626</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-199080</doc-number>
</priority-application-number>
<filing-date>20010629</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>156000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>158000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>163000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Write protect method</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Tomoo</given-name>
<family-name>Ueno</family-name>
</name>
<residence>
<residence-non-us>
<city>Kanagawa</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Darryl G. Walker</name-1>
<name-2>WALKER &amp; SAKO, LLP</name-2>
<address>
<address-1>Suite 235</address-1>
<address-2>300 South First Street</address-2>
<city>San Jose</city>
<state>CA</state>
<postalcode>95113</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A write protect system (<highlight><bold>100</bold></highlight>) including a write protect circuit (<highlight><bold>10</bold></highlight>) that may provide write protection for a protected register (<highlight><bold>1</bold></highlight>) has been disclosed. Write protect circuit (<highlight><bold>10</bold></highlight>) may detect whether or not a write sequence (<highlight><bold>600</bold></highlight>) has been followed. Write sequence (<highlight><bold>600</bold></highlight>) may include first (<highlight><bold>901</bold></highlight>), second (<highlight><bold>902</bold></highlight>), and third (<highlight><bold>903</bold></highlight>) commands. First command (<highlight><bold>901</bold></highlight>) may include a write of data to a protected register (<highlight><bold>1</bold></highlight>). Second command (<highlight><bold>902</bold></highlight>) may include a write of inverted data to a protected register (<highlight><bold>1</bold></highlight>). A third command (<highlight><bold>903</bold></highlight>) may include a write of data to a protected register (<highlight><bold>1</bold></highlight>). Write protect circuit (<highlight><bold>10</bold></highlight>) may only allow a write to a protected register (<highlight><bold>1</bold></highlight>) if write sequence (<highlight><bold>600</bold></highlight>) has been followed. In this way, a protected register (<highlight><bold>1</bold></highlight>) may be protected against erroneous writes and a system (<highlight><bold>100</bold></highlight>) including a CPU (<highlight><bold>6</bold></highlight>) may have improved reliability. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to a write protect method and more particularly to a write protect method that may prevent an erroneous write to a microcomputer control register or the like. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Because of the broad use of microcomputers in systems, it can be desirable to prevent an erroneous write to control registers. This is particularly important if the control register may have a significant influence on the operation of the system. For example, if a boot sector in a flash memory is inappropriately altered, a system may not properly boot even if reset. Thus, it can be extremely important to prevent an erroneous write to occur in a control register, or the like, which is involved in a self-write function of a flash memory. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The above-mentioned need is addressed by Japanese Patent Application Laid Open No. Hei 08-235073 (JPA &apos;073). Referring to <cross-reference target="DRAWINGS">FIG. 28, a</cross-reference> block diagram of a conventional write protect circuit as disclosed in JPA &apos;073 is set forth. JPA &apos;073 provides a protection controlling register in a write protect circuit <highlight><bold>13</bold></highlight> that retains information for determining whether to prohibit writing of data to a control register <highlight><bold>1</bold></highlight> to be protected. When a write operation occurs, a control register (<highlight><bold>1</bold></highlight> to n) to which data is to be written into is specified. If the control register (<highlight><bold>1</bold></highlight> to n) to which data is to be written into is control register <highlight><bold>1</bold></highlight> (a protected control register), a write signal wr_reg is controlled in accordance with information in protection control register in write protect circuit <highlight><bold>13</bold></highlight>. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> However, conventional write protect circuit of <cross-reference target="DRAWINGS">FIG. 28</cross-reference> does not include a function to confirm whether or not the write data has an error. As a result, a problem can occur if data on a data bus <highlight><bold>8</bold></highlight> has been unexpectedly corrupted. In this case, the write cannot be invalidated and corrupted data can be written into the protected control register <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In view of the above discussion, it would be desirable to provide a write protection circuit that may prevent erroneous data from being written into a predetermined register, or the like and method therefore. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> According to the present embodiments, a write protect system may include a write protect circuit that may provide write protection for a protected register. A write protect circuit may detect whether or not a write sequence has been followed. A write sequence may include a first command, a second command, and a third command. A first command may include a write of data to a protected register. A second command may include a write of inverted data to a protected register. A third command may include a write of data to a protected register. Write protect circuit may only allow a write to a protected register if a write sequence has been followed. In this way, a protected register may be protected against erroneous writes and a system including a CPU (central processing unit) may have improved reliability. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> According to one aspect of the embodiments, a write protect method may prevent an erroneous write to a predetermined register. The write protect method may include the steps of determining whether or not a write operation for writing data to the predetermined register was performed according to a predetermined write sequence. The predetermined write sequence may include at least a first and second write command. The method may also control writing of the data to the predetermined register so that the writing of data is only performed when it is determined in the determining step that the write operation for writing data to the predetermined register was performed according to the predetermined write sequence. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> According to another aspect of the embodiments, the step of determining may include verifying the data by performing a data comparison. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> According to another aspect of the embodiments, the first write command may include providing the data on a data bus and providing a first address corresponding to the predetermined register. The second write command may include providing inverse data on the data bus and providing the first address corresponding to the predetermined register. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> According to another aspect of the embodiments, a predetermined write sequence may include a third write command. A third write command may include providing the data on the data bus and providing the first address corresponding to the predetermined register. A predetermined write sequence may be executed in the order of first write command, second write command, and third write command. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to another aspect of the embodiments, a predetermined write sequence may include a third write command. A third write command may include providing a predetermined value on the data bus and providing a second address. A predetermined write sequence may be executed in the order of third write command, first write command, and second write command. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> According to another aspect of the embodiments, the write protect method may further include the step of providing an error signal to a processing unit when it is determined that the write operation for writing data to the predetermined register was not performed according to the predetermined write sequence. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> According to another aspect of the embodiments, a step of determining whether or not a write operation has been performed may be executed by a computing device in accordance with a write protect program. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to another aspect of the embodiments, a write protect system for preventing an erroneous write to a first register may include a write protect circuit. A write protect circuit may determine whether or not a write operation for writing data to the first register was performed according to a predetermined write sequence. The predetermined write sequence may include a first command and a second command. The write protect circuit may control the writing of the data to the first register so that the writing of data may be only performed when it is determined that the write operation for writing data to the first register was performed according to the predetermined write sequence. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may be coupled to receive the data from a data bus coupled to a processor. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to another aspect of the embodiments, the write protect circuit is coupled to receive the data in the first command and coupled to receive different data in the second command. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> According to another aspect of the embodiments, the predetermined write sequence may include a third command. The write protect circuit may be coupled to receive the data in the third command. The predetermined write sequence may be executed in the order of first command, second command, and third command. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may be coupled to receive at least one register select signal. The at least one register select signal may have a first register select value in the first and second commands. The predetermined write sequence may include a third command. The write protect circuit may be coupled to receive a predetermined data value in the third command and at the least one register select signal may have a command register select value. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may reset to detect the first command in the predetermined sequence when it is determined that the predetermined sequence has not been followed. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may receive the data in the first command and may receive inverse data in the second command. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> According to another aspect of the embodiments, a write protect system may prevent an erroneous write to a first storage circuit. A write protect system may include a write protect circuit. A write protect circuit may determine whether or not a write operation for writing data to the first storage circuit was performed according to a predetermined write sequence. The predetermined write sequence may include at least a first command and a second command. The write protect circuit may control the writing of the data to the first storage circuit so that the writing of data may only be performed when it is determined that the write operation for writing data to the first storage circuit was performed according to the predetermined write sequence. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may include a data latch circuit. The data latch circuit may receive the data and provide latched data in response to the first command. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may include a comparator circuit. The comparator circuit may receive the latched data and second command data and provide a comparison result. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> According to another aspect of the embodiments, a comparison result may include a match signal indicating a comparison between the latched data and the second command data. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may include a state circuit. The state circuit may provide a write sequence state. The write sequence state may indicate a progression of the write sequence. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may include a sequence error detector. The sequence error detector may receive the write sequence state and provide a sequence error signal. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> According to another aspect of the embodiments, the write protect circuit may include a first storage circuit write signal generator. The first storage circuit write signal generator may receive the write sequence state and provide a first storage circuit write signal.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block schematic diagram of a system including a write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a circuit schematic diagram of a write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a state diagram illustrating a status progression of a count signal according to an embodiment. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a circuit schematic diagram of a step counter according to an embodiment. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a circuit schematic diagram of a sequence error detector according to an embodiment. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flow chart illustrating a write sequence according to an embodiment. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a timing diagram of a write to a protected register using a write sequence according to an embodiment. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a timing diagram illustrating a case where an erroneous write operation to a register other than a protected register occurs after step 1 according to an embodiment. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a timing diagram illustrating a case where an erroneous write operation occurs after step 1 with a value other than inverted data according to an embodiment. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a timing diagram illustrating a case where an erroneous write operation to a register other than protected register occurs after step 2 according to an embodiment. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a timing diagram illustrating a case where an erroneous write operation occurs after step 2 with a value other than data according to an embodiment. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block schematic diagram of a system including a write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a circuit schematic diagram of a write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a circuit schematic diagram of an object register detector according to an embodiment. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a state diagram illustrating a status progression of a count signal according to an embodiment. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a circuit schematic diagram of a step counter according to an embodiment. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a timing diagram of a write to a protected register using a write sequence according to an embodiment. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a timing diagram illustrating a case where an erroneous write operation to a register other than the object protected register occurs after step 2 according to an embodiment. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> is a block schematic diagram of a system including a write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a circuit schematic diagram of write protect circuit according to an embodiment. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21</cross-reference> is a state diagram illustrating a status progression of a count signal according to an embodiment. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 22</cross-reference> is a circuit schematic diagram of a step counter according to an embodiment. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> is a circuit schematic diagram of a sequence error detector according to an embodiment. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 24</cross-reference> is a flow chart illustrating a write sequence according to an embodiment. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 25</cross-reference> is a timing diagram of a write to a protected register using a write sequence according to an embodiment. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 26</cross-reference> is a timing diagram illustrating a case where an erroneous write operation to protected register occurs without a preceding write operation writing 55AAh to a command register according to an embodiment. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 27</cross-reference> is a timing diagram illustrating a case where an erroneous write operation may occur after step 3 with a value other than data according to an embodiment. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 28</cross-reference> is a block diagram of a conventional write protect circuit.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE EMBODIMENTS </heading>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The present invention may prevent a write error to a control register. For example, a write protection circuit may be provided for a control register that may significantly influence operation of a system. A write protection circuit may only permit a write operation when a specific sequence is performed. If a specific sequence is not performed, a write operation may be invalidated. In such a sequence, the validity (correctness) of write data may be confirmed. The validity may be confirmed before a write control signal is applied to the control register. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Various embodiments of the present invention will now be described in detail with reference to a number of drawings. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> block schematic diagram of a system including a write protect circuit is set forth according to an embodiment and given the general reference character <highlight><bold>100</bold></highlight>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> System <highlight><bold>100</bold></highlight> may include a register <highlight><bold>1</bold></highlight>. Register <highlight><bold>1</bold></highlight> may have a significant influence on the operation of system <highlight><bold>100</bold></highlight>. Thus, a write protect circuit <highlight><bold>10</bold></highlight> may be included. Write protect circuit <highlight><bold>10</bold></highlight> may only permit data to be written into register <highlight><bold>1</bold></highlight> when a write operation is performed according to a specific sequence. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> flow chart illustrating a write sequence according to an embodiment is set forth and given the general reference character <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Write sequence <highlight><bold>600</bold></highlight> may include 3 steps illustrated as step 1 <highlight><bold>901</bold></highlight> through step 3 <highlight><bold>903</bold></highlight>. Write protect circuit <highlight><bold>10</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) may only permit data to be written into register <highlight><bold>1</bold></highlight> when a write operation specifically follows write sequence <highlight><bold>600</bold></highlight>. In a case where write sequence <highlight><bold>600</bold></highlight> is not followed, the write operation may become invalid. For example, if another write operation is performed between step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> or between step 2 <highlight><bold>902</bold></highlight> and step 3 <highlight><bold>903</bold></highlight>, the writing may become invalid. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> In this way, for example in a system <highlight><bold>100</bold></highlight> (such as a computing device, for example) as illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, even when an erroneous write to register <highlight><bold>1</bold></highlight> occurs due to a system abnormality, for example, runaway by a CPU (central processing unit) <highlight><bold>6</bold></highlight> causing erroneous data on a data bus <highlight><bold>8</bold></highlight>, the write operation may be invalidated unless performed in accordance with write sequence <highlight><bold>600</bold></highlight>. Thus, an erroneous write may be prevented. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> A detailed explanation will now be made of a system <highlight><bold>100</bold></highlight> which may include a write protection circuit <highlight><bold>10</bold></highlight>. System <highlight><bold>100</bold></highlight> may include registers (<highlight><bold>1</bold></highlight> to n), a CPU <highlight><bold>6</bold></highlight>, a program storage memory <highlight><bold>7</bold></highlight>, a data bus <highlight><bold>8</bold></highlight>, an address decoder <highlight><bold>9</bold></highlight>, and a write protect circuit <highlight><bold>10</bold></highlight>. CPU <highlight><bold>6</bold></highlight> may provide control for system <highlight><bold>100</bold></highlight>. Program storage memory <highlight><bold>7</bold></highlight> may store a program, for example. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> CPU <highlight><bold>6</bold></highlight> may read (via data bus <highlight><bold>8</bold></highlight>) and execute a predetermined control program stored in program storage memory <highlight><bold>7</bold></highlight>. CPU <highlight><bold>6</bold></highlight> may provide a write signal wr to write protect circuit <highlight><bold>10</bold></highlight> and registers (<highlight><bold>2</bold></highlight> to n, where n may be a natural number corresponding to the total number of registers). Write signal wr may be a control signal instructing registers (<highlight><bold>2</bold></highlight> to n) to receive data from data bus <highlight><bold>8</bold></highlight>. CPU <highlight><bold>6</bold></highlight> may provide a read signal rd to registers (<highlight><bold>1</bold></highlight> to n). Read signal rd may be a control signal instructing registers (<highlight><bold>1</bold></highlight> to n) to provide data to data bus <highlight><bold>8</bold></highlight>. CPU <highlight><bold>6</bold></highlight> may provide and/or receive data to/from data bus <highlight><bold>8</bold></highlight>. Program storage memory <highlight><bold>7</bold></highlight> may store a predetermined control program and may supply various data to data bus <highlight><bold>8</bold></highlight>. A predetermined control program stored in program storage memory <highlight><bold>7</bold></highlight> may provide control instructions, for example, to CPU <highlight><bold>6</bold></highlight>. Address decoder <highlight><bold>9</bold></highlight> may receive an address ADDRESS from CPU <highlight><bold>6</bold></highlight> and may provide selection signals (sel_reg<highlight><bold>1</bold></highlight> to sel_regn) to respective registers (<highlight><bold>1</bold></highlight> to n). Selection signals (sel_reg<highlight><bold>1</bold></highlight> to sel_regn) may be selectively activated in accordance with address ADDRESS. Selection signal sel_reg<highlight><bold>1</bold></highlight> may be provided to write protect circuit <highlight><bold>10</bold></highlight>. Write protect circuit may provide a write signal wr_preg and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to register <highlight><bold>1</bold></highlight>. Data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be provided to registers (<highlight><bold>2</bold></highlight> to n) through data bus <highlight><bold>8</bold></highlight>. Registers (<highlight><bold>1</bold></highlight> to n) may provide data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> in a read from register operation. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In the present embodiment, data bus <highlight><bold>8</bold></highlight> may have a 16-bit width and address ADDRESS may be applied to a separate bus, however, the present invention may be applicable to other bus sizes and constructions. Register <highlight><bold>1</bold></highlight> may be a register that can be protected from undesired/erroneous writes by write protect circuit <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> As illustrated in the embodiment of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in a write operation, data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be provided directly to data inputs din of registers (<highlight><bold>2</bold></highlight> to n) via data bus <highlight><bold>8</bold></highlight> without write protection. Further, write signal wr may be provided directly to a write input terminal w of registers (<highlight><bold>2</bold></highlight> to n) from CPU <highlight><bold>6</bold></highlight>. However, in a write operation, data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may not be applied directly to a data input din of register <highlight><bold>1</bold></highlight>. Instead, data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be applied to write protect circuit <highlight><bold>10</bold></highlight>. Likewise, in a write operation, write signal wr may not be applied directly as a control signal to a write input terminal w of register <highlight><bold>1</bold></highlight>. Instead write signal wr may be applied to write protect circuit <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> When a write command for any of registers (<highlight><bold>1</bold></highlight> through n) is executed, address ADDRESS may be provided from CPU to address decoder <highlight><bold>9</bold></highlight>. Address decoder <highlight><bold>9</bold></highlight> may activate a select signal (sel_reg<highlight><bold>1</bold></highlight> to sel_regn) corresponding to the address ADDRESS. A select signal (sel_reg<highlight><bold>1</bold></highlight> to sel_regn) may be received at a select input terminal cs of a respective register (<highlight><bold>1</bold></highlight> to n). An active select signal (sel_reg<highlight><bold>1</bold></highlight> to sel_regn) may have a logic high level. In this way, a predetermined register (<highlight><bold>1</bold></highlight> to n) may be selected in accordance with an address ADDRESS. For example, in a case where data is to be written to register <highlight><bold>2</bold></highlight>, select signal sel_reg<highlight><bold>2</bold></highlight> may become active (logic high) and data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be written from data bus <highlight><bold>8</bold></highlight> into register <highlight><bold>2</bold></highlight> when write signal wr pulses high. In contrast, when data is to be written to register <highlight><bold>1</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may become active (logic high). However, this may only complete step 1 <highlight><bold>901</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>) of a write operation to protected register <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> As explained above, a predetermined value may be directly written into registers (<highlight><bold>2</bold></highlight> through n), which are not write protected by applying a write signal wr from CPU <highlight><bold>6</bold></highlight>. However, because a write signal wr_preg applied to a write terminal w of register <highlight><bold>1</bold></highlight> is controlled by write protect circuit <highlight><bold>10</bold></highlight>, register <highlight><bold>1</bold></highlight> may not be written to unless a write operation following a specific sequence <highlight><bold>600</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>) is executed. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Write protect circuit <highlight><bold>10</bold></highlight> may provide a write control such that only when a write is executed in a specific sequence <highlight><bold>600</bold></highlight> will data be allowed to be written into register <highlight><bold>1</bold></highlight> (a protected register). For example, writing to a protected register may only be valid when performed according to the 3 steps (<highlight><bold>901</bold></highlight>, <highlight><bold>902</bold></highlight>, and <highlight><bold>903</bold></highlight>) as illustrated in sequence <highlight><bold>600</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Step 1 <highlight><bold>901</bold></highlight> may include executing a write command with data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; set as data (write data) to be written into register <highlight><bold>1</bold></highlight>. Step 2 <highlight><bold>902</bold></highlight> may include executing a write command with data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; set as inverse data (inverse write data) to be written into register <highlight><bold>1</bold></highlight>. Step 3 <highlight><bold>903</bold></highlight> may include executing a write command with data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; set as data (write data) to be written into register <highlight><bold>1</bold></highlight>. Upon the detection of steps the 3 steps (<highlight><bold>901</bold></highlight>, <highlight><bold>902</bold></highlight>, and <highlight><bold>903</bold></highlight>) executed in succession, write protect circuit <highlight><bold>10</bold></highlight> may provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and a write control signal wr_preg to allow write data to be written into register <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> At the time of the execution of step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight>, the writing may still be deemed invalid and, as such, write protect circuit <highlight><bold>10</bold></highlight> may not output write signal (write pulse) wr_preg. Write signal (write pulse) wr_preg may only be output when a write operation includes the 3 steps (<highlight><bold>901</bold></highlight>, <highlight><bold>902</bold></highlight>, and <highlight><bold>903</bold></highlight>) executed in order. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In a case where step 1 <highlight><bold>901</bold></highlight> through step 3 <highlight><bold>903</bold></highlight> are not sequentially executed (for example another write operation is performed between step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> or between step 2 <highlight><bold>902</bold></highlight> and step 3 <highlight><bold>903</bold></highlight>), a sequence error may be protected and the write may become invalid. Once a write has become invalid, an attempted re-write may not be successful unless sequence <highlight><bold>600</bold></highlight> is completed beginning again from step 1 <highlight><bold>901</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> circuit schematic diagram of write protect circuit <highlight><bold>10</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Write protect circuit <highlight><bold>10</bold></highlight> may include a write data setting buffer <highlight><bold>20</bold></highlight>, a comparator circuit <highlight><bold>30</bold></highlight>, a step counter <highlight><bold>50</bold></highlight>, a sequence error detector <highlight><bold>60</bold></highlight>, a protect write signal generator <highlight><bold>70</bold></highlight>, and an AND element <highlight><bold>80</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Write data setting buffer <highlight><bold>20</bold></highlight> may receive data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and a signal wr_db and may provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Write data setting buffer <highlight><bold>20</bold></highlight> may latch a value of data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; received at step 1 <highlight><bold>901</bold></highlight> to provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Write data setting buffer <highlight><bold>20</bold></highlight> may be a 16-bit buffer. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Comparator circuit <highlight><bold>30</bold></highlight> may receive data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may provide match signals (db_eq and dbz_eq). Comparator circuit <highlight><bold>30</bold></highlight> may perform data comparison. Comparator circuit <highlight><bold>30</bold></highlight> may include comparing units (<highlight><bold>302</bold></highlight> and <highlight><bold>303</bold></highlight>) and an inverter <highlight><bold>301</bold></highlight>. Comparing unit <highlight><bold>302</bold></highlight> may compare a value of data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; from bus <highlight><bold>8</bold></highlight> with latched data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and output a match signal db_eq. Comparing unit <highlight><bold>303</bold></highlight> may receive inverted latched data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; through inverter <highlight><bold>301</bold></highlight>. Comparing unit <highlight><bold>303</bold></highlight> may compare a value of data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; from bus <highlight><bold>8</bold></highlight> with inverted latched data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and output a match signal dbz_eq. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Step counter <highlight><bold>50</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, write signal wr and match signal dbz_eq and may provide a count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be a 2-bit count signal including count bits (stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;). A value of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may indicate a step of sequence <highlight><bold>600</bold></highlight> being carried out. Count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b (00b indicates count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;&equals;0 and count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;&equals;0, with b indicating binary), may indicate sequence <highlight><bold>600</bold></highlight> is not currently being carried out or followed. Count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b may indicate that step 1 <highlight><bold>901</bold></highlight> of sequence <highlight><bold>600</bold></highlight> has been completed. Count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b may indicate that step 2 <highlight><bold>902</bold></highlight> of sequence <highlight><bold>600</bold></highlight> has been completed. A status progression of count signal is illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> state diagram illustrating a status progression of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; according to an embodiment is set forth. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Step counter <highlight><bold>50</bold></highlight> may receive match signal dbz_eq, write signal wr, and select signal sel_reg<highlight><bold>1</bold></highlight> and provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; accordingly in response to an execution of a write command by CPU <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). More specifically, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be set to a state (<highlight><bold>801</bold></highlight> to <highlight><bold>803</bold></highlight>) in response to a falling edge of write signal wr pulse provided by CPU <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> If count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b (state <highlight><bold>801</bold></highlight>) and step 1 <highlight><bold>901</bold></highlight> of a write operation is performed, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 01b (state <highlight><bold>802</bold></highlight>). Then, if step 2 <highlight><bold>902</bold></highlight> of a write operation is performed, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 10b (state <highlight><bold>803</bold></highlight>). When a different write occurs, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. When count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; has a value of 10b and a write occurs, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> circuit schematic diagram of step counter <highlight><bold>50</bold></highlight> according to an embodiment is set forth. Step counter <highlight><bold>50</bold></highlight> may provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; by following the state diagram illustrated in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Step counter <highlight><bold>50</bold></highlight> may include AND gates (<highlight><bold>501</bold></highlight> and <highlight><bold>502</bold></highlight>) and flip-flop circuits (<highlight><bold>503</bold></highlight> and <highlight><bold>504</bold></highlight>). Flip-flop circuits (<highlight><bold>503</bold></highlight> and <highlight><bold>504</bold></highlight>) may be D-type flip-flop circuits. AND gate <highlight><bold>501</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to flip-flop circuit <highlight><bold>503</bold></highlight>. AND gate <highlight><bold>502</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, match signal dbz_eq, count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to flip-flop circuit <highlight><bold>504</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Flip-flop circuit <highlight><bold>503</bold></highlight> may receive the logical product output from AND gate <highlight><bold>501</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>503</bold></highlight> may latch the logical product output from AND gate <highlight><bold>501</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Flip-flop circuit <highlight><bold>504</bold></highlight> may receive the logical product output from AND gate <highlight><bold>502</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>504</bold></highlight> may latch the logical product output from AND gate <highlight><bold>502</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Referring once again to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, sequence error detector <highlight><bold>60</bold></highlight> may receive match signal db_eq, write signal wr, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;, and select signal sel_reg<highlight><bold>1</bold></highlight> and may provide an error signal sq_error. Sequence error detector <highlight><bold>60</bold></highlight> may detect whether write sequence <highlight><bold>600</bold></highlight> has been performed normally (followed) or not. When write sequence <highlight><bold>600</bold></highlight> is not followed, sequence error detector <highlight><bold>60</bold></highlight> may provide error signal sq_error having an error logic state. Error signal sq_error may be provided to CPU <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) as a flag, an interrupt request or the like even though this connection is not illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Error signal sq_error may indicate that a different write operation was performed between step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> or between step 2 <highlight><bold>902</bold></highlight> and step 3 <highlight><bold>903</bold></highlight> in write sequence <highlight><bold>600</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>). </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Examples of four cases will be given when error signal sq_error may indicate an invalid write (first write). For example, in a first case, a first write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 1 <highlight><bold>901</bold></highlight>. In a second case, a first write operation may occur after step 1 <highlight><bold>901</bold></highlight> with a value other than inverted data (as compared to data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>). In a third case, a first write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 2 <highlight><bold>902</bold></highlight>. In a fourth case, a first write operation may occur after step 2 <highlight><bold>902</bold></highlight> with a value other than data (data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>). When any of the four above-mentioned cases occur, sequence <highlight><bold>600</bold></highlight> has been interrupted or violated. In response to the violation of sequence <highlight><bold>600</bold></highlight>, writing to register <highlight><bold>1</bold></highlight> (a register protected by write protect circuit <highlight><bold>10</bold></highlight>) may be invalidated and thus, not take place and error signal sq_error may be output having an error logic state. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> circuit schematic diagram of sequence error detector <highlight><bold>60</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Sequence error detector <highlight><bold>60</bold></highlight> may include AND gates (<highlight><bold>601</bold></highlight> to <highlight><bold>604</bold></highlight>), OR gate <highlight><bold>605</bold></highlight>, and flip-flop circuit <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> AND gate <highlight><bold>601</bold></highlight> may receive an inverted select signal sel_reg<highlight><bold>1</bold></highlight>, inverted step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>605</bold></highlight>. AND gate <highlight><bold>602</bold></highlight> may receive step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;, inverted step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted match signal dbz_eq and may provide an output as an input to OR gate <highlight><bold>605</bold></highlight>. AND gate <highlight><bold>603</bold></highlight> may receive an inverted select signal sel_reg<highlight><bold>1</bold></highlight>, step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>605</bold></highlight>. AND gate <highlight><bold>604</bold></highlight> may receive an inverted match signal db_eq, step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>605</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> OR gate <highlight><bold>605</bold></highlight> may provide an output signal pr_sq_error as an input to flip-flop <highlight><bold>606</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Flip-flop <highlight><bold>606</bold></highlight> may be a D-type flip-flop. Flip-flop <highlight><bold>606</bold></highlight> may receive write signal wr at a clock input ck and may output error signal sq_error. Flip-flop <highlight><bold>606</bold></highlight> may latch the received signal pr_sq_error to provide error signal sq_error in response to a rising edge of write signal wr. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The above-mentioned first case may be detected by AND gate <highlight><bold>601</bold></highlight>. The second case may be detected with AND gate <highlight><bold>602</bold></highlight>. The third case may be detected with AND gate <highlight><bold>603</bold></highlight>. The fourth case may be detected with AND gate <highlight><bold>604</bold></highlight>. Output signals from AND gates (<highlight><bold>601</bold></highlight> to <highlight><bold>604</bold></highlight>) may be respectively provided as inputs to OR gate <highlight><bold>605</bold></highlight> to generate output signal pr_sq_error which may be latched by flip-flop <highlight><bold>606</bold></highlight> in response to a rising edge of write signal wr and output as error signal sq_error. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Referring once again to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, protect write signal generator <highlight><bold>70</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, write signal wr, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;, and match signal db_eq and may provide a write signal wr_preg. Protect write signal generator <highlight><bold>70</bold></highlight> may include AND gate <highlight><bold>701</bold></highlight> and AND gate <highlight><bold>702</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> AND gate <highlight><bold>701</bold></highlight> may receive write signal wr, count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;, and match signal db_eq as inputs and may provide an output signal as an input to AND gate <highlight><bold>702</bold></highlight>. AND gate <highlight><bold>702</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight> as an input and may output write signal w_preg. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> AND gate <highlight><bold>701</bold></highlight> may detect an execution of step 3 <highlight><bold>903</bold></highlight> indicating that the sequence <highlight><bold>600</bold></highlight> has been followed. AND gate <highlight><bold>702</bold></highlight> may detect that protected register <highlight><bold>1</bold></highlight> is the selected register being written to. AND gate <highlight><bold>702</bold></highlight> may generate write signal w_preg if the output of AND gate <highlight><bold>701</bold></highlight> is a high logic level and select signal sel_reg<highlight><bold>1</bold></highlight> is high (indicating register <highlight><bold>1</bold></highlight> is selected). </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> AND gate <highlight><bold>80</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, write signal wr, inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; as inputs and may output a signal wr_db. Signal wr_db may be provided to write data setting buffer <highlight><bold>20</bold></highlight> to trigger the latching of data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. AND gate <highlight><bold>80</bold></highlight> may detect an execution of step 1 <highlight><bold>901</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>) indicating sequence <highlight><bold>600</bold></highlight> may be followed. Signal wr_db may be generated when select signal sel_reg<highlight><bold>1</bold></highlight> has a high logic value, write signal wr has a high logic value, and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00 (i.e. count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;&equals;0 and count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;&equals;0). In this way, AND gate <highlight><bold>80</bold></highlight> may detect an execution of a step 1 of sequence <highlight><bold>600</bold></highlight> for a write to a protected register <highlight><bold>1</bold></highlight> and data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; on data bus <highlight><bold>8</bold></highlight> may be latched by write data setting buffer <highlight><bold>20</bold></highlight> and used for verification of subsequent steps (step 2 <highlight><bold>902</bold></highlight> and step 3 <highlight><bold>903</bold></highlight>). </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The operation of the system <highlight><bold>100</bold></highlight> including write protect circuit <highlight><bold>10</bold></highlight> will now be explained. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> First, an operation where a write to a protected register using sequence <highlight><bold>600</bold></highlight> will be explained. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> timing diagram of a write to a protected register using sequence <highlight><bold>600</bold></highlight> according to an embodiment is set forth. The timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a write of data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;12ABh (h indicates that 12AB is a hexidecimal number) into register <highlight><bold>1</bold></highlight> following sequence <highlight><bold>600</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 7</cross-reference> in conjunction with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>6</bold></highlight>, a write command may be executed to register <highlight><bold>1</bold></highlight> as step 1 <highlight><bold>901</bold></highlight>. In step 1 <highlight><bold>901</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may become active (high) while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). Also, in step 1 <highlight><bold>901</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of 12ABh as data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. Because at this time step counter <highlight><bold>60</bold></highlight> outputs a count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b, AND gate <highlight><bold>80</bold></highlight> may output a signal wr_db as a pulse (following write signal wr). In response to signal wr_db, write data setting buffer <highlight><bold>20</bold></highlight> may latch received data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value of 12ABh to comparator circuit <highlight><bold>302</bold></highlight>. Inverter <highlight><bold>301</bold></highlight> may provide inverted data having a value of ED54h to comparator circuit <highlight><bold>303</bold></highlight>. In this case, comparator circuit <highlight><bold>302</bold></highlight> may detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a high logic level. However, comparator circuit <highlight><bold>303</bold></highlight> may not detect a match between data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a low logic level. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Also, at this time, AND gate <highlight><bold>501</bold></highlight> in step counter <highlight><bold>50</bold></highlight> may be enabled (in response to count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b and select signal sel_reg<highlight><bold>1</bold></highlight> being high) and may provide a high output as an input to flip-flop circuit <highlight><bold>503</bold></highlight>. As a result, flip-flop <highlight><bold>503</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; may advance to a value of 01b. However, because at this time write signal wr has returned to a logic low and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b, protect write signal generator <highlight><bold>70</bold></highlight> may not generate write signal wr_preg. Thus, contents of register <highlight><bold>1</bold></highlight> may not be modified in response to a write command of step 1 <highlight><bold>901</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Next, another write command may be executed as step 2 <highlight><bold>902</bold></highlight>. In step 2 <highlight><bold>902</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may remain high while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). Also, in step 2 <highlight><bold>902</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of ED54h as data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. In this case, comparator circuit <highlight><bold>303</bold></highlight> may detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a high logic level. However, comparator circuit <highlight><bold>302</bold></highlight> may not detect a match between data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a low logic level. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Also, at this time, AND gate <highlight><bold>501</bold></highlight> in step counter <highlight><bold>50</bold></highlight> may be disabled (in response to count signal bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;&equals;1b) and may provide a low output as an input to flip-flop circuit <highlight><bold>503</bold></highlight>. Also, at this time, AND gate <highlight><bold>502</bold></highlight> in step counter <highlight><bold>50</bold></highlight> may be enabled (in response to count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b, select signal sel_reg<highlight><bold>1</bold></highlight> being high, and match signal dbz_eq being high) and may provide a high output as an input to flip-flop circuit <highlight><bold>504</bold></highlight>. As a result, flip-flop <highlight><bold>503</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and flip-flop <highlight><bold>502</bold></highlight> may latch a low level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may advance to a value of 10b. However, because at this time, write signal wr has returned to a logic low and match signal db_eq is low, protect write signal generator <highlight><bold>70</bold></highlight> may not generate write signal wr_preg. Thus, contents of register <highlight><bold>1</bold></highlight> may not be modified in response to a write command of step 2 <highlight><bold>902</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Next, another write command may be executed as step 3 <highlight><bold>903</bold></highlight>. In step 3 <highlight><bold>903</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may remain high while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>). Also, in step 3 <highlight><bold>903</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of 12ABh as data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. In this case, comparator circuit <highlight><bold>302</bold></highlight> may detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a high logic level. However, comparator circuit <highlight><bold>303</bold></highlight> may not detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a low logic level. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> At this time, AND gate <highlight><bold>701</bold></highlight> in protect write signal generator <highlight><bold>70</bold></highlight> may provide a high output (because count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b, write signal wr is high, and match signal db_eq is high). Thus, AND gate <highlight><bold>702</bold></highlight> may generate write signal wr_preg. Write signal wr_preg may be a pulse essentially following write signal wr during step 3 <highlight><bold>903</bold></highlight>. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In response to write signal wr_preg having a pulse and select signal sel_reg<highlight><bold>1</bold></highlight> being high, data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (12ABh in the present example as latched by write data setting buffer <highlight><bold>20</bold></highlight>) may be written into register <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Also, during step 3 <highlight><bold>903</bold></highlight>, in response to count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b, AND gates (<highlight><bold>502</bold></highlight> and <highlight><bold>503</bold></highlight>) may both provide logic low outputs. As a result, flip-flop <highlight><bold>503</bold></highlight> may latch a low level count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and flip-flop <highlight><bold>502</bold></highlight> may latch a low level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. It is noted that count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b after write signal wr_preg has been generated during step 3 <highlight><bold>903</bold></highlight>. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Now, using timing diagrams of <cross-reference target="DRAWINGS">FIGS. 8, 9</cross-reference>, <highlight><bold>10</bold></highlight>, and <highlight><bold>11</bold></highlight>, an explanation will be made for cases where a write sequence is initiated to register <highlight><bold>1</bold></highlight>, however, sequence <highlight><bold>600</bold></highlight> is not followed and the write becomes invalid. The timing diagrams of <cross-reference target="DRAWINGS">FIGS. 8, 9</cross-reference>, <highlight><bold>10</bold></highlight>, and <highlight><bold>11</bold></highlight> may respectively illustrate the four above-mentioned cases. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may illustrate a first case, where an erroneous write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 1 <highlight><bold>901</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may illustrate a second case, where an erroneous write operation may occur after step 1 <highlight><bold>901</bold></highlight> with a value other than inverted data (as compared to data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>). <cross-reference target="DRAWINGS">FIG. 10</cross-reference> may illustrate a third case, where an erroneous write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 2 <highlight><bold>902</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 11</cross-reference> may illustrate a fourth case, where an erroneous write operation may occur after step 2 <highlight><bold>902</bold></highlight> with a value other than data (data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>). </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> timing diagram illustrating a case where an erroneous write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 1 <highlight><bold>901</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8</cross-reference> in conjunction with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>6</bold></highlight>, a write command may be executed to register <highlight><bold>1</bold></highlight> as step 1 <highlight><bold>901</bold></highlight>. Step 1 <highlight><bold>901</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> may be essentially the same as step 1 <highlight><bold>901</bold></highlight> illustrated in the timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Next, a write (after step 1) is made to a register other than register <highlight><bold>1</bold></highlight>. Thus, select signal sel_reg<highlight><bold>1</bold></highlight> may change from high to low. AND gate <highlight><bold>601</bold></highlight> in sequence error detector may receive the low select signal sel_reg<highlight><bold>1</bold></highlight> and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b and may provide a high output. In this way, OR gate <highlight><bold>605</bold></highlight> may provide an output signal pr_sq_error having a high logic level. Flip-flop <highlight><bold>606</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Also, with select signal sel_reg<highlight><bold>1</bold></highlight> having a low logic level, AND gates (<highlight><bold>501</bold></highlight> and <highlight><bold>502</bold></highlight>) in step counter <highlight><bold>50</bold></highlight> may each provide an output having a low logic level. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be reset to 00b on a falling edge of write signal wr. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> timing diagram illustrating a case where an erroneous write operation may occur after step 1 <highlight><bold>901</bold></highlight> with a value other than inverted data (as compared to data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>) according to an embodiment is set forth. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference> in conjunction with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>6</bold></highlight>, a write command may be executed to register <highlight><bold>1</bold></highlight> as step 1 <highlight><bold>901</bold></highlight>. Step 1 <highlight><bold>901</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may be essentially the same as step 1 <highlight><bold>901</bold></highlight> illustrated in the timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Next, a write (after step 1) is made to register <highlight><bold>1</bold></highlight> with data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value other than inverted data (as compared to data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>). For example, data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may have a value of 1111h while inverted data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (from step 1) may have a value of ED54h. Thus, match signal dbz_eq may remain at a low logic level. AND gate <highlight><bold>602</bold></highlight> in sequence error detector may receive the low match signal dbz_eq and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b and may provide a high output. In this way, OR gate <highlight><bold>605</bold></highlight> may provide an output signal pr_sq_error having a high logic level. Flip-flop <highlight><bold>606</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Also, with match signal dbz_eq having a low logic level, AND gate <highlight><bold>502</bold></highlight> in step counter <highlight><bold>50</bold></highlight> may provide an output having a low logic level. Also, because counter bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;&equals;1, AND gate <highlight><bold>501</bold></highlight> may provide an output having a low logic level. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be reset to 00b on a falling edge of write signal wr. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 10, a</cross-reference> timing diagram illustrating a case where an erroneous write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 2 <highlight><bold>902</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 10</cross-reference> in conjunction with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>6</bold></highlight>, a write commands may be executed to register <highlight><bold>1</bold></highlight> as step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight>. Step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference> may be essentially the same as Step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> illustrated in the timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Next, a write (after step 2) is made to a register other than register <highlight><bold>1</bold></highlight>. Thus, select signal sel_reg<highlight><bold>1</bold></highlight> may change from high to low. AND gate <highlight><bold>603</bold></highlight> in sequence error detector may receive the low select signal sel_reg<highlight><bold>1</bold></highlight> and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b and may provide a high output. In this way, OR gate <highlight><bold>605</bold></highlight> may provide an output signal pr_sq_error having a high logic level. Flip-flop <highlight><bold>606</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Also, with select signal sel_reg<highlight><bold>1</bold></highlight> having a low logic level, AND gates (<highlight><bold>501</bold></highlight> and <highlight><bold>502</bold></highlight>) in step counter <highlight><bold>50</bold></highlight> may each provide an output having a low logic level. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be reset to 00b on a falling edge of write signal wr. Furthermore, with select signal sel_reg<highlight><bold>1</bold></highlight> having a low logic level, AND gate <highlight><bold>702</bold></highlight> in protect write signal generator <highlight><bold>70</bold></highlight> may provide a write signal wr_preg having a logic low level and a write to register <highlight><bold>1</bold></highlight> may be prevented. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 11, a</cross-reference> timing diagram illustrating a case where an erroneous write operation may occur after step 2 <highlight><bold>902</bold></highlight> with a value other than data (as compared to data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>) according to an embodiment is set forth. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 11</cross-reference> in conjunction with FIGS. <highlight><bold>1</bold></highlight> to <highlight><bold>6</bold></highlight>, a write commands may be executed to register <highlight><bold>1</bold></highlight> as step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight>. Step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> may be essentially the same as step 1 <highlight><bold>901</bold></highlight> and step 2 <highlight><bold>902</bold></highlight> illustrated in the timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Next, a write (after step 2) is made to register <highlight><bold>1</bold></highlight> with data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value other than data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 1 <highlight><bold>901</bold></highlight>. For example, data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may have a value of 1111h while data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (from step 1) may have a value of 12ABh. Thus, match signal db_eq may remain at a low logic level. AND gate <highlight><bold>604</bold></highlight> in sequence error detector <highlight><bold>60</bold></highlight> may receive the low match signal db_eq and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b and may provide a high output. In this way, OR gate <highlight><bold>605</bold></highlight> may provide an output signal pr_sq_error having a high logic level. Flip-flop <highlight><bold>606</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Also, in accordance with the state diagram of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, because an arbitrary write is executed when step counter <highlight><bold>50</bold></highlight> is in state <highlight><bold>803</bold></highlight>, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be reset to 00b (state <highlight><bold>801</bold></highlight>) on a falling edge of write signal wr. Furthermore, with match signal db_eq having a low logic level, AND gate <highlight><bold>701</bold></highlight> in protect write signal generator <highlight><bold>70</bold></highlight> may provide an output having a logic low. In this way, AND gate <highlight><bold>702</bold></highlight> may provide a write signal wr_preg having a logic low level and a write to register <highlight><bold>1</bold></highlight> may be prevented. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Thus, writing to a register <highlight><bold>1</bold></highlight> that is protected may be valid only when a write sequence is performed in accordance with sequence <highlight><bold>600</bold></highlight>. Therefore, when a write command intended for a register (<highlight><bold>2</bold></highlight> to n), which is not protected, for example, and erroneously is performed for a register <highlight><bold>1</bold></highlight> which is protected, the write may not be allowed and may be invalidated. In this way, values stored in a control register <highlight><bold>1</bold></highlight>, for example, which may significantly influence a system may be protected. In contrast, in a conventional system, erroneous writing to registers may occur due to CPU runaway or the like. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> A write sequence <highlight><bold>600</bold></highlight> may be performed having 3 steps. Write data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (either inverted or not inverted) may be compared with data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; on a data bus <highlight><bold>8</bold></highlight> in step 1 <highlight><bold>901</bold></highlight>, step 2 <highlight><bold>902</bold></highlight>, and step 3 <highlight><bold>903</bold></highlight>. In this way, it may be confirmed whether or not write data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; is erroneous or is the intended write data. Thus, even in a case where unexpected data corruption occurs on data bus <highlight><bold>8</bold></highlight>, the write may be invalidated and a write of erroneous data to register <highlight><bold>1</bold></highlight> may be prevented. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> For data corruption on a data bus <highlight><bold>8</bold></highlight>, a method exists for providing an extra bit (parity bit) for error correction and the like. However, in accordance with the present embodiment, it may not be necessary to add an extra bit to data bus <highlight><bold>8</bold></highlight>. In this way, board area may be reduced and error correction circuitry may be eliminated. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> Further, a method may be possible in which only hardware for temporarily storing the write data is needed and the data comparison (checking to see if write data is valid) may be performed by software. However, in this case, the software for valid data detection may increase the program code and time required for writing to a register. In comparison, by only executing a write command 3 times as in the present embodiment, the amount of program code may be minimized and the time required for writing to a register may be relatively short. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Further, because the data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; on data bus <highlight><bold>8</bold></highlight> has to transition from write data to inverted write data at step 2 <highlight><bold>902</bold></highlight>, even if runaway by CPU <highlight><bold>6</bold></highlight> or the like causes the same command code to be repeatedly executed where a write is continuously executed to the same register, if the register is protected, the writing may be invalidated. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> Another embodiment of the present invention will now be explained with reference to <cross-reference target="DRAWINGS">FIGS. 12 through 18</cross-reference>. The embodiment illustrated in <cross-reference target="DRAWINGS">FIGS. 12 through 18</cross-reference> may have similar constituents as the embodiment illustrated in <cross-reference target="DRAWINGS">FIGS. 1 through 11</cross-reference>, such constituents may be referred to by the same reference character. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 12, a</cross-reference> block schematic diagram of a system including a write protect circuit is set forth according to an embodiment and given the general reference character <highlight><bold>1200</bold></highlight>. System <highlight><bold>1200</bold></highlight> may differ from system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in that 3 registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) may be write protected. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> System <highlight><bold>1200</bold></highlight> may differ from system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in that system <highlight><bold>1200</bold></highlight> may include a write protect circuit <highlight><bold>11</bold></highlight>. Write protect circuit <highlight><bold>11</bold></highlight> may only permit data to be written into any of registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) when a write operation is performed according to a specific sequence. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> A predetermined value may be directly written into registers (<highlight><bold>4</bold></highlight> through n), which are not write protected by applying a write signal wr from CPU <highlight><bold>6</bold></highlight>. However, because a write signal wr_preg applied to a write terminal w of registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) is controlled by write protect circuit <highlight><bold>11</bold></highlight>, registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) may not be written to unless a write operation following a specific sequence <highlight><bold>600</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>) is executed. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 13, a</cross-reference> circuit schematic diagram of write protect circuit <highlight><bold>11</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> Write protect circuit <highlight><bold>11</bold></highlight> may include a write data setting buffer <highlight><bold>21</bold></highlight>, a comparator circuit <highlight><bold>31</bold></highlight>, an object register detector <highlight><bold>41</bold></highlight>, a step counter <highlight><bold>51</bold></highlight>, a sequence error detector <highlight><bold>61</bold></highlight>, a protect write signal generator <highlight><bold>71</bold></highlight>, an AND gate <highlight><bold>81</bold></highlight>, and an OR gate <highlight><bold>91</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Write data setting buffer <highlight><bold>21</bold></highlight> may receive data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and a signal wr_db and may provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Write data setting buffer <highlight><bold>21</bold></highlight> may latch a value of data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; received at step 1 <highlight><bold>901</bold></highlight> to provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. The construction of write data setting buffer <highlight><bold>21</bold></highlight> may be similar to write data setting buffer <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Comparator circuit <highlight><bold>31</bold></highlight> may receive data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may provide match signals (db_eq and dbz_eq). Comparator circuit <highlight><bold>31</bold></highlight> may perform data comparison. Comparator circuit <highlight><bold>31</bold></highlight> may include comparing units (<highlight><bold>312</bold></highlight> and <highlight><bold>313</bold></highlight>) and an inverter <highlight><bold>311</bold></highlight>. The construction of comparator circuit <highlight><bold>31</bold></highlight> may be similar to comparator circuit <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Sequence error detector <highlight><bold>61</bold></highlight> may receive match signal db_eq, write signal wr, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;, and a detection signal preg_on and may provide an error signal sq_error. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Sequence error detector <highlight><bold>61</bold></highlight> may receive detection signal preg_on as compared to sequence error detector <highlight><bold>60</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, which may receive select signal sel_reg<highlight><bold>1</bold></highlight>. Otherwise, the construction of sequence error detector <highlight><bold>61</bold></highlight> may be similar to sequence error detector <highlight><bold>60</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Protect write signal generator <highlight><bold>71</bold></highlight> may receive detection signal preg_on, write signal wr, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;, and match signal db_eq and may provide a write signal wr_preg. Protect write signal generator <highlight><bold>71</bold></highlight> may include AND gate <highlight><bold>711</bold></highlight> and AND gate <highlight><bold>712</bold></highlight>. Protect write signal generator <highlight><bold>71</bold></highlight> may receive detection signal preg_on as compared to protect write signal generator <highlight><bold>70</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, which may receive select signal sel_reg<highlight><bold>1</bold></highlight>. Otherwise, the construction of protect write signal generator <highlight><bold>71</bold></highlight> may be similar to protect write signal generator <highlight><bold>70</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> AND gate <highlight><bold>81</bold></highlight> may receive protected select signal sel_p_or, write signal wr, inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; as inputs and may output a signal wr_db. AND gate <highlight><bold>81</bold></highlight> may receive protected select signal sel_p_or as compared to AND gate <highlight><bold>80</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, which may receive select signal sel_reg<highlight><bold>1</bold></highlight>. Otherwise, the construction of AND gate <highlight><bold>81</bold></highlight> may be similar to AND gate <highlight><bold>80</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Object register detector <highlight><bold>41</bold></highlight> may receive select signals (sel_reg<highlight><bold>1</bold></highlight> to sel_reg<highlight><bold>3</bold></highlight>) and signal wr_db and may provide detection signal preg_on. Object register detector <highlight><bold>41</bold></highlight> may detect whether the write operation following sequence <highlight><bold>600</bold></highlight> is being performed to the same protected register (sel_reg<highlight><bold>1</bold></highlight> to sel_reg<highlight><bold>3</bold></highlight>). </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 14, a</cross-reference> circuit schematic diagram of object register detector <highlight><bold>41</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> Object register detector <highlight><bold>41</bold></highlight> may include OR gates (<highlight><bold>411</bold></highlight>, <highlight><bold>412</bold></highlight>, and <highlight><bold>418</bold></highlight>), flip-flops (<highlight><bold>413</bold></highlight> and <highlight><bold>414</bold></highlight>), and AND gates (<highlight><bold>415</bold></highlight> to <highlight><bold>417</bold></highlight>). </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> OR gate <highlight><bold>411</bold></highlight> may receive select signals (sel_reg<highlight><bold>1</bold></highlight> and sel_reg<highlight><bold>3</bold></highlight>) and may provide an output as an input to flip-flop <highlight><bold>413</bold></highlight>. OR gate <highlight><bold>412</bold></highlight> may receive select signals (sel_reg<highlight><bold>2</bold></highlight> and sel_reg<highlight><bold>3</bold></highlight>) and may provide an output as an input to flip-flop <highlight><bold>414</bold></highlight>. Flip-flop <highlight><bold>413</bold></highlight> may receive signal wr_db and may latch a received input from OR gate <highlight><bold>411</bold></highlight> on a falling edge of signal wr_db. Flip-flop <highlight><bold>414</bold></highlight> may receive signal wr_db and may latch a received input from OR gate <highlight><bold>412</bold></highlight> on a falling edge of signal wr_db. Flip-flops (<highlight><bold>413</bold></highlight> and <highlight><bold>414</bold></highlight>) may each be D-type flip-flops. AND gate <highlight><bold>415</bold></highlight> may receive an output from flip-flop <highlight><bold>413</bold></highlight>, an inverted output from flip-flop <highlight><bold>414</bold></highlight>, and select signal sel_reg<highlight><bold>2</bold></highlight> and may provide an output to an input of OR gate <highlight><bold>418</bold></highlight>. AND gate <highlight><bold>416</bold></highlight> may receive an inverted output from flip-flop <highlight><bold>413</bold></highlight>, an output from flip-flop <highlight><bold>414</bold></highlight>, and select signal sel_reg<highlight><bold>1</bold></highlight> and may provide an output to an input of OR gate <highlight><bold>418</bold></highlight>. AND gate <highlight><bold>417</bold></highlight> may receive an output from flip-flop <highlight><bold>413</bold></highlight>, an output from flip-flop <highlight><bold>414</bold></highlight>, and select signal sel_reg<highlight><bold>3</bold></highlight> and may provide an output to an input of OR gate <highlight><bold>418</bold></highlight>. OR gate <highlight><bold>418</bold></highlight> may provide detection signal preg_on as an output. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 14, a</cross-reference> value latched in flip-flop <highlight><bold>413</bold></highlight> may be referred to as sel_info&lsqb;<highlight><bold>1</bold></highlight>&rsqb;. A value latched in flip-flop <highlight><bold>414</bold></highlight> may be referred to as sel_info&lsqb;<highlight><bold>1</bold></highlight>&rsqb;. Values (sel_info&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and sel_info&lsqb;<highlight><bold>1</bold></highlight>&rsqb;) may indicate the register (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) that is addressed during the write operation of step 1 <highlight><bold>601</bold></highlight> of sequence <highlight><bold>600</bold></highlight>. Values (sel_info&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and sel_info&lsqb;<highlight><bold>1</bold></highlight>&rsqb;) may indicate a register (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) in accordance with the table illustrated in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 15, a</cross-reference> state diagram illustrating a status progression of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; according to an embodiment is set forth. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> Step counter <highlight><bold>51</bold></highlight> may receive match signal db_eq, write signal wr, and protected select signal sel_p_or and provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; accordingly in response to an execution of a write command by CPU <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). More specifically, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be set to a state (<highlight><bold>811</bold></highlight> to <highlight><bold>813</bold></highlight>) in response to a falling edge of write signal wr pulse provided by CPU <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> If count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b (state <highlight><bold>811</bold></highlight>) and step 1 <highlight><bold>901</bold></highlight> of a write sequence <highlight><bold>600</bold></highlight> is performed to a protected register (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>), count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 01b (state <highlight><bold>812</bold></highlight>). Then, if step 2 <highlight><bold>902</bold></highlight> of a write sequence <highlight><bold>600</bold></highlight> is performed to the same protected register (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>), count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 10b (state <highlight><bold>813</bold></highlight>). When a different write occurs than in write sequence <highlight><bold>600</bold></highlight>, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. When count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; has a value of 10b and a write occurs, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Value sel_info&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; latched by flip-flops (<highlight><bold>413</bold></highlight> and <highlight><bold>414</bold></highlight>) may be updated by a the writing performed when count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; has a value of 00b (<highlight><bold>811</bold></highlight>). Value sel_info&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; stored by flip-flops (<highlight><bold>413</bold></highlight> and <highlight><bold>414</bold></highlight>) may be treated as information indicating a protected register in accordance with an address ADDRESS value at step 1 <highlight><bold>901</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>). AND gates (<highlight><bold>415</bold></highlight> to <highlight><bold>417</bold></highlight>) may detect whether the address ADDRESS corresponds to the same protected register as indicated by value sel_info&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in subsequent steps (step 2 <highlight><bold>902</bold></highlight> and step 3 <highlight><bold>903</bold></highlight>). Each AND gate (<highlight><bold>415</bold></highlight> to <highlight><bold>417</bold></highlight>) may provide an output to OR gate <highlight><bold>418</bold></highlight>. In this way, OR gate <highlight><bold>418</bold></highlight> may provide a detection signal preg_on to indicate whether or not the same protected register (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>) is being addressed during each step of sequence <highlight><bold>600</bold></highlight>. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> Object register detector <highlight><bold>41</bold></highlight> may be unnecessary when only one register is a protected register. However, when there are a plurality of protected registers, object register detector <highlight><bold>41</bold></highlight> may be necessary in order to determine the same protected register is being addressed in each step of sequence <highlight><bold>600</bold></highlight>. If only two registers are protected registers, only a single bit may be latched (stored) in a flip-flop (or storing circuit). If three or four registers are protected registers, two bits may be latched (stored) in a flip-flop (or storing circuit). If five to seven registers are protected registers, three bits may be latched (stored) in a flip-flop (or storing circuit). </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Because there is a plurality of registers to be protected (registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>)) in the system <highlight><bold>1200</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, step counter <highlight><bold>51</bold></highlight> in write protect circuit <highlight><bold>11</bold></highlight> may have a slightly different configuration as compared to step counter <highlight><bold>50</bold></highlight> in write protect circuit <highlight><bold>10</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In particular, as illustrated in the state diagram of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, at the time of writing in accordance with step 1 <highlight><bold>811</bold></highlight> (the case where protected select signal sel_p_or&equals;1 at the falling edge of write signal wr), protected select signal sel_p_or may be used as a trigger to increment count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; from 0 to 1. In step counter <highlight><bold>50</bold></highlight> in write protect circuit <highlight><bold>10</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, select signal sel_reg<highlight><bold>1</bold></highlight> may be used as a trigger to increment count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; from 0 to 1. At the time of writing in accordance with step 2 <highlight><bold>812</bold></highlight> (the case where match signal dbz_eq&equals;1 and detection signal preg_on&equals;1 at the falling edge of write signal wr), detection signal preg_on may be used as a trigger to increment count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; from 0 to 1. In step counter <highlight><bold>50</bold></highlight> in write protect circuit <highlight><bold>10</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, select signal sel_reg<highlight><bold>1</bold></highlight> may be used as a trigger to increment count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; from 0 to 1. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 16 a</cross-reference> circuit schematic diagram of step counter <highlight><bold>51</bold></highlight> according to an embodiment is set forth. Step counter <highlight><bold>51</bold></highlight> may provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; by following the state diagram illustrated in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> Step counter <highlight><bold>51</bold></highlight> may include AND gates (<highlight><bold>511</bold></highlight> and <highlight><bold>512</bold></highlight>) and flip-flop circuits (<highlight><bold>513</bold></highlight> and <highlight><bold>514</bold></highlight>). Flip-flop circuits (<highlight><bold>513</bold></highlight> and <highlight><bold>514</bold></highlight>) may be D-type flip-flop circuits. AND gate <highlight><bold>511</bold></highlight> may receive protected select signal sel_p_or, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to flip-flop circuit <highlight><bold>513</bold></highlight>. AND gate <highlight><bold>512</bold></highlight> may receive detection signal preg_on, match signal dbz_eq, count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to flip-flop circuit <highlight><bold>514</bold></highlight>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Flip-flop circuit <highlight><bold>513</bold></highlight> may receive the logical product output from AND gate <highlight><bold>511</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>513</bold></highlight> may latch the logical product output from AND gate <highlight><bold>511</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Flip-flop circuit <highlight><bold>514</bold></highlight> may receive the logical product output from AND gate <highlight><bold>512</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>514</bold></highlight> may latch the logical product output from AND gate <highlight><bold>512</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Referring once again to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, OR gate <highlight><bold>91</bold></highlight> may receive select signals (sel_reg<highlight><bold>1</bold></highlight> to sel_reg<highlight><bold>3</bold></highlight>) and may generate protected select signal sel_p_or. Protected select signal sel_p_or may indicate whether or not a protected register has been addressed or selected. Protected select signal sel_p_or may be provided to step counter <highlight><bold>51</bold></highlight> and AND gate <highlight><bold>81</bold></highlight>. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> The operation of system <highlight><bold>1200</bold></highlight> including write protect circuit <highlight><bold>11</bold></highlight> will now be explained. System <highlight><bold>100</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) may differ from system <highlight><bold>1200</bold></highlight> in that there are three protected registers (<highlight><bold>1</bold></highlight> to <highlight><bold>3</bold></highlight>). However, the basic operations are similar and explanations may be omitted. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 17, a</cross-reference> timing diagram of a write to a protected register using sequence <highlight><bold>600</bold></highlight> according to an embodiment is set forth. The timing diagram of <cross-reference target="DRAWINGS">FIG. 17</cross-reference> illustrates a write of data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;12ABh (h indicates that 12AB is a hexadecimal number) into register <highlight><bold>2</bold></highlight> following sequence <highlight><bold>600</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> The timing diagram illustrated in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is similar to timing diagram of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, however, it should be noted that protected select signal sel_p_or may become logic high in step 1 (<highlight><bold>901</bold></highlight>) to indicate a protected register is being addressed (in this case register <highlight><bold>2</bold></highlight>). Also, detection signal preg_on may be high in step 2 and step 3 (<highlight><bold>902</bold></highlight> and <highlight><bold>903</bold></highlight>) to indicate the same protected register (register <highlight><bold>2</bold></highlight>) is being addressed as was addressed in step 1. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 18, a</cross-reference> timing diagram illustrating a case where an erroneous write operation to a register other than the object protected register <highlight><bold>2</bold></highlight> may occur after step 2 <highlight><bold>902</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, in step 1 <highlight><bold>901</bold></highlight>, a write is executed to register <highlight><bold>2</bold></highlight>. Thus, the protected register that is the object of the write sequence <highlight><bold>600</bold></highlight> is register <highlight><bold>2</bold></highlight>. However, in step 3 <highlight><bold>903</bold></highlight>, a write is executed to another register (in this case, an unprotected register, such as registers (<highlight><bold>4</bold></highlight> to n). Thus, in step 3 <highlight><bold>903</bold></highlight>, protected select signal sel_p_or may return low (thus indicating a protected register is not selected). Also, in step 3 <highlight><bold>903</bold></highlight>, detection signal preg_on may be low (thus indicating a write is not to the same register (register <highlight><bold>2</bold></highlight>) as indicated by value sel_info&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; stored in object register detector <highlight><bold>41</bold></highlight>). In this way, write signal wr_preg may be suppressed and writing of data (12ABh) to register <highlight><bold>2</bold></highlight> may not be performed. Accordingly, error signal sq_error having a high logic level may be provided to notify, for example, CPU <highlight><bold>6</bold></highlight> that writing did not occur. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> As described above (FIGS. <highlight><bold>12</bold></highlight> to <highlight><bold>18</bold></highlight>), an example of a case where a plurality of registers may be write protected. In this way, the number of registers which may be write protected can be altered in response to the needs of the system. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> The write sequence to be executed to allow a write to a protected register should not be limited to three steps as in write sequence <highlight><bold>600</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6</cross-reference>). An explanation will now be made for a write sequence including 4 steps as illustrated in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 24, a</cross-reference> flow chart illustrating a write sequence according to an embodiment is set forth and given the general reference character <highlight><bold>2400</bold></highlight>. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> Write sequence <highlight><bold>2400</bold></highlight> may be similar to write sequence <highlight><bold>600</bold></highlight>. However, write sequence <highlight><bold>2400</bold></highlight> may include a step (step 1 <highlight><bold>921</bold></highlight>) that may be inserted in the flow before step 1 <highlight><bold>901</bold></highlight> of write sequence <highlight><bold>600</bold></highlight>. In write sequence <highlight><bold>2400</bold></highlight>, step 1 may include a write command to write data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value of 55AAh into a command register. Steps 2 to 4 (<highlight><bold>922</bold></highlight> to <highlight><bold>924</bold></highlight>) of write sequence <highlight><bold>2400</bold></highlight> may be similar to steps 1 to 3 (<highlight><bold>901</bold></highlight> to <highlight><bold>903</bold></highlight>) of write sequence <highlight><bold>600</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> In the present embodiment, writing of data to a protected register may only be valid and allowed to occur when the four steps (Step 1 <highlight><bold>921</bold></highlight>, Step 2 <highlight><bold>922</bold></highlight>, Step 3 <highlight><bold>923</bold></highlight>, and Step 4 <highlight><bold>924</bold></highlight>) are followed. </paragraph>
<paragraph id="P-0165" lvl="0"><number>&lsqb;0165&rsqb;</number> Write operations of step 1 <highlight><bold>921</bold></highlight>, step 2 <highlight><bold>922</bold></highlight>, and step 3 <highlight><bold>923</bold></highlight> may be included as steps in write sequence <highlight><bold>2400</bold></highlight>. However, at the time of steps 1 to 3 (<highlight><bold>921</bold></highlight> to <highlight><bold>923</bold></highlight>) write signal wr_preg may not be provided and no write may occur. Writing may be valid at the time of step 4 <highlight><bold>924</bold></highlight> only when steps 1 to 4 (<highlight><bold>921</bold></highlight> to <highlight><bold>924</bold></highlight>) are sequentially executed. When the write is valid, write signal wr_preg may be generated at step 4 <highlight><bold>924</bold></highlight>. </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> In a case where write sequence <highlight><bold>2400</bold></highlight> is not followed, the write operation may become invalid. For example, if another write operation is performed between step 1 <highlight><bold>921</bold></highlight> and step 2 <highlight><bold>922</bold></highlight>, between step 2 <highlight><bold>922</bold></highlight> and step 3 <highlight><bold>923</bold></highlight>, or between step 3 <highlight><bold>923</bold></highlight> and step 4 <highlight><bold>924</bold></highlight> the writing may become invalid and a sequence error may be detected. When a write to a protected register is attempted again, write sequence <highlight><bold>2400</bold></highlight> may begin again at step 1 <highlight><bold>921</bold></highlight>. </paragraph>
<paragraph id="P-0167" lvl="0"><number>&lsqb;0167&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 19, a</cross-reference> block schematic diagram of a system including a write protect circuit is set forth according to an embodiment and given the general reference character <highlight><bold>1900</bold></highlight>. System <highlight><bold>1900</bold></highlight> may be similar to system <highlight><bold>100</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, however, system <highlight><bold>1900</bold></highlight> may include an address decoder <highlight><bold>9</bold></highlight> that can generate a command register select signal sel_cmd. System <highlight><bold>1900</bold></highlight> may also include a write protect circuit <highlight><bold>12</bold></highlight> that may receive command register select signal sel_cmd. </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> Command register select signal sel_cmd may be generated as a part of write sequence <highlight><bold>2400</bold></highlight>. Step 1 <highlight><bold>921</bold></highlight> of write sequence <highlight><bold>921</bold></highlight> may include a write command writing data 55AAH to a command register. A command register may not be an actual register, but may merely be assigned an address. Command register select signal sel_cmd may be generated by address decoder <highlight><bold>9</bold></highlight> in response to the assigned address. </paragraph>
<paragraph id="P-0169" lvl="0"><number>&lsqb;0169&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 20, a</cross-reference> circuit schematic diagram of write protect circuit <highlight><bold>12</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> Write protect circuit <highlight><bold>12</bold></highlight> may include a write data setting buffer <highlight><bold>22</bold></highlight>, a comparator circuit <highlight><bold>32</bold></highlight>, a step counter <highlight><bold>52</bold></highlight>, a sequence error detector <highlight><bold>62</bold></highlight>, a protect write signal generator <highlight><bold>72</bold></highlight>, and an AND gate <highlight><bold>82</bold></highlight>. </paragraph>
<paragraph id="P-0171" lvl="0"><number>&lsqb;0171&rsqb;</number> Write data setting buffer <highlight><bold>22</bold></highlight> may receive data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and a signal wr_db and may provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Write data setting buffer <highlight><bold>22</bold></highlight> may latch a value of data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; received at step 1 <highlight><bold>921</bold></highlight> to provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. The construction of write data setting buffer <highlight><bold>22</bold></highlight> may be similar to write data setting buffer <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, so detailed explanation thereof is omitted. </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> Comparator circuit <highlight><bold>32</bold></highlight> may receive data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may provide match signals (db_eq and dbz_eq). Comparator circuit <highlight><bold>32</bold></highlight> may perform data comparison. Comparator circuit <highlight><bold>31</bold></highlight> may include comparing units (<highlight><bold>322</bold></highlight>, <highlight><bold>323</bold></highlight>, and <highlight><bold>324</bold></highlight>) and an inverter <highlight><bold>321</bold></highlight>. The construction of comparator circuit <highlight><bold>32</bold></highlight> may differ from comparator circuit <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in a comparing unit <highlight><bold>324</bold></highlight> may be included to compare a value of data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; from bus <highlight><bold>8</bold></highlight> with a value of 55AAh and output a match signal 55aa_eq. </paragraph>
<paragraph id="P-0173" lvl="0"><number>&lsqb;0173&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 21, a</cross-reference> state diagram illustrating a status progression of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; according to an embodiment is set forth. </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> Step counter <highlight><bold>52</bold></highlight> may receive match signals (dbz_eq and 55aah), write signal wr, command register select signal sel_cmd and select signal sel_reg<highlight><bold>1</bold></highlight> and provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; accordingly in response to an execution of a write command by CPU <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 19</cross-reference>). More specifically, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may be set to a state (<highlight><bold>821</bold></highlight> to <highlight><bold>824</bold></highlight>) in response to a falling edge of write signal wr pulse provided by CPU <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0175" lvl="0"><number>&lsqb;0175&rsqb;</number> If count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b (state <highlight><bold>821</bold></highlight>) and step 1 <highlight><bold>921</bold></highlight> of a write operation is performed, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 01b (state <highlight><bold>822</bold></highlight>). Then, if step 2 <highlight><bold>922</bold></highlight> of a write operation is performed, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 10b (state <highlight><bold>823</bold></highlight>). Then, if step 3 <highlight><bold>923</bold></highlight> of a write operation is performed, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may progress to a value of 11b (state <highlight><bold>824</bold></highlight>). When a different write occurs, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. When count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; has a value of 11b and a write (step 4 <highlight><bold>924</bold></highlight>) occurs, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may return to a value of 00b. </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 22, a</cross-reference> circuit schematic diagram of step counter <highlight><bold>52</bold></highlight> according to an embodiment is set forth. Step counter <highlight><bold>52</bold></highlight> may provide count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; by following the state diagram illustrated in <cross-reference target="DRAWINGS">FIG. 21</cross-reference>. </paragraph>
<paragraph id="P-0177" lvl="0"><number>&lsqb;0177&rsqb;</number> Step counter <highlight><bold>52</bold></highlight> may include AND gates (<highlight><bold>521</bold></highlight> to <highlight><bold>524</bold></highlight>), OR gates (<highlight><bold>525</bold></highlight> and <highlight><bold>526</bold></highlight>), and flip-flop circuits (<highlight><bold>527</bold></highlight> and <highlight><bold>528</bold></highlight>). Flip-flop circuits (<highlight><bold>527</bold></highlight> and <highlight><bold>528</bold></highlight>) may be D-type flip-flop circuits. AND gate <highlight><bold>521</bold></highlight> may receive command register select signal sel_cmd, match signal 55aa_eq, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to OR gate <highlight><bold>525</bold></highlight>. AND gate <highlight><bold>522</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to OR gate <highlight><bold>525</bold></highlight>. AND gate <highlight><bold>523</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and inverted count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to OR gate <highlight><bold>526</bold></highlight>. AND gate <highlight><bold>524</bold></highlight> may receive select signal sel_reg<highlight><bold>1</bold></highlight>, match signal dbz_eq, inverted count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide a logical product output as an input to OR gate <highlight><bold>526</bold></highlight>. OR gate <highlight><bold>525</bold></highlight> may provide an output as an input D<highlight><bold>0</bold></highlight> to flip-flop circuit <highlight><bold>527</bold></highlight>. OR gate <highlight><bold>526</bold></highlight> may provide an output as an input D<highlight><bold>1</bold></highlight> to flip-flop circuit <highlight><bold>528</bold></highlight>. </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> Flip-flop circuit <highlight><bold>527</bold></highlight> may receive the output from OR gate <highlight><bold>525</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>527</bold></highlight> may latch the output from OR gate <highlight><bold>525</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. Flip-flop circuit <highlight><bold>528</bold></highlight> may receive the output from OR gate <highlight><bold>526</bold></highlight> and write signal wr. Flip-flop circuit <highlight><bold>528</bold></highlight> may latch the output from OR gate <highlight><bold>526</bold></highlight> in response to an inverted write signal wr (i.e. at a falling edge of write signal wr) to provide count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; of count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;. </paragraph>
<paragraph id="P-0179" lvl="0"><number>&lsqb;0179&rsqb;</number> Referring once again to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>, sequence error detector <highlight><bold>62</bold></highlight> may receive match signal db_eq, write signal wr, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;, and select signal sel_reg<highlight><bold>1</bold></highlight> and may provide an error signal sq_error. Sequence error detector <highlight><bold>62</bold></highlight> may detect whether write sequence <highlight><bold>2400</bold></highlight> has been performed normally (followed) or not. When write sequence <highlight><bold>600</bold></highlight> is not followed, sequence error detector <highlight><bold>62</bold></highlight> may provide error signal sq_error having an error logic state. Error signal sq_error may be provided to CPU <highlight><bold>6</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 19</cross-reference>) as a flag, an interrupt request or the like even though this connection is not illustrated in <cross-reference target="DRAWINGS">FIG. 19</cross-reference>. Error signal sq_error may indicate that a different write operation was performed between step 1 <highlight><bold>921</bold></highlight> and step 2 <highlight><bold>922</bold></highlight>, between step 2 <highlight><bold>922</bold></highlight> and step 3 <highlight><bold>923</bold></highlight>, or between step 3 <highlight><bold>923</bold></highlight> and step 4 <highlight><bold>924</bold></highlight> in sequence <highlight><bold>2400</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 24</cross-reference>). </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> Sequence detector <highlight><bold>62</bold></highlight> may detect an error in 6 cases. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> Examples of the six cases will be given when sequence detector <highlight><bold>62</bold></highlight> may generate an error signal sq_error indicating an invalid write (first write). A first case is when a first write operation to a protected register <highlight><bold>1</bold></highlight> occurs without previously writing 55AAh to the command register. In a second case, a first write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 1 <highlight><bold>921</bold></highlight>. In a third case, a first write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 2 <highlight><bold>922</bold></highlight>. In a fourth case, a first write operation may occur after step 2 <highlight><bold>922</bold></highlight> with a value other than inverted data (as compared to data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 2 <highlight><bold>922</bold></highlight>). In a fifth case, a first write operation to a register other than protected register <highlight><bold>1</bold></highlight> may occur after step 3 <highlight><bold>923</bold></highlight>. In a sixth case, a first write operation may occur after step 3 <highlight><bold>923</bold></highlight> with a value other than data (data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 2 <highlight><bold>922</bold></highlight>). When any of the six above-mentioned cases occur, write sequence <highlight><bold>2400</bold></highlight> has been interrupted or violated. In response to the violation of write sequence <highlight><bold>2400</bold></highlight>, writing to register <highlight><bold>1</bold></highlight> (a register protected by write protect circuit <highlight><bold>12</bold></highlight>) may be invalidated and thus, not take place and error signal sq_error may be output having an error logic state. </paragraph>
<paragraph id="P-0182" lvl="0"><number>&lsqb;0182&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 23, a</cross-reference> circuit schematic diagram of sequence error detector <highlight><bold>62</bold></highlight> according to an embodiment is set forth. </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> Sequence error detector <highlight><bold>62</bold></highlight> may include AND gates (<highlight><bold>621</bold></highlight> to <highlight><bold>626</bold></highlight>), OR gate <highlight><bold>627</bold></highlight>, and flip-flop circuit <highlight><bold>628</bold></highlight>. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> AND gate <highlight><bold>621</bold></highlight> may receive an select signal sel_reg<highlight><bold>1</bold></highlight>, inverted step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and inverted step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. AND gate <highlight><bold>622</bold></highlight> may receive an inverted select signal sel_reg<highlight><bold>1</bold></highlight>, inverted step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. AND gate <highlight><bold>623</bold></highlight> may receive an inverted select signal sel_reg<highlight><bold>1</bold></highlight>, inverted step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;, and step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. AND gate <highlight><bold>624</bold></highlight> may receive step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, inverted step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb;, and inverted match signal dbz_eq and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. AND gate <highlight><bold>625</bold></highlight> may receive an inverted select signal sel_reg<highlight><bold>1</bold></highlight>, step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. AND gate <highlight><bold>626</bold></highlight> may receive an inverted match signal db_eq, step count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb;, and step count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; and may provide an output as an input to OR gate <highlight><bold>627</bold></highlight>. </paragraph>
<paragraph id="P-0185" lvl="0"><number>&lsqb;0185&rsqb;</number> OR gate <highlight><bold>627</bold></highlight> may provide an output signal pr_sq_error as an input to flip-flop <highlight><bold>628</bold></highlight>. </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> Flip-flop <highlight><bold>628</bold></highlight> may be a D flip-flop. Flip-flop <highlight><bold>628</bold></highlight> may receive write signal wr at a clock ck input and may output error signal sq_error. Flip-flop <highlight><bold>628</bold></highlight> may latch the received signal pr_sq_error to provide error signal sq_error in response to a falling edge of write signal wr. </paragraph>
<paragraph id="P-0187" lvl="0"><number>&lsqb;0187&rsqb;</number> The above-mentioned first case may be detected by AND gate <highlight><bold>621</bold></highlight>. The second case may be detected with AND gate <highlight><bold>622</bold></highlight>. The third case may be detected with AND gate <highlight><bold>623</bold></highlight>. The fourth case may be detected with AND gate <highlight><bold>624</bold></highlight>. The fifth case may be detected with AND gate <highlight><bold>625</bold></highlight>. The sixth case may be detected with AND gate <highlight><bold>626</bold></highlight>. Output signals from AND gates (<highlight><bold>621</bold></highlight> to <highlight><bold>626</bold></highlight>) may be respectively provided as inputs to OR gate <highlight><bold>627</bold></highlight> to generate output signal pr_sq_error which may be latched by flip-flop <highlight><bold>628</bold></highlight> in response to a rising edge of write signal wr and output as error signal sq_error. </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> The operation of the system <highlight><bold>1900</bold></highlight> including write protect circuit <highlight><bold>12</bold></highlight> will now be explained. </paragraph>
<paragraph id="P-0189" lvl="0"><number>&lsqb;0189&rsqb;</number> First, an operation where a write to a protected register using sequence <highlight><bold>2400</bold></highlight> will be explained. Note the present embodiment may include a 4-step write sequence <highlight><bold>2400</bold></highlight>, but the basic operation may be similar to that of each of the above-mentioned embodiments. </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 25, a</cross-reference> timing diagram of a write to a protected register using sequence <highlight><bold>2400</bold></highlight> according to an embodiment is set forth. The timing diagram of <cross-reference target="DRAWINGS">FIG. 25</cross-reference> illustrates a write of data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;12ABh (h indicates that 12AB is a hexidecimal number) into register <highlight><bold>1</bold></highlight> following sequence <highlight><bold>2400</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 24</cross-reference>. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 25</cross-reference> in conjunction with FIGS. <highlight><bold>19</bold></highlight> to <highlight><bold>24</bold></highlight>, first at step 1 <highlight><bold>921</bold></highlight>, a write command may be executed to a register (register address applied to address decoder <highlight><bold>9</bold></highlight>). Thus, data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value of 55AAh may be applied to address bus <highlight><bold>8</bold></highlight> and command register select signal sel_Cmd may be a high logic level. Also, comparator circuit <highlight><bold>324</bold></highlight> may provide a match signal 55aa_eq having a high logic level. Also, at this time, AND gate <highlight><bold>521</bold></highlight> in step counter <highlight><bold>52</bold></highlight> may be enabled (in response to count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b and select signal sel_reg<highlight><bold>1</bold></highlight> and command register select signal cmd_sel being high) and may provide a high output as an input to OR gate <highlight><bold>525</bold></highlight>. Thus, OR gate <highlight><bold>525</bold></highlight> may provide a high output to flip-flop <highlight><bold>527</bold></highlight>. As a result, flip-flop <highlight><bold>527</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may advance to a value of 01b. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> Next, a write command may be executed to register <highlight><bold>1</bold></highlight> as step 2 <highlight><bold>922</bold></highlight>. In step 1 <highlight><bold>922</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may become active (high) while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>). Also, in step 2 <highlight><bold>922</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of 12ABh as data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. Because at this time step counter <highlight><bold>60</bold></highlight> outputs a count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b, AND gate <highlight><bold>82</bold></highlight> may output a signal wr_db as a pulse (following write signal wr). In response to signal wr_db, write data setting buffer <highlight><bold>22</bold></highlight> may latch received data data&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and provide data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value of 12ABh to comparator circuit <highlight><bold>322</bold></highlight>. Inverter <highlight><bold>321</bold></highlight> may provide inverted data having a value of ED54h to comparator circuit <highlight><bold>323</bold></highlight>. In this case, comparator circuit <highlight><bold>322</bold></highlight> may detect a match between data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a high logic level. However, comparator circuit <highlight><bold>323</bold></highlight> may not detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a low logic level. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> Also, at this time, AND gates (<highlight><bold>521</bold></highlight> and <highlight><bold>522</bold></highlight>) in step counter <highlight><bold>52</bold></highlight> may be disabled (in response to count signal bit stpcnt&lsqb;<highlight><bold>10</bold></highlight>&rsqb;&equals;01b) and may provide a low outputs as an inputs to OR gate <highlight><bold>525</bold></highlight>. Thus, OR gate <highlight><bold>525</bold></highlight> may provide a low output to flip-flop <highlight><bold>527</bold></highlight>. As a result, flip-flop <highlight><bold>527</bold></highlight> may latch a low level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. Also, at this time, AND gate <highlight><bold>523</bold></highlight> in step counter <highlight><bold>52</bold></highlight> may be enabled (in response to count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;01b and select signal sel_reg<highlight><bold>1</bold></highlight> being high) and may provide a high output as an input to OR gate <highlight><bold>526</bold></highlight>. Thus, OR gate <highlight><bold>526</bold></highlight> may provide a high output to flip-flop <highlight><bold>528</bold></highlight>. As a result, flip-flop <highlight><bold>528</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may advance to a value of 10b. </paragraph>
<paragraph id="P-0194" lvl="0"><number>&lsqb;0194&rsqb;</number> Next, another write command may be executed as step 3 <highlight><bold>923</bold></highlight>. In step 3 <highlight><bold>923</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may remain high while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>). Also, in step 3 <highlight><bold>923</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of ED54h as data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. In this case, comparator circuit <highlight><bold>323</bold></highlight> may detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a high logic level. However, comparator circuit <highlight><bold>322</bold></highlight> may not detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a low logic level. </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> Also, at this time, AND gates (<highlight><bold>524</bold></highlight> and <highlight><bold>522</bold></highlight>) in step counter <highlight><bold>52</bold></highlight> may be enabled (in response to count signal bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;10b, select signal sel_reg<highlight><bold>1</bold></highlight> being high, and match signal dbz_eq being high) and may respectively provide a high output as an input to OR gates (<highlight><bold>525</bold></highlight> and <highlight><bold>526</bold></highlight>). OR gates (<highlight><bold>525</bold></highlight> and <highlight><bold>526</bold></highlight>) may each provide a high output as an input to a respective flip-flop circuit (<highlight><bold>527</bold></highlight> and <highlight><bold>528</bold></highlight>). As a result, flip-flop circuit <highlight><bold>528</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>1</bold></highlight>&rsqb; and flip-flop <highlight><bold>527</bold></highlight> may latch a high level count bit stpcnt&lsqb;<highlight><bold>0</bold></highlight>&rsqb; in response to a falling edge of write signal wr. In this way, count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may advance to a value of 11b. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> Next, another write command may be executed as step 4 <highlight><bold>924</bold></highlight>. In step 4 <highlight><bold>924</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may remain high while other select signals (sel_reg<highlight><bold>2</bold></highlight> to sel_regn) may be low (illustrated as signal sel_xxxxx in <cross-reference target="DRAWINGS">FIG. 25</cross-reference>). Also, in step 4 <highlight><bold>924</bold></highlight>, CPU <highlight><bold>6</bold></highlight> may apply a value of 12ABh as data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; to data bus <highlight><bold>8</bold></highlight> and may provide write signal wr having a pulse. In this case, comparator circuit <highlight><bold>322</bold></highlight> may detect a match between data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal db_eq having a high logic level. However, comparator circuit <highlight><bold>323</bold></highlight> may not detect a match between data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and inverted data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; and may output a match signal dbz_eq having a low logic level. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> At this time, AND gate <highlight><bold>721</bold></highlight> in protect write signal generator <highlight><bold>72</bold></highlight> may provide a high output (because count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;11b, write signal wr is high, and match signal db_eq is high). Thus, AND gate <highlight><bold>722</bold></highlight> may generate write signal wr_preg. Write signal wr_preg may be a pulse essentially following write signal wr during step 4 <highlight><bold>924</bold></highlight>. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> In response to write signal wr_preg having a pulse and select signal sel_reg<highlight><bold>1</bold></highlight> being high, data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (12ABh in the present example as latched by write data setting buffer <highlight><bold>22</bold></highlight>) may be written into register <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> Now, using timing diagrams of <cross-reference target="DRAWINGS">FIGS. 26 and 27</cross-reference>, an explanation will be made for cases where a write sequence is initiated to register <highlight><bold>1</bold></highlight>, however, write sequence <highlight><bold>2400</bold></highlight> is not followed and the write becomes invalid. </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 26, a</cross-reference> timing diagram illustrating a case where an erroneous write operation to protected register <highlight><bold>1</bold></highlight> may occur without a preceding write operation writing 55AAh to a command register according to an embodiment is set forth. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> The timing diagram of <cross-reference target="DRAWINGS">FIG. 26</cross-reference> may illustrate the above-mentioned first case of an erroneous write. </paragraph>
<paragraph id="P-0202" lvl="0"><number>&lsqb;0202&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 26</cross-reference> in conjunction with FIGS. <highlight><bold>19</bold></highlight> to <highlight><bold>24</bold></highlight>, select signal sel_reg<highlight><bold>1</bold></highlight> may go high to select register <highlight><bold>1</bold></highlight>. However, because count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;00b at this time, AND gate <highlight><bold>621</bold></highlight> in sequence error detector <highlight><bold>62</bold></highlight> may provide a high logic level as an input to OR gate <highlight><bold>627</bold></highlight>. Thus, OR gate <highlight><bold>627</bold></highlight> may provide a signal pr_sp_error having a high logic level. Flip-flop <highlight><bold>628</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. </paragraph>
<paragraph id="P-0203" lvl="0"><number>&lsqb;0203&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 27, a</cross-reference> timing diagram illustrating a case where an erroneous write operation may occur after step 3 <highlight><bold>923</bold></highlight> with a value other than data (as compared to data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 2 <highlight><bold>922</bold></highlight>) according to an embodiment is set forth. </paragraph>
<paragraph id="P-0204" lvl="0"><number>&lsqb;0204&rsqb;</number> The timing diagram of <cross-reference target="DRAWINGS">FIG. 27</cross-reference> may illustrate the above-mentioned first case of an erroneous write. </paragraph>
<paragraph id="P-0205" lvl="0"><number>&lsqb;0205&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 27</cross-reference> in conjunction with FIGS. <highlight><bold>19</bold></highlight> to <highlight><bold>24</bold></highlight>, steps 1 to 3 (<highlight><bold>921</bold></highlight> to <highlight><bold>923</bold></highlight>) may be performed in accordance with sequence <highlight><bold>2400</bold></highlight> in essentially the same manner as steps 1 to 3 (<highlight><bold>921</bold></highlight> to <highlight><bold>923</bold></highlight>) in the timing diagram of <cross-reference target="DRAWINGS">FIG. 25</cross-reference>. Next a write (after step 3 <highlight><bold>923</bold></highlight>) is made to register <highlight><bold>1</bold></highlight> with data DATA&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; having a value other than data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; in step 2 <highlight><bold>922</bold></highlight>. For example, data data&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; may have a value of 1111h while data db&lsqb;<highlight><bold>15</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb; (from step 2) may have a value of 12ABh. Thus, match signal db_eq may remain at a low logic level. AND gate <highlight><bold>626</bold></highlight> in sequence error detector <highlight><bold>62</bold></highlight> may receive the low match signal db_eq and count signal stpcnt&lsqb;<highlight><bold>1</bold></highlight>:<highlight><bold>0</bold></highlight>&rsqb;&equals;11b and may provide a high output. In this way, OR gate <highlight><bold>627</bold></highlight> may provide an output signal pr_sq_error having a high logic level. Flip-flop <highlight><bold>627</bold></highlight> may then provide an error signal sq_error having a high logic level upon a rising edge of write signal wr. Furthermore, with match signal db_eq having a low logic level, AND gate <highlight><bold>721</bold></highlight> in protect write signal generator <highlight><bold>72</bold></highlight> may provide an output having a logic low. In this way, AND gate <highlight><bold>722</bold></highlight> may provide a write signal wr_preg having a logic low level and a write to register <highlight><bold>1</bold></highlight> may be prevented. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> As described above, in accordance with this embodiment, the number of steps in write sequence <highlight><bold>2400</bold></highlight> may be increased to four steps. Also, a specific value may be written into a specific address (command register) to indicate write sequence <highlight><bold>2400</bold></highlight> may be performed. In this way, repeated erroneous writing of a random value to the same register due to runaway by a CPU <highlight><bold>6</bold></highlight> or the like, may be prevented. Runaway by a CPU <highlight><bold>6</bold></highlight> may occur, for example, when CPU <highlight><bold>6</bold></highlight> is stuck in a loop. </paragraph>
<paragraph id="P-0207" lvl="0"><number>&lsqb;0207&rsqb;</number> Further, in accordance with the embodiments, it may not be necessary to include an extra (parity) bit of data to ensure data on data bus <highlight><bold>8</bold></highlight> has not been corrupted. Thus, error correction circuitry may not be necessary. In this way, the method of write protection according to the embodiments may be implemented with a relatively small amount of circuitry. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> Further, the method of write protection according to the embodiments may be implemented by using circuitry for temporarily storing the write data while software may perform the detection (data comparison, or the like) to determine whether the write data is valid. However, it should be noted, that detection by software may increase the program code and may increase the time required to write to a register. In comparison, the above embodiments may have the effect that it may be sufficient to execute a write command three times to ensure a desired write to a protected register has occurred. In this way, the program code may be reduced and the time required to write to a register may be reduced. </paragraph>
<paragraph id="P-0209" lvl="0"><number>&lsqb;0209&rsqb;</number> As described above, in accordance with a write protection method of the embodiments, a determination may be made whether or not a write operation to a protected register has been performed in accordance with a specific write sequence. A control may be performed so that the writing of data to a protected register may only occur when a specific write sequence has been executed. In this way, undesired writes to a protected register may be prevented. </paragraph>
<paragraph id="P-0210" lvl="0"><number>&lsqb;0210&rsqb;</number> It is understood that the embodiments described above are exemplary and the present invention should not be limited to those embodiments. Specific structures should not be limited to the described embodiments. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> Thus, while the various particular embodiments set forth herein have been described in detail, the present invention could be subject to various changes, substitutions, and alterations without departing from the spirit and scope of the invention. Accordingly, the present invention is intended to be limited only as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A write protect method for preventing an erroneous write to a predetermined register, comprising the steps of: 
<claim-text>determining whether or not a write operation for writing data to the predetermined register was performed according to a predetermined write sequence including at least a first and second write command; and </claim-text>
<claim-text>controlling the writing of the data to the predetermined register so that the writing of data is only performed when it is determined in the determining step that the write operation for writing data to the predetermined register was performed according to the predetermined write sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>the step of determining includes verifying the data by performing a data comparison. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>the first write command includes providing the data on a data bus and providing a first address corresponding to the predetermined register; and </claim-text>
<claim-text>the second write command includes providing inverse data on the data bus and providing the first address corresponding to the predetermined register. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein: 
<claim-text>the predetermined write sequence further includes a third write command; </claim-text>
<claim-text>the third write command includes providing the data on the data bus and providing the first address corresponding to the predetermined register; and </claim-text>
<claim-text>the predetermined write sequence is executed in the order of first write command, second write command, and third write command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein: 
<claim-text>the predetermined write sequence further includes a third write command; </claim-text>
<claim-text>the third write command includes providing a predetermined value to the data bus and a second address; </claim-text>
<claim-text>the predetermined write sequence is executed in the order of third write command, first write command, and second write command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further including the step of: 
<claim-text>providing an error signal to a processing unit when it is determined that the write operation for writing data to the predetermined register was not performed according to the predetermined write sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The write protect method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>the step of determining whether or not a write operation has been performed is executed by a computing device in accordance with a write protect program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A write protect system for preventing an erroneous write to a first register, comprising: 
<claim-text>a write protect circuit that determines whether or not a write operation for writing data to the first register was performed according to a predetermined write sequence including at least a first and second command and controlling the writing of the data to the first register so that the writing of data is only performed when it is determined that the write operation for writing data to the first register was performed according to the predetermined write sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit is coupled to receive the data from a data bus coupled to a processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit is coupled to receive the data in the first command and coupled to receive different data in the second command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein: 
<claim-text>the predetermined write sequence includes a third command; and </claim-text>
<claim-text>the write protect circuit is coupled to receive the data in the third command and the predetermined write sequence is executed in the order of first command, second command, and third command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit is coupled to receive at least one register select signal having a first register select value in the first and second commands; </claim-text>
<claim-text>the predetermined write sequence includes a third command; and </claim-text>
<claim-text>the write protect circuit is coupled to receive a predetermined data value in the third command and the at least one register select signal having a command register select value. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit resets to detect the first command in the predetermined sequence when it is determined that the predetermined sequence has not been followed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit is coupled to receive the data in the first command and coupled to receive inverse data in the second command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A write protect system for preventing an erroneous write to a first storage circuit, comprising: 
<claim-text>a write protect circuit that determines whether or not a write operation for writing data to the first storage circuit was performed according to a predetermined write sequence including at least a first and second command and controlling the writing of the data to the first storage circuit so that the writing of data is only performed when it is determined that the write operation for writing data to the first storage circuit was performed according to the predetermined write sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit includes a data latch circuit coupled to receive the data and provide latched data in response to the first command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit includes a comparator circuit coupled to receive the latched data and second command data and provide a comparison result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein: 
<claim-text>the comparison result includes a match signal indicating a comparison between the latched data and the second command data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit includes a state circuit providing a write sequence state indicating a progression of the write sequence. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The write protect system according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein: 
<claim-text>the write protect circuit includes a sequence error detector coupled to receive the write sequence state and provide a sequence error signal.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005241A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005241A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005241A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005241A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005241A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005241A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005241A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005241A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005241A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005241A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005241A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005241A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005241A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005241A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005241A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005241A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005241A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005241A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005241A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005241A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005241A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030005241A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030005241A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030005241A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030005241A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030005241A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030005241A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030005241A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030005241A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
