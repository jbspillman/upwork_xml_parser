<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005456A1-20030102-D00000.TIF SYSTEM "US20030005456A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00001.TIF SYSTEM "US20030005456A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00002.TIF SYSTEM "US20030005456A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00003.TIF SYSTEM "US20030005456A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00004.TIF SYSTEM "US20030005456A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00005.TIF SYSTEM "US20030005456A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00006.TIF SYSTEM "US20030005456A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00007.TIF SYSTEM "US20030005456A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00008.TIF SYSTEM "US20030005456A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00009.TIF SYSTEM "US20030005456A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00010.TIF SYSTEM "US20030005456A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005456A1-20030102-D00011.TIF SYSTEM "US20030005456A1-20030102-D00011.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005456</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10181801</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020723</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2000-18841</doc-number>
</priority-application-number>
<filing-date>20000127</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04N007/173</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F015/16</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>725</class>
<subclass>093000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>725</class>
<subclass>086000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>219000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and system for distributing program, server and client terminals for executing program, device for obtaining program, and recording medium</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Takefumi</given-name>
<family-name>Naganuma</family-name>
</name>
<residence>
<residence-non-us>
<city>Kyoto</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Masaomi</given-name>
<family-name>Yoshida</family-name>
</name>
<residence>
<residence-non-us>
<city>Kyoto</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Akira</given-name>
<family-name>Nakajima</family-name>
</name>
<residence>
<residence-non-us>
<city>Kyoto</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Dickstein Shapiro</name-1>
<name-2>Morin &amp; Oshinsky</name-2>
<address>
<address-1>2101 L Street NW</address-1>
<city>Washington</city>
<state>DC</state>
<postalcode>20037-1526</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/JP01/00278</doc-number>
<document-date>20010118</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The distribution of a program is carried out by an agent system. The server (<highlight><bold>10</bold></highlight>) has a function ((<highlight><bold>4</bold></highlight>)) which transmits a service ID uniquely determined inside the distribution system, and a function ((<highlight><bold>6</bold></highlight>)) which, in the case where there is an acquisition request for a program attached with the transmitted service ID, transmits the program together with the service ID to the client terminal making the acquisition request; and the client terminals (<highlight><bold>20</bold></highlight>) are equipped with a function ((<highlight><bold>3</bold></highlight>)) which makes a request for the issuing of a service ID before the request of a required program, a function ((<highlight><bold>5</bold></highlight>)) which acquires the service ID transmitted from the server, and makes an acquisition request for the program attached with the acquired service ID, and a function which authorizes the execution of a program only in the case where the received program matches the service ID attached at the time of said acquisition request. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is related to a program distribution system, a distribution method, a server and client terminals for executing these, a program procurement apparatus, and a recording medium. </paragraph>
</section>
<section>
<heading lvl="1">PRIOR ART TECHNOLOGY </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Due to recent developments of the Internet, it has become possible to easily carry out the procurement of various information from a terminal on hand. Further, it is possible for fellow people existing at different locations to connect to a host computer via various terminals to carry out an online conversation service in personal computer communication called a chat or the like. In this way, by using the Internet, it has become possible to use various services. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> As for the procured information, when there is the case of data, there is also the case of programs. Further, in order to execute a chat or the like, it is necessary to carry out execution after downloading an application program for carrying out such chat to the terminals in advance. Namely, there are various kinds of procured programs including those used at the downloading terminals such as functional improvements of the terminals or applications used by the users of the terminals, and programs for information exchange with a plurality of terminals, and the like. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Incidentally, in accordance with the spread and functional improvements of portable terminals, there are many situations where the various services described above are used from such portable terminals. A problem of this case is the operability of the portable terminals. Namely, common personal computers and other desktop-type computers have relatively large keyboards and do not have problems with inputting various data. However, because the entire apparatus of a portable terminal needs to be compact, the inputting of data becomes complicated. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Furthermore, recently it has become possible to connect to the Internet and receive various services even using a portable phone which is one type of portable terminal. When this is done, the complexity of the input operations described above becomes increasingly notable. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Further, in contrast with personal computers and the like, in the case where the portable phone is a relatively compact and low-priced apparatus even among other portable terminals, the usable functions of such apparatus are installed in advance at the maker side, and the user is almost never able to make additions after purchase. As a result, many functions become installed in portable terminals at the manufacturing step. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Then, such multifunction apparatus must be operated by using a few operation buttons, and operations become complicated. Moreover, these multiple functions are not limited to those that will necessarily all be used by users. Accordingly, because unnecessary functions are installed, there is the problem that the operability for the necessary functions is degraded. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> It is an object of the present invention to provide a program distribution system, a server and client terminals for executing this, a program procurement apparatus and a recording medium which are highly reliable and which make it possible to easily carry out downloading and the like of programs and various other information to client terminals. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The program distribution method according to this invention is a program distribution method for distributing a program from a server to client terminals. Further, said client terminals make a request for a service ID to the server before program distribution, said server transmits a server ID to said client terminals in accordance with the requests from said client terminals, said client terminals make a request for the distribution of a program attached with the acquired service ID to said server, said server transmits a program attached with a service ID to said server in accordance with the requests from said client terminals, and said client terminals execute the previously received program in the case where the service ID sent in together with the received program matches the previously acquired service ID, and destroys the received program in the case where there is no match. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Further, the program distribution system according to this invention is an example of a system applied for executing this distribution system. This system is a program distribution system which distributes a program from a server to client terminals. Further, said server and said client terminals are provided with an agent system, and the distribution of said program is carried out by the agent system. Furthermore, said server has a function which transmits a service ID uniquely determined inside the distribution system before the transmission of said program, and a function which, in the case where there is an acquisition request for a program attached with a transmitted service ID, transmits said program together with the service ID to said client terminal making the acquisition request. Further, said client terminals are equipped with a function which makes a request for the issuing of a service ID before the request of a required program, a function which acquires the service ID transmitted in from said server, and issues an acquisition request for the program attached with the acquired service ID, and a function which authorizes the execution of a program only in the case where the received program is attached with a service ID matching the service ID attached at the time of said acquisition request. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In this regard, the &ldquo;function which transmits a service ID&rdquo; corresponds to the ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>and the ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a </italic></highlight>in the embodiments. The &ldquo;function which transmits said program together with the service ID&rdquo; corresponds to the &ldquo;service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b</italic></highlight>&rdquo; in the embodiments. The &ldquo;function which makes a request for the issuing of a service ID&rdquo; corresponds to the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>in the embodiments. The &ldquo;function which issues a program acquisition request&rdquo; and the &ldquo;function which authorizes the execution of a program&rdquo; correspond to the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b </italic></highlight>in the embodiments. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Further, the server according to this invention is a server equipped with an agent system for distributing a program to client terminals. Furthermore, said server is equipped with a function which transmits a service ID uniquely determined inside the distribution system before the transmission of said program, and a function which, in the case where there is an acquisition request for a program attached with a transmitted service ID, transmits said program together with the service ID to the client terminal making the acquisition request. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Furthermore, the program procurement apparatus according to this invention is a program procurement apparatus equipped with an agent system which receives the distribution of a program from a server. Further, this apparatus is equipped with a function which makes a request for the issuing of a service ID before the request of a program, a function which acquires the service ID transmitted in from said server, and issues an acquisition request for the program attached with the acquired service ID, and a function which authorizes the execution of a program only in the case where the received program is attached with a service ID matching the service ID attached at the time of said acquisition request. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Moreover, the client terminal according to this invention is a client terminal which receives the distribution of a program from a server, and is equipped with the program procurement apparatus described above, wherein the acquisition of a program distributed from said server is carried out by the program procurement apparatus. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In accordance with this invention, a program distribution using an agent system is carried out in order to plan the simplification of the input process. In this way, because the provision of the program and also the execution of the program after provision are carried out automatically, the user process is simplified, and operability is improved. Accordingly, it is possible to ensure a smooth process even in terminals such as portable terminals where the input apparatus is compact and there is trouble with operability. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Incidentally, in a terminal that exhibits the merit of being able to carry out automatic execution by converting a program to an agent, in the case where it is assumed that a virus or the like is included in an acquired program, there is the risk that the malicious program including such virus will be automatically executed and infect the client terminal. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> With regard to this malicious program, the same problem arises even in the case where a program is downloaded and procured via the Internet in accordance with commands from an ordinary user. However, in ordinary cases, the decision of whether or not to finally download and the command to execute that after downloading are basically carried out in accordance with inputs from the user. Accordingly, in the case where the terminal is charged with a certain degree of self-responsibility, and a malicious program is noticed partway, it is possible to prevent the execution of the malicious program from happening. However, in the case where execution is carried out by the agent system presumed in the present invention, because programs are automatically acquired, and the acquired programs are automatically executed, such arrangement is unsuitable to the principle of self-responsibility described above. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In this regard, using the concept of a service ID, the provision of a service ID from the server to a client terminal is carried out before the provision of the actual program. Further, the server is arranged to send a program (attached with a service ID) only in the case where there is a program acquisition request together with the service ID from the client terminal. In this way, when the client terminal is arranged to check the service ID attached to the received program, and execute the program only in the case of a correct service ID, then in the case where the received program has the wrong service ID or no service ID, such program is destroyed as a malicious program, and the risk of infection by a virus is eliminated. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Further, for the server side, by judging a program request that has no service ID or the wrong service ID to be an illegal request and stopping the transmission of the program, the provision of programs is carried out only to legitimate client terminals. Furthermore, by making it possible to receive only programs having the correct service ID, it is possible to suppress illegal copying between client terminals. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Furthermore, the recording medium of the present invention is a recording medium which is readable by a computer and which stores a program for a program distribution system which includes a command for the computer to execute a process which transmits a service ID uniquely determined inside the distribution system before the transmission of a program, and a process which, in the case where an acquisition request for a program attached with the transmitted service ID is received, transmits said program together with the service ID to the client terminal making the acquisition request. By having a computer read this recording medium, the server according to the present invention is formed. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Each of the means and functions that form the various apparatuses according to the present invention can be achieved by dedicated hardware circuits, or they can also be achieved by a programmed computer.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a drawing showing a preferred embodiment of the program distribution system according to the present invention. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a drawing showing the internal structure of the server. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a drawing showing the internal structure of a client terminal. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a drawing showing the data structure of a user list. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a drawing showing the data structure of a service program list. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a drawing showing the data structure of a service list. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a drawing for describing part of the functions of the ID acquisition function portion of the client terminal. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart for describing the functions of the request handler. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart for describing the functions of the service manager. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a drawing for describing the operation of the program distribution system in the present embodiments. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a drawing for describing an outline of the agent system (automatic execution process of the agent). </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a drawing showing a system structure for implementing the recording medium according to the present invention. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a drawing showing a system structure for implementing the recording medium according to the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">PREFERRED EMBODIMENTS OF THE INVENTION </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The present invention will be described in detail with reference to the appended drawings. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a preferred embodiment of the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in the present embodiment, a server <highlight><bold>10</bold></highlight> which provides a program distribution service and client terminals <highlight><bold>20</bold></highlight> which receive programs distributed from the server <highlight><bold>10</bold></highlight> are connected via communication lines. Actually, the server <highlight><bold>10</bold></highlight> and the client terminals <highlight><bold>20</bold></highlight> are connected via a base station <highlight><bold>30</bold></highlight>. The client terminals <highlight><bold>20</bold></highlight> in this example are, for example, portable phones or PHS or the like, but they can be applied to PDA or other various terminals. Further, the provided service programs can be assumed to be various items, for example, communication programs for executing a chat, programs for functional improvement of each portable terminal, programs and the like for execution by the portable terminals, and various other items. Furthermore, because items called programs are agents, the essential contents may be various data. Further, in the case where the portable terminal is a portable phone or the like, the various functions established in advance in the prior art are held in the server <highlight><bold>10</bold></highlight> as agent programs (service programs), and the user may download only required functions. In this way, unnecessary functions for the user do not exist in the portable terminal. Accordingly, it is possible to solve the complexity of the operability due to the presence of multiple unnecessary functions in the portable terminal, and the required memory capacity increase and the like which formed prior art problems. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In this system, service programs (SP) required for executing various services are stored in a service program memory portion <highlight><bold>11</bold></highlight> of the server <highlight><bold>10</bold></highlight>. Further, the client terminals <highlight><bold>20</bold></highlight> request the required service programs (SP), and receive the service programs (SP) sent in from the server <highlight><bold>10</bold></highlight>, after which execution is carried out inside the client terminals <highlight><bold>20</bold></highlight>. Further, the acquisition operation of such service programs SP is executed by the agent system. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In short, the present embodiment is a system for implementing a program (agent) distribution service based on an agent system. Further, the agent system transfers programs (agents), and in order for such programs to be executed automatically at the transfer destination, the security of the transferred-in programs (agents) needs to be ensured. Namely, the reason for this is that if a virus is included in a sent-in program, the malicious program (agent) that includes this virus is loaded into the client terminals <highlight><bold>20</bold></highlight> and simultaneously executed, whereby the terminals become infected by the virus. In this regard, the present embodiment is equipped with functions that make it possible to acquire only legitimate programs. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Namely, the transmission and reception of information is carried out between a request handler <highlight><bold>21</bold></highlight> provided in the client terminals <highlight><bold>20</bold></highlight> and a service manager <highlight><bold>12</bold></highlight> provided in the server <highlight><bold>10</bold></highlight>, and the server <highlight><bold>10</bold></highlight> (service manager <highlight><bold>12</bold></highlight>) provides service programs after confirming requests from legitimate client terminals <highlight><bold>20</bold></highlight>. Further, the client terminals <highlight><bold>20</bold></highlight> (client handler <highlight><bold>21</bold></highlight>) finally carry out acquisition after confirmation of a legitimate program. In this way, it is possible to prevent the acquisition of malicious programs (ensuring of security). </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Further, as described below, even for the service provider of the program distribution service, because service programs are provided only to legitimate client terminals, it is possible to deter transferring (illegal copying) to third parties. Accordingly, in the case where a program distribution service is executed as a business, it is possible to reliably carry out accounting, and a stable business development can be carried out. Further, the specifics are as follows below. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> First, in the present embodiment, a uniquely determined service ID is established inside the system, and before a service program is acquired, the client terminals <highlight><bold>20</bold></highlight> acquire the service ID, and then a request for the service program set by the service ID is carried out. On the other hand, the server <highlight><bold>10</bold></highlight> receives a request to issue a service ID from the client terminals, issues a service ID, and stores the issued service ID correlated with the service program. In this way, next, in the case where there is a service program request having an attached service ID from a client terminal, the service program is distributed only in the case where there is a match with the combined contents (service ID&plus;service program) stored as described above. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In this way, by not providing a service program in the case where there is no service ID or a different service ID, it is possible to prevent illegal copying. Further, for the client terminals <highlight><bold>20</bold></highlight>, by loading only a service program sent in together with a correct service ID, even when a service program with no service ID or a different service ID is provided, this is assumed to be a malicious program, and rejection can be carried out. Furthermore, when only programs having an attached service ID are acquired in this way, even if an attempt is made to transfer an acquired service program, because there is no service ID, the secondary effect of preventing illegal copying is also exhibited. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Further, the server <highlight><bold>10</bold></highlight> (in particular, the service manager <highlight><bold>12</bold></highlight>) for implementing the process functions described above has the internal structure shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Further, the client terminals <highlight><bold>20</bold></highlight> (in particular, the request handler <highlight><bold>21</bold></highlight>) have the internal structure shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> First, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in addition to the service program memory portion <highlight><bold>11</bold></highlight> which stores service programs for implementing the actual service, the server <highlight><bold>10</bold></highlight> is equipped with the service manager <highlight><bold>12</bold></highlight> which provides service in accordance with service acquisition requests from the client terminals <highlight><bold>20</bold></highlight>, and an agent system <highlight><bold>13</bold></highlight> which transfers programs between server and client terminals, and provides messaging features. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Further, the service manager <highlight><bold>12</bold></highlight> is equipped with a service program managing portion <highlight><bold>14</bold></highlight> which manages the service programs (SP) stored in the service program memory portion <highlight><bold>11</bold></highlight> and provides prescribed service programs to the client terminals <highlight><bold>20</bold></highlight>, and a user list memory portion <highlight><bold>16</bold></highlight> which stores service IDs that manage service IDs, and the correlation of the service IDs and the service programs. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The data structure of the user list memory portion <highlight><bold>16</bold></highlight> is shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Namely, the user list memory portion <highlight><bold>16</bold></highlight> stores information related to the service programs managed (distributed) by the server <highlight><bold>10</bold></highlight>, and the issued service IDs, the service program names and the used addresses of the client terminals are correlated and registered. Further, the used addresses are IP addresses in the example of the drawing, but it is possible to use telephone numbers and other various information and the like which make it possible to identify client terminals. The registration, updating and deletion of this user list is carried out by a service ID managing portion <highlight><bold>15</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The service ID managing portion <highlight><bold>15</bold></highlight> is equipped with an ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a</italic></highlight>, an ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>and an ID deletion function portion <highlight><bold>15</bold></highlight><highlight><italic>c</italic></highlight>. The ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a </italic></highlight>issues service IDs that have been uniquely determined inside the system, and issues one service ID in accordance with an issue request from the ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b</italic></highlight>. Further, as for the concrete ID issuing method, various methods may be used, such as a method in which an ID creation/managing server is established to create unique serial numbers inside the system, and the issuing of an ID is requested to this ID creation/managing server and acquired, or a method in which IDs guaranteed to be unique by third party means such as IP addresses or domain names are held in advance, with these being read in as needed, or the like. In particular, when a third party means such as the latter is used, it is possible to operate the present system even in an environment where many unspecified servers are included such as the Internet or the like. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>procures service IDs in accordance with service ID acquisition requests (service program names&plus;used addresses) from the client terminals <highlight><bold>20</bold></highlight>, and sends service IDs to the client terminals <highlight><bold>20</bold></highlight>. Further, the ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>also has a function which correlates and registers the service program names that have been issued service IDs and the used addresses in the user list memory portion <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> Specifically, when a service ID acquisition request from a client terminal <highlight><bold>20</bold></highlight> is received, first the issuing of an ID is requested to the ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a</italic></highlight>, and when a service ID is received from the ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a</italic></highlight>, the service ID created by the ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a </italic></highlight>is sent to the client terminal <highlight><bold>20</bold></highlight> that made the acquisition request. At this time, in the present embodiment the portable terminals are portable phones or the like, and because the series of issuing processes are carried out between the server and clients in a state where they are connected by telephone lines, by only sending the service ID, the client terminal <highlight><bold>20</bold></highlight> side that receives the service ID can easily know which service program is correlated with the service ID. Further, because the telephone lines maintain a connected state, it is possible to transmit the service ID without confirming the used address or the like. Furthermore, in the case where communication is cut off partway in the present embodiment, it becomes impossible to provide a program, and all the data up to that point is immediately deleted. Then, execution is carried out again from the beginning. In this way, because all processes are reliably carried out by one telephone call, the security is improved. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Further, even in the case of connections to the Internet where the line has been cut off once, by confirming the used address, and then correlating and sending the service program name and the service ID to the address destination, it is possible to ensure a certain degree of security. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Further, the acquired service ID is correlated with the service program name and the used address received from the client terminal <highlight><bold>20</bold></highlight>, and a process for registration as a new item in the user list memory portion <highlight><bold>16</bold></highlight> is also carried out. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Furthermore, because the ID deletion function portion <highlight><bold>15</bold></highlight><highlight><italic>c </italic></highlight>deletes prescribed data registered in the user list memory portion <highlight><bold>16</bold></highlight>, namely, when the three items of information of the service ID, the service program and the used address are received together with a deletion request, the user list memory portion <highlight><bold>16</bold></highlight> is accessed, and a judgment of whether or not there is data matching such three items of information is carried out. Then, when matching data is, detected, such data is deleted. Further, in the case where there is no matching data, an error process is carried out. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> When a function for deleting from the user list is provided in this way, there are the following results. Namely, for example in the case where a system that collects usage fees every base period (e.g., every month or every year or the like) is used as an accounting system of distributed programs instead of taking an accounting for each distribution, for example when reference is made to the data stored in the user list memory portion <highlight><bold>16</bold></highlight>, and an accounting is billed to the registered used addresses, by using this deletion function to delete the user list, it is possible to stop future accounting. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> On the other hand, the service program managing portion <highlight><bold>14</bold></highlight> is equipped with a service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a</italic></highlight>, a service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b</italic></highlight>, a service program registration/deletion function portion <highlight><bold>14</bold></highlight><highlight><italic>c</italic></highlight>, and a service program table acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>d</italic></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a </italic></highlight>forms a table which correlates the service program names and the reference names (e.g., file names) of the physical programs. Further, information related to programs capable of service stored in the service program memory portion <highlight><bold>11</bold></highlight> is stored in this service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The three function portions <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>&tilde;<highlight><bold>14</bold></highlight><highlight><italic>d </italic></highlight>execute various processes based on the list stored in this service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a</italic></highlight>, namely, when a request from a client terminal <highlight><bold>20</bold></highlight> is received, first the service program table acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>d </italic></highlight>extracts the service program list stored in the service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a</italic></highlight>, and sends this as a table to the client terminal <highlight><bold>20</bold></highlight> that made the request. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> When the three items of information of the service program name; the service ID and the used address are received from a client terminal <highlight><bold>20</bold></highlight>, the service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>accesses the user list memory portion <highlight><bold>16</bold></highlight>, and a check of the presence or absence of related data is carried out. Then, in the case where such data is present, the service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a </italic></highlight>is accessed, and the file name corresponding to the service program name is acquired. Then, an operation is carried out to correlate and send the service ID and the service program to the client terminal <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The service program registration/deletion function portion <highlight><bold>14</bold></highlight><highlight><italic>c </italic></highlight>carries out registration and deletion for the service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a</italic></highlight>. Now, in the case where registration is carried out, when the service program name and the reference name of the physical program are received, these are correlated and registered in the list. Further, in the case where deletion is carried out, when a deletion request is received from at least one of the service program name and the reference name of the physical program, the corresponding list is deleted. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> On the other hand, as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> and <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the client terminal <highlight><bold>20</bold></highlight> is equipped with the request handler <highlight><bold>21</bold></highlight> which carries out transmission and reception of information required for acquisition of service programs with the server <highlight><bold>10</bold></highlight> in accordance with requests from the user, and an agent system <highlight><bold>22</bold></highlight> which transfers programs between the server <highlight><bold>10</bold></highlight> and the client terminal <highlight><bold>20</bold></highlight>, and provides messaging features. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Further, as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the request handler <highlight><bold>21</bold></highlight> is equipped with a user interface <highlight><bold>23</bold></highlight> for carrying out transmission and reception of information with the user a service program managing portion <highlight><bold>24</bold></highlight> for carrying out transmission and reception of information related to service programs, a service ID managing portion <highlight><bold>25</bold></highlight> which manages the service IDs issued from the server, and a service list memory portion <highlight><bold>26</bold></highlight> which stores a list (service list) of the service programs held by itself. As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the service list memory portion <highlight><bold>26</bold></highlight> forms a table which correlates the service IDs and the service program names. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> As for the user interface <highlight><bold>23</bold></highlight>, there are man-machine interfaces, and in accordance with a service program acquisition request inputted from control buttons or the like not shown in the drawings, the displaying of a table of the service programs on a display is carried out, and there are interfaces and the like for receiving the input of acquisition requests of required service programs from those displayed in such table. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The service ID managing portion <highlight><bold>25</bold></highlight> has an ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>and an ID retrieval function portion <highlight><bold>25</bold></highlight><highlight><italic>b</italic></highlight>. First, when the input of the service program name acquired via the user interface <highlight><bold>23</bold></highlight> is received, the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>has a function which issues a service ID acquisition request to the server <highlight><bold>10</bold></highlight> in a state where the IP address of itself (used address of itself) is attached. Further, as described above, because a service ID is sent back as a return value when the server <highlight><bold>10</bold></highlight> receives a service ID acquisition request, when the sent back service ID is received, there is a function that correlates and stores the received service ID and the requested service program name in the service list memory portion <highlight><bold>26</bold></highlight>, and provides such information to a service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b </italic></highlight>of the service program managing portion <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> When the input of the service ID is received, the ID retrieval function portion <highlight><bold>25</bold></highlight><highlight><italic>b </italic></highlight>searches the service ID column of the service list memory portion <highlight><bold>26</bold></highlight>, and carries out a judgment of whether or not there is a matching item. Then, there is a function that, in the case where a matching item is detected, sends back the service program name correlated with this, and in the case where there is no matching item, carries out an error process (e.g., notification that such item is not present). Specifically, a retrieval process is carried out in accordance with a request from the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b</italic></highlight>, and a reply is made to the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> On the other hand, the service program managing portion <highlight><bold>24</bold></highlight> is equipped with a service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a</italic></highlight>, and the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b</italic></highlight>. The service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a </italic></highlight>has a function that receives a table acquisition request from the user provided via the user interface <highlight><bold>23</bold></highlight>, and issues a service program table acquisition request to the server <highlight><bold>10</bold></highlight>. Then, because the server <highlight><bold>10</bold></highlight> receives this request and sends back a service program table, there is also a function that receives the reply, and outputs and displays such service program table to the user via the user interface <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> When the service program name and the service ID that should be acquired sent in from the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>are received, the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b </italic></highlight>has a function that transmits the three items of information attached with the IP address of itself (used address of itself) to the server <highlight><bold>10</bold></highlight>, and issues a service program acquisition request. Furthermore, because the service ID, the service program name and the service program are sent back from the server <highlight><bold>10</bold></highlight> in accordance with this issued request, the received service ID is transferred to the ID retrieval function portion <highlight><bold>25</bold></highlight><highlight><italic>b</italic></highlight>. Then, the service program name sent back from the ID retrieval function portion <highlight><bold>25</bold></highlight><highlight><italic>b </italic></highlight>and the service ID sent in from the server <highlight><bold>10</bold></highlight> are compared, and the service program is downloaded only in the case of a match. Then, after loading, the loaded program (agent) is executed automatically. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Further, in the case where there is no match, the data that was sent in from the server is destroyed. Accordingly, downloading is not carried out in the case where the service ID is not registered in the service list, in the case where the wrong service ID is sent in from the server <highlight><bold>10</bold></highlight> such as in the case where registration is correlated with a different service program name, and in the case where a program with no service ID is sent in. Accordingly, the risk of automatic execution of malicious programs is eliminated. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Further, in the embodiment described above, as for the timing of the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>storing in the service list memory portion <highlight><bold>26</bold></highlight>, the storage of the service ID and the service program name is carried out after the service ID is acquired. Because this is carried out during one telephone call connected by telephone lines or the like, the service ID sent back from the server can be identified as a univocally determined service program name (the item requested by the terminal), and there isn&apos;t much difference partway. However, the present invention is not limited to this, and as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> for example, in the case where a service program name is registered in the service program name column of the service list (<cross-reference target="DRAWINGS">FIG. 7</cross-reference>(<highlight><italic>a</italic></highlight>)) when a request for a service ID is issued, and a service ID is sent back, the acquired service ID may be stored in the service ID column corresponding to the service program name (<cross-reference target="DRAWINGS">FIG. 7</cross-reference>(<highlight><italic>b</italic></highlight>)). </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> At this time, when a service ID correlated with a service program name is sent back from the server, because a check of whether or not there is a match with the requested service program name can be carried out, there is even higher security. Further, this check of the service program name can be applied even to the case where the service program name and the service ID are simultaneously stored as in the embodiment described above. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> Next, a description will be given for the operating principle (the embodiment of the method of the present invention) of the embodiment described above. <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart showing the processing function of the request handler <highlight><bold>21</bold></highlight>, and <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flowchart showing the processing function of the service manager <highlight><bold>12</bold></highlight>. Further, <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows the operation order between the server <highlight><bold>10</bold></highlight> and a client terminal <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As shown in the drawings, when the user inputs a service program table acquisition request to the client terminal <highlight><bold>20</bold></highlight>, the service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a </italic></highlight>of the service program managing portion <highlight><bold>24</bold></highlight> receives this request via the user interface <highlight><bold>23</bold></highlight> (ST<highlight><bold>1</bold></highlight>). In accordance with the receipt of this request, the service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a </italic></highlight>issues a table acquisition request to the server <highlight><bold>10</bold></highlight> (service manager <highlight><bold>12</bold></highlight>) (ST<highlight><bold>2</bold></highlight>: (<highlight><bold>1</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The service manager <highlight><bold>12</bold></highlight> (service program table acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>d</italic></highlight>) that receives this table acquisition request (ST<highlight><bold>11</bold></highlight>) accesses the service program list memory portion <highlight><bold>14</bold></highlight><highlight><italic>a</italic></highlight>, acquires a table, and transmits the service program table to the client terminal <highlight><bold>20</bold></highlight> (ST<highlight><bold>12</bold></highlight>: (<highlight><bold>2</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The client terminal <highlight><bold>20</bold></highlight> (service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a</italic></highlight>) that acquires the service program table displays this table to the user via the user interface <highlight><bold>23</bold></highlight> (ST<highlight><bold>3</bold></highlight>). </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Because the user selects (purchases) a required service program from the displayed table, the selection is received by the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>via the user interface <highlight><bold>23</bold></highlight> (ST<highlight><bold>4</bold></highlight>), and a service ID acquisition request is issued to the service manager <highlight><bold>12</bold></highlight> (ST<highlight><bold>5</bold></highlight>: (<highlight><bold>3</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> This request is received by the ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b </italic></highlight>of the service manager <highlight><bold>12</bold></highlight> (ST<highlight><bold>13</bold></highlight>), and then the service ID created by operating the ID issuing function portion <highlight><bold>15</bold></highlight><highlight><italic>a </italic></highlight>is stored together with the service program name and the used address in the user list memory portion <highlight><bold>16</bold></highlight> (ST<highlight><bold>14</bold></highlight>). Then, the service ID is transmitted to the communicating client terminal.<highlight><bold>20</bold></highlight> (ST<highlight><bold>15</bold></highlight>: (<highlight><bold>4</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> This transmitted-in service ID is received by the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>of the client terminal <highlight><bold>20</bold></highlight>, and this service ID and the service program name are correlated and registered in the service list memory portion <highlight><bold>26</bold></highlight> (ST<highlight><bold>6</bold></highlight>). Next, the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a </italic></highlight>transfers the acquired information (service program name&plus;service ID) to the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b</italic></highlight>, and the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b </italic></highlight>that received this information issues a service program acquisition request to the server <highlight><bold>10</bold></highlight> (ST<highlight><bold>7</bold></highlight>: (<highlight><bold>5</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> This acquisition request is received by the service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>of the server <highlight><bold>10</bold></highlight> (ST<highlight><bold>16</bold></highlight>), and then the requested service program is transmitted together with the service ID to the communicating client terminal <highlight><bold>20</bold></highlight> only in the case where the acquired service ID, the service program name and the used address match (ST<highlight><bold>17</bold></highlight>: (<highlight><bold>6</bold></highlight>), (<highlight><bold>7</bold></highlight>) in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>). Further, although it is not mentioned in the flowcharts, in the case where there is no match, an error process is carried out, and the transmission of the service program is not carried out. Further, the data structure of the user list shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> correlates the three items of information of the service ID, the service program name and the used address, but a use flag of whether or not transmission to the user (client terminal <highlight><bold>20</bold></highlight>) has been actually executed is also provided, and such use flag may be raised (ST<highlight><bold>18</bold></highlight>). In this way, in the case where program distribution is executed as a business, during registration in the user list, those items having raised use flags can be used for accounting as actual sold items. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> On the other hand, the service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b </italic></highlight>of the client terminal <highlight><bold>20</bold></highlight> that received the service program attached with a service ID judges whether or not there is a legitimate item (ST<highlight><bold>8</bold></highlight>), and in the case of a legitimate item, the received program is preserved (ST<highlight><bold>9</bold></highlight>), and in the case of an illegal item, the received program is destroyed (ST<highlight><bold>10</bold></highlight>). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Further, when a correspondence of each processing portion is attached to each processing step described above, steps-<highlight><bold>1</bold></highlight>&tilde;<highlight><bold>3</bold></highlight> are the processing functions of the service program table acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>a</italic></highlight>, steps <highlight><bold>4</bold></highlight>&tilde;<highlight><bold>6</bold></highlight> and part of step <highlight><bold>7</bold></highlight> are the processing functions of the ID acquisition function portion <highlight><bold>25</bold></highlight><highlight><italic>a</italic></highlight>, and part of step <highlight><bold>7</bold></highlight> and steps <highlight><bold>8</bold></highlight>&tilde;<highlight><bold>10</bold></highlight> are the processing functions of the service program acquisition function portion <highlight><bold>24</bold></highlight><highlight><italic>b</italic></highlight>. Further, steps <highlight><bold>11</bold></highlight> and <highlight><bold>12</bold></highlight> are the processing functions of the service program table acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>d</italic></highlight>, steps <highlight><bold>13</bold></highlight>&tilde;<highlight><bold>15</bold></highlight> are the processing functions of the ID acquisition function portion <highlight><bold>15</bold></highlight><highlight><italic>b</italic></highlight>, and steps <highlight><bold>16</bold></highlight>&tilde;<highlight><bold>18</bold></highlight> are the processing functions of the service program acquisition function portion <highlight><bold>14</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Further, as is clear from the embodiment described above, the input process of the user is completed merely by inputting a service program table display request, and then inputting the service program name to be used (purchased) from those in the table, and because the request to issue a service ID for security, the management of issued service IDs and the check of the program finally sent in are all executed at the system side, processing becomes simple. Moreover, the two processes described above can be carried out practically by the simple process of inputting a number, or scrolling the cursor and executing selection at a required position. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Furthermore, in the present embodiment, because the service programs (SP) provided to the client terminals <highlight><bold>20</bold></highlight> are agents, they are automatically executed after being transferred to the client terminals <highlight><bold>20</bold></highlight>. The principle (process) of automatic execution is as follows below. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Namely, as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, because an agent transmission portion <highlight><bold>13</bold></highlight><highlight><italic>a </italic></highlight>of the agent system <highlight><bold>13</bold></highlight> of the server <highlight><bold>10</bold></highlight> transmits a related service program (SP) to the client terminal <highlight><bold>20</bold></highlight>, this is received by an agent receiving portion <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>of the agent system <highlight><bold>22</bold></highlight> of the client terminal <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Then, the agent receiving portion <highlight><bold>22</bold></highlight><highlight><italic>a </italic></highlight>restores the received agent (service program (SP)) to an executable state, and carries out storage in a prescribed memory area of the client terminal <highlight><bold>20</bold></highlight>. This restored agent (service program (SP)) has an automatic execution portion a and a normal execution portion b. The automatic execution portion a carries out program initialization and system setup immediately after downloading, and the normal execution portion b executes the actual service (the original process required by the user). </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Next, an automatic execution process portion <highlight><bold>22</bold></highlight><highlight><italic>b </italic></highlight>of the agent system <highlight><bold>22</bold></highlight> executes the automatic execution portion a of the transferred and restored service program SP. In this way, the service program (SP) is automatically executed without receiving an execution command from the user. Further, in the case where, for example, there is also an execution command of the normal execution portion b in the process of the automatic execution portion a, operations are also automatically continued for the normal execution portion b. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Each of the embodiments described above were described with the assumption that they are all in an installed state in an apparatus, but a program can be arranged to have a computer execute each of the processes (e.g., the processes for executing the flowchart shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>) in the server <highlight><bold>10</bold></highlight> described above, and such program may be provided by being recorded on a prescribed recording medium. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Namely, as shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> and <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the recording medium includes a floppy disk (FD) <highlight><bold>40</bold></highlight> and a CD-ROM <highlight><bold>41</bold></highlight> and the like, and the program stored on such recording medium <highlight><bold>40</bold></highlight>, <highlight><bold>41</bold></highlight> is installed in a (built-in) HD unit <highlight><bold>45</bold></highlight> connected to a computer <highlight><bold>44</bold></highlight> via a FD drive <highlight><bold>42</bold></highlight> or a CD-ROM drive <highlight><bold>43</bold></highlight>, and in this way, the computer <highlight><bold>44</bold></highlight> forms the server <highlight><bold>10</bold></highlight> described in the embodiments described above. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Specifically, the service manager <highlight><bold>12</bold></highlight>, the agent system <highlight><bold>13</bold></highlight> and the like in the embodiments are installed in the HD unit <highlight><bold>45</bold></highlight>, and these are transferred from the HD unit <highlight><bold>45</bold></highlight> to an internal memory <highlight><bold>46</bold></highlight> with each use for example, and it is possible to carry out various processes therein at high speed. Further, the service program memory portion <highlight><bold>11</bold></highlight> is achieved by the HD unit <highlight><bold>45</bold></highlight> and the like. Further, the symbol <highlight><bold>47</bold></highlight> in the drawings is a keyboard, and inputs received from this keyboard operate the service program registration/deletion function portion <highlight><bold>14</bold></highlight><highlight><italic>c</italic></highlight>, whereby the registration/deletion of the service program list is executed. </paragraph>
<paragraph id="P-0086" lvl="7"><number>&lsqb;0086&rsqb;</number> Industrial Application </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> In this invention, by providing a program distribution system which uses an agent system, it is possible to easily carry out downloading and the like of programs and other information to terminals. Furthermore, in this invention, in the distribution of programs, a service ID is used, and because the provision and acquisition of programs are carried out on the condition that a correct service ID is attached, security is also improved. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A program distribution system which distributes a program from a server to client terminals, wherein: 
<claim-text>said server and said client terminals are provided with an agent system, and the distribution of said program is carried out by the agent system; </claim-text>
<claim-text>said server has a function which transmits a service ID uniquely determined inside the distribution system before the transmission of said program, and a function which, in the case where there is an acquisition request for a program attached with the transmitted service ID, transmits said program together with the service ID to said client terminal making the acquisition request; and </claim-text>
<claim-text>said client terminals are equipped with a function which makes a request for the issuing of a service ID before the request of a required program, a function which acquires the service ID transmitted in from said server, and issues an acquisition request for the program attached with the acquired service ID, and a function which authorizes the execution of a program only in the case where the received program is attached with a service ID matching the service ID attached at the time of said acquisition request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A server equipped with an agent system for distributing a program to client terminals, wherein: 
<claim-text>said server is equipped with a function which transmits a service ID uniquely determined inside the distribution system before the transmission of said program, and </claim-text>
<claim-text>a function which, in the case where there is an acquisition request for a program attached with the transmitted service ID, transmits said program together with the service ID to the client terminal making the acquisition request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A program procurement apparatus equipped with an agent system which receives the distribution of a program from a server, comprising: 
<claim-text>a function which makes a request for the issuing of a service ID before the request of a program; </claim-text>
<claim-text>a function which acquires the service ID transmitted in from said server, and issues an acquisition request for the program attached with the acquired service ID; and </claim-text>
<claim-text>a function which authorizes the execution of a program only in the case where the received program is attached with a service ID matching the service ID attached at the time of said acquisition request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A client terminal which receives the distribution of a program from a server, comprising: 
<claim-text>the program procurement apparatus described in <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the acquisition of a program distributed from said server is carried out by the program procurement apparatus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A recording medium which is readable by a computer and which stores a program for a program distribution system which includes a command for the computer to execute: 
<claim-text>a process which transmits a service ID uniquely determined inside the distribution system before the transmission of a program; and </claim-text>
<claim-text>a process which, in the case where an acquisition request for a program attached with the transmitted service ID is received, transmits said program together with the service ID to the client terminal making the acquisition request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A program distribution method for distributing a program from a server to client terminals, wherein: 
<claim-text>said client terminals make a request for a service ID to the server before program distribution; </claim-text>
<claim-text>said server transmits a server ID to said client terminals in accordance with the requests from said client terminals; </claim-text>
<claim-text>said client terminals make a request for the distribution of a program attached with the acquired service ID to said server; </claim-text>
<claim-text>said server transmits a program attached with a service ID to said server in accordance with the requests from said client terminals; and </claim-text>
<claim-text>said client terminals execute the previously received program in the case where the service ID sent in together with the received program matches the previously acquired service ID, and destroys the received program in the case where there is no match.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005456A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005456A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005456A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005456A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005456A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005456A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005456A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005456A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005456A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005456A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005456A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005456A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
