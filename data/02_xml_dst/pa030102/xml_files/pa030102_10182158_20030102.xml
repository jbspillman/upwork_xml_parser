<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001758A1-20030102-D00000.TIF SYSTEM "US20030001758A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001758A1-20030102-D00001.TIF SYSTEM "US20030001758A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001758A1-20030102-D00002.TIF SYSTEM "US20030001758A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001758A1-20030102-D00003.TIF SYSTEM "US20030001758A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001758A1-20030102-D00004.TIF SYSTEM "US20030001758A1-20030102-D00004.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001758</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10182158</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020725</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>00204352.9</doc-number>
</priority-application-number>
<filing-date>20001206</filing-date>
<country-code>EP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H03M007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>341</class>
<subclass>050000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method for space-saving-variable length encoding of input information items through assigning code bit groups to respective sub-chainings that each a pointer, and to an apparatus arranged for encoding and/or bidirectional decoding accordingly</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Franciscus</given-name>
<middle-name>Johannes Henricus Maria</middle-name>
<family-name>Meulenbroeks</family-name>
</name>
<residence>
<residence-non-us>
<city>Eindhoven</city>
<country-code>NL</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Philips Electronics North American Corporation</name-1>
<name-2>Corporate Patent Counsel</name-2>
<address>
<address-1>580 White Plains Road</address-1>
<city>Tarrytown</city>
<state>NY</state>
<postalcode>10591</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/IB01/02307</doc-number>
<document-date>20011205</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A sequence of input information items (<highlight><bold>20</bold></highlight>) is space-saving-encoded into variable-length code bit groups. Each information item is mapped on an associated code bit group of a set of bit groups, wherein the bit groups have particular lengths that are non-uniform in the set. Next, the code bit groups are chained into a chaining configuration of bit groups whilst allowing progressive delimiting of successive bit groups In particular, for allowing regressive delimiting of successive bit groups each bit group is divided into an idiosyncratic sequence of subgroups. In each sequence the subgroups are assigned to a respective sub-chainings (<highlight><bold>23, 24, 25</bold></highlight>). The sub-chainings are configured into respective sub-chaining configurations, whilst maintaining pointer informations (<highlight><bold>29, 30, 31</bold></highlight>)regarding each respective sub-chaining configuration to preserve mutual synchronization among the various sub-chaining configurations regarding the associated in formation items. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates to a method as recited in the preamble of claim 1. The input information items may represent characters, bytes, words, microprocessor instructions, etcetera. They may have uniform lengths or not. The principle of the encoding is that certain information items occur more frequently than others, so that mapping the former on relatively short code bit groups will diminish the overall amount of code bits. The technology for this mapping has been well known in the art. For progressive decoding, a particular code bit group is delimited in the stream of coded bits, decoded, and then the beginning of the next code bit group will be instantly visible. The decoding then becomes a straightforward job. In fact, the selecting of the various code bit groups has been designed in such way that the above delimiting is always easy; naturally, this is done for the most probable direction of the encoding, such as forward in the flow of time when encoding a more or less continuous signal such as speech. Regressive decoding, on the other hand, is less simple, because the delimiting of a single code bit group in this direction is often impossible through the particular selecting strategy. In principle, a trial and error regressive procedure may have a high probability for success, but any failure in delimiting a single code bit group will force the decoding to go back still further. In fact, both the larger decoding delay itself and the spread in the decoding delay are detrimental to the overall expediency of the decoding process. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY TO THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Now, the present inventor has recognized that dividing the code bit groups in respective subgroups and assigning these to respective sub-chainings, whilst maintaining for each sub-chaining a separate pointer mechanism, will allow the decoding process to execute regressive decoding without the need to delimit the coded bit groups in a trial and error procedure. Therefore, regressive decoding may proceed in a similarly expeditious manner as progressive decoding. Each code bit group is distributed in an idiosyncratic manner that for each code bit group content is always the same, but may vary among various such identities. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In consequence, amongst other things, it is an object of the present invention to use separate pointers for the respective sub-chainings of bits so that the regressive decoding may step instantaneously to a next appropriate starting point. Now therefore, according to one of its aspects the invention is characterized according to the characterizing part of claim 1. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The invention also relates to an apparatus arranged for encoding a sequence of input information items into variable length code bit groups and the providing of separate pointers for the respective subgroups of code bits, to an apparatus arranged for decoding a sequence of such variable-length code bit groups, and to a medium comprising data so encoded. Further advantageous aspects of the invention are recited in dependent claims.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWING </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> These and further aspects and advantages of the invention will be discussed more in detail hereinafter with reference to the disclosure of preferred embodiments, and in particular with reference to the appended Figures that show: </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an example of generating a set of code bit groups; </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the formation of sub-groups and pointers; </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, further examples of forming code bit groups; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> still further example of forming code bit groups; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> conceptual apparatus arrangement for forming sub-groups and pointers; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> decoding flow chart.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an example of generating a set of code bit groups. In the example, the left hand column A has four unique information items of two bits each. For each information item, the right hand column B contains a corresponding code bit group. Assuming the occurrence probability for the successive items at left to be 1/2, 1/4, 1/8 and 1/8, respectively, shows an overall diminishing of the number of bits through coding by a factor of 7/8. Other probability distributions and code mappings may produce greater or lesser savings. The decoding in a progressive direction from left to right may take a simple road: either the next code bit group terminates with the next &ldquo;0&rdquo; bit, or the next code bit group is made up from three &ldquo;1&rdquo; bits. Decoding in a regressive direction from right to left is more complex however, because it must by necessity go back to the first &ldquo;0&rdquo; bit occurring, and may therefrom only decode the code bit groups to the right thereof. Going further to the left again will require executing the same procedure again. In the case of other, possibly more complex mappings, the problem may aggravate appreciably. A few, still elementary, code mappings have been illustrated in <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>. Many practical applications use much larger sets of information groups, causing the problem solved herein to grow by orders of complexity. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows the formation of sub-groups and pointers for use with the present invention. Row A gives an exemplary sequence of code bit groups, formed according to the principle disclosed with respect to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Part B of the Figure has each code bit group conceptually arranged in a single column. For each code bit group, the leftmost bit is entered into the lowest row, the second bit if present from left in the middle row, and the third bit if present from left in the top row. This assigning of the leading bit to the lowest row will render it simple to assign a bit position in the lowest row to a particular code bit group. However, various other strategies for such assigning appear feasible for attaining the same or a comparable result. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Furthermore, for each row the number of bits is counted separately and stored in an associated pointer register P<highlight><bold>1</bold></highlight>, P<highlight><bold>2</bold></highlight>, P<highlight><bold>3</bold></highlight>, which registers have the lowest significance bit in the right-most position, so that in the example the counts are thus 5, 2, and 1, respectively. The decoding (regressive, but progressive decoding must generally be done in the same way also) is effected through accessing a particular bit on the lowest row, as indicated by pointer P1 that effectively indicates the code bit group number. The value of the latter bit indicates whether a code bit from the middle row, as well as whether a further code bit from the top row must be taken into account for the decoding. The pointers for the other rows will then indicate which address to access. For the specific example presented here, when going 10 code bit groups to the left P<highlight><bold>1</bold></highlight>:&equals;(P<highlight><bold>1</bold></highlight>-<highlight><bold>10</bold></highlight>), the decrement in P<highlight><bold>2</bold></highlight> is generally less: P<highlight><bold>2</bold></highlight>:&equals;(P<highlight><bold>2</bold></highlight>-10&plus;N<highlight><subscript>0</subscript></highlight>), wherein N<highlight><subscript>0 </subscript></highlight>is the number of zeroes in the lowest row in the interval between the two values of P<highlight><bold>1</bold></highlight>. For P<highlight><bold>3</bold></highlight> a similar procedure applies. Other assignment patterns and other codes as will be discussed hereinafter will need other schemes in the decrementing, but all pointers must be stepped systematically, as based on the earlier parts of the symbols in question. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Obviously, full regressive decoding requires to step back by only one bit position in the lowest row. In principle, the assignment pattern of the code of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, as regarding the successive bits in a code bit group to the respective rows may be non-uniform, but this may complicate the algorithm. However, doing such may distribute the assignment load across the rows in a more even manner. The same arrangement of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be used for progressive decoding. Through the pointers per row, the mutual synchronization among the various sub-chaining configurations of the three rows is maintained as regarding the associated information items. If two rows have identical pointer values, they may have their pointers combined. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates two further examples of forming code bit groups, that have been taken from the book &ldquo;TEXT COMPRESSION&rdquo; by Timothy C. Bell et al, Prentice Hall PTR, Englewood Cliffs N.J. 07632 USA, 1990, in particular pages 105-107. Column A has the occurrence probabilities for the five symbols in column B. Column C has the code bit groups of a Shannon/Fano code, and column D for a Huffman code. Page 106 illustrates progressive decoding for the Huffman code through using a search tree: as soon as an information item has been decoded, the decoding of the next code bit group may start, without having to know its length in advance. Of course, the progressive decoding may also proceed through using a look-up table. In contradistinction, regressive decoding must generally know the delimiting of the code bit group at the left end, which in fact will become known only after the decoding has been executed. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Here, the decoding compares to the one discussed with reference to figure F<highlight><bold>2</bold></highlight>. For Shannon/Fano, the value of the leading bit determines whether the upper pointer must step (first bit is 1), or whether no bit associated to the upper pointer need be taken into consideration. In this example, in effect only two pointers are necessary. For Huffman, at least one &ldquo;1&rdquo; bit in the first two bits indicates that the code bit group has only two bits. With both bits &ldquo;0&rdquo;, the code bit group is longer. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a still further example of forming the code bit groups in column B from the five information bit groups in column A. The occurrence probabilities are in column C. Also here, regressive decoding must know the left hand end (in the form wherein the code words have been shown) of the code bit group before the decoding can start. Through using the pointers, this becomes straightforward: if the first pointer indicates a &ldquo;1&rdquo;, then the code bit group is three bits, otherwise only one bit. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a conceptual apparatus arrangement for forming sub-groups and pointers. Input <highlight><bold>20</bold></highlight> receives the various information items. Element <highlight><bold>22</bold></highlight> contains a relevant registry device and encoder, outputting the respective code bits to bit stages <highlight><bold>23</bold></highlight>, <highlight><bold>24</bold></highlight>, <highlight><bold>25</bold></highlight>, respectively, for example through stage <highlight><bold>23</bold></highlight> always receiving the leftmost code bit in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The various code bits are then stored in respective storage arrays <highlight><bold>26</bold></highlight>, <highlight><bold>27</bold></highlight>, <highlight><bold>28</bold></highlight>, such as RAM. As shown by hatching, these arrays are partially filled. Registers <highlight><bold>29</bold></highlight>, <highlight><bold>30</bold></highlight>, <highlight><bold>31</bold></highlight> are associated to the various storage arrays to indicate the degree of filling. The overall arrangement is comprised in synchronization region <highlight><bold>32</bold></highlight>, such being effected through clock means not shown for brevity. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Alternatively, the assigning in block <highlight><bold>22</bold></highlight> may be effected on a probability-based method: a first pass of all information items will produce the best assigning map, whereas the second pass effects the mapping proper. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a decoding flow chart for the present invention. In block <highlight><bold>40</bold></highlight>, the procedure begins, and the necessary hardware and software facilities are assigned. In block <highlight><bold>42</bold></highlight>, the necessary pointers are received from a control mechanism not shown. For example, there may be provided various sets of pointers, each for a relatively large block of storage space. In block <highlight><bold>44</bold></highlight>, the first code bit group is decoded. In block <highlight><bold>46</bold></highlight>, the system detects whether the actual code bit group has been the last one. If not, the pointers are stepped back or decremented according to the principles discussed supra, block <highlight><bold>48</bold></highlight>, which is determined for each bit separately. Next, the system returns to block <highlight><bold>44</bold></highlight>. If actually the last bit group to be decoded, the system goes to block <highlight><bold>50</bold></highlight> and determines whether any further set of pointers has been waiting. If yes, the system goes back to block <highlight><bold>42</bold></highlight>. If no, the system goes to block <highlight><bold>52</bold></highlight> and relinquishes the facilities that had been assigned earlier in block <highlight><bold>40</bold></highlight> and the procedure terminates. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As discussed hereabove, the subgroups of a particular bit group need not have uniform size. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>C, the first subgroup may have two bits, the second only one. In <cross-reference target="DRAWINGS">FIG. 3</cross-reference>D, the first subgroup may have two bits, the second and third subgroups only one each. In <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the first subgroup may have one bit, the second subgroup two bits. Furthermore, in principle, the subgroups of like rank within each bit group need not all have the same lengths. The assigning of the subgroups to a particular sub-chaining (the rows in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference>) need not be steady. For example, the assigning might rotate, such that successive code bit groups in <cross-reference target="DRAWINGS">FIG. 2B</cross-reference> have their first subgroups assigned successively to third, second, first, third rows, etcetera. The proposed strategy of the present invention lends itself to various different applications. While so encoding a microprocessor instruction set, will allow the control system to jump backwards in the compressed stream over a chosen number of instructions. If preferred, intermediate pointers may be made available by separately storing them on the storage medium. In fact, the required space therefore is minimal. The information items may be data to be subjected to interpretation, such as used in a finite state machine. Another application would be the encoding of an audio/video signal that now may straightforwardly be subjected to reverse functions, such as reverse play, fast rewind, and the like. Furthermore, the technique allows the compression of information strings through a &ldquo;pointer&plus;length&rdquo; strategy wherein the pointer will point to earlier compressed data. Such feature of the present invention may be relevant for embedded systems that have textual user interfaces or that use data that is subject to interpretation operations, such as Television Sets, Portable Telephones, Personal Digital Assistants, Online Help, and other. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The invention can be summarized as follows. A sequence of input information items is space-saving-encoded into variable-length code bit groups. Each information item is mapped on an associated code bit group of a set of bit groups, wherein the bit groups have particular lengths that are non-uniform in the set. Next, the code bit groups are chained into a chaining configuration of bit groups whilst allowing progressive delimiting of successive bit groups. In particular, for allowing regressive delimiting of successive bit groups each bit group is divided into an idiosyncratic sequence of subgroups. In each sequence the subgroups are assigned to a respective sub-chainings. The sub-chainings are configured into respective sub-chaining configurations, whilst maintaining pointer informations regarding each respective sub-chaining configuration to preserve mutual synchronization among the various sub-chaining configurations regarding the associated in formation items. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. An encoding method for space-saving-encoding of a sequence of input information items, said method comprising the steps of: 
<claim-text>mapping each information item on an associated code bit group of a set of variable-length code bit groups, </claim-text>
<claim-text>chaining said code bit groups into a chaining configuration of code bit groups whilst providing means for allowing progressive delimiting of successive code bit groups, 
<claim-text>said encoding method being characterized by the step of allowing regressive delimiting of successive code bit groups through dividing each code bit group into a sequence of code bit subgroups and in each sequence assigning the code bit subgroups to respective sub-chainings; </claim-text>
</claim-text>
<claim-text>configuring the sub-chainings into respective sub-chaining configurations, whilst maintaining pointer informations regarding each respective sub-chaining configuration to preserve mutual synchronization among the various sub-chaining configurations regarding the associated information items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein at least one code bit subgroup consists of a single bit. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein all code bit subgroups consist of a single bit. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each code bit group uniformly has at least one bit assigned to a particular sub-chaining of code bit subgroups. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein regarding to a single information item a next subgroup of its code bit group has no higher number of bits than a preceding one. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, and applied to an embedded system that has a textual interface, or is applied to a processor instruction set, or is applied to data subject to interpretation, or is applied to an audio/video signal. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, for storing or transmitting data so encoded, whilst thereto joining an appropriate set of said pointer informations. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. An encoding apparatus being arranged for space-saving-encoding of a sequence of input information items according to the method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, said apparatus comprising: 
<claim-text>mapping means for mapping each information item on an associated code bit group of a set of variable length code bit groups, </claim-text>
<claim-text>chaining means for chaining said code bit groups into a chaining configuration whilst providing means for allowing progressive delimiting of successive code bit groups, 
<claim-text>said encoding apparatus being characterized by for allowing regressive delimiting of successive code bit groups comprising dividing means for regressiie delimiting successive code bit groups by dividing each bit group into a sequence of subgroups; </claim-text>
</claim-text>
<claim-text>assigning means for in each sequence assigning the subgroups to respective sub-chainings; </claim-text>
<claim-text>and configuring means for configuring the sub-chainings into respective sub-chaining configurations, whilst maintaining pointer informations for each respective sub-chaining configuration to preserve mutual synchronization among the various sub-chaining configurations regarding the associated information items. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein at least one code bit subgroup consists of a single bit. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. An apparatus as claimed in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein each code bit group uniformly has at least one bit assigned to a particular sub-chaining of code bit subgroups. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, for storing or transmitting data so encoded, whilst thereto joining an appropriate set of said pointer informations. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. An apparatus being arranged for regressive decoding of a space-saving chaining configuration encoded according to a method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, said apparatus comprising: 
<claim-text>receiving means for receiving a pointer to said chaining configuration; </claim-text>
<claim-text>delimiting means for delimiting a particular code bit group; </claim-text>
<claim-text>and decoding means for decoding a delimited code bit group into an associated information item for outputting, 
<claim-text>said apparatus being characterized by said delimiting means comprising: 
<claim-text>primary access means for accessing a first pointer information associated to a first sub-chaining configuration; </claim-text>
<claim-text>secondary access means fed by said first pointer information and by a code bit sub-group of said first sub-chaining configuration for recursively accessing any other sub-chaining configuration on the basis of an earlier pointer information and a code bit sub-group of an earlier sub-chaining configuration for so reconstituting an associated code bit group for forwarding to said decoding means; </claim-text>
<claim-text>and stepping means for stepping said first pointer information over a predetermined step. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A storage medium comprising a space-saving-encoded sequence of input information items through applying a method as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, and comprising: 
<claim-text>mapped code bit groups of a set of variable-length code bit groups, that are chained into a chaining configuration of code bit groups provided with means for allowing progressive delimiting of successive code bit groups, 
<claim-text>and being characterized by allowing regressive delimiting of successive code bit groups in that each code bit group has been divided into a sequence of code bit subgroups and each sequence has its code bit subgroups assigned to respective sub-chainings, the sub-chainings having been configured into respective sub-chaining configurations, whilst being associated to pointer informations regarding each respective sub-chaining configuration to preserve mutual synchronization among the various sub-chaining configurations regarding the associated information items.</claim-text>
</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001758A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001758A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001758A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001758A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001758A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
