<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001888A1-20030102-D00000.TIF SYSTEM "US20030001888A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001888A1-20030102-D00001.TIF SYSTEM "US20030001888A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001888A1-20030102-D00002.TIF SYSTEM "US20030001888A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001888A1-20030102-D00003.TIF SYSTEM "US20030001888A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001888A1-20030102-D00004.TIF SYSTEM "US20030001888A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001888A1-20030102-D00005.TIF SYSTEM "US20030001888A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001888</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10182769</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020801</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>00301648.2</doc-number>
</priority-application-number>
<filing-date>20000301</filing-date>
<country-code>EP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G09G005/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>744000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>219000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Data transfer method and apparatus</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Mark</given-name>
<middle-name>P J</middle-name>
<family-name>Power</family-name>
</name>
<residence>
<residence-non-us>
<city>Nacton</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Nixon &amp; Vanderhye</name-1>
<name-2></name-2>
<address>
<address-1>1100 North Glebe Road 8th Floor</address-1>
<city>Arlington</city>
<state>VA</state>
<postalcode>22201-4714</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
<international-conventions>
<pct-application>
<document-id>
<doc-number>PCT/GB01/00662</doc-number>
<document-date>20010216</document-date>
<country-code>WO</country-code>
</document-id>
</pct-application>
</international-conventions>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method and apparatus are disclosed for transferring data between computers over a network such as the internet or an intranet and is particularly useful for updating web pages with information particularly while being viewed by a user. The method and apparatus disclosed help to reduce the amount of data that is required to be downloaded between the server and client computers and also helps to reduce the flicker which can be experience when internet page data is refreshed. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to the transfer of data between computers over a communications link and/or network. In particular the invention relates to the transfer of data from a server computer to a client computer in a client/server environment, for example when a client computer is used in combination with a web browser to view web pages resident on the server computer. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> One mechanism by which interaction in web pages is commonly provided is using a software system called Java. Java can provide a system of programs that reside on the client computer and provide a secure execution environment (called the Java Virtual Machine (JVM)) on the client computer which is separate from the normal execution environment of the client computer (for example Windows). Most web browsers are compatible with Java, i.e. browsers have the functionality to provide a JVM to run downloaded programs called Java Applets. Java Applets provide many types of functionality such as screen animation and other display features including on-screen forms and tables for data display, input and elicitation. For example, an Applet could be used to carry out periodic database queries and present the results of the query to the user. The database could hold share price information that is frequently changing and requires presenting to a user at regular intervals. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> However, one problem with the Java solution is that web pages that include Java Applets generally take longer to download than standard web pages. Furthermore, the JVM takes time to start-up before it can run an Applet and requires more processing power than is needed to run the browser alone. These drawbacks become more significant when the client computer is of restricted processing power or is linked to the server computer by a low bandwidth network connection. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> An alternative to the Java approach is to use Client Pull and/or Server Push CGI techniques as described in detail in &ldquo;CGI Programming on the World Wide Web&rdquo; by Shishir Gundavaram (Published by O&apos;Reilly &amp; Associates, USA). The simpler of the two techniques is Client Pull which can, for example, be used to provide an updating mechanism for information on a web page by associating the page with a CGI script. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A CGI script is a program that is resident on the server that starts working in response to a request from a client computer for the associated web page. The CGI script can be used to carry out a database query and insert the results into the web page which is then downloaded to the requesting client. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The Client Pull and Server Push techniques can be combined with a browser feature referred to as frames which most browsers provide. This feature allows the browser window to be split into distinct areas each referred to as a frame and each having the properties of a normal browser window. The user interaction that occurs in one frame can be independent of both the content and user interaction of other frames. Frames can be visible or invisible i.e. displayed or not displayed on the screen. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Web pages can also have a feature called a refresh tag which causes the browser displaying the page to repeatedly download the page at predetermined intervals defined by the tag. Refresh tags enable information on a web page to be automatically updated (i.e. without user intervention) while being viewed. The process typically has the following steps: </paragraph>
<paragraph id="P-0008" lvl="2"><number>&lsqb;0008&rsqb;</number> a) the server receives a page request (resulting from a user request); </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> b) the server runs the CGI script associated with the requested page, perhaps enters new data into the page as a result and then sends the updated page to the client that requested it along with a refresh tag; </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> c) the client computer displays the received page and starts a timer corresponding to the refresh tag; and </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> d) when the refresh time is up, the client automatically repeats its request to the server for the page (or a different one) and the process starts again at step a). </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The second of the techniques, Server Push, works in a similar manner to Client pull except that the server outputs a multiple part message to the client, each part of which can contain a page with information updated using a CGI script. Again, a timer can be used to start the CGI script or alternatively the script can be run only when the data to be displayed in the page has been updated. The main difference is that the network connection between the client and sever in a Server Push mechanism is kept open for the duration of the client/server interaction for that page. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> One problem with the Client Pull and Server Push mechanisms noted above is that each time the page being viewed is updated, the page is redisplayed and therefore the page (or screen) is seen by the user to flicker. This makes studying the page for any length of time uncomfortable for a user. Furthermore, if the refresh rate for the page is high ( e.g. every few seconds) then the flicker effect is uncomfortable even for limited viewing of the page. In order to reduce the flicker frequency the refresh rate of the page can be reduced but in situations where changes in the data presented by the page have to be reacted to promptly this may not be feasible. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to an aspect of the present invention, there is provided a method for providing data from a data source to a destination apparatus over a communications link or network, said data comprising: </paragraph>
<paragraph id="P-0015" lvl="2"><number>&lsqb;0015&rsqb;</number> a graphical element having one or more updatable areas; and </paragraph>
<paragraph id="P-0016" lvl="2"><number>&lsqb;0016&rsqb;</number> one or more updateable elements corresponding to the updateable areas; said method comprising the steps of: </paragraph>
<paragraph id="P-0017" lvl="3"><number>&lsqb;0017&rsqb;</number> in response to a request for data from the destination apparatus, transmitting the graphical element, at least one updateable element and one or more control instructions for controlling updating the areas of a displayed graphical element using the updateable elements; and </paragraph>
<paragraph id="P-0018" lvl="3"><number>&lsqb;0018&rsqb;</number> transmitting one or more updated elements. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Splitting a page to be displayed into two pages, one being static and displayed the other being dynamic and not displayed means that only the changing data, i.e. the dynamic page, has to be refreshed. Also, because only the data within the static page is redisplayed, the redisplay of the whole page is avoided. These features alleviate problems of the prior art by reducing flicker, reducing the amount of data that has to be downloaded and/or reducing the amount of processing required at the client and/or server computers. </paragraph>
</summary-of-invention>
<brief-description-of-drawings>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Embodiments of the invention are described below with reference the accompanying figures in which: </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic diagram showing a plurality of client devices connected to a server device via a network such as the internet; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 2</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>2</bold></highlight><highlight><italic>b </italic></highlight>are diagrammatic representations of the pages and data stored on the sever device of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> containing parts to be displayed on the client device of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a process diagram of the processing and display of the pages of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> according to a first embodiment of the invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a process diagram of the processing and display of the pages of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> according to a second embodiment of the invention; and </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a diagrammatic representation of pages and data stored on the sever device of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> containing parts to be displayed on the client device of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in accordance with a third embodiment of the present invention;</paragraph>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> server computer <highlight><bold>101</bold></highlight> is fed with data via a data feed <highlight><bold>103</bold></highlight> and is arranged to process the data and store the results in a database <highlight><bold>105</bold></highlight>. The data feed <highlight><bold>103</bold></highlight> provides, for example, test data produced automatically from a telecommunications network or financial information such as exchange rates between a plurality of currencies. In either case the data is such that it changes relatively frequently. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The sever <highlight><bold>101</bold></highlight> is also connected to a network <highlight><bold>107</bold></highlight> such as the internet or an intranet, to which network <highlight><bold>107</bold></highlight> a plurality of client devices <highlight><bold>109</bold></highlight> are also connected such as a personal computer <highlight><bold>109</bold></highlight><highlight><italic>a</italic></highlight>, a digital television <highlight><bold>109</bold></highlight><highlight><italic>b</italic></highlight>, a mobile telephone <highlight><bold>109</bold></highlight><highlight><italic>c</italic></highlight>, a personal digital assistant <highlight><bold>109</bold></highlight><highlight><italic>d </italic></highlight>or a games console <highlight><bold>109</bold></highlight><highlight><italic>e</italic></highlight>. The server computer <highlight><bold>101</bold></highlight> is arranged with suitable server software to communicate over the network <highlight><bold>107</bold></highlight> with each of the client devices <highlight><bold>109</bold></highlight> and each client device <highlight><bold>109</bold></highlight> is arranged with corresponding software so as to be able to communicate with the server computer <highlight><bold>101</bold></highlight> over the network <highlight><bold>107</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The server <highlight><bold>101</bold></highlight>, in this embodiment is an IBM RS/6000 J50 computer with server software installed called Hyper Text Transport Protocol Daemon (Httpd) from Apache Software Inc or alternatively Oracle Web Server from Oracle Corporation. Each of the client devices <highlight><bold>109</bold></highlight> is installed with a suitable web browser. In the case for the personal computer <highlight><bold>109</bold></highlight> the web browser could be Netscape from Netscape Inc or Explorer from Microsoft Corp.. Others of the client devices <highlight><bold>109</bold></highlight> are installed with suitable types of client software arranged to provide network access and browsing which depend on the particular device and method of connection to the network <highlight><bold>107</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The Httpd or Oracle Web Server (OWS) software when running on the server computer <highlight><bold>101</bold></highlight> is capable of sending files to the client devices <highlight><bold>109</bold></highlight> and to run programs on the server <highlight><bold>101</bold></highlight> in response to a request from a browser running on one of the client devices <highlight><bold>109</bold></highlight>. If the server software receives a request for a plain file such as an HTML file (Hyper Text Markup Language&mdash;a format commonly used for web pages), then the server software looks up the file in the server <highlight><bold>101</bold></highlight> directory system and sends the file across the network <highlight><bold>107</bold></highlight> to the requesting browser. Such an HTML file can be referred to as a static page. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The server <highlight><bold>101</bold></highlight> may also receive a request to run a process using server application software such as a query on the database <highlight><bold>105</bold></highlight> via a server database application. In this case an interface mechanism called the Common Gateway Interface (CGI) is used to manage communication between the Httpd or OWS software and the server application software. The CGI mechanism is arranged to take parameters from the incoming process request, pass them to the server application software and to return the results of the process request to the requesting browser. The results returned to the browser can be referred to as a dynamic page because the content of the page can be changed from time to time. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In the present embodiment, the server <highlight><bold>101</bold></highlight> uses the CGI mechanism to interface with a database application which processes incoming data from the data feed <highlight><bold>103</bold></highlight> and stores the results in the database <highlight><bold>105</bold></highlight>. In this embodiment the data relates to the status(es) of alarms which are used to alert engineers to faults occurring in a telecommunications network. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the data in the database <highlight><bold>105</bold></highlight> is presented to the user using two pages&mdash;a static page <highlight><bold>201</bold></highlight> and a dynamic page <highlight><bold>203</bold></highlight>. The static page <highlight><bold>201</bold></highlight> is set out as an HTML form <highlight><bold>202</bold></highlight> containing a plurality of labelled boxes <highlight><bold>205</bold></highlight> each of which is blank. A form is a standard HTML function which is commonly used for obtaining input i.e. used to allow a user to enter data for transmission back to the server <highlight><bold>101</bold></highlight>. The static page <highlight><bold>201</bold></highlight> also contains a script <highlight><bold>209</bold></highlight> which, in this embodiment, is written using the JavaScript language (as will be appreciated by those skilled in the art JavaScript is distinct from Java). The form <highlight><bold>202</bold></highlight> is the part of the static page <highlight><bold>201</bold></highlight> that is actually displayed on the client while the script <highlight><bold>209</bold></highlight> is not intended for display and so is normally invisible. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The dynamic page <highlight><bold>203</bold></highlight> comprises no visible part i.e. the page is not displayed on the browser. Instead, the dynamic page <highlight><bold>203</bold></highlight> comprises data structure <highlight><bold>207</bold></highlight> having a plurality of elements that correspond to the boxes <highlight><bold>205</bold></highlight> of the form <highlight><bold>202</bold></highlight> in the static page <highlight><bold>201</bold></highlight>. The data structure <highlight><bold>207</bold></highlight> in this embodiment is a JavaScript array. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> When a browser downloads the static page <highlight><bold>201</bold></highlight> it firstly displays the form <highlight><bold>202</bold></highlight> and then runs the script <highlight><bold>209</bold></highlight>. The script <highlight><bold>209</bold></highlight> is arranged to load the dynamic page <highlight><bold>203</bold></highlight> into an invisible frame, extract the data from its data structure <highlight><bold>207</bold></highlight> and insert the data into the appropriated parts of the form <highlight><bold>202</bold></highlight>. The script <highlight><bold>209</bold></highlight> includes a refresh tag <highlight><bold>211</bold></highlight> that at predetermined intervals causes a request for a refreshed dynamic page <highlight><bold>203</bold></highlight> to be sent to the server <highlight><bold>101</bold></highlight>. The server <highlight><bold>101</bold></highlight> has a CGI script (not shown) which is arranged, in response to a request from the browser, to access the database <highlight><bold>105</bold></highlight> to obtain the latest alarm status data and to populate the array <highlight><bold>207</bold></highlight> in the dynamic page <highlight><bold>203</bold></highlight> with that fresh data. These processes are explained in further detail below with reference to <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a flow diagram of the processing in accordance with the first embodiment of the pages <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> by the client <highlight><bold>109</bold></highlight> and the server <highlight><bold>101</bold></highlight> in response to a client <highlight><bold>109</bold></highlight> user&apos;s request to view the alarm status page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight>. At step <highlight><bold>301</bold></highlight>, in response to the user making the request (by entering the URL (Universal Resource Locator) of the page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> or using a hyperlink), the client opens up a link via the network <highlight><bold>107</bold></highlight> to the server <highlight><bold>1</bold></highlight> <highlight><bold>01</bold></highlight>. At step <highlight><bold>303</bold></highlight> the client <highlight><bold>109</bold></highlight> sends the request for the alarm status page <highlight><bold>201</bold></highlight>,<highlight><bold>203</bold></highlight>. In response to the request, the server, at step <highlight><bold>305</bold></highlight>, runs the CGI script associated with the alarm status page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> and at step <highlight><bold>307</bold></highlight> receives the fresh data from the database <highlight><bold>105</bold></highlight>. The fresh data is inserted into the data structure <highlight><bold>207</bold></highlight> of the dynamic page <highlight><bold>203</bold></highlight> at step <highlight><bold>309</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> At step <highlight><bold>313</bold></highlight>, if the request in step <highlight><bold>303</bold></highlight> was for the whole page (i.e. included the static page <highlight><bold>201</bold></highlight>) then the processing moves on to step <highlight><bold>315</bold></highlight> and sends the static page <highlight><bold>201</bold></highlight> to the client <highlight><bold>109</bold></highlight>. At step <highlight><bold>317</bold></highlight>, the client <highlight><bold>109</bold></highlight> displays the static page <highlight><bold>201</bold></highlight> to the user in a browser window. Next, at step <highlight><bold>319</bold></highlight>, the server sends the dynamic page <highlight><bold>203</bold></highlight> to the client which, under the control of the script <highlight><bold>209</bold></highlight>, extracts the refreshed data from the dynamic page <highlight><bold>203</bold></highlight> and inserts it into the corresponding fields <highlight><bold>205</bold></highlight> of the displayed static page <highlight><bold>201</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> At step <highlight><bold>323</bold></highlight>, the client then closes the link over the network <highlight><bold>107</bold></highlight> to the server <highlight><bold>101</bold></highlight> and at step <highlight><bold>325</bold></highlight> sets a timer corresponding to the refresh tag <highlight><bold>211</bold></highlight>. Unless the user views a different page while the timer is running then when the allotted time has elapsed the client <highlight><bold>109</bold></highlight> checks that the alarm status page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> is still being viewed and if so, at step <highlight><bold>327</bold></highlight>, opens a link to the server <highlight><bold>101</bold></highlight> and requests a refreshed dynamic page <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> In response to the request the server re-runs the CGI script at step <highlight><bold>305</bold></highlight> and carries out steps <highlight><bold>307</bold></highlight> and <highlight><bold>309</bold></highlight> as noted above. At step <highlight><bold>313</bold></highlight>, the fact that the request is a refresh request results in the processing moving to step <highlight><bold>319</bold></highlight> and the sending of the refreshed dynamic page <highlight><bold>203</bold></highlight> to the client. At step <highlight><bold>321</bold></highlight>, the client processes the new refreshed data from the dynamic page as noted above and continues to steps <highlight><bold>323</bold></highlight>, <highlight><bold>325</bold></highlight> and <highlight><bold>327</bold></highlight>. The process of refreshing the data in the static page <highlight><bold>201</bold></highlight> with data from the dynamic page <highlight><bold>203</bold></highlight> will continue until the user chooses a different page to view via the browser on the client <highlight><bold>109</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows a flow diagram of the processing in accordance with the second embodiment of the invention of the pages <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> by the client <highlight><bold>109</bold></highlight> and the server <highlight><bold>101</bold></highlight> in response to a client <highlight><bold>109</bold></highlight> user&apos;s request to view the alarm status page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight>. At step <highlight><bold>401</bold></highlight>, in response to the user making a request, the client <highlight><bold>109</bold></highlight> opens up a link via the network <highlight><bold>107</bold></highlight> to the server <highlight><bold>101</bold></highlight>. At step <highlight><bold>403</bold></highlight> the client <highlight><bold>109</bold></highlight> sends the request for the alarm status page <highlight><bold>201</bold></highlight>,<highlight><bold>203</bold></highlight>. In response to the request, the server, at step <highlight><bold>405</bold></highlight>, runs the CGI script associated with the alarm status page <highlight><bold>201</bold></highlight>, <highlight><bold>203</bold></highlight> and at step <highlight><bold>407</bold></highlight> receives the fresh data from the database <highlight><bold>105</bold></highlight>. The fresh data is inserted into the dynamic page <highlight><bold>203</bold></highlight> at step <highlight><bold>409</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> At step <highlight><bold>413</bold></highlight>, if the request in step <highlight><bold>403</bold></highlight> was for the whole page (i.e. included the static page <highlight><bold>201</bold></highlight>) then the processing moves on to step <highlight><bold>415</bold></highlight> and sends the static page <highlight><bold>201</bold></highlight> to the client <highlight><bold>109</bold></highlight>. At step <highlight><bold>417</bold></highlight>, the client <highlight><bold>109</bold></highlight> displays the static page <highlight><bold>201</bold></highlight> to the user in a browser window. Next, at step <highlight><bold>419</bold></highlight>, the server sends the dynamic page <highlight><bold>203</bold></highlight> to the client which, under the control of the script <highlight><bold>209</bold></highlight>, extracts the data from the dynamic page <highlight><bold>203</bold></highlight> and inserts the data into the appropriate fields <highlight><bold>205</bold></highlight> in the form <highlight><bold>202</bold></highlight> of the static page <highlight><bold>201</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> At step <highlight><bold>423</bold></highlight> the server <highlight><bold>101</bold></highlight> monitors the data for the dynamic page <highlight><bold>203</bold></highlight> for any updates. When an update to the data is detected the processing moves to step <highlight><bold>405</bold></highlight> and the server re-runs the CGI script and carries out steps <highlight><bold>407</bold></highlight> and <highlight><bold>409</bold></highlight> as described above. In other words, rather than being driven by a refresh timer, the refreshing of the dynamic page <highlight><bold>203</bold></highlight> in this embodiment is driven by the data to be displayed. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> At step <highlight><bold>413</bold></highlight>, the fact that only the dynamic page <highlight><bold>203</bold></highlight> is being updated results in the processing moving to step <highlight><bold>419</bold></highlight> and the sending of the refreshed dynamic page <highlight><bold>203</bold></highlight> to the client <highlight><bold>109</bold></highlight>. At step <highlight><bold>421</bold></highlight>, the client <highlight><bold>109</bold></highlight> extracts the refreshed data from the dynamic page <highlight><bold>203</bold></highlight> and inserts it into the appropriate fields <highlight><bold>205</bold></highlight> of the static page <highlight><bold>201</bold></highlight> and the server <highlight><bold>101</bold></highlight> continues to steps <highlight><bold>423</bold></highlight> and <highlight><bold>425</bold></highlight> as described above. The process of refreshing the dynamic page <highlight><bold>203</bold></highlight> will continue until the user chooses a different page to view via the browser on the client <highlight><bold>109</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a third embodiment of the invention in which, a static page <highlight><bold>501</bold></highlight> comprises a form <highlight><bold>502</bold></highlight> which is the same as the form <highlight><bold>202</bold></highlight> described above with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. In addition, the static page <highlight><bold>501</bold></highlight> comprises a set of symbols <highlight><bold>503</bold></highlight> that provide a schematic representation of elements in the network from which the alarms being monitored are derived. Each symbol has two states each of which indicate to the viewer the status of the network element that a given symbol represents e.g. a red symbol for an element with an alarm condition and a black symbol for and element that is operating normally. The static page <highlight><bold>501</bold></highlight> also includes a dialog box <highlight><bold>505</bold></highlight> that is used to provide the viewer with text messages describing, for example, the progress of a task such as a test routine being carried out remotely in the network. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The static page <highlight><bold>501</bold></highlight> also includes a script <highlight><bold>509</bold></highlight> a refresh tag <highlight><bold>511</bold></highlight> and data <highlight><bold>513</bold></highlight>. The script <highlight><bold>509</bold></highlight> functions in substantially the same manner as the script <highlight><bold>209</bold></highlight> described above with reference to <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference> or <highlight><bold>4</bold></highlight> (the differences will be described below). The data <highlight><bold>513</bold></highlight> comprises two parts, the first being a set of images each of which represent one of the two possible states of each of the symbols <highlight><bold>503</bold></highlight>. The second part is sets of text messages, each set forming an ordered sequence arranged to provide the dialog for the dialog box <highlight><bold>505</bold></highlight>. The set of text messages are designed to provide dialog for all of the tasks that a user would need to be informed about. As with the previous embodiments, the script, <highlight><bold>509</bold></highlight> is not displayed and in a similar manner, in this embodiment, the data <highlight><bold>513</bold></highlight> is stored by the browser until needed as described below. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The dynamic page <highlight><bold>515</bold></highlight> comprises a data structure <highlight><bold>517</bold></highlight> which, in addition to the data <highlight><bold>516</bold></highlight> for the form <highlight><bold>502</bold></highlight> also holds instructions <highlight><bold>517</bold></highlight><highlight><italic>a </italic></highlight>relating to the symbols <highlight><bold>503</bold></highlight> and instructions <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>relating to the text messages for the dialog box <highlight><bold>505</bold></highlight>. The instructions <highlight><bold>517</bold></highlight><highlight><italic>a </italic></highlight>provide an indication of which of the two possible representations of each symbol (indicating one of the two states of the network element that the symbol is representing) should be displayed. The instructions <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>provide an indication of which of the sequence of messages should next be displayed in the dialog box <highlight><bold>505</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In this embodiment, the script <highlight><bold>509</bold></highlight> differs from the script described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference> in that, as well as extracting data <highlight><bold>516</bold></highlight> from the database <highlight><bold>105</bold></highlight> that will eventually displayed in the form <highlight><bold>502</bold></highlight>, the instructions <highlight><bold>517</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>are also extracted and inserted into the dynamic page <highlight><bold>515</bold></highlight>. When the browser receives the data <highlight><bold>516</bold></highlight>, it deals with it in the same manner as for the first and second embodiments above. When the browser receives the instructions <highlight><bold>517</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>it applies the instructions to the symbols <highlight><bold>503</bold></highlight> and the dialog box <highlight><bold>505</bold></highlight> respectively. For example, if one of the instructions <highlight><bold>517</bold></highlight><highlight><italic>a </italic></highlight>indicates that one of the symbols <highlight><bold>503</bold></highlight> should change state (e.g. from black to red&mdash;indicating a fault at the corresponding network element) then the script accesses the stored images <highlight><bold>513</bold></highlight> from the static page <highlight><bold>501</bold></highlight>, obtains the alternative image in accordance with the instruction <highlight><bold>517</bold></highlight><highlight><italic>a </italic></highlight>and displays it in the static page <highlight><bold>501</bold></highlight> in place of the previous image. Similarly, if one of the instructions <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>indicates that the next message in the sequence of messages being displayed in the dialog box <highlight><bold>505</bold></highlight> should be displayed then the script <highlight><bold>509</bold></highlight> will obtain the next message from the stored sets of messages <highlight><bold>513</bold></highlight> and displays the message in the dialog box <highlight><bold>505</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As will be understood by those skilled in the art, the instructions <highlight><bold>517</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>that are inserted into the dynamic page <highlight><bold>515</bold></highlight> can be a full set that define the state of the symbols <highlight><bold>503</bold></highlight> and the text in the dialog box <highlight><bold>505</bold></highlight>. Alternatively, after the initial download i.e. for subsequent refreshing of the data in the static page <highlight><bold>501</bold></highlight>, the instructions <highlight><bold>517</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>517</bold></highlight><highlight><italic>b </italic></highlight>could be a minimal set i.e. only include instructions relating to symbols that have changed status or dialog that has moves to the next message in the sequence. In this manner, the amount of processing required to produce the dynamic page <highlight><bold>525</bold></highlight> and to process the instructions is reduced. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Many browsers support a feature referred to as frames. This means that the browser window can be split into distinct areas each referred to as a frame and each having the properties of a normal browser window. The user interaction that occurs in one frame can be independent of both the content and user interaction of other frames. In the above embodiment, instead of displaying the static page <highlight><bold>501</bold></highlight> as a single page it could be split into a plurality of frames. For example, the symbols <highlight><bold>503</bold></highlight> could be displayed in one frame, the dialog box <highlight><bold>505</bold></highlight> displayed in another frame and the form <highlight><bold>502</bold></highlight> displayed in a further frame. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> As will be understood by those skilled in the art, the static page <highlight><bold>501</bold></highlight> could be arranged without the symbols <highlight><bold>503</bold></highlight> or without the dialog box <highlight><bold>505</bold></highlight>. Alternatively, the static page <highlight><bold>501</bold></highlight> could be arranged without the form <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As an alternative additional feature in the first embodiment, the server <highlight><bold>101</bold></highlight> is provided with a second refresh timer which controls the refreshing of the dynamic page <highlight><bold>203</bold></highlight>. The second timer has a shorter time period than the first timer on the client <highlight><bold>109</bold></highlight>. The first timer on the client <highlight><bold>109</bold></highlight> is used to only to stimulate the upload of the dynamic page <highlight><bold>203</bold></highlight> (as the refreshing of the dynamic page is now controlled by the second server side timer). This feature can be used to ensure that the server is not running the CGI script more often than the database <highlight><bold>105</bold></highlight> is updated or that the CGI script is run so frequently that the processing power of the server <highlight><bold>101</bold></highlight> is not used efficiently. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In the first and second embodiments described above, the refresh tag is associated with the static page <highlight><bold>203</bold></highlight>. As an alternative, the tag could be associated with the dynamic page <highlight><bold>201</bold></highlight> and each time the dynamic page <highlight><bold>203</bold></highlight> is refreshed the tag <highlight><bold>211</bold></highlight> could be varied under the control of the client <highlight><bold>109</bold></highlight> or the server <highlight><bold>101</bold></highlight> so as to be dependant on the bandwidth/transmission rate available across the network <highlight><bold>107</bold></highlight>. The bandwidth available may depend on the traffic load on the network <highlight><bold>107</bold></highlight> or the mode of connection between the client and the network e.g. PSTN, ISDN, ADSL, GSM (or other mobile system). As a further alternative, the refresh tag <highlight><bold>211</bold></highlight> could be dependent on the data that is inserted into the dynamic page or vary with respect to time in accordance with a predetermined function. The tag could be set by and under the control of the user. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> As will be understood by those skilled in the art, the static and dynamic pages described above could be stored and created separately on separate servers. Furthermore, the static and dynamic pages could be uploaded to an intermediate server arranged to assemble the page into its display form and then allow client apparatus to access the page and display it. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> As will be understood by those skilled in the art, any or all of the software used to implement the invention can be contained on various transmission and/or storage mediums such as a floppy disc, CD-ROM, or magnetic tape so that the program can be loaded onto one or more general purpose computers or could be downloaded over a computer network using a suitable transmission medium. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Unless the context clearly requires otherwise, throughout the description and the claims, the words &ldquo;comprise&rdquo;, &ldquo;comprising&rdquo; and the like are to be construed in an inclusive as opposed to an exclusive or exhaustive sense; that is to say, in the sense of &ldquo;including, but not limited to&rdquo;. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for acquiring data from a data source over a communications link or network, said data comprising: 
<claim-text>a graphical element having one or more updatable areas; and </claim-text>
<claim-text>one or more updateable elements corresponding to the updateable areas; said method comprising the steps of: </claim-text>
<claim-text>requesting the data from the data source; </claim-text>
<claim-text>receiving the graphical element, at least one updateable element and one or more control instructions for controlling updating the areas of a displayed graphical element; </claim-text>
<claim-text>displaying the graphical element; </claim-text>
<claim-text>acquiring one or more updated elements; and </claim-text>
<claim-text>under control of the or each control instruction, updating the areas of the displayed graphical element using the corresponding updated elements. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method for providing data from a data source to a destination apparatus over a communications link or network, said data comprising: 
<claim-text>a graphical element having one or more updatable areas; and </claim-text>
<claim-text>one or more updateable elements corresponding to the updateable areas; said method comprising the steps of: </claim-text>
<claim-text>in response to a request for data from the destination apparatus, transmitting the graphical element, at least one updateable element and one or more control instructions for controlling updating the areas of a displayed graphical element using the updateable elements; and </claim-text>
<claim-text>transmitting one or more updated elements. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> or <highlight><bold>2</bold></highlight>, where the updateable elements comprise data elements, and the step of updating the areas of a displayed graphical element comprises entering the data elements into the corresponding updateable areas. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to any preceding claim, where: 
<claim-text>the data further comprises at least one set of set of alternative graphical sub-elements; </claim-text>
<claim-text>the updateable elements comprises one or more sub-element instructions identifying the graphical sub-element from a set to be displayed in an area of the graphical element; and </claim-text>
<claim-text>the step of updating the areas of a displayed graphical element comprises displaying in accordance with the updated sub-element instructions the or each appropriate graphical sub-elements in the corresponding area of the displayed graphical element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A system for transmitting data over a communication link or network, the system comprising a first apparatus and a second apparatus interconnected by the communications link or network, said data comprising: 
<claim-text>a graphical element having one or more updatable areas; and </claim-text>
<claim-text>one or more updateable elements corresponding to the updateable areas; said first apparatus comprising: </claim-text>
<claim-text>means operable in response to a request from the second apparatus, to transmit to the second apparatus the graphical element, at least one updateable element and one or more control instructions for controlling updating the areas of a displayed graphical element using the updateable elements; and </claim-text>
<claim-text>means operable to further transmit one or more updated elements to the second apparatus, </claim-text>
<claim-text>said second apparatus comprising; </claim-text>
<claim-text>means operable to request data from the first apparatus; </claim-text>
<claim-text>means operable to receive data from the first apparatus and to display the graphical element using the updateable elements; </claim-text>
<claim-text>means operable to receive one or more updated elements; and </claim-text>
<claim-text>means operable under the control of the or each control instruction, to update the areas of the displayed graphical element using the updated elements. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. Apparatus according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, where the updateable elements comprise data elements, and updating the areas of a displayed graphical element comprises entering the data elements into the corresponding updateable areas. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. Apparatus according to <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> or <highlight><bold>6</bold></highlight>, where: 
<claim-text>the data further comprises at least one set of set of alternative graphical sub-elements; </claim-text>
<claim-text>the updateable elements comprises one or more sub-element instructions identifying the graphical sub-element from a set to be displayed in an area of the graphical element; and </claim-text>
<claim-text>updating the areas of a displayed graphical element comprises displaying in accordance with the updated sub-element instructions the or each appropriate graphical sub-elements in the corresponding area of the displayed graphical element. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. Apparatus for use as the first apparatus within the system according to any of <dependent-claim-reference depends_on="CLM-00005">claims 5</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00007">7</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. Apparatus for use as the second apparatus within the system according to any of <dependent-claim-reference depends_on="CLM-00005">claims 5</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00007">7</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A storage medium carrying computer readable code representing instructions for causing a computer to perform the method defined in any of <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00004">4</dependent-claim-reference>, or to operate as the apparatus defined in any of <dependent-claim-reference depends_on="CLM-00005">claims 5</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00009">9</dependent-claim-reference>, when the instructions are executed by the computer. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A computer data signal embodied in a carrier wave and represented instructions for causing a computer to perform the method defined in any of <dependent-claim-reference depends_on="CLM-00001">claims 1</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00004">4</dependent-claim-reference>, or to operate as the apparatus defined in any of <dependent-claim-reference depends_on="CLM-00005">claims 5</dependent-claim-reference> to <dependent-claim-reference depends_on="CLM-00009">9</dependent-claim-reference>, when the instructions are executed by the computer.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001888A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001888A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001888A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001888A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001888A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001888A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
