<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030002357A1-20030102-D00000.TIF SYSTEM "US20030002357A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00001.TIF SYSTEM "US20030002357A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00002.TIF SYSTEM "US20030002357A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00003.TIF SYSTEM "US20030002357A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00004.TIF SYSTEM "US20030002357A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00005.TIF SYSTEM "US20030002357A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00006.TIF SYSTEM "US20030002357A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00007.TIF SYSTEM "US20030002357A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030002357A1-20030102-D00008.TIF SYSTEM "US20030002357A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030002357</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10183666</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020628</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-38872</doc-number>
</priority-application-number>
<filing-date>20010630</filing-date>
<country-code>KR</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G11C007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>365</class>
<subclass>194000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Register controlled DLL for reducing current consumption</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ki-Seop</given-name>
<family-name>Kwon</family-name>
</name>
<residence>
<residence-non-us>
<city>Ichon-shi</city>
<country-code>KR</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Seong-Hoon</given-name>
<family-name>Lee</family-name>
</name>
<residence>
<residence-non-us>
<city>Ichon-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>BIRCH STEWART KOLASCH &amp; BIRCH</name-1>
<name-2></name-2>
<address>
<address-1>PO BOX 747</address-1>
<city>FALLS CHURCH</city>
<state>VA</state>
<postalcode>22040-0747</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A resister controlled delay locked loop (DLL) is provided which is capable of reducing current consumption by operating the DLL loop when the semiconductor device is only at an operation mode. A semiconductor device having the register controlled DLL and an internal circuit synchronized with a DLL clock signal output from the register controlled DLL, includes an enable signal generator generating an enable signal for the register controlled DLL to control a generation of the DLL clock signal in response to an activation or non-activation signal of the semiconductor device. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The application claims, under 35 U.S.C. &sect;119, the priority benefit of Korean Patent Application No. 2001-38872 filed Jun. 30, 2001, the contents of which are herein fully incorporated by reference. </paragraph>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to a delay locked loop (DLL) in a semiconductor memory device and, more particularly, to a resister controlled DLL capable of reducing current consumption by operating the DLL loop when the semiconductor device is only at an operation mode. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Discussion of the Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Generally, in system circuits of semiconductor devices, a clock signal has been used as a reference signal for adjusting operation timing or guaranteeing a high-speed operation without an error. When a clock signal from an external circuit is used in an internal circuit, a time delay (or clock skew) is generated. A DLL has been used to compensate for such a time delay by providing the same phase between the external and internal clock signals. As compared with the phase locked loop (PLL), the DLL has an advantage in that it is less sensitive to a noise than the PLL. Accordingly, the DLL has been widely used in synchronous memories such as DDR SDRAMs (Double Data Rate Synchronous DRAMs). A register controlled DLL has been generally used as a DLL circuit. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> conventional register controlled DLL includes first and second clock buffers <highlight><bold>11</bold></highlight> and <highlight><bold>12</bold></highlight>, a clock divider <highlight><bold>13</bold></highlight>, a phase comparator <highlight><bold>19</bold></highlight>, a delay unit <highlight><bold>10</bold></highlight> which has first to third delay lines <highlight><bold>14</bold></highlight> to <highlight><bold>16</bold></highlight>, a delay monitor <highlight><bold>23</bold></highlight> having a shift register <highlight><bold>17</bold></highlight> and a shift controller <highlight><bold>18</bold></highlight> in a DLL loop, first and second DLL drivers <highlight><bold>20</bold></highlight> and <highlight><bold>21</bold></highlight>, and a delay model <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The first clock buffer <highlight><bold>11</bold></highlight> receives an inverted external clock signal/clk and produces a first clock signal fall_clk synchronized with a falling edge of the clock signal/clk. Likewise, the second clock buffer <highlight><bold>12</bold></highlight> receives the external clock signal clk and produces a second clock signal rise_clk synchronized with a rising edge of the clock signal clk. The clock divider <highlight><bold>13</bold></highlight> divides the second clock signal rise_clk into n signals (n: a positive integer, e.g., n&equals;8) and then produces a reference signal ref and divided clock signals div_in. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The first delay line <highlight><bold>14</bold></highlight> in the delay unit <highlight><bold>10</bold></highlight> receives the first clock signal fall_clk according to an amount of delay from the shift register <highlight><bold>17</bold></highlight>, which is controlled by the shift controller <highlight><bold>18</bold></highlight>, and produces a first internal clock signal ifclk. Also, the second delay line <highlight><bold>15</bold></highlight> receives the second clock signal rise_clk according to an amount of delay from the shift register <highlight><bold>17</bold></highlight>, which is also controlled by the shift controller <highlight><bold>18</bold></highlight>, and produces a second internal clock signal irclk. The first and second DLL drivers <highlight><bold>20</bold></highlight> and <highlight><bold>21</bold></highlight> receive the first and second internal clock signals ifclk and irclk and produce first and second DLL clock signals fclk_dll and rclk_dll, respectively. The third delay line <highlight><bold>16</bold></highlight> receives the divided clock signal div_in from the clock divider <highlight><bold>13</bold></highlight> and produces a delayed clock signal feedback_dly. The delay model <highlight><bold>22</bold></highlight> receiving the delayed clock signal feedback_dly provides the same signal processing path to the delayed clock signal feedback_dly as the actual signal processing path. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The phase comparator <highlight><bold>19</bold></highlight> compares the phases of the output signal (feed_back) from the delay model <highlight><bold>22</bold></highlight> with the reference signal ref and provides a control signal ctrl to the shift controller <highlight><bold>18</bold></highlight> according to the phase difference. The shift controller <highlight><bold>18</bold></highlight> outputs a shift right or left signal SR or SL to the a shift register <highlight><bold>17</bold></highlight> in response to the control signal ctrl, and the first to third delay lines <highlight><bold>14</bold></highlight> to <highlight><bold>16</bold></highlight> shift the input clock signals (e.g., fall_clk, rise_clk and div_in) based on the amount of shifting stored in the shift register <highlight><bold>17</bold></highlight>. Also, the shift controller <highlight><bold>18</bold></highlight> outputs a DLL locking signal dll_lockb when there is no phase difference between the output signal from the delay model <highlight><bold>22</bold></highlight> and the reference signal ref. The delay model <highlight><bold>22</bold></highlight> includes a dummy clock buffer, a dummy output buffer and a dummy load, which is called a replica circuit. The shift register <highlight><bold>17</bold></highlight> and the shift controller <highlight><bold>18</bold></highlight> form the delay monitor <highlight><bold>23</bold></highlight> used to control the first to third delay lines <highlight><bold>14</bold></highlight> to <highlight><bold>16</bold></highlight> within the delay unit <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The DLL operation of the device shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> will be described in detail below. The first clock buffer <highlight><bold>11</bold></highlight> receiving the inverted external clock signal/clk from an external circuit produces the first clock signal fall_clk, and the second clock buffer <highlight><bold>12</bold></highlight> receiving the external clock clk produces the second clock signal rise_clk. The clock divider <highlight><bold>13</bold></highlight> produces n clock signals in response to the second clock signal rise_clk, thereby forming the reference clock signal ref and the divided clock signal div_in which are synchronized with the external clock signal clk every n divided clock signals. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> At the initial operation, the divided clock signal div_in passes through the third delay line <highlight><bold>16</bold></highlight> in the delay unit <highlight><bold>10</bold></highlight>, thereby forming the delayed clock signal feedback_dly, and the delayed clock signal feedback_dly is delayed in the delay model <highlight><bold>22</bold></highlight> to form another delayed clock signal (another feedback signal). </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The phase comparator <highlight><bold>19</bold></highlight> compares the rising edge of the reference signal ref with that of the feedback signal feed_back and thereby produces the control signal ctrl. The shift controller <highlight><bold>18</bold></highlight> produces shift control signals SR and SL, each of which determines the right or left shift for the shift register <highlight><bold>17</bold></highlight>, in response to the control signal ctrl from the phase comparator <highlight><bold>19</bold></highlight>. Also, the shift register <highlight><bold>17</bold></highlight> determines the amount of the right or left shifting needed in the first to third delay lines <highlight><bold>14</bold></highlight>-<highlight><bold>16</bold></highlight> of the delay unit <highlight><bold>10</bold></highlight> in response to the shift control signals SR and SL. By comparing the delayed feedback signal feed_back with the reference signal ref on the DLL feedback loop, a delay locking is achieved at the time when a minimum jitter is present between the compared signals where the delay locking signal dll_lockb is produced as a signal notifying such a locking. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Once the phase locking is achieved, the DLL clock is continuously toggled, except for refresh and power-down modes, as shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. For example, the DLL clock is toggled during the write, precharge or read operations. In <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, &ldquo;ACT,&rdquo; WT,&rdquo; &ldquo;PRE&rdquo; and &ldquo;RD&rdquo; denote active, write, precharge and read commands, respectively. Accordingly, this continuous toggling of the DLL clock increases power consumption and, specifically, this power consumption is much higher at high frequency operations. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> On the other hand, in peripheral circuits of the semiconductor memory devices, a multistage repeater <highlight><bold>1</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is generally employed in order to maintain a slope or shape of the clock signal. However, since the size of the repeater <highlight><bold>1</bold></highlight> is relatively large, a large amount of current is consumed by the repeater <highlight><bold>1</bold></highlight>. Typically, ten repeaters require or consume 10 mA amount of current. Accordingly, when the DLL clock signal is continuously toggled, the current consumption of the peripheral circuits increases significantly. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> It is, therefore, an object of the present invention to provide a register control delay locked loop capable of reducing current consumption caused by an unnecessary toggling of a DLL clock signal and to provide a semiconductor memory device having the same. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In accordance with an aspect of the present invention, there is provided a semiconductor device having a register controlled delay locked loop (DLL) and an internal circuit synchronized with a DLL clock signal outputted from the register controlled DLL, the semiconductor device comprising: an enable signal generator for generating an enable signal of the register controlled DLL to control a generation of the DLL clock signal in response to an activation or nonactivation signal of the semiconductor device. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In accordance with another aspect of the present invention, there is provided a register controlled delay locked loop (DLL) in a semiconductor device comprising: an internal clock generator for generating an internal clock signal synchronized with an edge of an external clock signal, a delayed clock signal and a reference clock signal; a first delay unit for compensating an amount of delay caused by a signal transmission path of the delayed clock signal; a phase comparing unit for detecting a difference between the reference clock signal and the delayed clock signal; a controller having a plurality of second delay units for controlling an amount of delay of the delayed clock signal in response to the detection signal from the phase comparing unit; a driver for driving a DLL clock signal from the delayed clock signal of which the delay amount is controlled by the controller; an enable signal generating unit for generating an enable signal in response to an activation or non-activation signal of the semiconductor device; and a clock controller disposed between the internal clock generator and the second delay unit(s), for selectively transferring the internal clock signal from the internal clock generator to the second delay unit in response to the enable signal from the enable signal generating unit. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In accordance with still another aspect of the present invention, there is provided a register controlled delay locked loop (DLL) in a semiconductor device comprising: an internal clock generating unit for generating an internal clock signal synchronized with an edge of an external clock signal, a delayed clock signal and a reference clock signal; a first delay unit for compensating an amount of delay caused by a signal transmission path of the delayed clock signal; a phase comparing unit for detecting a difference between the reference clock signal and the delayed clock signal; a control unit having a plurality of second delay units for controlling an amount of delay of the delayed clock signal in response to the detection signal from the phase comparing unit; a driving unit for driving a DLL clock signal from the delayed clock signal of which the delay amount is controlled by the control unit; and an enable signal generating unit for enabling the driving unit in response to an activation or non-activation signal of the semiconductor device. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In accordance with still another aspect of the present invention, there is provided a register controlled delay locked loop (DLL) in a semiconductor device, wherein the register controlled DLL has delay paths, which generates internal clock signals synchronized with each edge of an external clock signal, and a feedback loop for controlling an amount of delay of the internal clock signals based on a register, the register controlled DLL comprising: a switching unit for controlling a transfer of the internal clock signals on the delay paths; and a control unit for selectively turning on the switching unit in response to an activation or non-activation signal of the semiconductor device. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> These and other objects of the present application will become more readily apparent from the detailed description given hereinafter. However, it should be understood that the detailed description and specific examples, while indicating preferred embodiments of the invention, are given by way of illustration only, since various changes and modifications within the spirit and scope of the invention will become apparent to those skilled in the art from this detailed description.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The present invention will become more fully understood from the detailed description given hereinbelow and the accompanying drawings which are given by way of illustration only, and thus are not limitative of the present invention and wherein: </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram illustrating a register controlled DLL of a conventional DDR SDRAM; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a timing chart showing a DLL clock waveform in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a repeater disposed in a peripheral circuit of the conventional DDR SDRAM; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram illustrating a register controlled DLL of a DDR SDRAM in accordance with an embodiment of the present invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating an example of the DLL clock enable signal generator in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> illustrate two different examples of each of first and second clock controllers in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> according to different embodiments of the present invention; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an example of a timing chart of input/output signals of the DLL clock enable signal generator in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an example of a timing chart of the register controlled DLL of the DDR SDRAM in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>; and </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram illustrating a register controlled DLL of a DDR SDRAM in accordance with another embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Hereinafter, a register controlled DLL in DDR SDRAM devices according to the present invention will be described in detail in reference with the accompanying drawings. A &ldquo;unit&rdquo; in the present invention is not necessarily a single entity, but can be composed of multiple components. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the register control DLL according to an embodiment of the present invention includes first and second clock buffers <highlight><bold>41</bold></highlight> and <highlight><bold>42</bold></highlight>, a clock divider <highlight><bold>43</bold></highlight>, a phase comparator <highlight><bold>49</bold></highlight>, a delay unit <highlight><bold>40</bold></highlight> which has first to third delay lines <highlight><bold>44</bold></highlight> to <highlight><bold>46</bold></highlight>, a delay monitor <highlight><bold>53</bold></highlight> having a shift register <highlight><bold>47</bold></highlight> and a shift controller <highlight><bold>48</bold></highlight> in a DLL loop, first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight>, and a delay model <highlight><bold>52</bold></highlight>, all operatively coupled. The register control DLL shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> has the same configuration as the DLL shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, except for the addition of a DLL clock enable signal generator <highlight><bold>54</bold></highlight>, first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> and connections resulting therefrom. Accordingly, the detailed description of each block in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> will be omitted except for the DLL clock enable signal generator <highlight><bold>54</bold></highlight> and first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The first clock controller <highlight><bold>55</bold></highlight> is provided between the first clock buffer <highlight><bold>41</bold></highlight> and the first delay line <highlight><bold>44</bold></highlight>, and the second clock controller <highlight><bold>56</bold></highlight> is provided between the second clock buffer <highlight><bold>42</bold></highlight> and the second delay line <highlight><bold>45</bold></highlight>. Furthermore, the DLL clock enable signal generator <highlight><bold>54</bold></highlight> generates a DLL clock enable signal dll_en to enable the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> and outputs the enable signal dll_en to each of the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight>. In an embodiment of the present invention, when the DLL clock enable signal dll_en from the DLL clock enable signal generator <highlight><bold>54</bold></highlight> is at a high voltage level, the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> are enabled. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The first clock signal fall_clk from the first clock buffer <highlight><bold>41</bold></highlight> and the second clock signal rise_clk from the second clock buffer <highlight><bold>42</bold></highlight> are transferred to the first and second delay lines <highlight><bold>44</bold></highlight> and <highlight><bold>45</bold></highlight>, respectively, when the DLL clock enable signal dll_en is produced by the DLL clock enable signal generator <highlight><bold>54</bold></highlight>. Such a selective signal transfer operation can prevent selectively the unnecessary toggling operation in the DLL clock signal according to the present invention. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram illustrating an example of the DLL clock enable signal generator <highlight><bold>54</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> according to an embodiment of the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the DLL clock enable signal generator <highlight><bold>54</bold></highlight> includes a driving unit <highlight><bold>60</bold></highlight>, a reset unit <highlight><bold>62</bold></highlight> and an output unit <highlight><bold>64</bold></highlight>, all operatively coupled. The driving unit <highlight><bold>60</bold></highlight> includes a pull-up PMOS transistor M<highlight><bold>1</bold></highlight> which increases the voltage level at node n<highlight><bold>0</bold></highlight> in response to a precharge pulse pcgz and a pull-down NMOS transistor M<highlight><bold>2</bold></highlight> which decreases the voltage level at the output node n<highlight><bold>0</bold></highlight> in response to an inverted form of a row address strobe activation pulse act_rasz inverted through an inverter INV<highlight><bold>1</bold></highlight>. The pull-up PMOS transistor M<highlight><bold>1</bold></highlight> is coupled between a power supply PS and the output node (n<highlight><bold>0</bold></highlight>) and the pull-down NMOS transistor M<highlight><bold>2</bold></highlight> is coupled between the output node (n<highlight><bold>0</bold></highlight>) and a ground voltage level of a semiconductor memory device. The row address strobe activation pulse act_rasz is a signal that is generated when one of a plurality of banks (i.e., memory banks) is activated, and the precharge pulse pcgz is generated when precharging of all the banks is required. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The reset unit <highlight><bold>62</bold></highlight> coupled between a power supply PS and node n<highlight><bold>0</bold></highlight> resets the output node (n<highlight><bold>0</bold></highlight>), by turning the voltage level of the output node (n<highlight><bold>0</bold></highlight>) high in response to a power-up signal pwrup. The output unit <highlight><bold>64</bold></highlight> includes an inverting latch having two inverters INV<highlight><bold>2</bold></highlight> and INV<highlight><bold>3</bold></highlight>, and a buffer having two inverters INV<highlight><bold>4</bold></highlight> and INV<highlight><bold>5</bold></highlight>, thereby generating and outputting a stably inverted signal of the output signal at node n<highlight><bold>0</bold></highlight> as the DLL clock enable signal dll_en. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, the first clock controller <highlight><bold>55</bold></highlight> according to one embodiment of the present invention includes an NAND gate ND receiving the first clock signal fall_clk and the DLL clock enable signal dll_en and an inverter INV<highlight><bold>6</bold></highlight> inverting the output signal from the NAND gate ND. The second clock controller <highlight><bold>56</bold></highlight> is made of the same configuration as the first clock controller <highlight><bold>55</bold></highlight>, except that it receives the second clock signal rise_clk in lieu of the first clock signal fall_clk. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> A different example of the structure of the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> is shown in <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> in accordance with another embodiment. In <cross-reference target="DRAWINGS">FIG. 6</cross-reference>B, the DLL clock enable signal dll_en functions as a switching control signal to control a transfer transistor TG passing the first or second clock signal fall_clk or rise_clk. While the structure of the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> is designed based on the high voltage level of the DLL clock enable signal dll_en, it is possible to employ the different logic designs to selectively transfer the first or second clock signal fall_clk or rise_clk under the control of the DLL clock enable signal dll_en. Also, it is possible for the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> to have the circuitry as shown in <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>, respectively, or <cross-reference target="DRAWINGS">FIGS. 6B and 6A</cross-reference>, respectively. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIGS. 5 and 7</cross-reference>, when the power-up signal pwrup of a low voltage level is applied to the DDR SDRAM, the PMOS transistor M<highlight><bold>3</bold></highlight> is turned on and node n<highlight><bold>0</bold></highlight> is precharged to a high voltage level, thereby outputting the DLL clock enable signal dll_en having a low voltage level. Thereafter, when the power-up signal pwrup switches from the low voltage level to a high voltage level, the latch circuit including the inverters INV<highlight><bold>2</bold></highlight> and INV<highlight><bold>3</bold></highlight> continuously outputs the latched value while the DLL clock enable signal dll_en is maintained at a low voltage level. When a bank active command is inputted to the DDR SDRAM and the row address strobe activation pulse act_rasz is activated to a low level (<cross-reference target="DRAWINGS">FIG. 7</cross-reference>), the pull-down NMOS transistor M<highlight><bold>2</bold></highlight> is turned on. Then the voltage at node n<highlight><bold>0</bold></highlight> is discharged and the DLL clock enable signal dll_en is activated to a high voltage level. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> When the row address strobe activation pulse act_rasz switches from the low voltage level to a high voltage level, the value stored in the latch circuit (INV<highlight><bold>2</bold></highlight> and INV<highlight><bold>3</bold></highlight>) of the output unit <highlight><bold>64</bold></highlight> is continuously outputted as the high voltage level of the DLL clock enable signal dll_en. If a read or write command is inputted to the DDR SDRAM, the read or write operation is carried out in synchronization with the DLL clock signal. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> On the other hand, after the accessing of the memory device is finished, a non-active command (i.e., a precharge command) is applied to the memory device and a bit line precharge operation is performed. At this time, the precharge pulse pcgz is activated or switched to a low voltage level as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> and then the voltage at node n<highlight><bold>0</bold></highlight> is charged to a high voltage level due to the pull-up PMOS transistor M<highlight><bold>1</bold></highlight>. As a result, the value latched in the output unit <highlight><bold>64</bold></highlight> is a low voltage level value and the DLL clock enable signals dll_en switches to a low voltage level. While the precharge pulse pcgz switches from the low voltage level to a high voltage level, the value latched in the output unit <highlight><bold>64</bold></highlight> is maintained at the low voltage level so that the DLL clock enable signal dll_en is at the low voltage level of non-activation. That is, as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the DLL clock enable signal dll_en is activated to a high voltage level between the activation command and non-activation command of the memory device. Thus, the bank activation command (bank selection signal) generates a DLL clock signal in response to the DLL clock enable signal dll_en and the cell bit line precharge signal. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the DLL loop including the clock divider <highlight><bold>43</bold></highlight>, the phase comparator <highlight><bold>49</bold></highlight>, the shift controller <highlight><bold>48</bold></highlight>, the shift register <highlight><bold>47</bold></highlight> and the delay model <highlight><bold>52</bold></highlight> continuously operates, irregardless of the activation of the DLL clock enable signal dll_en, and outputs the delay controlled clock signal feedback_dly. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> When the memory is in a non-activation state in which the read and write operations are not carried out, since the DLL clock enable signal dll_en is not activated, the transmission of the first and second clock signals fall_clk and rise_clk are blocked by the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> and thus, the outputs of the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> are restricted. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> On the other hand, if an activation signal act is inputted to the memory, the DLL clock enable signal dll_en is activated (i.e., switched to a high voltage level) and the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> transmit therethrough the first and second clock signals fall_clk and rise_clk, respectively. Accordingly, the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> output the first and second DLL clock signals fclk_dll and rclk_dll, respectively, and the memory read or write operation is carried out. When the accessing of the memory device has been completed and a precharge command is applied to the memory, the DLL clock enable signal dll_en from the DLL clock enable signal generator <highlight><bold>54</bold></highlight> is not activated so that the transmission of the first and second clock signals fall_clk and rise_clk are blocked by the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> in response to the non-activation of the DLL clock enable signal dll_en. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Since the DLL clock signal of the DDR SDRAM memory according to the present invention is activated between the activation command and the non-activation command of the memory, the DLL clock signal is not generated for an undesired period of the non-activation of the memory, thereby reducing power consumption by the memory. Further, since the first and second clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> do not transmit the first and second clock signals fall_clk and rise_clk therethrough, then the amount of current consumed by the first and second delay lines <highlight><bold>44</bold></highlight> and <highlight><bold>45</bold></highlight> is reduced significantly. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The DLL clock enable signal generator <highlight><bold>54</bold></highlight> may be coupled to different elements which are disposed on the delay path in DLL clock generating circuits, by generating an enable signal to control the different elements on the delay path. <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram illustrating a register controlled DLL of a DDR SDRAM in accordance with another embodiment of the present invention. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> According to another embodiment of the present invention, a DLL clock enable signal generator <highlight><bold>90</bold></highlight> is coupled to the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> so that the DLL clock enable signal generator <highlight><bold>90</bold></highlight> enables or disables the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> without the use of the clock controllers <highlight><bold>55</bold></highlight> and <highlight><bold>56</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In this embodiment, the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> may be composed of a conventional output driver having a pull-up device and a pull-down device, respectively. Accordingly, an additional switch is controlled by the enable signal from the DLL clock enable signal generator <highlight><bold>90</bold></highlight> and by-passes an output voltage at its output node to a ground voltage level of the memory device through the switching operation while the memory device is not activated. Thus, the current reduction according to the present invention can be easily achieved. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The operation of each element shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is the same as that shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. That is, when the read or write operation is not carried out, the DLL clock enable signal dll_en is not activated and is maintained at a low voltage level so that first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> are disabled to restrict the output of the first and second clock signals fclk_dll and rclk_dll. If the memory device is activated to perform the read or write operation, the DLL clock enable signal dll_en is activated to a high voltage level and then the first and second DLL drivers <highlight><bold>50</bold></highlight> and <highlight><bold>51</bold></highlight> are enabled to output of the first and second clock signals fclk_dll and rclk_dll. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As compared with the DLL clock enable signal generator <highlight><bold>54</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the DLL clock enable signal generator <highlight><bold>90</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may not reduce the amount of current consumed in the delayers (the delay lines <highlight><bold>44</bold></highlight> and <highlight><bold>45</bold></highlight>) significantly, but will reduce the amount of current consumed by the undesired toggling of the DLL clock. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> The present invention can be achieved at an input terminal of a peripheral circuit of the memory device. For example, if the DLL clock enable signal generator and a clock controller (which performs the function as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>) are provided to an input terminal of a peripheral circuit of the memory device, the clock controller may be employed in order to enable and disable it in response to the output signal from the DLL clock enable signal generator. In this case, the amount of current consumed in repeaters of the peripheral circuit can be remarkably reduced. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Particularly, in one embodiment of the present invention, the DLL clock may be controlled and toggled only when a read operation is performed. In a memory device which performs the DLL operation only at the time of the read operation, the DLL clock enable signal generator produces the DLL clock enable signal only for such an operation timing. That is, if the DLL clock enable signal is produced via the shortest read command path, it is not produced when a burst operation has been finished, and the memory device operates in different modes other than the read operation where the memory device may perform the DLL operation only at the time of the read operation. In this case, the DLL clock enable signal generator in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> may input a read command signal (Rdb) to the inverter INV<highlight><bold>1</bold></highlight>, instead of the row address strobe activation pulse act_rasz which is inputted to the inverter INV<highlight><bold>1</bold></highlight>. In one example, the read command signal Rdb is a low active signal which is produced by combing output signals from command buffers. Accordingly, in this case, the DLL clock disable signal has to be designed by considering the time it takes for the data to pass through the data output buffer, and the activation of the DLL clock enable signal dll_en has to be guaranteed while the read operation is carried out, even if any other signals are inputted to the memory device. These teachings may be applicable to the configuration shown in FIGS. <highlight><bold>6</bold></highlight>A and/or <highlight><bold>6</bold></highlight>B. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> As apparent from the above, the undesired current consumption is prevented by selectively enabling the DLL clock signals during the read or write operations of the memory device. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Although the preferred embodiments of the invention have been disclosed for illustrative purposes, those skilled in the art will appreciate that various modifications, additions and substitutions are possible, without departing from the scope and spirit of the invention as disclosed in the accompanying claims. For example, the present invention is illustrated in the DDR SDRAM, but it is equally applicable to any other synchronization memory device or logic circuits. In another example, a low voltage level can be designated to represent an activation of a signal. Although the embodiments of the present invention employ the row address strobe activation plus or read command signal as an activation signal, and the precharge plus as an non-activation signal, different signals (e.g., a column address strobe signal, a write enable signal or an activation command) can be used as the activation signal. Also, different signals can be used as the non-activation signals, which are not related to the data input and output. Furthermore, the components of one embodiment of the present invention can be used as a substitute for or an addition to the components of another embodiment of the present invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A semiconductor device having a register controlled delay locked loop (DLL) and an internal circuit synchronized with a DLL clock signal outputted from the register controlled DLL, the semiconductor device comprising: 
<claim-text>an enable signal generator generating an enable signal for the register controlled DLL to control a generation of the DLL clock signal in response to an activation or non-activation signal of the semiconductor device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>a control unit switching a signal transmission path to selectively transfer its input clock signal in response to the enable signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the control unit includes a NAND gate and an inverter. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the control unit includes a transfer transistor and an inverter. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the enable signal generator includes: 
<claim-text>a driving unit carrying out a pull-up or pull-down operation in response to the activation or non-activation signal of the semiconductor device; </claim-text>
<claim-text>a reset unit resetting an output node of the driving unit; and </claim-text>
<claim-text>a latch and buffering unit latching and buffering an output signal from the output node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the activation signal is one of following: 
<claim-text>an activation command signal, </claim-text>
<claim-text>a write enable signal, </claim-text>
<claim-text>a read command signal, </claim-text>
<claim-text>a column address strobe command signal, and </claim-text>
<claim-text>a row address strobe command signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The semiconductor device as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the non-activation signal is a precharge signal for precharging a bit line of a memory cell in the semiconductor device. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A register controlled delay locked loop (DLL) usable in a semiconductor device, the register controlled delay locked loop comprising: 
<claim-text>an internal clock generating unit generating an internal clock signal associated with an external clock signal, and generating a delayed clock signal and a reference clock signal; </claim-text>
<claim-text>a first delay unit compensating for an amount of delay caused by a signal transmission path of the delayed clock signal; </claim-text>
<claim-text>a phase comparator detecting a difference between the reference clock signal and the delayed clock signal and thereby generating a detection signal; </claim-text>
<claim-text>a controller having a plurality of second delay units for controlling an amount of delay of the delayed clock signal in response to the detection signal from the phase comparator; </claim-text>
<claim-text>a driver driving a DLL clock signal from the delayed clock signal having its delay amount controlled by the controller; </claim-text>
<claim-text>an enable signal generator generating an enable signal in response to an activation or non-activation signal of the semiconductor device; and </claim-text>
<claim-text>a clock control unit disposed between the internal clock generating unit and at least one of the second delay units, for selectively transferring the internal clock signal from the internal clock generating unit to the second delay unit in response to the enable signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the enable signal generator includes: 
<claim-text>a driving unit carrying out a pull-up or pull-down operation in response to the activation or non-activation signal of the semiconductor device; </claim-text>
<claim-text>a reset unit resetting an output node of the driving unit; and </claim-text>
<claim-text>a latch and buffering unit latching and buffering an output from the output node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the clock control unit includes a logic gate circuit passing the internal clock signal in response to an output signal from the enable signal generator. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the clock control unit includes a switching transfer gate to transfer the internal clock signal in response to both an output signal from the enable signal generator and an inverted signal of the output signal from the enable signal generator. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A register controlled delay locked loop (DLL) usable in a semiconductor device, the register controlled delay locked loop comprising: 
<claim-text>an internal clock generating unit generating an internal clock signal associated with an external clock signal, and generating a delayed clock signal and a reference clock signal; </claim-text>
<claim-text>a first delay unit compensating for an amount of delay caused by a signal transmission path of the delayed clock signal; </claim-text>
<claim-text>a phase comparator detecting a difference between the reference clock signal and the delayed clock signal and thereby generating a detection signal; </claim-text>
<claim-text>a controller having a plurality of second delay units for controlling an amount of delay of the delayed clock signal in response to the detection signal from the phase comparator; </claim-text>
<claim-text>a driver driving a DLL clock signal from the delayed clock signal having its delay amount controlled by the controller; and </claim-text>
<claim-text>an enable signal generator enabling the driver in response to an activation or non-activation signal of the semiconductor device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the enable signal generator includes: 
<claim-text>a driving unit carrying out a pull-up or pull-down operation in response to the activation or non-activation signal of the semiconductor device; </claim-text>
<claim-text>a reset unit resetting an output node of the driving unit; and </claim-text>
<claim-text>a latch and buffering unit latching and buffering an output from the output node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the activation signal is one of following: 
<claim-text>an activation command signal, </claim-text>
<claim-text>a read command signal, </claim-text>
<claim-text>a write enable signal, </claim-text>
<claim-text>a column address strobe command signal, and </claim-text>
<claim-text>a row address strobe command signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the non-activation signal is a precharge signal for precharging a bit line of a memory cell in the semiconductor device. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the internal clock generating unit includes: 
<claim-text>at least one clock buffer receiving the external clock signal and generating the internal clock signal; and </claim-text>
<claim-text>a clock signal divider dividing the internal clock signal and generating the delayed clock signal and the reference clock signal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A register controlled delay locked loop (DLL) usable in a semiconductor device, wherein the register controlled DLL has delay paths, generates internal clock signals based on an external clock signal, and includes a feedback loop for controlling an amount of delay of the internal clock signals, the register controlled DLL comprising: 
<claim-text>a switch controlling a transfer of the internal clock signals on the delay paths; and </claim-text>
<claim-text>a controller selectively turning on the switch in response to an activation or non-activation signal of the semiconductor device </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the delay paths include: 
<claim-text>a clock buffer generating the internal clock signals in response to a falling edge and a rising edge of the external clock signal; </claim-text>
<claim-text>a delay circuit delaying the internal clock signals; and </claim-text>
<claim-text>a driver driving a DLL clock signal from the delayed internal clock signals. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the switch includes a logic circuit which is in response to an enable signal from the controller. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The register controlled delay locked loop as recited in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the controller is connected to the delay paths and includes pull-up and pull-down units, wherein the pull-up unit activates the delay paths when the semiconductor device is at an operation mode. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The register controlled delay locked loop as recited in claim <highlight><bold>20</bold></highlight>, wherein the controller receives a memory bank selection signal and a bit line precharge signal, and resets a node on the delay paths.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030002357A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030002357A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030002357A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030002357A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030002357A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030002357A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030002357A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030002357A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030002357A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
