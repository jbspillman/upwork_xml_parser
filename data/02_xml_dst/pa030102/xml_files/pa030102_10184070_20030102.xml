<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001869A1-20030102-D00000.TIF SYSTEM "US20030001869A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001869A1-20030102-D00001.TIF SYSTEM "US20030001869A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001869A1-20030102-D00002.TIF SYSTEM "US20030001869A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001869</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10184070</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020628</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G09G005/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>672000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Method for resizing and moving an object on a computer screen</title-of-invention>
</technical-information>
<continuity-data>
<non-provisional-of-provisional>
<document-id>
<doc-number>60301448</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Peter</given-name>
<family-name>Nissen</family-name>
</name>
<residence>
<residence-non-us>
<city>Frederiksberg</city>
<country-code>DK</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>HARNESS, DICKEY &amp; PIERCE, P.L.C.</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 8910</address-1>
<city>Reston</city>
<state>VA</state>
<postalcode>20195</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method for defining the size of an object displayed on a computer screen, the computer screen having a matrix of sensor points, said method comprising the steps of displaying an object on a computer screen, defining at least one screen area having a reference point associated therewith, reading an input from a sensor point in a screen area, calculating a vector between the read input and the reference point of that screen area, and defining the size of the object based on the vector. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a method for resizing an object to be displayed on a computer screen such as a touch screen. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Touch screens are more and more commonly used for various computer applications and for office machines such as copy machines, fax machines, graphical scanners etc. Typically a touch screen takes the place of a normal computer screen, a keyboard and/or optional peripheral equipment such as a pointing device in the form of a mouse or a track ball. In addition to the ability of displaying an image, a touch screen has a matrix with a plurality of sensitive points defined on the surface of the screen. By touching a point on the screen, the absolute position of the point on the screen being touched is registered and transmitted to the controlling CPU. This is similar to pressing a mouse button where the absolute position of a cursor is registered. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> When defining a relative position or a movement of an item e.g. when dragging and dropping items on the screen, the mouse button is typically kept depressed while the cursor is moved from one position on the screen to a new position on the screen. The desired result, be that a vector defining the change in the size of the item or a vector defining the distance and direction of the movement of the item, is defined from the start point, at the time when the mouse button is depressed, to the end point, when the mouse button is released. Since applications using touch screens typically has no conventional pointing devices, such as a mouse or trackball, a similar user interface may be difficult to achieve. Applications exist wherein the start point is defined as the point a user touches the screen and by keeping the finger in contact with the screen, the user may move the finger to the end point where the finger is removed from the screen. However, it is typically an awkward process to move a finger in firm contact with a screen and due to the sensitivity of common touch screens, the above mentioned user interface for defining a relative position or movement on a screen is not suitable for many applications. As an example, the user may often have to press relatively hard against the surface of the screen in order to activate the sensitive areas of the screen and it is difficult at one time both to press hard against the screen and move the finger across the screen. </paragraph>
</section>
<section>
<heading lvl="1">DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> It is an object of the present invention to overcome the above described disadvantage of the known user interfaces by providing a method for defining the size of an object displayed on a computer screen, the computer screen having a matrix of sensor points, said method comprising the steps of: </paragraph>
<paragraph id="P-0005" lvl="2"><number>&lsqb;0005&rsqb;</number> displaying an object on a computer screen, </paragraph>
<paragraph id="P-0006" lvl="2"><number>&lsqb;0006&rsqb;</number> defining at least one screen area having a reference point associated therewith, </paragraph>
<paragraph id="P-0007" lvl="2"><number>&lsqb;0007&rsqb;</number> reading an input from a sensor point in a screen area, </paragraph>
<paragraph id="P-0008" lvl="2"><number>&lsqb;0008&rsqb;</number> calculating a vector between the read input and the reference point of that screen area, and </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> defining the size of the object based on that vector. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The object which is going to be resized may as an example be a picture or picture frame, text or a text frame or any other object being visualized on a computer screen. The computer screen may be a regular computer screen, even though the following description focuses on a touch screen. The computer screen may also be a window on a computer screen. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Sensor point are points on the screen selected by the user, either by mouse-clicking on the computer screen, by touching the screen or in any other way by selecting a point on the screen. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Screen Area is a predefined area of the screen. Sensor points sensed within one particular screen area are used for one particular resizing direction. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> As an example, the object could be a quadrangular frame, e.g. defining the borders of a graphical image. When a user wants to define the borders of the graphical image, e.g. when framing a digital photo, the size of the frame is defined and the frame is positioned in relation to the photo so that the desired part of the photo is encapsulated by the frame. For this purpose, a method for the resizing of the frame according to the present invention is highly advantageous. Preferably 8 screen areas are defined outside the quadrangle, the 8 screen areas defining 8 directions of enlargements of the size of the quadrangle (North, North-East, East, East-South, South, South-West, West and West-North). Additional at least 4 screen areas are defined inside the quadrangle, the 4 screen areas defining 4 directions of reduction of the size of the quadrangle (North, East, South and West). Accordingly the user will be provided with very easy means of defining the right size of the frame by clicking only once on the screen. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The screen area(s) could be visualized on the screen as an image, e.g. overlapping the object and defining a certain area or areas of the screen and thus defining specific sensor points in the matrix of sensor points. Taking the above example of a quadrangle, it will be appreciated to visualize the areas defining the 4 directions of reduction, e.g. by drawing two lines, each line connecting two opposite corners of the quadrangle, the two lines thus forming a cross inside the quadrangle. The 8 areas defining the 8 directions of enlargement could be visualized simply by extending both ends of each of the 4 lines defining the quadrangle. This has been shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The object being resized is thus accomplished by a number of areas constituting &ldquo;push areas&rdquo;. When a sensor point senses a touch within one screen area, the reference point of that screen area is used, together with the absolute position of the sensor point (or the position of the sensor point relative to the reference point) to generate a two dimensional vector, i.e. a direction of resizing and a dimension of the resizing. The vector is subsequently used to resize the object, e.g. the quadrangular frame. If the screen is a regular computer screen, the sensor point would be the point on the screen at which the pointer or cursor points. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The vector, which is defined from the reference point and the sensor point, determines a direction of resizing and a degree of resizing. As an example, the vector is determined directly from the direction and distance from the reference point to the sensor point from which an input has been read. As another example, the vector is determined from the projection of the above mentioned direction and distance from the reference point to the sensor point onto either a horizontal or vertical axis or onto an axis of a predetermined direction. As an example, a quadrangular frame may be resized in the way that one of the sides of the quadrangle, or that side of the quadrangle being nearest the sensor point from which an input has been read, is simply moved to the sensor point from which an input has been read. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Preferably the invention is combined with a drag object operation. Since the screen area refers to a reference point, a drag operation (click-drag-release) anywhere within the screen area can effectively be interpreted as a drag operation of the reference point. I.e. keeping the vector (or projection of the vector) fixed and thereby resizing the object. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> The differentiating between a dragging or just clicking operation is easily defined by setting a limit in pixels on the pointing device movement while the mouse button or touch screen is depressed. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The differentiation could further or alternatively be defined by having a time evaluation of the activation/depression of the screen area. As an example, only activation of the area for less than 1 (one) second would result in a clicking operation while longer presses would result in a dragging operation. Typically, the click operation is more drastic in effect than the dragging, and this differentiation therefore further prevents unintentional clicking. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Preferably, the object is resized by moving a predetermined part of the object from a first position to a second position, the vector connecting the first and the second positions or the vector at least extends in a direction from the first position to the second position. As an example, a small quadrangle is visualized in the middle of a screen. Upon reading an input from a sensor point located near one of the borders of the screen, the side of the quadrangle being nearest the sensor point is moved {fraction (1/1)}st, &frac12;nd, &frac13;rd, &frac14;th, &frac15;th, &frac16;th, {fraction (1/7)}th, &frac18;th, {fraction (1/9)}th, {fraction (1/10)}th or even less than {fraction (1/10)}th of the distance in the direction towards the sensor point. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Preferably, the reading of an input from a sensor point in a screen area is repeated periodically, e.g. every {fraction (1/10)}th, {fraction (1/9)}th, &frac18;th, {fraction (1/7)}th, &frac16;th, &frac15;th, &frac14;th, &frac13;rd, &frac12;nd, {fraction (1/1)} sec. or even with a lower frequency. Every time an input from a sensor point is read, the size of the object may be changed according to the above described procedure for the resizing of the object, e.g. the object may every {fraction (1/10)}th of a sec. be resized {fraction (1/10)}th of the distance from the reference point to the sensor point. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In order to give the user a positive feel for the resizing of objects, the degree of resizing may be tuned either manually or automatically. As an example, the user may select a number from one to five, the number being indicative of the resizing impact. By selecting one, the object will only be slightly larger even though the user touches a point relatively far away from the object. By selecting five, the same touch point will enlarge the object by the full distance from the reference point to the sensor point. As an example of automatically tuning of the resizing, the degree of resizing may be determined from the size of the object relative to the size of the screen or relative to the size of an active window used for displaying the object. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> As yet another example, the degree of resizing may be determined from the position of a reference image visualized on the screen. Other references for the automatic tuning of the resizing function may be chosen. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Taking the above example of a quadrangular frame, it will be appreciated that the reference points are defined so that whenever a user touches a sensor point on the touch screen, the quadrangular frame is resized so that the nearest side of the quadrangle or nearest corner of the quadrangle intersects that sensor point. The remaining corners and lines should remain unchanged in their respective positions on the touch screen whereby the size of the quadrangle is changed. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Preferably the reference points are visualized on the screen so that the user can visually see which point is being used for calculation of the resizing. As an example one corner of the screen always defines the reference point and as the user touches the screen in order to resize the object, the distance and direction between the touch point and this reference point is calculated for resizing and visualizing the resized object. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> As another example a sharp corner point of the object may define the position of the reference point and as yet another example, the user may point on the screen to first define the reference point, succeedingly the user may point on the screen to define the resizing of the object. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> If the screen comprises more than one object the user may be invited to point out individual objects which are going to be resized, either by keying in a reference name or number of the object or simply by &ldquo;clicking&rdquo; out the object on the screen. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> According to another aspect, the present invention relates to a graphical scanner for scanning images and to a way of manipulating the scanned images, the scanner being provided with a graphical touch screen user interface and a CPU adapted to enable the above mentioned user interaction for resizing an object. Via the user interface, the user may define the size of a frame within a scanned image. The frame could as an example define an area, which is to be rescanned with a higher resolution, an area which is to be rescanned with specific settings of the scanner or a frame comprising a picture which is to be exported as a graphical object, e.g. to a color printer for printing. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> According to yet another aspect, the present invention relates to a copy machine for scanning and printing images, the copy machine being provided with a graphical touch screen user interface and a CPU adapted to enable the above mentioned user interaction of resizing a frame, hereby selecting a part of the scanned image to be printed. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Finally it should be understood that the above-described method of resizing an object or frame could be used together with a regular screen instead of a touch screen. In that case the position of a screen cursor on the screen should be controlled via traditional pointing devices such as a mouse, a trackball, a light pen or a digitizer etc. The position of the cursor in that case takes the place of the position where the user touches the screen and the user would need to indicate the point by clicking a mouse button or in a similar way to indicate that the position is to be used for the resizing.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> An embodiment of the invention will now be described in details with reference to the drawing in which: </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows an object visualized on a computer touch screen, and </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a view of screen areas for the resizing of the object of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Now referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the invention relates to an Image Window Tool in the following text referred to as an Object Resize tool. The tool allows for graphical interactive resizing of an object <highlight><bold>1</bold></highlight> e.g. shown in an Image Window <highlight><bold>2</bold></highlight>. The tool may be programmed in any language and for any computer platform. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> As an example, the Object Resize tool can be implemented as a tool in an application capable of retrieving and displaying raster images. The application, including the tool, can be written in Microsoft Visual C&plus;&plus;&trade;, and the target platform can be any of the Microsoft Windows&trade; operating system (O/S) platforms. In this example, the tool will then be using the graphical capabilities of the Microsoft Windows&trade; Application Programming Interface (API) to display the tool. This involves obtaining a graphical device context (DC) from the API, and writing the appropriate commands to this DC, to have the O/S display the tool. Similar operations are used for displaying and updating any graphical elements related to the tool (e.g. an underlying raster image). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The Object Resize tool can be programmed as a part of a Windows&trade; application or it can be programmed as a separate Microsoft COM component (Component Object Model). The advantages of a separate implementation are easier reusability e.g. in multiple applications and a programmatically nicer and cleaner solution. Where the main application typically would be programmed in C&plus;&plus; with the use of the MFC programming library (Microsoft Foundation Classes), the separate COM component would typically be programmed in C&plus;&plus; with the use of the Microsoft ATL library (Active Template Library). The typical touch screen input device uses a mouse hardware interface (COM, PS/2 or USB), and with the supplied driver, this device acts like any other mouse device in the operating system. I.e. touching the screen will generate mouse events in the Windows&trade; O/S, and the touches done on a visible part of the Window showing the Object Resizing tool, will cause mouse events to be send to the application. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The Object Resize tool works on a predefined part <highlight><bold>3</bold></highlight> of the window. The predefined part is divided into 12 screen areas <highlight><bold>4</bold></highlight>,<highlight><bold>5</bold></highlight>&mdash;also shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The screen areas define four directions (<highlight><bold>4</bold></highlight>) for the size reduction of the object and eight directions for the enlargement (<highlight><bold>5</bold></highlight>) of the object. The borders between the screen areas are drawn in a stylistic form, see also <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; the arrows are explanatory and does not necessarily have to be shown in the Image Window. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> When activating the tool, an &ldquo;X&rdquo; is graphically shown inside the Paper Frame <highlight><bold>3</bold></highlight> on the computer screen. Furthermore, a horizontal and vertical line extending from each corner of the Paper Frame towards the perimeter of the Image Window (&lsquo;L&apos;shaped&rsquo;) is shown. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> These lines create four regions inside the Paper Frame, and eight regions outside the Paper Frame. As illustrated with the arrows, these regions are tied two regions to each side of the Paper Frame, and one corner-region to each corner of the Paper Frame. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The Object Resize Tool may be operated by dragging and dropping but according to the invention &ldquo;Centre-clicking&rdquo; as described below, is preferred. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Dragging </paragraph>
<paragraph id="P-0042" lvl="3"><number>&lsqb;0042&rsqb;</number> The Paper Frame side, respectively corner, tied to the clicked region is moved according to the dragged distance. </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> Centre-clicking </paragraph>
<paragraph id="P-0044" lvl="3"><number>&lsqb;0044&rsqb;</number> The Paper Frame side, respectively corner, tied to the clicked region is placed at the clicked position of the image in the Image Window. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The Object Resize of an object (i.e. resizing based on specified region as opposed to a resize based on a specified border), can be applied in numerous applications. </paragraph>
<paragraph id="P-0046" lvl="7"><number>&lsqb;0046&rsqb;</number> The Object(s) Beneath the Tool </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The basic purpose of the rectangular frame is to select or point-out a part of a layout. This layout is displayed in the same screen element as the rectangle can be interacted on (the Image Viewer), and in a way so that the rectangle (when active) is drawn &lsquo;on top&rsquo; of the layout. The layout can consist of different component(s): </paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> A raster image </paragraph>
<paragraph id="P-0049" lvl="2"><number>&lsqb;0049&rsqb;</number> A graphical document consisting of a mixture of </paragraph>
<paragraph id="P-0050" lvl="3"><number>&lsqb;0050&rsqb;</number> raster images </paragraph>
<paragraph id="P-0051" lvl="3"><number>&lsqb;0051&rsqb;</number> vector graphic objects </paragraph>
<paragraph id="P-0052" lvl="3"><number>&lsqb;0052&rsqb;</number> text </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Basically all types of visual objects which can be shown on a 2 dimensional computer screen in a rectangular or differently shaped window that sets the outer perimeter of the tool&apos;s regions. </paragraph>
<paragraph id="P-0054" lvl="7"><number>&lsqb;0054&rsqb;</number> The Frame </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> The rectangle itself can be drawn as a thin line (no border thickness) or as two rectangles inside each other (a rectangle with a border thickness). For the purpose of e.g. illustrating a margin. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> In the case of two combined rectangles, the inter-placement or relationship between them can be defined in different ways: </paragraph>
<paragraph id="P-0057" lvl="3"><number>&lsqb;0057&rsqb;</number> It can be a fixed distance between the sides (different for each side). </paragraph>
<paragraph id="P-0058" lvl="3"><number>&lsqb;0058&rsqb;</number> A function depending on the rectangles size or position relative to the image (or other involved objects) or relative to the Image Viewer. </paragraph>
<paragraph id="P-0059" lvl="3"><number>&lsqb;0059&rsqb;</number> In the case of two combined rectangles the gap between them can optionally be filled with a color or pattern. </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> In the case of two combined rectangles it is optional whether it is the inner or outer rectangle that is active, and being adjusted. The passive rectangle will follow the active rectangle, in the way they are related. </paragraph>
<paragraph id="P-0061" lvl="7"><number>&lsqb;0061&rsqb;</number> The Regions </paragraph>
<paragraph id="P-0062" lvl="2"><number>&lsqb;0062&rsqb;</number> The perimeters of the regions (i.e. the &lsquo;X&rsquo; and &lsquo;L&apos;s) may preferably be drawn in the image, e.g. with an option for the user to make them invisible. </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> The Object Resize can optionally be combined with the conventional Windows resizing way of placing the mouse cursor on the Paper Frame and dragging. The Image Window includes this feature as part of the Object Resize implementation, and uses the conventional arrow cursors in these positions. Actually these two resizing methods combine beautifully in the sense that the dragging operation of the Object Resize is comparable to the conventional mouse dragging, only with a more complex definition of the active region. The Object Resize furthermore adds the centre-click functionality via the defined regions. </paragraph>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for defining the size of an object displayed on a computer screen, the computer screen having a matrix of sensor points, said method comprising the steps of: 
<claim-text>displaying an object on a computer screen, </claim-text>
<claim-text>defining at least one screen area having a reference point associated therewith, </claim-text>
<claim-text>reading an input from a sensor point in a screen area, </claim-text>
<claim-text>calculating a vector between the read input and the reference point of that screen area, and </claim-text>
<claim-text>defining the size of the object based on the vector. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the computer screen is a touch screen and wherein the sensor points correspond to sensor points of the touch screen. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reference point is a corner point of the screen. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reference point is a point defined by the shape of the object. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reference point is visualized on the screen. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the border of the screen area is defined by a raster image. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the border of the screen area is defined by a vector graphic object. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the border of the screen area is defined by a text field. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is a raster image. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is a vector graphic object. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is a text field. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is a frame for framing an image. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the vector determines a direction of resizing and a degree of resizing. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the direction of the vector is determined as the direction from the reference point to the sensor point from which an input has been read. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is resized by moving a predetermined part of the object from a first position to a second position, the vector connecting the first and the second positions. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the object is resized by moving a predetermined part of the object from a first position to a second position, a predetermined fragment of the vector connecting the first and the second positions. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the reading of an input from a sensor point in a screen area is repeated periodically. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the object, upon reading an input from a sensor point, is periodically resized by moving a predetermined part of the object from a first position to a second position, a predetermined fragment of the vector connecting the first and the second positions. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the definition of the size is combined with a drag object operation wherein the length of the vector and accordingly the size of the object is fixed while the object is moved. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A system for presentation of images, the system comprising a screen with a plurality of sensitive points and a processor for processing input from the sensitive points, the processor being adapted to process the input in accordance with the method for defining the size of the object according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A scanner for scanning images and comprising an operator interface with a screen and a processor, the processor being adapted to process input from the screen in accordance with the method for defining the size of the object according to <dependent-claim-reference depends_on="CLM-00011">claim 1.</dependent-claim-reference></claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001869A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001869A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001869A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
