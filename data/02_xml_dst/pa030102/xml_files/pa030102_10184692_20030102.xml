<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005001A1-20030102-D00000.TIF SYSTEM "US20030005001A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00001.TIF SYSTEM "US20030005001A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00002.TIF SYSTEM "US20030005001A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00003.TIF SYSTEM "US20030005001A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00004.TIF SYSTEM "US20030005001A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00005.TIF SYSTEM "US20030005001A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00006.TIF SYSTEM "US20030005001A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00007.TIF SYSTEM "US20030005001A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00008.TIF SYSTEM "US20030005001A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005001A1-20030102-D00009.TIF SYSTEM "US20030005001A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005001</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10184692</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020628</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>2001-195797</doc-number>
</priority-application-number>
<filing-date>20010628</filing-date>
<country-code>JP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>513000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Data processing method, and encoder, decoder and XML parser for encoding and decoding an XML document</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Katsuhisa</given-name>
<family-name>Kataoka</family-name>
</name>
<residence>
<residence-non-us>
<city>Sagamihara-shi</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>International Business Machines Corporation</organization-name>
<address>
<city>Armonk</city>
<state>NY</state>
<country>
<country-code>US</country-code>
</country>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>IBM CORPORATION</name-1>
<name-2></name-2>
<address>
<address-1>3039 CORNWALLIS RD.</address-1>
<address-2>DEPT. T81 / B503, PO BOX 12195</address-2>
<city>REASEARCH TRIANGLE PARK</city>
<state>NC</state>
<postalcode>27709</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A technique for converting a compressed XML document to a format usable by an application is provided. The technique is capable of identifying an XML document even in a state that data thereof are compressed and capable of identifying a compression type thereof. When an XML document is originally compressed, an XML header is added to the compressed document, the XML header describing an encoding declaration which indicates that the compressed XML document is provided with encoding inclusive of compression. Thereafter, in an XML parser, a decoder, which converts the XML document into a coding system used by an application, decompresses the XML document based on description of the encoding declaration in the XML header. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to a technique for encoding and decoding a compressed data file, and more specifically, to a technique capable of identifying the type of compression employed with the data file after compression. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The extensible markup language (XML) is a type of markup languages for describing (marking up) a semantic structure of a document with simple marks. XML allows a user to carry out a user-original extension by defining a grammar and imparting logical senses to constituents of the document. Therefore, XML is expected as a data format for use in data exchange on the Internet. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> XML involves a concept called a document type definition (DTD), and XML can judge as to whether a document is valid or not valid concerning a certain DTD. Specifically, for example, a grammatical rule is defined such that nodes &lt;TITLE&gt;, &lt;AUTHOR&gt; and &lt;PUBLISHER&gt; appear severally once in this order after a node &lt;BOOK&gt;. Then, it is possible to judge as to whether a certain XML document is valid or not, in other words, whether the XML document accords with the grammatical rule or not. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Incidentally, an XML document expresses a data structure universally by using certain marks (hereinafter referred to as &ldquo;tags&rdquo;) as described above. Accordingly, the XML document has a characteristic of a larger file size in comparison with other file formats having exclusive data structures. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In this regard, it is possible to reduce a file size of an XML document by compressing the XML document with a universal data compression technology. Since an XML document is basically a text-based flat data file, a high compression effect can be anticipated. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> are views for describing a conventional procedure for processing an XML document with an XML parser. Here, the XML parser refers to software which converts the XML document into a format usable by an application program, and to a computer which executes the foregoing conversion processing. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> shows a procedure of a case in which the XML original document is input to the XML parser. As shown in the drawing, the XML parser <highlight><bold>910</bold></highlight> includes a decoder <highlight><bold>911</bold></highlight> and a parser <highlight><bold>912</bold></highlight>. When the XML document is inputted, the decoder <highlight><bold>911</bold></highlight> of the XML parser <highlight><bold>910</bold></highlight> first converts the character code used in the inputted XML document into another character code used by an application (such as UTF-8 or UTF-16 in case of a Java application, for example). Thereafter, the parser <highlight><bold>912</bold></highlight> analyzes the XML document, converts the XML document into a data format used by the application such as a document object model (DOM) tree, and then outputs the converted XML document. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Meanwhile, <cross-reference target="DRAWINGS">FIG. 9B</cross-reference> shows a procedure in which the XML document is input to the XML parser after decompressing (expanding) the compressed XML document. In this case, an operation of the XML parser <highlight><bold>910</bold></highlight> is similar to the case in <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. However, the XML document is decompressed by use of a decompressing tool <highlight><bold>920</bold></highlight> in accordance with the type of compression used to compress the XML document (compression type) prior to inputting the XML document to the XML parser <highlight><bold>910</bold></highlight>. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> As described above, an XML document has a characteristic of a larger data size in comparison with other file formats having exclusive data structures. Accordingly, data compression of the XML document is preferred. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In general, when data exchange takes place or when data are stored into a database, a data file is compressed in order to improve transmission efficiency or to downsize the data file to be stored. For this reason, numerous data compression technologies universally applicable to various data formats have been disclosed to date. Accordingly, it is conceivable that any of those conventional data compression technologies may be also applied upon compression of an XML document. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> However, when the above-described conventional universal data compression technology is used, a compression process is executed regardless of the data format of the XML document. Accordingly, it is impossible to identify as to whether or not a compressed data file is an XML document in a compressed state. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Moreover, when the compressed XML document is used by an application, two-step procedures are required as described above, namely, a pre-process of decompressing the XML document in accordance with the compression type thereof and a process to input the XML file to the XML parser. Therefore, processing becomes complicated. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In addition, since the decompressing tool (a program) is located ahead of the XML parser, it is not easy to introduce the conventional compression technology to an existing system which analyzes the XML document by the XML parser and utilize the XML document by a certain application. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Therefore, an object of the present invention is to achieve a conversion method for an XML document capable of identifying an XML document even in a state of data compression, and capable of recognizing a compression type thereof. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Moreover, another object of the present invention is to provide a conversion system for an XML document capable of directly processing the XML document by an XML parser even in a state of data compression, whereby the conversion system can be readily introduced to an existing system. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> To attain the foregoing objects, the present invention is deemed as a data processing method for a data file described in a markup language such as the XML which describes a semantic structure of data with marks and describes information on a character code used for description of the data file into a header of the data file, which includes a step of providing given encoding with respect to a part other than the header of the data file after reading the data file which is an object of processing into a processor device, and a step of describing information concerning such encoding in a position within the header where the information on the character code is to be described, in a format common to the information on the character code. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Here, when the data file being the object of processing is an XML document, the step of describing information concerning such encoding into the header of the data file in the data processing method describes the information concerning such encoding as description of an encoding declaration of an XML header. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Furthermore, the step of providing encoding with respect to the data file herein has a constitution to compress the part other than the header of the data file. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The present invention is also deemed as an encoder for encoding an XML document by computer control, which includes compressing means to compress the XML document which is an object of processing, and XML header adding means to add an XML header describing an encoding declaration for indicating that the compressed XML document is provided with encoding inclusive of compression. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In addition to the foregoing constitution, the encoder may further include original header adding means to add information on a character code used in the XML document, which is the object of processing, to the compressed XML document as original header information. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Such an encoder can be provided as a program to control a computer, and to allow the computer to function as the compressing means, the XML header adding means and the original header adding means as described above. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The present invention is also deemed as a decoder for decoding an encoded XML document by computer control, which includes judging means to judge as to whether or not the XML document, which is an object of processing, is an XML document provided with encoding inclusive of compression while reading header information of the XML document, decompressing means to decompress the XML document by a mode relevant to a type of such compression when the XML document of the object of processing is judged as the XML document provided with encoding inclusive of compression, and character code converting means to convert a character code of the decompressed XML document into a character code required by an application which uses the XML document. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Here, the judging means reads an encoding declaration in an XML header describing the header information, obtains information concerning the type of compression of the XML document and transfers the information to the decompressing means. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Moreover, when information on the character code used in the XML document is described in a part other than the XML header of the XML document being the object of processing, the judging means obtains the information concerning the character code and transfers the information to the character code converting means. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Such a decoder can be provided as a program to control a computer, and to allow the computer to function as the judging means, the decompressing means and the character code converting means as described above. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The present invention is also deemed as an XML parser for analyzing an XML document and converting the XML document into a format required by an application which uses the XML document, which includes a decoder portion to convert the XML document, which is an object of processing, into a coding system used by the application, and a parser portion to analyze the XML document code-converted by the decoder portion and to convert the XML document into a data format used by the application. Here, the decoder portion decodes the XML document by a mode relevant to an encoding type thereof when the XML document, which is the object of processing, is an XML document provided with given encoding. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Here, when the XML document being the object of processing is a compressed XML document, the decoder portion decomposes the XML document by a mode relevant to the type of such compression. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> To be more precise, the decoder portion reads XML header of the XML document being the object of processing, and recognizes the compression type of the XML document based on description of an encoding declaration in the XML header. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The present invention can also apply the above-described encoding technology for an XML document to a data communication system which uses an XML document upon data exchange. Specifically, such a data communication system includes transmitting and receiving data processing devices. The transmitting data processing device includes an encoder which provides an XML document, which is an object of transmitting, with encoding inclusive of compression and adds an XML header describing an encoding declaration for indicating that the XML document is provided with encoding inclusive of compression, and a transmitting portion which transmits the XML document encoded by the encoder. Meanwhile, the receiving data processing device includes a receiving portion which receives the XML document transmitted from the transmitting data processing device, and an XML parser which decompresses the XML document by a mode relevant to a compression type applied to the XML document based on description of the XML header of the XML document received by the receiving portion, then analyzes the decompressed XML document and converts the XML document into a data format used by an application. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Furthermore, the present invention can be realized as a program to control a computer. Specifically, a program according to the present invention allows a computer to execute a process to compress an XML document which is an object of processing, and a process to add an XML header describing an encoding declaration for indicating that the compressed XML document is provided with encoding inclusive of compression. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Moreover, the present invention can be also realized as a program which allows a computer to execute a process to read an XML header of an XML document, which is an object of processing, and to judge as to whether or not the XML document of the object of processing is an XML document provided with encoding inclusive of compression, a process to decompress the XML document by a mode relevant to a compression type applied to the XML document based on description of the XML header of the XML document when the XML document of the object of processing is judged as the XML document provided with encoding inclusive of compression, and a process to convert a character code of the decompressed XML document into a character code required by an application which uses the XML document.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> For a more complete understanding of the present invention and the advantages thereof, reference is now made to the following description taken in conjunction with the accompanying drawings, in which: </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1A and 1B</cross-reference> are views for describing a method of data compression according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a view for describing procedures in the event of processing an XML document converted into a format as shown in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> with an XML parser, by use of the embodiment; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a view for showing a constitution of an encoder used in the embodiment; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart for describing a process to generate an XML document according to the embodiment; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a view for showing a constitution of a decoder reading the XML document according to the embodiment; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart for describing a process to read the XML document according to the embodiment; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A</cross-reference> to <highlight><bold>7</bold></highlight>C are views for describing an example of compression of an XML document according to the embodiment; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a view showing an example to apply the present invention upon exchanging an XML document between a client and a server; and </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> are views for describing conventional procedures of processing an XML document by an XML parser.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Now, the present invention will be described in detail based on the preferred embodiments as shown in the accompanying drawings. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> First, a description will be made regarding an outline of the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Normally, an XML header (an XML declaration) is added to the front of an XML document. For further details, please refer to Appendix F of W3C Recommendation XML 1.0. The XML header is a character string which clearly indicates relevant data that constitute an XML document. The XML header can perform a declaration for the version of the XML, an encoding declaration (a declaration for a character code) and a declaration as to whether or not the XML document is a stand-alone document. An XML parser can identify the character code used in the XML document with reference to the encoding declaration in the XML header. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Upon compression of the XML document, the present invention leaves the XML header intact and compresses other parts (XML instances and DTDs). In this way, it is possible to identify that a compressed data file is an XML document by referring to an XML header, which is a header of the relevant data file. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Moreover, upon compression of an XML file in accordance with the above-described mode of the present invention, the encoding declaration, that is, the declaration for specifying the character code, is used extensibly to declare a compression type (an encoding method) of the XML document. In this way, it is possible to refer to the XML header after data compression, whereby identification of the compression type becomes feasible. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 1A and 1B</cross-reference> are views for describing a data compression method according to the embodiment. <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a view showing a standard uncompressed XML document, and <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is a view showing a state of compression by the embodiment. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, an XML document <highlight><bold>110</bold></highlight> used in the embodiment includes an XML header <highlight><bold>111</bold></highlight> and a data portion <highlight><bold>112</bold></highlight> containing other parts (although other parts beside the XML header <highlight><bold>111</bold></highlight> therein may include DTDs and XML instances, those parts will be collectively referred to as the data portion <highlight><bold>112</bold></highlight> in the embodiment, for the embodiment is characterized in description of the XML header <highlight><bold>111</bold></highlight>). </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In the XML header <highlight><bold>111</bold></highlight>, a declaration for an XML version and an encoding declaration are described, and Shift-JIS is specified as a character code therein. Therefore, the data portion <highlight><bold>112</bold></highlight> are described in text readable with Shift-JIS. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1B, a</cross-reference> compressed XML document <highlight><bold>120</bold></highlight> includes an XML header <highlight><bold>121</bold></highlight> and a data portion <highlight><bold>122</bold></highlight> containing other parts. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In the XML header <highlight><bold>121</bold></highlight>, a declaration for an XML version and an encoding declaration are described. As to the declaration for an encoding type, &ldquo;x-XMLCompress&rdquo; is described to indicate that data in the XML document <highlight><bold>120</bold></highlight> are compressed. Specifically, the present invention extends the encoding declaration, which has been conventionally used for the declaration of the character code of the XML document <highlight><bold>120</bold></highlight>, to a declaration of a compression type, whereby compression, decompression and identification of an XML document are effectuated with a relatively simple modification. Therefore, the data portion <highlight><bold>122</bold></highlight> at this stage are compressed binary data. Although the data portion <highlight><bold>122</bold></highlight> is smaller in size than the data portion <highlight><bold>112</bold></highlight>, the data portion <highlight><bold>122</bold></highlight> is not readable as it is. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> In other words, the present invention performs encoding inclusive of compression with respect to data in the XML document <highlight><bold>120</bold></highlight> in a similar manner to usual character encoding. Therefore, terms such as &ldquo;encoding&rdquo; or &ldquo;conversion&rdquo;, which will be hereinafter stated as appropriate, will include not only the usual character encoding but also compression processing of the data portion <highlight><bold>122</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a view for describing procedures for processing the XML document <highlight><bold>120</bold></highlight>, which is converted into the format as illustrated in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> by use of the embodiment, by an XML parser. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, an XML parser <highlight><bold>200</bold></highlight> includes a decoder <highlight><bold>210</bold></highlight> and a parser <highlight><bold>220</bold></highlight>. In the XML parser <highlight><bold>200</bold></highlight>, when the XML document <highlight><bold>120</bold></highlight> converted into the format illustrated in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is inputted, the decoder <highlight><bold>210</bold></highlight> first converts the inputted XML document <highlight><bold>120</bold></highlight> into a coding system used by an application. Then, the parser <highlight><bold>220</bold></highlight> analyzes the XML document <highlight><bold>120</bold></highlight>, converts the XML document <highlight><bold>120</bold></highlight> into a data format such as a DOM tree used by the application, and then outputs the XML document <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The decoder <highlight><bold>210</bold></highlight> first refers to the XML header <highlight><bold>121</bold></highlight> to identify the compression type of the data portion <highlight><bold>122</bold></highlight>, and then decompresses the data portion <highlight><bold>122</bold></highlight>. Then, usual conversion of the character code takes place with respect to the decompressed data portion <highlight><bold>122</bold></highlight> (which is identical at that point to the data portion <highlight><bold>112</bold></highlight> of the XML document <highlight><bold>110</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1A</cross-reference>). </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Here, the encoding declaration of the XML header <highlight><bold>121</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is stated as: </paragraph>
<paragraph lvl="0"><in-line-formula>encoding&equals;&ldquo;x-XMLCompress&rdquo;&quest;</in-line-formula></paragraph>
<paragraph id="P-0059" lvl="7"><number>&lsqb;0059&rsqb;</number> Whereas it is understood that the XML document <highlight><bold>120</bold></highlight> is compressed by referring to the foregoing, it is impossible to determine the type of character encoding. Specifically, information on character encoding originally possessed by the XML document will be lost by performing encoding inclusive of compression. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> In this context, a possible remedy is to specify the character code for use in advance depending on the application which uses the XML document <highlight><bold>120</bold></highlight>. For example, when the XML document <highlight><bold>120</bold></highlight> is premised on running on a Java application, the character code of the XML document <highlight><bold>120</bold></highlight> may be settled on UTF-8, which is easy to handle. In this way, the decoder <highlight><bold>210</bold></highlight> can perform conversion of the character code appropriately without information on character encoding in the XML header <highlight><bold>121</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Meanwhile, if specified character coding needs to be saved (such as in a case for avoiding influences by code conversion), then a possible remedy in this event is to add original header information for describing the type of character encoding to the data portion <highlight><bold>122</bold></highlight>. In this way, the decoder <highlight><bold>210</bold></highlight> can recognize the compression type of the data portion <highlight><bold>122</bold></highlight> by referring to the XML header <highlight><bold>121</bold></highlight> and the type of character encoding by referring to the header information of the data portion <highlight><bold>122</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> After the data portion <highlight><bold>122</bold></highlight> is decompressed and the character code thereof is appropriately converted by the decoder <highlight><bold>210</bold></highlight> as described above, the parser <highlight><bold>220</bold></highlight> analyzes the XML document <highlight><bold>120</bold></highlight>, converts the XML document <highlight><bold>120</bold></highlight> into a data format such as the DOM tree used by the application, and then outputs the XML document <highlight><bold>120</bold></highlight>. The foregoing process by the parser <highlight><bold>220</bold></highlight> is similar to a process by a conventional XML parser. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Next, description will be made further in detail regarding an encoder for generating the XML document <highlight><bold>120</bold></highlight> in the format as shown in <cross-reference target="DRAWINGS">FIG. 1B and a</cross-reference> decoder for reading the XML document <highlight><bold>120</bold></highlight>, those which realize the embodiment. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a view showing a constitution of an encoder. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an encoder <highlight><bold>300</bold></highlight> includes a data inputting portion <highlight><bold>301</bold></highlight> for inputting an XML document which is an object of encoding, a character extracting and converting portion <highlight><bold>302</bold></highlight> and a character code conversion table <highlight><bold>303</bold></highlight> for adjusting character encoding of the inputted XML document, a compressing portion <highlight><bold>304</bold></highlight> for performing data compression, and a data outputting portion <highlight><bold>305</bold></highlight> for outputting the compressed XML document <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The character extracting and converting portion <highlight><bold>302</bold></highlight> extracts characters out of the inputted XML document, and then performs character conversion of the extracted characters with reference to the character code conversion table <highlight><bold>303</bold></highlight>. For example, assuming that the type of character encoding for the XML document <highlight><bold>120</bold></highlight> is settled on UTF-8 as described above, if the inputted XML document is created by a Java application, then the inputted document uses Unicode. Therefore, the character extracting and converting portion <highlight><bold>302</bold></highlight> performs conversion from Unicode to UTF-8. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The compressing portion <highlight><bold>304</bold></highlight> compresses the XML document after conversion of the character code thereof by the character extracting and converting portion <highlight><bold>302</bold></highlight>, thus generating the data portion <highlight><bold>122</bold></highlight> of the XML document <highlight><bold>120</bold></highlight>. Although various universal compression technologies including ZIP can be used as a compression logic to perform such compression, it is also possible to apply an exclusive compression logic which utilizes structural characteristics of XML documents as described later. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Moreover, the compressing portion <highlight><bold>304</bold></highlight> generates the XML header describing information indicating the compression type as the encoding declaration based on the compression logic used in compression of the data portion <highlight><bold>122</bold></highlight>, and add the XML header <highlight><bold>121</bold></highlight> to the data portion <highlight><bold>122</bold></highlight>. Furthermore, in order to save character encoding used in the XML document prior to compression, the compressing portion <highlight><bold>304</bold></highlight> can generate an original header describing information on such character encoding and add the original header to the data portion <highlight><bold>122</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In the embodiment, these character extracting and converting portion <highlight><bold>302</bold></highlight> and the compressing portion <highlight><bold>304</bold></highlight> perform the above-described two processes. However, since each of these processes is an encoding process with respect to the XML document, these processes are treated as essentially the same as adjusting steps of character encoding by a conventional encoder. In other words, the steps of encoding the XML document themselves are similar to the prior art. However, whereas the prior art only performs conversion of the character code, the embodiment performs conversion including compression. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a flowchart for describing a process of generating the XML document <highlight><bold>120</bold></highlight> including the encoding process by the encoder <highlight><bold>300</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, original data for creating the XML document <highlight><bold>120</bold></highlight> is created to begin with (Step <highlight><bold>401</bold></highlight>), and then a DOM tree which is an XML document structure is created (Step <highlight><bold>402</bold></highlight>). Thereafter, text corresponding to the data portion <highlight><bold>122</bold></highlight> of the XML document <highlight><bold>120</bold></highlight> is generated based on the created DOM tree (Step <highlight><bold>403</bold></highlight>). </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Next, the text generated in Step <highlight><bold>403</bold></highlight> is inputted to the encoder <highlight><bold>300</bold></highlight>, and the character extracting and converting portion <highlight><bold>302</bold></highlight> performs adjustment of character encoding of the text (Step <highlight><bold>404</bold></highlight>). Thereafter, the compressing portion <highlight><bold>304</bold></highlight> compresses the text and the XML header is added thereto, whereby the XML document <highlight><bold>120</bold></highlight> is created (Step <highlight><bold>405</bold></highlight>). </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In the above-described process, operations from Step <highlight><bold>401</bold></highlight> to Step <highlight><bold>403</bold></highlight> refer to the case of creating the XML document <highlight><bold>120</bold></highlight> mechanically by a Java application or the like. When the XML document is created by editor software or the like, the XML document <highlight><bold>110</bold></highlight> in the usual format as shown <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is created in the first place and the XML document <highlight><bold>110</bold></highlight> is inputted to the encoder <highlight><bold>300</bold></highlight>. Accordingly, the encoder <highlight><bold>300</bold></highlight> initiates the process with Step <highlight><bold>404</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Moreover, when the XML document is created by editor software or the like, it is possible to create the XML document from the beginning while using the character code supposed by the decoder. Specifically, if the type of character encoding for the XML document <highlight><bold>120</bold></highlight> is previously settled on UTF-8 as described above, then it is possible to create the XML document <highlight><bold>120</bold></highlight> with the character code of UTF-8 from the beginning. In this case, the adjustment of character encoding in Step <highlight><bold>404</bold></highlight> becomes unnecessary. Therefore, the encoder <highlight><bold>300</bold></highlight> only executes encoding for the compression process in Step <highlight><bold>405</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a view showing a constitution of the decoder <highlight><bold>210</bold></highlight> to read in the XML document <highlight><bold>120</bold></highlight> created in accordance with the foregoing process. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the decoder <highlight><bold>210</bold></highlight> includes a data inputting portion <highlight><bold>211</bold></highlight> for inputting the XML document <highlight><bold>120</bold></highlight>, a decompressing portion <highlight><bold>212</bold></highlight> for decompressing (expanding) the inputted XML document <highlight><bold>120</bold></highlight>, a character extracting and converting portion <highlight><bold>213</bold></highlight> and a character code conversion table <highlight><bold>214</bold></highlight> for adjusting character encoding of the XML document <highlight><bold>120</bold></highlight>, and a data outputting portion <highlight><bold>215</bold></highlight> for outputting text obtained by the foregoing conversion and for transferring the text to the parser <highlight><bold>220</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The decompressing portion <highlight><bold>212</bold></highlight> decomposes and converts the XML document <highlight><bold>120</bold></highlight> into an XML document readable by a certain character code. The decompressing portion <highlight><bold>212</bold></highlight> includes an appropriate decompression logic for decompressing the XML document <highlight><bold>120</bold></highlight>. Here if the compression type of the XML document <highlight><bold>120</bold></highlight> is settled on one type, then the decompressing portion <highlight><bold>212</bold></highlight> should prepare only one decompression logic. However, if several compression types are possibly applied, then the decompressing portion <highlight><bold>212</bold></highlight> needs to prepare multiple types of decompression logic in response thereto. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The character extracting and converting portion <highlight><bold>213</bold></highlight> extracts characters out of the XML document decompressed by the decompressing portion <highlight><bold>212</bold></highlight>, and then performs code conversion of the extracted characters with reference to the character code conversion table <highlight><bold>214</bold></highlight>. Here, if character encoding of the XML document <highlight><bold>120</bold></highlight> is settled on UTF-8 as described above, and if the XML document created by the XML parser <highlight><bold>200</bold></highlight> is used by a Java application, then the character extracting and converting portion <highlight><bold>213</bold></highlight> performs conversion from UTF-8 to Unicode. Moreover, if the header information specifying the type of character encoding is added to the data portion <highlight><bold>122</bold></highlight> of the compressed XML document <highlight><bold>120</bold></highlight>, then the character extracting and converting portion <highlight><bold>213</bold></highlight> can select the required character code conversion table <highlight><bold>214</bold></highlight> based on the header information. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a flowchart for describing a process of reading the XML document <highlight><bold>120</bold></highlight> including a process by the decoder <highlight><bold>210</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the XML document <highlight><bold>120</bold></highlight> is first inputted to the decoder <highlight><bold>210</bold></highlight> of the XML parser <highlight><bold>200</bold></highlight> (Step <highlight><bold>601</bold></highlight>), and then the data inputting portion <highlight><bold>211</bold></highlight> reads contents of the XML header <highlight><bold>121</bold></highlight> (Step <highlight><bold>602</bold></highlight>). In this way, encoding information (that is, information as to whether or not the XML document <highlight><bold>120</bold></highlight> is encoded including compression) of the XML document <highlight><bold>120</bold></highlight> is identified. Moreover, if the header information describing the type of character encoding is present in the data portion <highlight><bold>122</bold></highlight>, the data inputting portion <highlight><bold>211</bold></highlight> also reads such information. In this way, character encoding of the XML document <highlight><bold>120</bold></highlight> is determined. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Next, these pieces of information are transferred to the decoder <highlight><bold>210</bold></highlight> and an appropriate decompression logic is selected by the decompressing portion <highlight><bold>212</bold></highlight> based on the information of the XML header <highlight><bold>121</bold></highlight> obtained in Step <highlight><bold>602</bold></highlight>, whereby the data portion <highlight><bold>122</bold></highlight> of the XML document <highlight><bold>120</bold></highlight> is decompressed (Step <highlight><bold>603</bold></highlight>). Thereafter, the character extracting and converting portion <highlight><bold>213</bold></highlight> performs adjustment of character encoding of the decompressed XML document (Step <highlight><bold>604</bold></highlight>). If the information for specifying the type of character encoding is not contained in the information obtained in Step <highlight><bold>602</bold></highlight>, then the character extracting and converting portion <highlight><bold>213</bold></highlight> selects the appropriate character code conversion table <highlight><bold>214</bold></highlight> and performs conversion based on the character code settled in advance. If the information for specifying the type of character encoding is contained in the information obtained in Step <highlight><bold>602</bold></highlight>, then the character extracting and converting portion <highlight><bold>213</bold></highlight> selects the appropriate character code conversion table <highlight><bold>214</bold></highlight> and performs conversion based on the relevant information. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> After the foregoing steps, the reading process moves to a process by the parser <highlight><bold>220</bold></highlight>, in which a text analysis takes place and the XML document is converted into a data format such as the DOM tree used by an application (Step <highlight><bold>605</bold></highlight>). </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> As described above, in the embodiment, a conventional universal compression method can be used for compression of the data portion <highlight><bold>122</bold></highlight> of the XML document <highlight><bold>120</bold></highlight>. Alternatively, a compression mode based on the structure of the XML can be also used therefor. Since an XML document possesses redundancy in tag description for indicating a semantic structure of a document and the like, a high compression rate is expected if an exclusive compression mode utilizing the structure of the XML is applied. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Next, description will be made regarding an example of such an exclusive compression mode utilizing the structure of the XML. A well-formed XML document possesses the following characteristics: </paragraph>
<paragraph id="P-0084" lvl="1"><number>&lsqb;0084&rsqb;</number> 1) deletion of white spaces between tags (except in a text data section) does not affect data; </paragraph>
<paragraph id="P-0085" lvl="1"><number>&lsqb;0085&rsqb;</number> 2) white spaces as attribute delimiters within tags can be minimized; </paragraph>
<paragraph id="P-0086" lvl="1"><number>&lsqb;0086&rsqb;</number> 3) deletion in a comment portion is also possible in some cases; </paragraph>
<paragraph id="P-0087" lvl="1"><number>&lsqb;0087&rsqb;</number> 4) names which are defined in a DTD are repeatedly used as tag names and attribute names; </paragraph>
<paragraph id="P-0088" lvl="1"><number>&lsqb;0088&rsqb;</number> 5) a character &ldquo;&lt;&rdquo; is used as a special character; and </paragraph>
<paragraph id="P-0089" lvl="1"><number>&lsqb;0089&rsqb;</number> 6) a start tag and an end tag always correspond to each other, therefore a character string of the end tag can be omitted. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Accordingly, a compression mode using the foregoing characteristics is conceivable. Since (1), (2) and (3) seems obvious, description will be made regarding a concrete compression mode concerning (4), (5) and (6). It should be noted that a mode processible by one pass is preferred as the compression mode herein, because XML data are frequently processed as streams. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Upon processing tags and attributes, in the case of a character string that appears for the first time, a relevant entry is added to a table inside an encoder and a unique ID is allocated thereto, then the unique ID is marked up after &ldquo;&lt;&rdquo; (such as &ldquo;&lt;1&rdquo; and &ldquo;&lt;2&rdquo;). According to the rules of the XML, it is guaranteed that &ldquo;&lt;&rdquo; does not appear in that place. In the case that the character string is not the one which appears for the first time, then the character is not outputted by only the ID following &ldquo;&lt;&rdquo; is marked up. A route tag is not subject to such a process, because the route tag appears only once. A simple example of a result of the foregoing process is shown in <cross-reference target="DRAWINGS">FIGS. 7A</cross-reference> to <highlight><bold>7</bold></highlight>C. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> shows source data of an original XML document which is an object of compression. <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> shows an interim code. Although such a state does not constitute effective XML data, the interim code is a part of a pre-process for compression. The interim code retains sufficient data for allowing the decoder <highlight><bold>210</bold></highlight> to restore such data to the one equivalent (as XML data) to the XML document shown in <cross-reference target="DRAWINGS">FIG. 7A</cross-reference>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> If a DTD is completely decided in advance and there is no chance for modification thereof, then it is possible to extract character strings out of the DTD as candidates for tag names and attribute names, and to create a table for each DTD by allocating unique IDs severally to the character strings. When the foregoing method is applicable, since an XML instance which uses the common DTD does not have to possess a character string table individually, it is possible to obtain a higher compression rate. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7C</cross-reference> shows an example of providing more advanced modification with respect to the data in the state shown in <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> in the foregoing case. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Eventually, a higher compression rate can be obtained by compressing the data while using an appropriate compressing tool (for example, java.util.zip.GZIPOutputStream in case of Java) after providing the foregoing process. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows an example of applying the embodiment to a situation to exchange XML documents between a client and a server. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> A client-server system shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a system for ordering merchandise or the like via a network, in which an XML document is used for communication on the network. In other words, a request and a response are created in XML documents upon processes of placement of an order by a client <highlight><bold>810</bold></highlight>, receipt of the order by a server <highlight><bold>820</bold></highlight>, and the like, and the XML documents are transmitted and received between the client <highlight><bold>810</bold></highlight> and the server <highlight><bold>820</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The client <highlight><bold>810</bold></highlight> includes an XML composer <highlight><bold>811</bold></highlight> and an XML parser <highlight><bold>812</bold></highlight>. The server <highlight><bold>820</bold></highlight> includes an XML composer <highlight><bold>821</bold></highlight> and an XML parser <highlight><bold>822</bold></highlight>. Moreover, a request to be sent by the client <highlight><bold>810</bold></highlight> is transmitted from the XML composer <highlight><bold>811</bold></highlight> as an XML document. After received by the server <highlight><bold>820</bold></highlight>, the XML document is analyzed and processed by the XML parser <highlight><bold>822</bold></highlight>. Similarly, a response to be sent by the server <highlight><bold>820</bold></highlight> is transmitted from the XML composer <highlight><bold>821</bold></highlight> as an XML document. After received by the client <highlight><bold>810</bold></highlight>, the XML document is analyzed and processed by the XML parser <highlight><bold>812</bold></highlight>. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In this event, the XML composers <highlight><bold>811</bold></highlight> and <highlight><bold>821</bold></highlight> encode the XML documents as described with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. Meanwhile, the XML parsers <highlight><bold>812</bold></highlight> and <highlight><bold>822</bold></highlight> decode the XML documents as described with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference> and <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> As described above, the embodiment loads a function to compress an XML document as one type of encoding with respect to the XML document. In this way, it is possible to introduce a mode of data compression according to the embodiment only by adding a decoder relevant to such encoding inclusive of compression, while not affecting an existing XML parser. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Since a data size of the XML document encoded (that is, compressed) according to the embodiment is reduced, the XML document is also usable in a database system for reducing a data quantity to be stored in a storage device, in addition to the use in data communication as shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. In this case, when the XML document is stored as data treated by the database, the XML document is provided with encoding inclusive of compression and then stored in the storage device. When the data are read out, an XML parser provided with the decoder according to the embodiment analyzes the data. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> Moreover, description has been made in the embodiment regarding the case of compressing an XML document as encoding. However, it is also possible to load a variety of processing such as enciphering of an XML document similarly as one type of encoding with respect to the XML document. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> In the case of encoding inclusive of enciphering, a data portion (a portion other than an XML header) of an XML document is enciphered similarly to the above-described case of compression, and an encoding declaration indicating that the data portion is enciphered is described in the XML header. Then, the enciphering process can be achieved by providing an XML parser with a decoder having logic to decipher the data portion of the enciphered XML document. Since enciphering is loaded as one type of encoding, such a function can be easily introduced to an existing system which uses an XML parser, as similar to the embodiment described regarding compression. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Furthermore, description has been made in the embodiment regarding the case of providing a compression process as encoding an XML document. However, without limitations to the XML documents, encoding such as compression according to the embodiment can be performed with respect to a document written in a markup language which describes a semantic structure of data with marks and which describes information, such as a character code used for description of a data file thereof, into a header of the data file, so far as the markup language includes a specification to allow some alteration of description of the header. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> As described above, the present invention can identify a document as an XML document and identify a compression type thereof by reading a header, even in a state that data of the document are compressed. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In addition, since the data-compressed document can be directly treated by an XML parser, the present invention can be easily introduced to an existing system which uses XML documents. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Although the preferred embodiment of the present invention has been described in detail, it should be understood that various changes, substitutions and alternations can be made therein without departing from spirit and scope of the inventions as defined by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A data processing method for processing a data file described in a markup language which describes a semantic structure of data with marks and describes information about a character code used for description of the data file into a header of the data file, the data file comprising a data portion and the header, said data processing method comprising the steps of: 
<claim-text>providing encoding with respect to the data portion header of the data file after reading the data file into a processor device; and </claim-text>
<claim-text>writing information concerning the encoding in a position within the header where the information about the character code is to be written, in a format common to the information about the character code. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the data file is an extensible markup language (XML) document and the header is an XML header, and wherein said writing step further comprises writing the information concerning the encoding into an encoding declaration of the XML header. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The data processing method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said method further comprises the step of compressing the data portion of the data file. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. In a computing environment, an encoder for encoding an XML document by computer control, said encoder comprising: 
<claim-text>compressing means to compress an XML document being processed; and </claim-text>
<claim-text>XML header adding means for adding a non-compressed XML header describing an encoding declaration for indicating that the compressed XML document is provided with encoding inclusive of compression to the compressed XML document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The encoder according to <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, further comprising: 
<claim-text>original header adding means for adding information about a character code used in the XML document to the compressed XML document as original header information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. In a computing environment, a decoder for decoding an encoded XML document by computer control, said decoder comprising: 
<claim-text>means for determining whether an XML document being processed contains encoding inclusive of compression based on header information in the XML document; </claim-text>
<claim-text>means for decompressing the XML document by a mode relevant to a type of the compression if it is determined by said determining means that the XML document is provided with encoding inclusive of compression; and </claim-text>
<claim-text>character code converting means for converting a character code of the decompressed XML document into a character code required by an application which uses the XML document. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The decoder according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein said determining means reads an encoding declaration in the header information, obtains information concerning the type of compression of the XML document and transfers the information to said decompressing means. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The decoder according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said determining means obtains information concerning a character code and transfers the information to the character code converting means if the information about said character code used in the XML document is found in information of the XML document other than the header information. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. An XML parser for analyzing an XML document and converting the XML document into a format required by an application which uses the XML document, said XML parser comprising: 
<claim-text>a decoder portion to convert an XML document into a coding system used by the application; and </claim-text>
<claim-text>a parser portion to analyze the code-converted XML document and to convert the code-converted XML document into a data format used by the application, </claim-text>
<claim-text>wherein the decoder portion decodes the XML document by a mode relevant to an encoding type thereof if the XML document is an XML document provided with encoding. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The XML parser according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the decoder portion decompresses the XML document if the XML document is a compressed XML document. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The XML parser according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, wherein the decoder portion reads an XML header of the XML document and recognizes a compression type of the XML document based on description of an encoding declaration in the XML header and decompresses the XML document based on the compression type. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A data communication system including a transmitting data processing device which performs data transmission via a communication network and a receiving data processing device which receives the data transmitted from the transmitting data processing device via the communication network, said transmitting data processing device comprising: 
<claim-text>an encoder which provides an XML document to be transmitted with encoding inclusive of compression and adds an XML header to the XML document describing an encoding declaration for indicating that the XML document is provided with encoding inclusive of compression; and </claim-text>
<claim-text>a transmitting portion which transmits the XML document encoded by the encoder, and </claim-text>
<claim-text>said receiving data processing device comprising: 
<claim-text>a receiving portion which receives the XML document transmitted from the transmitting data processing device; and </claim-text>
<claim-text>an XML parser which decompresses the XML document by a mode relevant to a compression type in the XML document based on compression type information in the XML header of the XML document received by the receiving portion, analyzes the decompressed XML document and converts the XML document into a data format used by an application. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A computer program product, in a computer-readable medium, for encoding an XML document in a data processing system, comprising: 
<claim-text>instructions for compressing an XML document; and </claim-text>
<claim-text>instructions for adding an XML header including information for indicating that the XML document is compressed. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer program product stored in a computer-readable medium, for decoding an encoded XML document in a data processing system, comprising: 
<claim-text>instructions for reading an XML header of an XML document and determining whether the XML document is an XML document includes compressed data based on information in the XML header; </claim-text>
<claim-text>Instructions for determining a compression type from information provided in the XML header if it is determined that the XML document includes compressed data; </claim-text>
<claim-text>instructions for decompressing the compressed data in the XML document by a mode relevant to a compression type; and </claim-text>
<claim-text>instructions for converting a character code of the decompressed XML document into a character code required by an application which uses the XML document.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>9</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005001A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005001A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005001A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005001A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005001A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005001A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005001A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005001A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005001A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005001A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
