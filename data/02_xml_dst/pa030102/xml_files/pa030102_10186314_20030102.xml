<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005402A1-20030102-D00000.TIF SYSTEM "US20030005402A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005402A1-20030102-D00001.TIF SYSTEM "US20030005402A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005402A1-20030102-D00002.TIF SYSTEM "US20030005402A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005402A1-20030102-D00003.TIF SYSTEM "US20030005402A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005402A1-20030102-D00004.TIF SYSTEM "US20030005402A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005402A1-20030102-D00005.TIF SYSTEM "US20030005402A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005402</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10186314</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020628</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>729/DEL/2001</doc-number>
</priority-application-number>
<filing-date>20010629</filing-date>
<country-code>IN</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>716</class>
<subclass>016000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System for simplifying the programmable memory to logic interface in FPGA</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Ankur</given-name>
<family-name>Bal</family-name>
</name>
<residence>
<residence-non-us>
<city>Ghaziabad</city>
<country-code>IN</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>STMicroelectronics Ltd.</organization-name>
<address>
<address-1>Plot No. 2 &amp; 3, Sector 16A, Institutional Area,</address-1>
<address-2>Noida-201 3001,</address-2>
<city>Uttar Pradesh</city>
<country>
<country-code>IN</country-code>
</country>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>ALLEN, DYER, DOPPELT, MILBRATH &amp; GILCHRIST P.A.</name-1>
<name-2></name-2>
<address>
<address-1>1401 CITRUS CENTER 255 SOUTH ORANGE AVENUE</address-1>
<address-2>P.O. BOX 3791</address-2>
<city>ORLANDO</city>
<state>FL</state>
<postalcode>32802-3791</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for simplifying the programmable memory-to-logic interface in field programmable gate arrays (FPGAs) is provided. An interface may be used to isolate the general purpose routing architecture for intra-programmable logic blocks (PLBs) from the random access memory (RAM) address lines, data lines, and control lines. The PLBs and the input-output resources of the FPGA access the embedded memory (or RAM) using dedicated direct interconnects. Certain of these direct interconnects may originate from PLBs in the vicinity of the RAM. The remainder run between the input-output (IO) pads/routing and the RAM blocks. A bus routing architecture is also provided to combine the memories to emulate larger RAM blocks. This bus routing provides interconnection among RAM blocks and is isolated from the PLB routing resources. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to the field of memory devices, and, more particularly, to a system for simplifying the programmable memory-to-logic interface in field programmable gate arrays (FPGAs). </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> An FPGA is a semi-custom device including an array of generic cells or logic blocks each having a programmable function and which are surrounded by a programmable interconnect network. Inclusion of RAM blocks in the FPGA architecture saves valuable logic and routing resources. Memory intensive applications are accommodated within an FPGA with embedded RAM blocks. Also, many wide input/output functions may be handled by the RAM blocks, thus saving logic and interconnect resources. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Such RAM blocks are generally evenly distributed on the FPGA chip. An interconnect system is provided for the RAM to interface with other logic resources on chip. In U.S. Pat. No. 5,933,023 assigned to Xilinx, Inc., routing lines which access the logic blocks also access address, data, and control lines of the RAM blocks. This results in some routing flexibility between the RAM and other logic blocks, but at the same time offers a very complex model for the software tool. A number of constraints such as intra-bus net slack, general routing asymmetry, routing congestion, etc., may thus result. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The present invention provides a system for simplifying the interface between the embedded memory and the programmable logic blocks and input/output resources in an FPGA. The system may include an interface to isolate the general purpose routing architecture, or intra-programmable logic block (PLB) routing, from memory address lines, data lines, and control lines. Further, direct interconnects may be included for connecting the PLBs and input-output (IO) resources of the FPGA to the embedded memory or RAM. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The direct interconnects connect the input pins of the memory to outputs nearby of PLBs, and the output pins of the memory are directly connected to the inputs of PLBs in the vicinity thereof. The direct interconnects to/from the memory are not a part of the general routing resources of the FPGA. As such, they do not hamper the symmetric routing fabric or lines for the logic resources or the PLBs. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The memory may have a plurality of multiplexers and de-multiplexers connected to its input and output pins, respectively. The inputs to the multiplexers may be output from various PLBs, the same PLB, or from IO pads. Further, the outputs from the de-multiplexers are connected to the PLB inputs or IO resources. Further, the PLBs interact with the memory through programmable tappings or switches which provide the interface. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The above system may further include devoted bus-based routing for connecting data and address lines to combine the memory blocks and implement larger memories. This reduces configuration register/flip-flop count with respect to a net-to-net route. The registers internal to the memory blocks may be eliminated by utilizing the registers/flip-flops of the PLBs for latching signals sent to or received from the memory, thereby saving significant chip area. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> The registers internal to the memory may include input registers, output registers, or both. The internal registers/flip-flops of the PLBs may also receive inputs from the general purpose routing. The internal elements of the PLBs may include a look up table (LUT), and an internal flip-flop may also be used for other functionality independent of the memory interface. The registers/flip-flops are selectively bypassed for the case when unregistered memory inputs and outputs are required. The memory may be ROM or RAM, for example. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The connectivity of the PLBs and IO resources with the general purpose routing architecture coexists with the interface to the embedded memory. The output registers internal to the memory blocks may be eliminated by utilizing the registers of the PLBs for latching the output data from the memory, thereby saving significant chip area. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The present invention further provides a method for simplifying the interface between the embedded memory and the programmable logic blocks and input output resources in an FPGA. The method may include isolating the general purpose routing architecture (or intra-PLB routing) from memory address lines, data lines, and control lines. The method may further include connecting the PLBs and IO resources of the FPGA to the embedded memory (or memories) using multiple dedicated direct interconnects. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> More particularly, the method may also include connecting, via direct interconnects, the input pins of the memory to outputs of PLBs in the vicinity of the memory blocks. Further, output pins of the memory are directly connected to the inputs of PLBs in the vicinity thereof. It should be noted that the direct interconnects are not a part of the general routing resources of the FPGA and, thus, do not hamper the symmetric routing for the logic resources or the programmable logic blocks (PLBs). </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The above method may be particularly applicable to a single port memory including a plurality of multiplexers and de-multiplexers connected to the input and output pins thereof, respectively. In such case, the method may include connecting inputs to the multiplexer to outputs from multiple PLBs, a same PLB, or input-output (IO) pads/routing. The method may further include connecting outputs from the de-multiplexer to PLB inputs or IO resources. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The above method thus allows for the restriction of interaction between the PLBs and memory through programmable devices. The above method may further include devoted bus-based routing for connecting data and address lines to combine the memory blocks and, thus, implement larger memories. Again, this reduces configuration register/flip-flop count with respect to a net-to-net route. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The registers internal to the memory blocks present in prior art devices may be eliminated by utilizing the registers/flip-flops of the PLBs for latching signals sent to or received from the memory, thus saving significant chip area. The registers internal to the memory may include input registers, output registers, or both. The internal registers/flip-flops of the PLBs may also receive inputs from the general purpose routing. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> The internal elements of the PLBs including the LUT and the internal flip-flop may also be used for other functionality independently of the memory interface. The method may also include selectively bypassing the registers/flip-flops for the case when unregistered memory outputs are required. The memory may be ROM or RAM, for example. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The connection of the PLBs and IO resources to the general purpose routing architecture coexists with the interface to the embedded memory. The output registers internal to the memory blocks may be eliminated by utilizing the registers of the PLBs for latching the output data from the memory, thus saving significant chip area.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The invention will now be described with reference to the accompanying drawings, in which: </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic block diagram of an FPGA chip including embedded memory RAM according to the prior art. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a schematic diagram illustrating an interconnection scheme of the prior art for a rudimentary single port RAM. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a schematic diagram of a single port memory in accordance with the invention including a plurality of multiplexers and de-multiplexers connected to its input and output pins, respectively. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a schematic block diagram illustrating devoted bus-based routing for connecting data and address lines to combine RAM blocks and thus implement larger memories in accordance with the invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a schematic block diagram of the internal circuitry of a memory illustrating the elimination of the internal registers thereof in accordance with the present invention to provide area savings.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> An FPGA chip with embedded memory (RAM) <highlight><bold>3</bold></highlight> in accordance with the prior art is illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The FPGA chip includes a generic programmable logic block (PLB) <highlight><bold>1</bold></highlight>, general routing fabric <highlight><bold>1</bold></highlight><highlight><italic>a, </italic></highlight>input-output (IO) routing resources <highlight><bold>2</bold></highlight><highlight><italic>a, </italic></highlight>and IO pads <highlight><bold>2</bold></highlight>. The interconnect scheme of the prior art for a rudimentary single port RAM is shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Configurable switches <highlight><bold>1</bold></highlight><highlight><italic>b </italic></highlight>interface the memory <highlight><bold>3</bold></highlight> to the routing interconnects <highlight><bold>1</bold></highlight><highlight><italic>a </italic></highlight>in the routing channel. These routing lines can also be accessed by logic blocks or IO pads through the routing channel. Thus, a certain amount of flexibility is provided by such prior art architecture. Yet, many constraints are consequently introduced, and the software for routing such architectures becomes very complex as the memory (RAM) blocks in the FPGA chip are augmented. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The embodiment shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates several advantages provided by the present invention. Here, a simple, single port memory is shown with a plurality of multiplexers <highlight><bold>3</bold></highlight><highlight><italic>i </italic></highlight>and de-multiplexers <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>at its input and output pins, respectively. The RAM <highlight><bold>3</bold></highlight> has eight address inputs and eight data outputs. The inputs to the multiplexers <highlight><bold>3</bold></highlight><highlight><italic>i </italic></highlight>are outputs from various PLBs (or even the same PLB), or from IO pads/routing. Similarly, outputs from the de-multiplexers <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>are fed to PLB inputs or IO resources. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The multiplexers <highlight><bold>3</bold></highlight><highlight><italic>i </italic></highlight>and de-multiplexers <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>will typically be configured during initial configuration of the device. In most cases, all of the multiplexers <highlight><bold>3</bold></highlight><highlight><italic>i </italic></highlight>and de-multiplexers <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>can share their respective configuration bits, thus reducing the configuration latch count. The direct interconnects to/from IO routing at the device periphery may be provided to facilitate signals from numerous IO pads, rather than a single pad. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Therefore, by using programmable, direct interconnects for the memory interface, many advantages result. Several of these advantages are discussed below. It should be noted that in accordance with the present invention PLBs which interact with the RAM do so only through programmable switches providing connections to/from their inputs or outputs. Their connectivity to the general-purpose routing fabric is not altered in any way. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The basic idea of extending direct interconnects from PLBs or IOs is to spare the general purpose routing lines the burden of RAM interconnects. The memory block will network signals to/from either a sub-circuit or an IO resource. The invention thus may be used to reduce routing lines required to convey signals between sub-circuits/IOs and the memory. The same arguments hold true for control signals to/from the memory. Although some limitations are inherent in terms of flexibility when direct interconnects are used for memory interface, the architecture becomes more &ldquo;software friendly,&rdquo; as will be appreciated by those of skill in the art. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Another aspect of the invention is to provide dedicated bus-based routing for interconnecting data and address lines to combine the RAM blocks and implement larger memories (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>). This dedicated routing extends between memory address ports or data ports that might be combined for large memory emulation. As the routing is bus-based, configuration latch count is reduced because a bus is routed as a whole against a net-to-net route. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the multiplexer <highlight><bold>3</bold></highlight><highlight><italic>i </italic></highlight>sourcing a memory input is shown connected to the PLB output via a direct interconnect (DI) <highlight><bold>7</bold></highlight><highlight><italic>o. </italic></highlight>The memory block can be used in both synchronous and asynchronous mode. The asynchronous mode is used when the memory block is used to implement combinatorial logic. In this mode, the memory block receives unregistered output <highlight><bold>4</bold></highlight><highlight><italic>o </italic></highlight>of the LUT via multiplexer <highlight><bold>7</bold></highlight>. The memory output is directed through the multiplexer <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>to the PLB input <highlight><bold>4</bold></highlight><highlight><italic>i, </italic></highlight>which is an LUT input. The control line of the multiplexers is suitably configured by the configuration latches <highlight><bold>5</bold></highlight><highlight><italic>x </italic></highlight>and <highlight><bold>7</bold></highlight><highlight><italic>x. </italic></highlight></paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> In the synchronous mode, the memory block is used as a RAM. In this mode, the registered output <highlight><bold>6</bold></highlight><highlight><italic>o </italic></highlight>of the LUT is connected to the memory input via the multiplexers <highlight><bold>7</bold></highlight> and <highlight><bold>3</bold></highlight><highlight><italic>i. </italic></highlight>The control line of the multiplexer is suitably configured by the configuration latch <highlight><bold>7</bold></highlight><highlight><italic>x </italic></highlight>to include the flip-flop output. Another possibility is to connect the flip-flop input to the line <highlight><bold>5</bold></highlight><highlight><italic>i </italic></highlight>via the multiplexer <highlight><bold>5</bold></highlight>. This enables the memory input signal to bypass the LUT output and approach the flip-flop from general purpose routing. The flip-flop associated with each LUT reduces the need for internal memory registers present at the input of a conventional memory block. The clock of the flip-flop initiates the read/write operation of the memory. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Similarly, the output registers of the memory become redundant as the multiplexer <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>may drive a PLB input <highlight><bold>5</bold></highlight><highlight><italic>i. </italic></highlight>The output of the multiplexer <highlight><bold>3</bold></highlight><highlight><italic>o </italic></highlight>is directed to the flip-flop <highlight><bold>6</bold></highlight> via the multiplexer <highlight><bold>5</bold></highlight>. Thus, memory registers may be saved using the memory blocks. It should also be noted that if the flip-flop is used as a memory input/output register, the LUT may be used to perform independently. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Various advantages provided in accordance with the invention will be apparent to those skilled in the art in light of the foregoing description. In particular, architecture is simplified, as switch pattern interfaces between general routing and the memories may be eliminated. Further, input/output registers internal to a memory may be eliminated, and symmetric properties of the general purpose routing may be preserved. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Moreover, memory routing may be independent of PLB routing architecture and is bus-based. This results in a symmetrical PLB routing architecture. Configuration latch count in intra-memory routing is also reduced with the additional advantage of improved flexibility with respect to tying up memories. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Further advantages include the fact that there is no &ldquo;slack&rdquo; among nets forming the address/data bus. Negligible slack that might be introduced while combining memories can be easily controlled. Also, the present invention facilitates even distribution of memory resources in the FPGA without increasing complexity, and it reduces the formidable task of routing memories to PLBs for the place and route tool. Thus, it simplifies the requisite algorithms and the time and complexity associated with the routing tool. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">That which is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for simplifying the interface between the embedded memory and the programmable logic blocks and input output resources in an FPGA, comprising: 
<claim-text>an interface to isolate the general purpose routing architecture or intra-PLB (programmable logic blocks) routing from memory address, data and control lines; and </claim-text>
<claim-text>means for connecting said programmable logic blocks (PLBs) and input-output (IO) resources of the FPGA to the embedded memory or RAM using multiple dedicated direct interconnects. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the direct interconnects connecting to the input pins of the memory are tapped from Programmable Logic Blocks (PLBs) output in vicinity of the memory blocks and the output pins of memory are directly connected to the input of programmable Logic Blocks (PLBs) in the neighborhood of the memory block. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the direct interconnects are not a part of general routing resources of the FPGA and thus do not hamper the symmetric routing fabric for the logic resources or the programmable logic blocks (PLBs). </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference> wherein said memory has a plurality of multiplexers and de-multiplexers at its input and output pins respectively. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference> wherein, the input to the multiplexer are output from various programmable logic blocks(PLBs) or even the same programmable Logic Blocks (PLBs) or from input-output (IO) pads/routing; and 
<claim-text>the output from the de-multiplexer are connected to programmable logic blocks (PLBs) inputs or input-output (IO) resources. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein Programmable Logic Blocks (PLBs) interact with said memory only through programmable tappings to/from their inputs and outputs. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising devoted bus based routing for clubbing data and address lines, in order to combine the memory blocks to implement larger memories to reduce configuration register or flip flop count against a net-to-net route. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the registers internal to said memory blocks are eliminated by utilizing the registers or flip flops of said PLBs for latching signals sent to or received from said memory, thereby saving significant chip area. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said registers internal to said memory include input registers or output registers or both. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference> wherein said internal registers or flip-flops of said PLBs can also receive inputs from the general purpose routing. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the internal elements of said PLBs including the LUT and the internal Flip Flop can also be used for other functionality independent of the memory interface. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said registers or flip-flops are selectively bypassed for the case when unregistered memory inputs and outputs are required. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said memory is ROM or RAM. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the connectivity of said PLBs and IO resources with the General Purpose routing architecture coexists with said interface with said embedded memory. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the output registers internal to said memory blocks are eliminated by utilizing the registers of said PLBs for latching the output data from said memory, thereby saving significant chip area. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method for simplifying the interface between the embedded memory and the programmable logic blocks and input output resources in an FPGA, comprising: 
<claim-text>isolating the general purpose routing architecture or intra-PLB (programmable logic blocks) routing from memory address, data and control lines; and </claim-text>
<claim-text>connecting said programmable logic blocks (PLBs) and input-output (IO) resources of the FPGA to the embedded memory or memory using multiple dedicated direct interconnects. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> including: 
<claim-text>tapping of direct interconnects to the input pins of the memory from Programmable Logic Blocks (PLBs) output in vicinity of the memory blocks, and </claim-text>
<claim-text>connecting output pins of memory directly to the input of programmable Logic Blocks (PLBs) in the neighborhood of the memory block. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the direct interconnects are not a part of general routing resources of the FPGA and thus do not hamper the symmetric routing fabric for the logic resources or the programmable logic blocks (PLBs). </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> incorporating a simple single port memory with a plurality of multiplexer and de-multiplexer at the input and output pins respectively. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> including: 
<claim-text>connecting inputs to said multiplexer to outputs from various programmable logic blocks(PLBs) or even the same programmable Logic Blocks (PLBs) or from input-output (IO) pads/routing; and </claim-text>
<claim-text>connecting outputs from the de-multiplexer to programmable logic blocks (PLBs) inputs or input-output (IO) resources. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> including restricting the interaction of Programmable Logic Blocks (PLBs) with memory only through programmable tapings to/from their inputs and outputs. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> further incorporating devoted bus based routing for clubbing data and address lines, in order to combine the memory blocks to implement larger memories to reduce configuration register or flip flops count against a net-to-net route. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the registers internal to said memory blocks are eliminated by utilizing the registers or flip flops of said PLBs for latching signals sent to or received from said memory, thereby saving significant chip area. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein said registers internal to said memory include input registers or output registers or both. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein said internal registers or flip-flops of said PLBs can also receive inputs from the general purpose routing. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the internal elements of said PLBs including the LUT and the internal flip flop can also be used for other functionality independent of the memory interface. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00022">claim 20</dependent-claim-reference> including selective bypassing of said registers or flip flops for the case when unregistered memory outputs are required. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein said memory is ROM or RAM. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the connectivity of said PLBs and IO resources with the general purpose routing architecture coexists with said interface with said embedded memory. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A method as claimed in <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the output registers internal to said memory blocks are eliminated by utilizing the registers of said PLBs for latching the output data from said memory, thereby saving significant chip area.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005402A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005402A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005402A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005402A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005402A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005402A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
