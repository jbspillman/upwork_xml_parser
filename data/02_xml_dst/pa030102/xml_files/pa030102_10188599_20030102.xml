<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005235A1-20030102-D00000.TIF SYSTEM "US20030005235A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00001.TIF SYSTEM "US20030005235A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00002.TIF SYSTEM "US20030005235A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00003.TIF SYSTEM "US20030005235A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00004.TIF SYSTEM "US20030005235A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00005.TIF SYSTEM "US20030005235A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00006.TIF SYSTEM "US20030005235A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00007.TIF SYSTEM "US20030005235A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00008.TIF SYSTEM "US20030005235A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00009.TIF SYSTEM "US20030005235A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00010.TIF SYSTEM "US20030005235A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00011.TIF SYSTEM "US20030005235A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00012.TIF SYSTEM "US20030005235A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00013.TIF SYSTEM "US20030005235A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00014.TIF SYSTEM "US20030005235A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00015.TIF SYSTEM "US20030005235A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00016.TIF SYSTEM "US20030005235A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00017.TIF SYSTEM "US20030005235A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00018.TIF SYSTEM "US20030005235A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00019.TIF SYSTEM "US20030005235A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030005235A1-20030102-D00020.TIF SYSTEM "US20030005235A1-20030102-D00020.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005235</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10188599</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020702</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>0116165.2</doc-number>
</priority-application-number>
<filing-date>20010702</filing-date>
<country-code>GB</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>141000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>144000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Computer storage systems</title-of-invention>
</technical-information>
<inventors>
<first-named-inventor>
<name>
<given-name>Marcus</given-name>
<middle-name>C.</middle-name>
<family-name>Young</family-name>
</name>
<residence>
<residence-non-us>
<city>Headley</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Sun Microsystems, Inc.</organization-name>
<address>
<city>Palo Alto</city>
<state>CA</state>
<postalcode>94303</postalcode>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>LAHIVE &amp; COCKFIELD</name-1>
<name-2></name-2>
<address>
<address-1>28 STATE STREET</address-1>
<city>BOSTON</city>
<state>MA</state>
<postalcode>02109</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for providing a copy of data at a point in time, has: a data storage device including a master store arranged to store blocks of data, at least one subsidiary store to store point in time copy data having blocks of data copied from said master store at a particular point in time, and a bitmap store associated with each the subsidiary store to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store. Where more than one subsidiary stores and associated bitmap stores are provided, a controller may make different point in time copies in different subsidiary stores. A number of master stores may also be provided, each associated with a corresponding subsidiary store and a bitmap store. In this case, the controller may ensure that point in time copies of all the master stores are made at the same point in time. Data from a master store may be stored in a subsidiary store only when it is to be replaced in the master store. In this case, the subsidiary store may be smaller in capacity than the master store and an overflow store may be provided for use when the subsidiary store is full. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This invention relates to systems for and methods of enabling creation of point in time copies of data stored in a computer storage system. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND TO THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Computer storage systems are usually provided on discs of some sort for example magnetic or optical discs. Permanent storage is normally provided on hard discs. These can range from the hard disc provided within a personal computer to multiple disc systems used on large networks of the type which might be used by for example banks. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In the case of hard disc systems, such as RAID (Redundant Arrays of Inexpensive Drives) devices, memory is divided into what are known as disc volumes. A disc volume may comprise a single disc, a subset of a single disc, or a number of discs, depending on the application in question. Each disc volume is treated by the computer system as a number of blocks of storage which are usually equally sized tracks (e.g. 32K bytes) wherein each track is a discrete addressable portion of the disc volume. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> It is standard practice to make backups of data from disc volumes at regular intervals. These enable data to be recovered in the event of a system failure. Also, they allow some off-line analysis to be performed on data. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> One of the drawbacks of backup copies is that they take a very long period of time to compile, this being dependent on the size of the disc volumes being backed up. Also during the time within which the backup is being compiled, some of the data may change. The backup will therefore be made with no knowledge of this. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> It has been appreciated that in addition to the normal backup copy it would be useful to have a copy of a disc volume which is a true copy at a discrete point in time. This is known as a point in time copy. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> At present, it is only possible to take a single point in time copy. The taking of a further point in time copy erases the earlier point in time copy. In some applications, multiple point in time copies would be useful so that data can be taken off-line and subsequently analysed, e.g. to look for trends in particular pieces of data. At present, it is necessary to download a copy point in time copy before a new one can be made and the download time may be longer than the interval required between point in time copies. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> According to a first aspect of the present invention there is provided a computer memory storage system with a point in time copy function which enables multiple point in time copies to be taken of data stored by a master store, to be maintained independently of the master store, and to each be maintained independently of the other point in time copies. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In accordance with a second aspect of the present invention there is provided a point in time copying system wherein data is only copied from a master store to a point in time copy store when that data is about to be overwritten, overwrite data is stored indicating which data in the master store has been overwritten and a controller is operable, using the overwrite data, to create a point in time copy using any unchanged data in the master store and the data copied to the point in time copy store, wherein the point in time copy store has a smaller storage capacity than the master store and an overflow store is provided for storing data copied from the master store when the point in time copy store is full. This enables a small point in time copy store to be used because generally only some of the data in the master store will be copied to the point in time copy store while providing an overflow store, if required. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In an embodiment, an overflow store can be included which is shared between several point in time copy or shadow stores. When this is used in combination with the shadow stores the total required storage volume or capacity is less than the sum of the shadow store which would have been required in the absence of the overflow store. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Further advantages arise in being able to export point in time copies to separate locations for further analysis or processing and subsequently to import a modified point in time copy back to the original point in time copy system. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In accordance with a third aspect of the invention there is provided a point in time copy system in which a point in time copy may be exported to separate locations and subsequently reimported in modified form. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Still further in some applications, a plurality of master storage volumes are required for a single disc volume. This is likely to be the case for example in large database applications. In such cases, it is desirable to be able to take a point in time copy of all the volumes at once. The volumes may additionally be spread across a number of physical discs. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In accordance with a fourth aspect of the present invention there is provided a computer memory system with a point in time copy function in which a plurality of volumes are grouped together as a single logical device and a point in time copy produced for the logical device.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Embodiments of the present invention will now be described, by way of example, with reference to the accompanying drawings, in which like reference numerals refer to like elements and in which: </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a functional block diagram of a point in time copy system comprising a host computer and a mass storage device; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a functional block diagram of computing apparatus that may be programmed by program instructions to provide the host computer shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a flow chart for illustrating operation of the system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in a dependent mode; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>show diagrams for illustrating stages in the obtaining of a point of time copy in the dependent mode; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f </italic></highlight>show tables for illustrating examples of creation of point in time copies in the dependent mode; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>shows a flow chart for illustrating recovery of a master copy from a point in time copy in the dependent mode; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>b </italic></highlight>to <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>show diagrams for illustrating stages in the recovery of a master copy from a point in time copy in the dependent mode; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>shows a flow chart for illustrating operation of the point in time system to create an initial point in time copy in an independent mode; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>shows a flow chart for illustrating operation of the point in time system to create a subsequent point in time copy in the independent mode; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c </italic></highlight>shows a flow chart for illustrating recovery of a master copy from a point in time copy in the independent mode; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>f </italic></highlight>show diagrams for illustrating stages in production of a point in time copy in the independent mode; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 8</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>show tables for illustrating creation of a point in time copy in the independent mode and for illustrating the effect of a change to data stored in a master store of a mass storage device; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a functional block diagram illustrating a first example of a point in time copy system embodying the present invention with the functional components of the host computer, apart from a point in time copy controller, omitted in the interests of clarity and simplicity; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows a flow chart for illustrating steps carried out by the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a functional block diagram, similar to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, of another example of a point in time copy system embodying the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows a functional block diagram, similar to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, of another example of a point in time copy system embodying the present invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a table for assisting in explaining creation of a point in time copy by the point in copy system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> when an overflow store shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is not present; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows a table for illustrating creation of a point in time copy by the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> when the overflow store is present; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>shows another example of a point in time copy system embodying the present invention; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>shows a table for explaining creation of a point in time copy by the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a; </italic></highlight></paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows a simplified functional block diagram for illustrating one way in which a further host computer may access a point in time copy system; and </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows a simplified block diagram for illustrating a point in time copy system that enables two host computers to share a shadow store.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> point in time copy system <highlight><bold>1</bold></highlight> comprises a host computer <highlight><bold>2</bold></highlight> and a mass storage device <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The host computer <highlight><bold>2</bold></highlight> comprises a controller <highlight><bold>20</bold></highlight> for controlling overall operation of the host computer, a user interface <highlight><bold>21</bold></highlight> for enabling communication with a user and input of instructions by a user, a data processor <highlight><bold>23</bold></highlight> for processing data, a working memory <highlight><bold>24</bold></highlight> for storing data to be processed by the data processor <highlight><bold>23</bold></highlight> and/or the controller <highlight><bold>20</bold></highlight> and, in the example shown, a network interface <highlight><bold>83</bold></highlight> for enabling the host computer <highlight><bold>2</bold></highlight> to communicate with other computing apparatus over a network such as a local area or wide area network, the Internet or an Intranet. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In addition, the host computer includes a point in time copy controller <highlight><bold>4</bold></highlight> for controlling creation of a point in time copy. The point in time copy controller <highlight><bold>4</bold></highlight> provides a communication layer between the host computer and the mass storage device <highlight><bold>22</bold></highlight>. In this example, a point in time copy processor <highlight><bold>25</bold></highlight> is also provided for enabling subsequent processing to be carried out on a point in time copy. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The mass storage device <highlight><bold>22</bold></highlight> is divided into a number of different memory areas or stores which may or may not be provided on physically separate mass storage devices. For example, the mass storage device <highlight><bold>22</bold></highlight> may comprise one or more mass storage units such as an array of hard disc drives, for example RAID devices. In the example shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the different memory areas comprise a master store <highlight><bold>6</bold></highlight> that provides a mass storage area for storing data blocks representing a master copy of a file, and a shadow or subsidiary store <highlight><bold>8</bold></highlight> and a bitmap store <highlight><bold>10</bold></highlight> for storing point in time copy data. Where the mass storage device <highlight><bold>22</bold></highlight> comprises a hard disc system or array, then the master store <highlight><bold>6</bold></highlight>, shadow store <highlight><bold>8</bold></highlight> and bitmap store <highlight><bold>10</bold></highlight> will be separate disc volumes and generally the data blocks will be separate hard disc drive tracks. Usually, the blocks of data will be of uniform size. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a functional block diagram of computing apparatus <highlight><bold>100</bold></highlight> coupled to the mass storage device <highlight><bold>22</bold></highlight> and programmable by program instructions to provide the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the computing apparatus comprises a processor unit <highlight><bold>36</bold></highlight> with associated memory <highlight><bold>37</bold></highlight>, generally random access memory (RAM) and possibly also some read-only memory (ROM). The computing apparatus also includes a removable media drive <highlight><bold>42</bold></highlight> for receiving a removable medium <highlight><bold>43</bold></highlight> and user interface devices <highlight><bold>38</bold></highlight> in the form, as shown, of a display <highlight><bold>39</bold></highlight> such as CRT or LCD display and user input devices <highlight><bold>44</bold></highlight> which will usually comprise a keyboard <highlight><bold>41</bold></highlight> and a pointing device such as a mouse or touch pad <highlight><bold>42</bold></highlight>. A hard disc drive <highlight><bold>44</bold></highlight> is provided on which program instructions and data may be stored. The computing apparatus <highlight><bold>100</bold></highlight> also includes a communications interface device <highlight><bold>41</bold></highlight> such as a MODEM and/or network card arranged to enable communication over a network with other computing apparatus. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The computing apparatus <highlight><bold>100</bold></highlight> may be, for example, a file server on a network that is arranged to store in the master store <highlight><bold>6</bold></highlight> files that can be accessed by other computing apparatus over the network, that is the host computer <highlight><bold>2</bold></highlight> will be arranged to organize storage requirements in the mass storage device <highlight><bold>22</bold></highlight> for users of the network. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The computing apparatus shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be arranged to operate in accordance with the Sun Microsystems Solaris (Trade Mark) operating environment and may be programmed to provide the point in tine copy system by program instructions provided in any one or more of the following ways: </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> 1. pre-stored on the hard disc drive <highlight><bold>44</bold></highlight> or in a non-volatile portion of tho memory <highlight><bold>37</bold></highlight>; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> 2. downloaded from a removable medium <highlight><bold>43</bold></highlight>; and </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> 3. supplied as or carried by a signal S via the communications interface device <highlight><bold>41</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> This point in time copy system is based on the Sun Microsystems Sun StorEdge (Trade Mark) Instant Image system that is configured to operate in either an independent or a dependent mode. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In the independent mode, when a point in time copy is created, the shadow store <highlight><bold>8</bold></highlight> contains a copy of each block of data that was present in the master store <highlight><bold>6</bold></highlight> at the time the point in time copy was made. In contrast, in the dependent mode the shadow store <highlight><bold>8</bold></highlight> contains copies of only those blocks of data that were about to be changed while or after the point in tine copy was made and the full point in time copy is assembled from the copies of the blocks of data stored in the shadow store and the unchanged blocks of data present in the master store. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In each case, the point in time copy system makes use of a shadow bitmap stored in the bitmap store <highlight><bold>10</bold></highlight> which comprises a single bit for each block of data stored on the master store. The bitmap store <highlight><bold>10</bold></highlight> also stores a copy bitmap which, like the shadow bitmap, includes a single bit for each block of data stored by the master store <highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Operation of the point in time copy system in the dependent mode will now be described with the assistance of <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>f. </italic></highlight></paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a flow chart illustrating operations carried out by the point in time copy system in the dependent mode. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>show diagrams illustrating in a simplified manner changes in state in the master store <highlight><bold>6</bold></highlight>, shadow store <highlight><bold>8</bold></highlight> and shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>during the creation and maintenance of a point in time copy in the dependent mode. For simplicity in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d</italic></highlight>, the master store <highlight><bold>6</bold></highlight> and shadow store <highlight><bold>8</bold></highlight> are represented as having only three data blocks (with the three data blocks in the master store <highlight><bold>6</bold></highlight> being shown as A, B and C) and the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>having three corresponding bits. The diagonal lines in the shadow store <highlight><bold>8</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>represent the fact that the data block is empty. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f </italic></highlight>illustrate the changes in the mass storage device <highlight><bold>22</bold></highlight> during the creation and maintenance of a point in time copy in the dependent mode for a specific simplified example by use of a table having five columns <highlight><bold>50</bold></highlight>, <highlight><bold>51</bold></highlight>, <highlight><bold>52</bold></highlight>, <highlight><bold>53</bold></highlight> and <highlight><bold>54</bold></highlight> headed master, virtual shadow, shadow, shadow bitmap and copy bitmap, respectively. The column <highlight><bold>50</bold></highlight> headed master has rows representing the different data blocks of the master store <highlight><bold>6</bold></highlight> so that, as shown, the data &ldquo;AAA&rdquo; is stored in one data block, the data &ldquo;BBB&rdquo; in stored in the next data block and so on. The rows of the column <highlight><bold>51</bold></highlight> headed &ldquo;virtual shadow&rdquo; represent the corresponding data blocks forming the point in time copy. Because this is the dependent mode, the &ldquo;virtual shadow&rdquo; does not exist as a separate entity but will be assembled from unchanged data blocks stored in the master store <highlight><bold>6</bold></highlight> and data blocks stored in the shadow store <highlight><bold>8</bold></highlight>. The rows in the column <highlight><bold>52</bold></highlight> headed &ldquo;physical shadow&rdquo; represent the data blocks stored in the shadow store <highlight><bold>6</bold></highlight> while the rows in the column <highlight><bold>53</bold></highlight> headed &ldquo;shadow bitmap&rdquo; represent the corresponding bits in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>stored in the bitmap store <highlight><bold>10</bold></highlight> and the rows in the column <highlight><bold>54</bold></highlight> headed &ldquo;copy bitmap&rdquo; represent the corresponding bits in a copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>in the bitmap store <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Creation of a point in time copy in the dependent mode will now be described. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> When a user elects, using the user interface <highlight><bold>21</bold></highlight> or network interface <highlight><bold>83</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, to create a point in time copy of the data stored in the master store <highlight><bold>6</bold></highlight> at a particular time using the dependent mode then, at S<highlight><bold>15</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> initialises the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>by setting all of the bits in the shadow bitmap to 0 (zero) as shown in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>e</italic></highlight>. Setting the bits in the bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>to zero indicates that the data stored in the master store <highlight><bold>6</bold></highlight> has not been changed since the user requested a point in time copy and that therefore the data in the master store <highlight><bold>6</bold></highlight> represents the point in time copy. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The data processor <highlight><bold>23</bold></highlight> from time to time writes to the master store <highlight><bold>6</bold></highlight> to update a file in accordance with further processing carried out by the data processor <highlight><bold>23</bold></highlight> or changes communicated to the host computer from another computing apparatus over the network interface <highlight><bold>83</bold></highlight>. This may result in one or more data blocks in the master store <highlight><bold>6</bold></highlight> being overwritten. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> When overwritten, these data blocks in the master store <highlight><bold>6</bold></highlight> of course no longer represent the point in time copy required by the user. Accordingly, before the data processor <highlight><bold>23</bold></highlight> is permitted to overwrite a data block in the master store <highlight><bold>6</bold></highlight>, the controller <highlight><bold>20</bold></highlight> advises the point in time copy controller <highlight><bold>4</bold></highlight> that that data block is about to be overwritten. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> When, at S<highlight><bold>16</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> determines that a data block is to be overwritten, then, at S<highlight><bold>17</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> copies the current or old data block to the corresponding data block address in the shadow store <highlight><bold>8</bold></highlight> (as shown for data block B in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>b</italic></highlight>) and, at S<highlight><bold>18</bold></highlight>, sets the shadow bit corresponding to that data block in the shadow bitmap to 1 (one) as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>c</italic></highlight>. When, at S<highlight><bold>19</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the controller <highlight><bold>20</bold></highlight> is advised by the point in time copy controller <highlight><bold>4</bold></highlight> that the data block to be overwritten has been copied to the corresponding data block address in the shadow store <highlight><bold>8</bold></highlight>, the controller <highlight><bold>20</bold></highlight> communicates to the data processor <highlight><bold>23</bold></highlight> permission to overwrite that data block in the master store <highlight><bold>6</bold></highlight> with the new data block D as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>d. </italic></highlight></paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> A zero bit in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>thus indicates that the corresponding block of data for the point in time copy is to be found in the master store <highlight><bold>6</bold></highlight> while a 1 bit in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>indicates that the corresponding data for the point in time copy is to be found in the shadow store. The copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>is not used in creation of the point in time copy in dependent mode. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> In the example illustrated by <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f</italic></highlight>, the second and sixth data blocks (the second and sixth rows in column <highlight><bold>50</bold></highlight>) have been overwritten and accordingly, prior to this overwriting, the point in time copy controller <highlight><bold>4</bold></highlight> has copied the data &ldquo;BBB&rdquo; and &ldquo;FFF&rdquo; from the second and sixth blocks of the master store <highlight><bold>6</bold></highlight> to the corresponding addresses in the shadow store <highlight><bold>8</bold></highlight> as shown and has set the corresponding bits in the shadow bitmap to 1 as can be seen by comparing the entries for rows two and six in columns <highlight><bold>50</bold></highlight>, <highlight><bold>52</bold></highlight> and <highlight><bold>53</bold></highlight> in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f. </italic></highlight></paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> When a user (either a user at the user interface <highlight><bold>21</bold></highlight> or a user communicating with the host computer over the network interface <highlight><bold>83</bold></highlight>) requests access to the point in time copy, then the point in time copy controller <highlight><bold>4</bold></highlight> assembles the point in time copy or &ldquo;virtual shadow&rdquo; as shown in column <highlight><bold>51</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>f </italic></highlight>by copying blocks of data from the master store where the corresponding bit in the shadow bitmap is set to 0 and copying blocks of data from the shadow store where the corresponding bit in the shadow bitmap is set to 1. The point in time copy controller <highlight><bold>4</bold></highlight> thus reassembles the data stored in the master store at the time the point in time copy was requested so that the point in time copy can be processed by the point in time copy processor <highlight><bold>25</bold></highlight> in accordance with the user&apos;s instructions, for example the point in time copy may be subject to further processing, supplied over the network via the network interface <highlight><bold>83</bold></highlight> to another computing apparatus for further processing or storage or may be output to a backup storage device. Thus, the point in time copy controller <highlight><bold>4</bold></highlight> and shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>enable a point in time copy to be made immediately when desired and subsequently accessed and copied to other locations for data analysis or storage on request. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Recovery of a master copy from a point in time copy in the dependent mode will now be described with reference to <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>in which <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>shows a flow chart for illustrating recovery of a master copy from a point in time copy and <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>b </italic></highlight>to <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>show diagrams for illustrating stages in the recovery of a master copy from a point in time copy in the dependent mode for the case where the master store <highlight><bold>6</bold></highlight>, shadow store <highlight><bold>8</bold></highlight>, shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>and copy bitmap lob of the mass storage device <highlight><bold>22</bold></highlight> have the states shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference><highlight><italic>d</italic></highlight>, that is after creation of a point in time copy in the dependent mode and after the data block B has boon overwritten by the data block D in the master store as described above with reference to <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>f. </italic></highlight></paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> When a user instructs recovery of a master copy either directly using the user interface <highlight><bold>21</bold></highlight> or via the network interface <highlight><bold>83</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, then at S<highlight><bold>20</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> copies the shadow bitmap to the copy bitmap so that every bit in the copy bitmap has the same state as the corresponding bit in the shadow bit map as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>b</italic></highlight>. Thus a one in the shadow bitmap indicating that the point in time copy data for that block is in the subsidiary or shadow store <highlight><bold>8</bold></highlight> is copied to the copy bitmap indicating that that block is to be copied from the shadow store. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> At S<highlight><bold>21</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> clears the shadow bitmap by resetting all the bits to zero as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>c</italic></highlight>. Then at S<highlight><bold>22</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks to see whether the data processor <highlight><bold>23</bold></highlight> wishes to write new data to a data block in the master store <highlight><bold>6</bold></highlight>. If, as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>c </italic></highlight>by the arrow and the legend &ldquo;NEW DATA&rdquo;, the answer is yes, then the point in time copy controller <highlight><bold>4</bold></highlight> copies that data block from the shadow store <highlight><bold>8</bold></highlight> to the master store <highlight><bold>6</bold></highlight> at S<highlight><bold>23</bold></highlight> and at S<highlight><bold>24</bold></highlight> sets the corresponding copy bit to zero as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>d</italic></highlight>. Then, at S<highlight><bold>25</bold></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> allows the new data &ldquo;NEW&rdquo; to be written into the that data block as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>e</italic></highlight>. Copying the data block back to the master store prior to overwriting it ensures that an accurate copy exists in the event of a system crash before the data is overwritten. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> If, however, the answer at S<highlight><bold>22</bold></highlight> is no, then at S<highlight><bold>27</bold></highlight> the point in time copy controller <highlight><bold>4</bold></highlight> selects the data block associated with a first or a next copy bit of status land copies that data block from the shadow store <highlight><bold>8</bold></highlight> to the master store <highlight><bold>6</bold></highlight>. Then, at S<highlight><bold>28</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> sets the corresponding copy bit to zero. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> At S<highlight><bold>26</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>the point in time copy controller <highlight><bold>4</bold></highlight> checks whether any of the copy bits still have a status <highlight><bold>1</bold></highlight> and if so, repeats S<highlight><bold>22</bold></highlight> to S<highlight><bold>26</bold></highlight> until all the copy bits are zero, indicating that all of the data blocks stored in the shadow store <highlight><bold>8</bold></highlight> have been copied back to the master store <highlight><bold>6</bold></highlight> to restore the master copy. Of course, if the data processor <highlight><bold>23</bold></highlight> has written to the master store <highlight><bold>6</bold></highlight> during the recovery or restoration process, then those data blocks will have been overwritten. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The above described dependent mode of point in time copy creation has the advantage that it involves the minimum amount of data copying because a data block is not copied to the shadow store <highlight><bold>8</bold></highlight> until just before that data block is overwritten. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> Operation of the point in time copy system in the independent mode will now be described with the aid of <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>6</bold></highlight><highlight><italic>c</italic></highlight>, <highlight><bold>7</bold></highlight><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>8</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>shows a flow chart illustrating operations carried out by the point in time copy system in the independent mode while <cross-reference target="DRAWINGS">FIGS. 7</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>f </italic></highlight>show diagrams similar to those shown in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>4</bold></highlight><highlight><italic>d </italic></highlight>to illustrate the state of the master store <highlight><bold>6</bold></highlight>, shadow store <highlight><bold>8</bold></highlight>, shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>and copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>at various stages during creation and maintenance of a point in time copy in the independent mode. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 8</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>shows tables similar to those shown in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f </italic></highlight>with, again, columns <highlight><bold>60</bold></highlight>, <highlight><bold>61</bold></highlight>, <highlight><bold>62</bold></highlight>, <highlight><bold>63</bold></highlight> and <highlight><bold>64</bold></highlight> representing the master store, the actual point in time copy or virtual shadow, the shadow store, the shadow bitmap and the copy bitmap with, as in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e </italic></highlight>and <highlight><bold>4</bold></highlight><highlight><italic>f</italic></highlight>, each row in columns <highlight><bold>60</bold></highlight>, <highlight><bold>61</bold></highlight> and <highlight><bold>62</bold></highlight> representing a corresponding data block and the rows in columns <highlight><bold>63</bold></highlight> and <highlight><bold>64</bold></highlight> representing the corresponding bits of the bitmaps. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> When a user instructs the point in time copy system to create a copy in the independent mode, then at S<highlight><bold>30</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> initialises the shadow bitmap <highlight><bold>10</bold></highlight> and the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>by setting all bits in the shadow bitmap to 0 and all bits in the copy bitmap to 1 as shown in <cross-reference target="DRAWINGS">FIGS. 7</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In the independent mode, the point in time copy controller <highlight><bold>4</bold></highlight> copies all of the data blocks stored in the master store <highlight><bold>6</bold></highlight> to the shadow store a in order to create the point in time copy. The compilation of the point in time copy in the shadow store <highlight><bold>8</bold></highlight> thus inevitably takes some time and, during creation of the point in time copy, the data processor <highlight><bold>23</bold></highlight> may request access to the master store <highlight><bold>6</bold></highlight> to overwrite one or more data blocks. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> In order to ensure that an accurate point in time copy is created, the point in time copy controller checks at S<highlight><bold>31</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>whether there is now data to be written to the master store <highlight><bold>6</bold></highlight>. If the answer is no, then the point in time copy controller <highlight><bold>4</bold></highlight> copies the data from the first block in the master store <highlight><bold>6</bold></highlight> to the shadow store <highlight><bold>8</bold></highlight>. In the example shown by <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>b</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> causes data block A to be copied to the shadow store <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Then, at S<highlight><bold>33</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> sets the corresponding bit in the copy bitmap to 0 (as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>c</italic></highlight>) and repeats operations S<highlight><bold>31</bold></highlight> to S<highlight><bold>33</bold></highlight> until all data blocks have been copied to the shadow store <highlight><bold>8</bold></highlight> (S<highlight><bold>37</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>). </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> If, however, the point in time copy controller <highlight><bold>4</bold></highlight> determines at S<highlight><bold>31</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>that a data block is to be overwritten in the master store <highlight><bold>6</bold></highlight>, then at S<highlight><bold>34</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks whether the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>bit for that data block is set at 0 (indicating that the data has already been copied) or is still set at 1. If the copy bit is still set at 1 as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>c </italic></highlight>for data block C, then, before the data block C is overwritten, the point in time copy controller <highlight><bold>4</bold></highlight> copies the data block C into the corresponding address in the shadow store <highlight><bold>8</bold></highlight> (S<highlight><bold>34</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a</italic></highlight>), sets the shadow bit corresponding to that data block to 1 to indicate that that data block in the master store <highlight><bold>6</bold></highlight> has been overwritten (that is the point in time copy of that data block is in the shadow store <highlight><bold>8</bold></highlight>) and, in addition, sets the copy bit corresponding to that data block to 0 in the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>to indicate that that data block has been copied to the shadow store <highlight><bold>8</bold></highlight> (as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>d</italic></highlight>) and the data processor <highlight><bold>23</bold></highlight> can now overwrite the old data block in the master store <highlight><bold>6</bold></highlight> with the new data D. This state is illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>e. </italic></highlight></paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The point in time copy controller then checks at S<highlight><bold>37</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>whether any of the blocks forming the point in time copy still need to be copied to the shadow store <highlight><bold>8</bold></highlight>, that is whether any of the bits in the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>are still 1 and, if go, repeats operations S<highlight><bold>31</bold></highlight> onwards. For the example shown in <cross-reference target="DRAWINGS">FIGS. 7</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>7</bold></highlight><highlight><italic>f</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> determines that the copy bit corresponding to the second data block is still 1 and accordingly proceeds to copy the data block data &ldquo;B&rdquo; to the shadow store and then set the corresponding bit in the copy bitmap to 0 to indicate that the data in that block has been copied as shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>f</italic></highlight>. Once all the copy bits are 0, then the point in time copy controller <highlight><bold>4</bold></highlight> determines that the point in time copy in the shadow store is complete. Of course, further requests may be received from the data processor <highlight><bold>23</bold></highlight> to overwrite data blocks in the master store <highlight><bold>6</bold></highlight>. Each time such a request is received and a data block in the master store <highlight><bold>6</bold></highlight> is overwritten, the point in time copy controller <highlight><bold>4</bold></highlight> flips the corresponding bit in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>from 0 to 1, if necessary, to indicate that the data in the master store <highlight><bold>6</bold></highlight> no longer agrees with the point in time copy. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In this case, the state of the bits in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>facilitates creation of future point in time copies. <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>shows operations carried out by the point in time copy controller <highlight><bold>4</bold></highlight> to create a further point in time copy. Thus, when the point in time copy controller <highlight><bold>4</bold></highlight> is requested at a later time or date to create a further point in time copy, then the point in time copy controller <highlight><bold>4</bold></highlight> copies the shadow bitmap to the copy bitmap at S<highlight><bold>30</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>so that every bit in the copy bitmap has the same state as the corresponding bit in the shadow bit map. Thus, after copying of the shadow bitmap to the copy bitmap, if the status of the bit in the shadow bitmap was 0, that is that particular data block has not changed since the last point in time copy was produced, then the status of the copy bit will be zero indicating that that data block does not need to be copied to provide the new point in time copy whereas, if the status of the bit in the shadow bitmap was 1, then the corresponding bit in the copy bitmap will now be 1 indicating that the data in the corresponding block has changed (for example the data block D in the third block shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference><highlight><italic>f</italic></highlight>) and that that data block needs to be copied. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Then the point in time copy controller <highlight><bold>4</bold></highlight> carries out operations similar to the operations S<highlight><bold>31</bold></highlight> to S<highlight><bold>37</bold></highlight> described above. Thus, at S<highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks whether the data processor <highlight><bold>23</bold></highlight> wishes to write to a data block in the taster store <highlight><bold>6</bold></highlight> and, if the answer is yes, at S<highlight><bold>34</bold></highlight><highlight><italic>a </italic></highlight>copies that data block from the master store <highlight><bold>6</bold></highlight> to the corresponding address in the shadow store <highlight><bold>8</bold></highlight>, at S<highlight><bold>35</bold></highlight><highlight><italic>a </italic></highlight>sets the corresponding bit in the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>to zero, indicating that the data block has been copied to the shadow store <highlight><bold>8</bold></highlight> and at S<highlight><bold>36</bold></highlight><highlight><italic>a </italic></highlight>allows the data processor <highlight><bold>23</bold></highlight> to overwrite the old data in the master store <highlight><bold>6</bold></highlight> with the new data and sets the corresponding bit in the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>to 1 to indicate that that data block in the master store is no longer the same as the corresponding data block in the shadow store. If, however, the answer at S<highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>is no, that is there is no new data to be written to the master store <highlight><bold>6</bold></highlight>, then, at S<highlight><bold>32</bold></highlight><highlight><italic>a </italic></highlight>the point in time copy controller <highlight><bold>4</bold></highlight> copies the data block associated with the first or a next 1 in the copy bitmap from the master store <highlight><bold>6</bold></highlight> to the corresponding address in the shadow store <highlight><bold>8</bold></highlight> and at S<highlight><bold>33</bold></highlight><highlight><italic>a </italic></highlight>sets the corresponding bit in the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>to zero to indicate that the data block has been copied to the shadow store <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> After S<highlight><bold>36</bold></highlight><highlight><italic>a </italic></highlight>or S<highlight><bold>33</bold></highlight><highlight><italic>a</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks at S<highlight><bold>37</bold></highlight><highlight><italic>a </italic></highlight>whether there are any copy bits still set to 1, indicating that there are data blocks in the master store <highlight><bold>6</bold></highlight> that still need to be copied to the shadow store to produce the point in time copy. If the answer is yes, the point in time copy controller <highlight><bold>4</bold></highlight> repeats the operations of S<highlight><bold>31</bold></highlight><highlight><italic>a </italic></highlight>to S<highlight><bold>37</bold></highlight><highlight><italic>a </italic></highlight>until the answer at S<highlight><bold>37</bold></highlight><highlight><italic>a </italic></highlight>is no, that is until all of the copy bits are zero, indicating that all of the data blocks in the master store <highlight><bold>6</bold></highlight> at the time the point in time copy was requested have been copied to the shadow store <highlight><bold>8</bold></highlight> to create the new point in time copy. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The operations shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>are repeated each time a new point in time copy is requested. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> This means that, once a point in time copy has been created in the shadow store <highlight><bold>8</bold></highlight> in the independent mode, future point in time copies can be created simply by updating the previous point in time copy and it will only be necessary to copy all the data blocks from the master store <highlight><bold>6</bold></highlight> if they have all changed since the last point in time copy was created. Accordingly, once an initial point in time copy has been created, future point in time copies can be created more quickly. The table columns <highlight><bold>60</bold></highlight>, <highlight><bold>62</bold></highlight>, <highlight><bold>63</bold></highlight> and <highlight><bold>64</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference><highlight><italic>a </italic></highlight>illustrate the state of the data blocks in the master and shadow stores and the state of the bits in the shadow and copy bitmaps immediately after a user has requested that the point in time or virtual shadow (shown in column <highlight><bold>61</bold></highlight>) be created. Thus, the shadow bitmap bits have been initialised to 0 and the copy bitmaps have been initialised to 1 to indicate that each of the data blocks needs to be copied into the shadow store to create the virtual shadow. <cross-reference target="DRAWINGS">FIG. 8</cross-reference><highlight><italic>b </italic></highlight>shows the state of these columns after creation of the point in time copy or virtual shadow illustrated by <cross-reference target="DRAWINGS">FIG. 8</cross-reference><highlight><italic>b </italic></highlight>when the data blocks in the second and fifth rows have been overwritten by the new data blocks NEW, causing the point in time copy controller <highlight><bold>4</bold></highlight> to change the corresponding bits in the shadow bitmap to 1. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Recovery of a master copy from a point in time copy in the independent mode will now be described with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c </italic></highlight>which shows a flow chart for illustrating recovery of a master copy from a point in time copy. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> When a user instructs recovery of a master copy either directly using the user interface <highlight><bold>21</bold></highlight> or via the network interface <highlight><bold>93</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, then at S<highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> copies the shadow bitmap <highlight><bold>10</bold></highlight><highlight><italic>a </italic></highlight>to the copy bitmap <highlight><bold>10</bold></highlight><highlight><italic>b </italic></highlight>to indicate the data blocks in the shadow store <highlight><bold>8</bold></highlight> to be copied from the shadow store <highlight><bold>8</bold></highlight> back to the master store <highlight><bold>6</bold></highlight> and then clears the shadow bitmap. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Then at S<highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks to see whether the data processor <highlight><bold>23</bold></highlight> wishes to write new data to a data block in the master store <highlight><bold>6</bold></highlight>. If the answer is yes, then the point in time copy controller <highlight><bold>4</bold></highlight> copies that data block from the shadow store <highlight><bold>3</bold></highlight> to the master store <highlight><bold>6</bold></highlight> at S<highlight><bold>34</bold></highlight><highlight><italic>b </italic></highlight>and at S<highlight><bold>35</bold></highlight><highlight><italic>b </italic></highlight>sets the corresponding copy bit to zero. Then, at S<highlight><bold>36</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> allows the new data to be written into that data block and sets the corresponding bit in the shadow bitmap to 1. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> If, however, the answer at S<highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>is no, then at S<highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>the point in time copy controller <highlight><bold>4</bold></highlight> selects the first or next data block in the shadow store <highlight><bold>8</bold></highlight> and copies that data block from the shadow store <highlight><bold>8</bold></highlight> to the master store <highlight><bold>6</bold></highlight>. Then, at S<highlight><bold>32</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> sets the corresponding copy bit to zero. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> After S<highlight><bold>33</bold></highlight><highlight><italic>b </italic></highlight>or S<highlight><bold>36</bold></highlight><highlight><italic>b</italic></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks at S<highlight><bold>37</bold></highlight><highlight><italic>b </italic></highlight>whether all of the data blocks have been copied back to the master store <highlight><bold>6</bold></highlight> from the shadow store <highlight><bold>8</bold></highlight> (by checking whether any of the copy bits are still1) and, if the answer is no, that is that not all data blocks have been copied, repeats operations S<highlight><bold>31</bold></highlight><highlight><italic>b </italic></highlight>to S<highlight><bold>37</bold></highlight><highlight><italic>b </italic></highlight>until the answer at S<highlight><bold>37</bold></highlight><highlight><italic>b </italic></highlight>is yes, indicating that all of the data blocks stored in the shadow store <highlight><bold>8</bold></highlight> have been copied back to the master store to restore the master copy. Of course, if the data processor <highlight><bold>23</bold></highlight> has written to the master store during the recovery or restoration process, then those data blocks will have been overwritten. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Using the independent mode has the advantage that after the independent mode copy has been made, the shadow store <highlight><bold>8</bold></highlight> contains a complete point in time copy and it is not necessary to delay writing new data blocks to the master store <highlight><bold>6</bold></highlight> to give time for the old data blocks to be copied across to the shadow store <highlight><bold>8</bold></highlight>. Rather, all that is necessary is that the state of the corresponding bit in the shadow bitmap is changed to indicate that there is a difference between the shadow and the master stores. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a functional block diagram similar to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> of an example of a point in time copy system embodying the present invention. In the interests of simplicity, the various functional components within the host computer <highlight><bold>2</bold></highlight>, apart from the point in time copy controller <highlight><bold>4</bold></highlight>, are not shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. It will, of course be appreciated that will be the same as those shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> differs from that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> in that two shadow stores <highlight><bold>8</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>8</bold></highlight>-<highlight><bold>2</bold></highlight> are provided together with corresponding bitmap stores <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> With this point in time copy system, a first point in time copy will be created and maintained using the shadow store <highlight><bold>8</bold></highlight>-<highlight><bold>1</bold></highlight> and the bitmap store <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> in the manner described above with reference to FIGS. <highlight><bold>3</bold></highlight> to <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>if the dependent mode is selected and with reference to <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>if the independent mode is selected. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows a flow chart illustrating operations carried out by the point in time copy controller <highlight><bold>4</bold></highlight> when a subsequent point in time is to be made using the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Thus, when at S<highlight><bold>40</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> receives (via the user interface <highlight><bold>21</bold></highlight> or the network interface <highlight><bold>83</bold></highlight>) a request from a user to make a point in time copy then, at S<highlight><bold>41</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the point in time copy controller a determines whether the user has selected to overwrite the earliest point in time copy. If the answer a S<highlight><bold>41</bold></highlight> is yes, then, at S<highlight><bold>42</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> updates the existing point in time copy defined by the point in time copy data stored in the shadow store <highlight><bold>8</bold></highlight>-<highlight><bold>1</bold></highlight> and the bitmap store <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> by overwriting any data blocks of the shadow store with the corresponding data blocks of the master store <highlight><bold>6</bold></highlight> where the corresponding bit of the shadow bitmap is 1 indicating that the data has changed since the last point in time copy was produced. In this case, the earlier point in time copy is lost. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> If, however, the user has selected not to overwrite the earliest point in time copy then, at S<highlight><bold>43</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the point in time copy controller <highlight><bold>4</bold></highlight> creates a fresh point in time copy using the shadow store <highlight><bold>8</bold></highlight>-<highlight><bold>2</bold></highlight> and the bitmap store <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight> in the manner described above with reference to FIGS. <highlight><bold>3</bold></highlight> to <highlight><bold>5</bold></highlight><highlight><italic>e </italic></highlight>where the dependent mode is selected and in the manner described above with reference to <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>to <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>where the independent mode is selected. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> In the example illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> two shadow stores <highlight><bold>8</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>8</bold></highlight>-<highlight><bold>2</bold></highlight> and corresponding bitmap store <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight> are provided. Further shadow stores, each with an associated bitmap store may be provided to enable three, four or more point in time copies to be created. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> thus enables two or more (depending upon the number of shadow stores and associated bitmap stores) to be maintained. In this case, the point in time copy controller <highlight><bold>4</bold></highlight> changes the state of the bit in the corresponding shadow bitmap (if the bit does not already indicate a previous change to the block of data in the master store) each time data in the master store <highlight><bold>6</bold></highlight> is overwritten subsequent to creation of the corresponding point in time copy. Accordingly, the shadow bitmap associated with each point in time copy indicates the data blocks of the master store <highlight><bold>6</bold></highlight> that have changed since that point in time copy was created. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> This means that a previous point in time copy can be maintained without having to copy that point in time copy to an off-line backup or archive store such as a tape backup. A previous point in time copy can thus be accessed more quickly and easily than if the point in time copy was only available on a backup store. This enables a user to access various different point in time copies and also enables a user, if necessary or desired, to restore the data in the master store <highlight><bold>6</bold></highlight> to the data stored at a particular point in time by overwriting the data in the master store <highlight><bold>6</bold></highlight> (or a copy of the data in the master store <highlight><bold>6</bold></highlight>) with the data from the appropriate shadow store <highlight><bold>8</bold></highlight> where the corresponding bitmap indicates that the data in the corresponding block in the master store <highlight><bold>6</bold></highlight> has changed since the required point time copy was produced. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In this example, a user can request, via the user interface <highlight><bold>21</bold></highlight> or network interface <highlight><bold>83</bold></highlight>, recovery or restoration of a master copy from any of the available point in time copies. Once recovery has been requested then the point in time copy controller <highlight><bold>4</bold></highlight> will access the shadow store and bitmap store storing the point in time copy data for the selected point in time copy and carry out the operations shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>if the point in time copy was created in the dependent mode or the operations shown in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c </italic></highlight>if the point in time copy was created in the independent mode. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> This enables far more rapid regeneration of data for different points in time than would be possible than if it was necessary to access a backup store to obtain the data. Furthermore, the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> should reduce the amount of data that needs to be stored in the backup store. In addition, the bitmaps associated with the different point in time copies enable a user to identify quickly and easily which data blocks have changed the time. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Where two or more shadow stores <highlight><bold>8</bold></highlight> and associated bitmap stores <highlight><bold>10</bold></highlight> are provided, then the point in time controller <highlight><bold>4</bold></highlight> may be arranged to access these in a predetermined sequence when creating point in time copies. As described above, a point in time copy is only overwritten at the specific request of the user. As another possibility, the point in time copy controller may be configured to overwrite the earliest point in time copy automatically when all of the shadow stores and associated bitmap stores have been used to create point in time copies. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a functional block diagram similar to <cross-reference target="DRAWINGS">FIG. 9</cross-reference> of another example of a point in time copy system embodying the present invention. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> In this example, the mass storage device <highlight><bold>22</bold></highlight> includes a plurality of master stores each associated with a corresponding shadow store and bitmap store. As shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, two master stores <highlight><bold>6</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>6</bold></highlight>-<highlight><bold>2</bold></highlight>, two shadow stores <highlight><bold>8</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>8</bold></highlight>-<highlight><bold>2</bold></highlight> and two bitmap stores <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight> are provided. There may, of course, be three or more master stores each associated with a shadow store and bitmap store. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Such a plurality of master stores may be required to provide adequate storage for a large database, that is the database may be split between the master stores. In this case, when a user elects to make a point in time copy of the whole database, the point in time copy controller <highlight><bold>4</bold></highlight> initialises the bits in the shadow bitmaps (and copy bitmaps where the independent mode is used) of the various bitmap stores at the same time and separate shadow or point in time copies for the data stored in each master store are then made as described above. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In this case, the point in time copy controller <highlight><bold>4</bold></highlight> treats the separate master stores as a single store so that, if the data processor requests permission to write to a data block of any of the master stores, that data block is selected as the next to be copied so that the data block is copied before it is overwritten. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Initialising the bitmaps in the bitmap stores simultaneously ensures that the point in time copies created for the different master stores will be created for the same point in time enabling a genuine point in time copy of an entire database to be made even when the logical volume of the database is spread across a number of master stores, for example a number of different physical disc volumes. Furthermore, because the point in time copy controller <highlight><bold>4</bold></highlight> ensures that a bit in a shadow bitmap is changed when the corresponding data block of the associated master store is changed, the point in time copy can be easily and quickly updated so that successive simultaneous point in time copies can be produced. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In addition during recovery, the operation of S<highlight><bold>20</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>in the dependent mode or the operation of S<highlight><bold>30</bold></highlight><highlight><italic>b </italic></highlight>in <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>c </italic></highlight>in the independent mode will be carried out at the same time for each master store and the master stores will be treated as a single store so that, if the data processor requests permission to write to a data block of any of the master stores, that data block is selected as the next to be copied so that the data block is copied before it is overwritten. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Such a system may also be used where it is necessary to have simultaneous point in time copies for different or independent databases or files on different master stores. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> It will, of course, be appreciated that in the examples described above, the or each bitmap store is significantly smaller than the corresponding master store because the bitmap store only needs to store the bitmap, which has a single bit per data block and the copy bitmap which again has the single bit per data block. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows a functional block diagram similar to <cross-reference target="DRAWINGS">FIG. 11</cross-reference> of another example of a point in time copy system embodying the invention. In this example, the point in time copy system is arranged to operate in the dependent mode described above and, as illustrated diagrammatically in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the shadow store <highlight><bold>8</bold></highlight> is of reduced size, that is it has a smaller capacity than the master store <highlight><bold>6</bold></highlight> optionally, this point in time copy system also includes an overflow store <highlight><bold>11</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a table similar to <cross-reference target="DRAWINGS">FIGS. 5</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>5</bold></highlight><highlight><italic>b </italic></highlight>in which column <highlight><bold>70</bold></highlight> represents the master store <highlight><bold>6</bold></highlight> with each row in the column representing a corresponding different data block, column <highlight><bold>71</bold></highlight> represents the virtual shadow or point in time copy with, again, each row representing a corresponding data block and there being, as in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>8</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>b</italic></highlight>, a one-to-one relationship between the data blocks in the master store <highlight><bold>6</bold></highlight> and the data blocks of the virtual shadow. Column <highlight><bold>72</bold></highlight><highlight><italic>a </italic></highlight>headed &ldquo;physical shadow&rdquo; represents the data stored in the shadow store and, as shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, this column has as a smaller number of rows representing the fact that the shadow store <highlight><bold>8</bold></highlight> has a smaller storage capacity than the master store <highlight><bold>6</bold></highlight>. In addition, there is no one-to-one correspondence between rows in the master store <highlight><bold>6</bold></highlight> and the shadow store <highlight><bold>8</bold></highlight>, in this example. Each data block location in the shadow store <highlight><bold>8</bold></highlight> is associated with an address as shown in address column <highlight><bold>72</bold></highlight><highlight><italic>b</italic></highlight>. It will, of course, be appreciated that <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, like <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>8</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>8</bold></highlight><highlight><italic>b </italic></highlight>above, is only an illustrative example and that generally there would be very many more data blocks in the master store <highlight><bold>6</bold></highlight> and more than the five shown address locations in the shadow store <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> As in the examples described above, the bitmap store <highlight><bold>10</bold></highlight> stores a shadow bitmap which is represented in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> by column <highlight><bold>73</bold></highlight> and includes a single bit for each data block within the master store <highlight><bold>6</bold></highlight>. The bitmap used for mapping the master store <highlight><bold>6</bold></highlight> to the shadow store <highlight><bold>8</bold></highlight> thus remains the same. However, in this example, the bitmap is associated with an index represented by column <highlight><bold>74</bold></highlight> and also, in this example, stored in the bitmap store <highlight><bold>10</bold></highlight>. The indices in the index provide pointers to corresponding addresses of the shadow store <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> In this case, a point in time copy is produced in the manner described above for the dependent mode. As described above, when the initial point in time copy is produced, then the data stored in the master store <highlight><bold>6</bold></highlight> represents the point in time copy, no data is stored in the shadow store <highlight><bold>8</bold></highlight> and all of the bits in the shadow bitmap represented by column <highlight><bold>73</bold></highlight> will be set to 0. However, in this case, when the point in time copy controller <highlight><bold>4</bold></highlight> determines that the data processor <highlight><bold>23</bold></highlight> wishes to overwrite a data block in the master store <highlight><bold>6</bold></highlight>, then prior to allowing overwriting of the data, the point in time copy controller <highlight><bold>4</bold></highlight> copies the old data block to an address location within the shadow store <highlight><bold>9</bold></highlight>, flips the corresponding bit in the shadow bitmap to indicate that the master data for that block no longer corresponds to the point in time copy, and in addition, updates the index to associate the bit for that data block with an index pointing to the corresponding address in the shadow store <highlight><bold>8</bold></highlight>. To illustrate this, <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows the case where, subsequent to creation of the point in time copy represented by the virtual shadow column <highlight><bold>71</bold></highlight>, the data in the third data block has changed from &ldquo;Nnn&rdquo; to &ldquo;CCC&rdquo; and the data in the seventh data block has changed from &ldquo;Mmm&rdquo; to &ldquo;GGG&rdquo;. In this case, prior to the data in these data blocks being changed, the point in time copy controller <highlight><bold>4</bold></highlight> has copied that data &ldquo;Mmm&rdquo; and &ldquo;Nnn&rdquo; to locations in the shadow store <highlight><bold>8</bold></highlight>, in the example shown addresses <highlight><bold>0</bold></highlight> and <highlight><bold>1</bold></highlight>, respectively and has flipped the corresponding bits in the bitmap to indicate that these data blocks in the master store and point in time copy no longer are identical and, in addition, has updated the index shown in column <highlight><bold>74</bold></highlight> to point to the addresses in the shadow store <highlight><bold>8</bold></highlight> at which the replaced data block is located. Thus, in the example shown, the index <highlight><bold>1</bold></highlight> is associated with the bit for the third data block and the index <highlight><bold>0</bold></highlight> is associated with the bit for the seventh data block. The point in time copy controller <highlight><bold>4</bold></highlight> generally allocates the address locations in the shadow store <highlight><bold>8</bold></highlight> in order as changes arise between the master store and the shadow store, that is the old data blocks for consecutive changes are stored in consecutive addresses. However, any predefined order of allocation of addresses may be used. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> When a user requests that a point in time copy created by the system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> (without the overflow store <highlight><bold>11</bold></highlight>) be restored to the master store, then the point in time copy controller <highlight><bold>4</bold></highlight> carries out the operations shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>using, at S<highlight><bold>23</bold></highlight> and S<highlight><bold>27</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the index data associated with the bit in the shadow bit map to determine the address in the shadow store <highlight><bold>8</bold></highlight> at which the data block to be copied back to the master store is located. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> (omitting the overflow store <highlight><bold>11</bold></highlight>) enables the size of the shadow store <highlight><bold>8</bold></highlight> to be reduced from that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, that is the shadow store can be of smaller capacity than the master store <highlight><bold>6</bold></highlight>, by including an address index in the bitmap store <highlight><bold>10</bold></highlight> that points to the locations in the shadow store <highlight><bold>8</bold></highlight> at which data blocks that have been replaced since the point in time copy was created can be located so that a one-to-one address correspondence between data blocks in the master store and the shadow store is not required. The size of the blocks of data is such that the reduction in size of the shadow store <highlight><bold>8</bold></highlight> outweighs the increase in size of the bitmap store <highlight><bold>10</bold></highlight> to incorporate the address index shown in column <highlight><bold>74</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>. The size of shadow store <highlight><bold>8</bold></highlight> required will depend upon the file size of the file stored in the master store, the application being used by the host computer or network and the number of data blocks that change after a point in time copy is created. The latter will also be partly dependent on the frequency with which point in time copies are taken. Selection of the size or memory capacity required for the shadow store <highlight><bold>8</bold></highlight> will thus be application dependent. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> The mass storage device <highlight><bold>22</bold></highlight> of the point in time copy system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> may additionally have an overflow store <highlight><bold>11</bold></highlight> which enables further data to be stored if the reduced capacity shadow store <highlight><bold>8</bold></highlight> becomes full. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows an illustrative table that differs from the table shown in <cross-reference target="DRAWINGS">FIG. 13</cross-reference> (apart from the actual data represented in the columns) by virtue of the inclusion of a further column <highlight><bold>75</bold></highlight> representing the data stored in the overflow store <highlight><bold>11</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the first address in the overflow store <highlight><bold>11</bold></highlight> contains header information which identifies the overflow store <highlight><bold>11</bold></highlight> as an overflow store or volume and also points to the next free address within the overflow store. In this example, as data blocks in the master store <highlight><bold>70</bold></highlight> are changed subsequent to creation of a point in time copy, the changed data blocks are stored in the shadow store <highlight><bold>8</bold></highlight> and the index associated with the bitmap is updated as described above so as to point to the corresponding addresses in the shadow store <highlight><bold>8</bold></highlight>. When all locations in the shadow store <highlight><bold>8</bold></highlight> are full, then subsequent data blocks to be overwritten are copied into the overflow store <highlight><bold>11</bold></highlight>. As shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the next two data blocks to be changed are physically stored in the overflow store <highlight><bold>11</bold></highlight> at addresses <highlight><bold>1</bold></highlight> and <highlight><bold>2</bold></highlight> in the overflow store <highlight><bold>11</bold></highlight> and pointers to these addresses are associated with the corresponding bits in the bitmap index shown in column <highlight><bold>74</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In the example shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> where the shadow store <highlight><bold>9</bold></highlight> is represented as having capacity to store five data blocks, the sixth block of data to change represented by the ninth row in column <highlight><bold>70</bold></highlight> must be stored in the overflow store <highlight><bold>11</bold></highlight>. Thus, the old data block &ldquo;Rrr&rdquo; is stored at the first address <highlight><bold>1</bold></highlight> in the overflow store <highlight><bold>11</bold></highlight> and a corresponding index pointer &lsqb;<highlight><bold>1</bold></highlight>&rsqb; in the index shown in column <highlight><bold>74</bold></highlight> is associated with the corresponding bit in the bitmap so as to point to the first address location <highlight><bold>1</bold></highlight> within the overflow store <highlight><bold>11</bold></highlight>. Similarly when the second block of data in the master is subsequently changed from &ldquo;Qqq&rdquo; to &ldquo;BBB&rdquo;, then the old data is stored at address location <highlight><bold>2</bold></highlight> in the overflow store <highlight><bold>11</bold></highlight> and the index &ldquo;&lsqb;<highlight><bold>2</bold></highlight>&rsqb;&rdquo; is associated with the corresponding bit in the bitmap <highlight><bold>73</bold></highlight> pointing to that address location in the overflow store <highlight><bold>11</bold></highlight>. Thus, when the point in time copy controller <highlight><bold>4</bold></highlight> wishes to assemble the point in time copy or virtual shadow shown in column <highlight><bold>71</bold></highlight>, the point in time copy controller <highlight><bold>4</bold></highlight> checks the status of the bits in the bitmap, where the bit is 0, reads the data from the corresponding data block in the master store <highlight><bold>6</bold></highlight> and where the bit is 1 determines the location of the data in the shadow store <highlight><bold>8</bold></highlight> or overflow store <highlight><bold>11</bold></highlight> from the index associated with that bit and reads the data from that determined location. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> When a user requests that a point in time copy created by the system shown in <cross-reference target="DRAWINGS">FIG. 12</cross-reference> including the overflow store <highlight><bold>11</bold></highlight> be restored to the master store, then the point in time copy controller <highlight><bold>4</bold></highlight> carries out the operations shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>using, at S<highlight><bold>23</bold></highlight> and S<highlight><bold>27</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>, the index data associated with the bit in the shadow bit map to determine the address in the shadow store <highlight><bold>8</bold></highlight> or overflow store <highlight><bold>11</bold></highlight> at which the data block to be copied back to the master store is located. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Such an overflow store <highlight><bold>11</bold></highlight> may be used in a point in time copy system having a plurality of master stores and shadow stores each using a reduced size shadow store. Separate overflow stores may be provided for separate master stores. As another possibility, a single overflow store may be provided that can be used by a plurality of master stores and associated bitmap stores with each bitmap being associated with an index in which the indices identify the addresses in the overflow store at which the required data is located. As another possibility, the shadow store may be omitted (that is the shadow store may have a capacity of zero), in which case any data in the master store that is to be overwritten will be stored in the overflow store <highlight><bold>11</bold></highlight> and, when the point in time copy controller <highlight><bold>4</bold></highlight> is requested to provide the point in time copy, the point in time copy controller <highlight><bold>4</bold></highlight> will determine the location of the data in the overflow store <highlight><bold>73</bold></highlight> from the index pointer in the index associated with the bitmap. Again, a single overflow store may be shared by a plurality of master stores and associated bitmap stores so that the size of the reduced size shadow store is effectively 0 and all shadow store data for a plurality of point in time copies is stored in a single overflow store shared by the different master stores. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The header information may be stored elsewhere in the mass storage device <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>a </italic></highlight>illustrates an example of a point in time copy system in which two master stores <highlight><bold>6</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>6</bold></highlight>-<highlight><bold>2</bold></highlight> with associated bitmap stores <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight> share a single overflow store <highlight><bold>11</bold></highlight> and no separate shadow store is provided. <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b </italic></highlight>shows a table (similar to the tables shown in <cross-reference target="DRAWINGS">FIGS. 4</cross-reference><highlight><italic>e</italic></highlight>, <highlight><bold>4</bold></highlight><highlight><italic>f</italic></highlight>, <highlight><bold>8</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>8</bold></highlight><highlight><italic>b</italic></highlight>, <highlight><bold>13</bold></highlight> and <highlight><bold>14</bold></highlight>) providing an illustrative example of data that may be stored in the mass storage device <highlight><bold>22</bold></highlight> of this system. This table has columns <highlight><bold>80</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>80</bold></highlight><highlight><italic>b </italic></highlight>representing the data stored in the master stores <highlight><bold>6</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>6</bold></highlight>-<highlight><bold>2</bold></highlight>, columns <highlight><bold>81</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>81</bold></highlight><highlight><italic>b </italic></highlight>representing the corresponding virtual shadow or point in time copies, columns <highlight><bold>82</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>82</bold></highlight><highlight><italic>b </italic></highlight>representing the corresponding shadow bitmaps stared in the bitmap stores <highlight><bold>10</bold></highlight>-<highlight><bold>1</bold></highlight> and <highlight><bold>10</bold></highlight>-<highlight><bold>2</bold></highlight> (each with an associated index represented by columns <highlight><bold>82</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>82</bold></highlight><highlight><italic>d</italic></highlight>) and a column <highlight><bold>83</bold></highlight><highlight><italic>a </italic></highlight>representing the data stored in the shared overflow store associated with a column <highlight><bold>83</bold></highlight><highlight><italic>b </italic></highlight>identifying the address locations in the shared overflow store. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 15</cross-reference><highlight><italic>b</italic></highlight>, the data in the second and ninth blocks of the master store <highlight><bold>6</bold></highlight>-<highlight><bold>1</bold></highlight> has changed since creation of the point in time copy while the data in the first, fifth and sixth data blocks in the other master store <highlight><bold>6</bold></highlight>-<highlight><bold>2</bold></highlight> has changed since the creation of the point in time copy. This is indicated in the shadow bitmaps shown in columns <highlight><bold>82</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>82</bold></highlight><highlight><italic>b </italic></highlight>by virtue of the fact that the corresponding bits are set to 1. Each of these bits is associated with an index or pointer pointing to the address in the shared overflow store at which the replaced data can be located. Accordingly, the point in time copy controller <highlight><bold>4</bold></highlight> can assemble the virtual shadow or point in time copy by accessing the data in the data blocks of the master store <highlight><bold>6</bold></highlight> that have not changed (those for which the shadow bitmap bit is 0) and reading the data from the address in the shared overflow store to which the index points for the data blocks for which the shadow bitmap bit is 1. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> The point in time copy controller <highlight><bold>4</bold></highlight> can recover a master copy from the point in time copy by carrying out the operations described above with reference to <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a</italic></highlight>. In this case the point in time copy controller <highlight><bold>4</bold></highlight> determines the address in the shared overflow store at which a data block to be copied back to the master store at S<highlight><bold>23</bold></highlight> or S<highlight><bold>27</bold></highlight> is located from the index or pointer associated with the corresponding bit in the shadow bitmap. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows one way in which a second host computer, host B, <highlight><bold>12</bold></highlight> may obtain a copy of a point in time copy for subsequent analysis or the storage of data from a point in time copy system which may have any of the formats described above. In this example, the second host computer <highlight><bold>12</bold></highlight> (host B) communicates with the first host computer <highlight><bold>2</bold></highlight> (that is host A) providing the point in time copy system via a communications link <highlight><bold>99</bold></highlight> to request access to a point in time copy. This communications link includes an emulator that causes the first host computer <highlight><bold>2</bold></highlight> to present itself to the second host computer <highlight><bold>12</bold></highlight> as a SCSI (Small Computer Systems Interface) hard disc drive. The second host computer <highlight><bold>12</bold></highlight> thus communicates with the first host computer <highlight><bold>2</bold></highlight> as if it were a disc drive from which data can be read and to which data can be written. The second host computer <highlight><bold>12</bold></highlight> may be a computer system having the functional components shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> while the emulator may be the Sun Target Emulator supplied by Sun Microsystems Inc. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In this arrangement, when host B requests access to a point in time copy, then, if the independent mode was used to create the point in time copy, the point in time copy controller at host A accesses the point in time copy in the shadow store <highlight><bold>8</bold></highlight> and transfers a copy to host B via the communications link <highlight><bold>99</bold></highlight>. If the dependent mode was used to create the point in time copy, the point in time copy controller at host A assembles the point in time copy by combining the unchanged data blocks in the master store with the replaced data blocks stored in the shadow store or overflow store, if provided. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> This system enables host B to work on, and if required modify, a point in time copy provided by host A. If desired, the original or modified version of the point in time copy or shadow can be returned to the point in time copy system via the communications link <highlight><bold>99</bold></highlight> by the point in time copy controller <highlight><bold>4</bold></highlight> effectively treating the modified the point in time copy as a &ldquo;master copy&rdquo; and updating the subsidiary copy as described above with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Upon user request, the master copy at the first host computer could be &ldquo;restored&rdquo;, in this case modified, to agree with the returned point in time copy by the point in time copy controller <highlight><bold>4</bold></highlight> carrying out the operations shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference><highlight><italic>a </italic></highlight>once the point in time copy has been updated with the changes made at the second host computer <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> It will be appreciated that this manner of exporting a point in time copy to host B ties up computing power in the point in time copying system provided by host A. <cross-reference target="DRAWINGS">FIG. 17</cross-reference> shows a functional block diagram similar to <cross-reference target="DRAWINGS">FIG. 16</cross-reference> to illustrate a way of enabling host B to access a point in time copy while avoiding the above problem. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In the system shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, the shadow store is provided by a dual port device, for example a dual port hard disc drive that, in addition to a link L<highlight><bold>1</bold></highlight> to host A, provides a selectable link L<highlight><bold>2</bold></highlight> (shown in dashed lines) to host B that functions such that host A cannot access the shadow store (that is the link to host A is deselected) while host B is accessing the shadow store and vice versa. In this example, host B also provides a point in time copy system and has a point in time controller <highlight><bold>4</bold></highlight>&prime; and a bitmap store <highlight><bold>10</bold></highlight>&prime;. The bitmap store <highlight><bold>10</bold></highlight>&prime; is also a dual port device, for example a dual port disc drive, that in addition to a link L<highlight><bold>3</bold></highlight> to the second host computer <highlight><bold>12</bold></highlight> provides a selectable link L<highlight><bold>4</bold></highlight> (shown in dashed lines) to the first host computer <highlight><bold>2</bold></highlight> so that host A cannot access the bitmap store <highlight><bold>10</bold></highlight>&prime; while host B is accessing it and vice versa. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> When a user at host B wishes to obtain a copy of a point in time copy stored at host A, host B acquires the link to the shadow store <highlight><bold>8</bold></highlight> no that the point in time copy controller <highlight><bold>4</bold></highlight>&prime; at host B can access the shadow store directly and can then perform analysis on, copy and/or modify the accessed point in time copy without having to obtain it via host A. The point in time copy controller <highlight><bold>4</bold></highlight>&prime; at host B records any data block changes by setting the corresponding bits in the bitmap stored in its bitmap store <highlight><bold>10</bold></highlight>&prime; to 1. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> While host B has control of the shadow store, host A can continue to work and any changes to the data stored in the caster store will be recorded by its point in time controller <highlight><bold>4</bold></highlight> setting the appropriate bit in the bitmap in the bitmap store to 1 to indicate that that data block in the master store is not the same as the corresponding data block of the point in time copy. Host A must however wait for control of the shadow store <highlight><bold>8</bold></highlight> to be returned from host B before its point in time copy controller can make a now point in time copy. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> When host A regains control of the dual port shadow store <highlight><bold>8</bold></highlight>, host A also requests and obtains access to the dual port bitmap store <highlight><bold>10</bold></highlight>&prime; so that the point in time copy controller <highlight><bold>4</bold></highlight> of host A can combine the data from the shadow bitmap produced by the point in time copy controller <highlight><bold>4</bold></highlight>&prime; with the data from the shadow bitmap stored in bitmap store <highlight><bold>10</bold></highlight> to provide an accurate indication of how the point in time copy (which may have been modified by the point in time copy controller of host B) in the shadow store differs from the master data in the master store. This results in a bit in the bitmap stored in the bitmap store or host A being set to 1 if the corresponding data block of the copy exported to host B has been modified by host B of course, the bit will not be changed if it is already set at 1 because a change had occurred between the master and the point in time copy before the point in time copy was exported to host B. While host B has control over shadow store <highlight><bold>8</bold></highlight>, the point in time copy controller at host A will continue to monitor when the data processor <highlight><bold>23</bold></highlight> overwrites data blocks in the master store <highlight><bold>6</bold></highlight> and changes to the master made by host A while host B has control over the shadow store will be recorded in the bitmap in the bitmap store <highlight><bold>10</bold></highlight>. The only instance in which a bit in the bitmap in the bitmap store <highlight><bold>10</bold></highlight> will remain set at 0 to indicate that a data block in the master is the same as the corresponding data block in the point in time copy is when host B has not modified the corresponding data block in the exported point in time copy and host A has not modified the corresponding data block in the master store. When a data block has been overwritten in the master store and also in the point in time copy returned by host B, the overwritten data block will be lost. However, combining of the bitmaps provided by host A and host B enables a resynchronisation of the physical store (the disc volumes for example) when the next point in time copy is made at host A. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> In the above example, access by host A to the bitmap store <highlight><bold>10</bold></highlight>&prime; is achieved by providing the bitmap store <highlight><bold>10</bold></highlight>&prime; as a dual port device. As another possibility, a transport mechanism using a standard file copy protocol may be provided between host A and host B as shown by the dashed line <highlight><bold>110</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> In an embodiment described above, the user may elect to create a second point in time copy in a second shadow store with a second bitmap so that two different point in time copier are made at different points in time. As those skilled in the art will appreciate, further shadow stores and bitmaps can be added to the system to enable still further multiple in time copies to be made. These devices may be accessed in sequential fashion. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> In the above embodiments, the master store, shadow store and bitmap store were physically located on the same mass storage device <highlight><bold>22</bold></highlight>. As those skilled in the art will appreciate, each store could comprise one or more physically separate storage devices, such as one or more discs. As another possibility, the entire mass storage device <highlight><bold>22</bold></highlight> may comprise a single physical storage device. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> In the embodiments described above, the first address in the overflow store contains header information which points to the next free address and that identifies the store as an overflow store. As those skilled in the art will appreciate, this header information could be stored elsewhere in the computer storage system, for example, separately in the mass storage device <highlight><bold>22</bold></highlight> or working memory of the host computer. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> Various embodiments described above can be supplied as complete computer storage systems with point in time copy functions. They can also be provided as software upgrades to existing computer storage systems to improve the functionality of their point in time copy capability. As mentioned above, the point in time copy functionality may be pre-stored in the computing apparatus or may be downloaded from a storage medium such as a floppy disc, CDROM or the like or supplied as a signal from another computing apparatus, for example over a network, or any combination of these. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> In the above embodiments, the computer comprised a data processor <highlight><bold>23</bold></highlight> which is operable to retrieve data from the master store, to perform processing on the retrieved data, and to write data back to the master store. As those skilled in the art will appreciate, this data processor could be located external to the host computer. For example, the data processor could be located in another computer on the data network, and data retrieved from the master store could be transmitted to the data processor via the network interface. Data could also be received via the network interface and the data processor could then write the received data to the master store. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> It will be appreciated that the significance of zero and one bits in the shadow and copy bitmaps may be changed. For example, a one in the shadow bitmap may represent that a data block is unchanged and a zero that the data block has been changed. As another possibility, a zero in the copy bitmap may indicate that the corresponding data block has not been copied and a one that the corresponding data block has been copied. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Although methods and systems consistent with the present invention have been described with reference to one or more embodiments thereof, those skilled in the art will know of various changes in form and detail which may be made without departing from the present invention as defined in the appended claims and their full scope of equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for providing a copy of data at a point in time, comprising: 
<claim-text>a data storage device, comprising 
<claim-text>a master store arranged to store blocks of data, </claim-text>
<claim-text>a plurality of subsidiary stores each arranged to store point in time copy data comprising blocks of data copied from said master store at a particular point in time, and </claim-text>
<claim-text>a plurality of bitmap stores each bitmap store being associated with a corresponding different one of the subsidiary stores and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store; and </claim-text>
</claim-text>
<claim-text>a controller configured to generate point in time copies, </claim-text>
<claim-text>the controller being arranged, in response to a request to generate a first point in time copy at a first point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block at the first point in time has already been copied to a first one of the subsidiary stores, and, if not, to copy that data to the first subsidiary store, </claim-text>
<claim-text>the controller further being arranged, in response to a request to generate a second point in time copy at a second point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block at the second point in time has already been copied to a second one of the subsidiary stores, and, if not, to copy that data to the second subsidiary store, </claim-text>
<claim-text>the controller also being arranged to maintain data indicating differences between the master store and each point in time copy by causing data to be stored in the associated bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the controller is arranged, in response to a request to generate a point in time copy at a point in time, also to check whether or not each block of data present in the master store at the point in time has been copied to the subsidiary store and to copy any of those blocks of data not already in the subsidiary store to the subsidiary store to generate the first point in time copy so that the subsidiary store contains a copy of each block of data in the master store. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the controller is arranged to overwrite a point in time copy in response to a user instruction. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the controller is arranged to allow a user to select whether or not the first point in time copy is overwritten with the second point in time copy. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the bitmap store is configured also to store data indicating whether or not each block of data present in the master store at a particular point in time has been copied to the associated subsidiary store, and the controller is arranged to check the data in the bitmap store to determine if the blocks of data need to be copied to the associated subsidiary store to generate the point in time copy. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A system for providing a copy of data at a point in time, comprising: 
<claim-text>a data storage device, comprising 
<claim-text>a plurality of master stores each arranged to store blocks of data, </claim-text>
<claim-text>a plurality of subsidiary stores each associated with a corresponding one of the master stores and each arranged to store point in time copy data comprising blocks of data copied from said master store for a point in time, and </claim-text>
<claim-text>a plurality of bitmap stores each bitmap store being associated with a corresponding different one of the master stores and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store; and </claim-text>
</claim-text>
<claim-text>a controller configured to generate a point in time copy, </claim-text>
<claim-text>the controller being arranged, in response to a request to generate a point in time copy at a point in time, to check, when a data block in a master store is about to be changed, whether the data in that data block for the associated point in time copy has already been copied to the associated subsidiary store, and, if not, to copy that data to the associated subsidiary store, </claim-text>
<claim-text>the controller also being arranged to maintain data indicating differences between the master store and the point in time copy by causing data to be stored in the associated bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the controller is arranged, in response to a request to generate a point in time copy, also to check whether or not each block of data present in the corresponding master store at the point in time has been copied to the corresponding subsidiary store and to copy any of those blocks of data not already in the subsidiary store to that subsidiary store to cause each subsidiary store to contain a copy of each block of data in the corresponding master store. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the controller is arranged to generate the point in time copies for the different master stores for the same point in time. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the plurality of subsidiary stores are replaced by a shared overflow store arranged to store point in time copy data comprising blocks of data copied from each of said master stores at particular points in time, such that: 
<claim-text>each bitmap store being associated with a corresponding different one of the master stores and configured to store data indicating when a data block of a master store differs from a corresponding data block stored in the overflow store and to which blocks in the overflow store the blocks of data from each of said master stores have been copied, and </claim-text>
<claim-text>the controller being arranged, in response to a request to generate a point in time copy at a point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the overflow store, and, if not, to copy that data to the overflow store and to store in the associated bitmap data representing the address of the block in the overflow store to which the data was copied. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the controller is arranged, in response to a request to generate a point in time copy, also to check whether or not each block of data present in the master store at the point in time has been copied to the overflow store and to copy any of those blocks of data not already in the overflow store to the overflow store so that the overflow store contains a copy of each block of data. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A system for providing a copy of data at a point in time, comprising; 
<claim-text>a data storage device, comprising 
<claim-text>a master store arranged to store blocks of data, </claim-text>
<claim-text>a subsidiary store arranged to store point in time copy data comprising blocks of data copied from said master store for the same particular point in time, wherein the master store is capable of storing more blocks of data than the subsidiary store, and </claim-text>
<claim-text>a bitmap store associated with the master store and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the subsidiary store and to which blocks in the subsidiary store the blocks of data from said master store have been copied; and </claim-text>
</claim-text>
<claim-text>a controller configured to generate a point in time copy, </claim-text>
<claim-text>the controller being arranged, in response to a request to generate a point in time copy at a point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the subsidiary store, and, if not, to copy that data to the subsidiary store and to store in the bitmap store address data representing the address of the block in the subsidiary store to which the data was copied, </claim-text>
<claim-text>the controller also being arranged to maintain data indicating differences between the master store and the point in time copy by causing data to be stored in the bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising an overflow store arranged to store, when said subsidiary store is full, blocks of data copied from said master store for the particular point in time, 
<claim-text>the controller being arranged, in response to a request to generate a point in time copy at a point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to one of the subsidiary store or the overflow store, and, if not, to copy that data to the subsidiary store, or if the subsidiary store is full to the overflow store, and to store in the bitmap store data representing the address of the block in the subsidiary or overflow store to which the data was copied. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A system for providing a copy of data at a point in time, comprising: 
<claim-text>a first computer processing device; </claim-text>
<claim-text>a second computer processing device; </claim-text>
<claim-text>a data storage device coupled to the first computer processing device and comprising a master store arranged to store blocks of data, a subsidiary store arranged to store point in time copy data comprising blocks of data copied from said master store at a particular point in time and a first bitmap store configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store; </claim-text>
<claim-text>a selectable coupling delectably coupling the second computer processing device to the subsidiary store to enable the second computer processing device to access a point in time copy; and </claim-text>
<claim-text>a second bitmap store coupled to the second computer processing device and configured to store data indicating when a data block of a point in time copy accessed by the second computer processing device has been modified, wherein when the second computer processing device is selectably coupled to the subsidiary store, the first computer processing device cannot access the subsidiary store. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the controller is arranged, in response to a request to restore a master copy from one of the first and second point in time copies, to identify from the bitmap store for that point in time copy any data block in the master store that differs from the corresponding data block in that point in time copy and to copy from the associated subsidiary store to the master store the or each identified data block to restore the point in time copy as a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each bitmap store comprises a data bitmap configured to store, for each data block of the master store, data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap arranged to store copy data for each data block of the master store, the copy bitmap being configured such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and wherein the controller is arranged, in response to a request to restore a master copy from one of the first and second point in time copies, to copy the data in the associated data bitmap to the associated copy bitmap, to identify any data block associated with a copy bit and, for the or each identified data block, to copy the data block from the associated subsidiary store to the master store and to reset the copy bit after the data block has been copied back to the master store. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein each bitmap store comprises a data bitmap configured to store, for each data block of the master store, data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap configured to store copy data for each data block of the master store, and the controller is arranged, in response to a request to restore a master copy from one of the first and second point in time copies, to set each bit in the copy bitmap as a copy bit representing that the data block should be copied, to copy each data block in the associated subsidiary store to the master store, to reset a copy bit after the corresponding data block has been copied back to the master store and to determine that the one of the first and second point in time copies has been restored as a master copy in the master store when all the copy bits in the associated copy bitmap have been reset. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the controller is arranged, after a point in time copy has been created, to update the data in the bitmap store indicating differences between the master store and each subsidiary store each time a data block in the master store is overwritten after creation of a point in time copy in that subsidiary store and the controller is also configured, in response to a request to create a subsequent point in time copy, to determine from the data in the bitmap store indicating differences between the master store and the subsidiary store any data block in the master store that differs from the corresponding data block in that subsidiary store and to copy each such data block from the master store to that subsidiary store to create the subsequent point in time copy. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the controller is arranged, in response to a request to restore a master copy from a point in time copy, to identify from the bitmap store for the point in time copy any data block in the corresponding master store that differs from the corresponding data block in the point in time copy and to copy any such identified data block from the associated subsidiary store to the corresponding master store to restore a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein each bitmap store comprises a data bitmap configured to store, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap configured to store copy data for each data block of the master store, the copy bitmap being configured such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and wherein the controller is arranged, in response to a request to restore a master copy from a point in time copy, to copy the data in the associated data bitmap to the associated copy bitmap, the controller also being arranged to copy from the associated subsidiary store to the master store any data block associated with such a copy bit, to reset a copy bit after the corresponding data block has been copied back to the master store and to determine that a master copy has been restored in the master store when all the copy bits in the associated copy bitmap have been reset. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein each bitmap store comprises a data bitmap configured to store, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated subsidiary store and a copy bitmap configured to store copy data for each data block of the master store, and the controller is arranged, in response to a request to restore a master copy from a point in time copy, to set each bit in the copy bitmap as a copy bit representing that the data block should be copied, to copy each data block in the associated subsidiary store to the master store, to reset a copy bit after the corresponding data block has been copied back to the master store and to determine that a master copy has been restored in the master store when all the copy bits in the associated copy bitmap have been reset. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the controller is arranged, after a point in time copy has been created, to update the data indicating differences between a master store and a corresponding subsidiary store each time a data block in the master store is overwritten after creation of a point in time copy using that subsidiary store and the controller is also configured, in response to a request to create a subsequent point in time copy, to determine from the data indicating differences between the master store and the subsidiary store any data block in the master store that differs from the corresponding data block in that subsidiary store and to copy each such data block from the master store to that subsidiary store to create the subsequent point in time copy. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the controller is arranged, in response to a request to restore a master copy from a point in time copy, to identify from the data stored in the bitmap store any data block in the master store that differs from the corresponding data block in the point in time copy, and, for each such identified data block, to determine from the bitmap store the address data of the data block in the subsidiary store and to copy the data block from the determined address in the subsidiary store to the master store to restore the point in time copy as a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the bitmap store comprises a data bitmap configured to store, for each data block or the master store, data indicating whether or not that data block differs from the corresponding data block of a point in time copy and a copy bitmap configured to store copy data for each data block of the master store such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and the controller is arranged, in response to a request to restore a master copy from a point in time copy, to copy the data in the data bitmap to the copy bitmap, to identify any data block associated with a copy bit and, for the or each such identified data block, to determine from the bitmap store the address data of the data block in the subsidiary store, to copy the data block from the determined address in the subsidiary store to the master store, and to reset the copy bit after the data block has bean copied back to the master store. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the controller is arranged to overwrite a point in time copy in response to a user instruction. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the controller is arranged to allow a user to select whether or not the first point in time copy is overwritten with the second point in time copy. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the controller is arranged to generate the point in time copies for the different master stores for the same point in time. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the plurality of subsidiary stores are replaced by a shared overflow store arranged to store point in time copy data comprising blocks of data copied from each of said master stores at particular points in time, such that: 
<claim-text>each bitmap store being associated with a corresponding different one of the master stores and configured to store data indicating when a data block of a master store differs from a corresponding data block stored in the overflow store and to which blocks in the overflow store the blocks of data from each of said master stores have been copied, and </claim-text>
<claim-text>the controller being arranged, in response to a request to generate a point in time copy at a point in time, to check, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the overflow store, and, if not, to copy that data to the overflow store and to store in the associated bitmap data representing the address of the block in the overflow store to which the data was copied. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A method of making a point in time copy using a computer processing system, the method comprising: 
<claim-text>accessing a data storage device comprising a master store storing blocks of data, a plurality of subsidiary stores each arranged to store point in time copy data comprising blocks of data copied from said master store at a particular point in time and a plurality of bitmap stores each bitmap store being associated with a corresponding different one of the subsidiary stores and being arranged to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store; </claim-text>
<claim-text>generating a first point in time copy at a first point in time by checking, when a data block in the master store is about to be changed, whether the data in that data block at the first point in time has already been copied to a first one of the subsidiary stores, and, if not, copying that data to the first subsidiary store; </claim-text>
<claim-text>generating a second point in time copy at a second point in time by checking, when a data block in the master store is about to be changed, whether the data in that data block at the second point in time has already been copied to a second one of the subsidiary stores, and, if not, copying that data to the second subsidiary store; and </claim-text>
<claim-text>maintaining data indicating differences between the master store and each point in time copy by causing data to be stored in the associated bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, further comprising, in response to a request to generate a point in time copy at a point in time, also checking whether or not each block of data present in the master store at the point in time has been copied to the subsidiary store and copying any of those blocks of data not already in the subsidiary store to the subsidiary store to generate the first point in time copy go that the subsidiary store contains a copy of each block of data in the master store. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, comprising overwriting a point in time copy in response to a user instruction. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, comprising allowing a user to select whether or not the first point in time copy is overwritten with the second point in time copy. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the bitmap store is configured also to store data indicating whether or not each block of data present in the master store at a particular point in time has been copied to the associated subsidiary store, and the method comprises checking the data in the bitmap store to determine if the blocks of data need to be copied to the associated subsidiary store to generate the point in time copy. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A method of making a point in time copy, the method comprising a computer processing system: 
<claim-text>accessing a data storage device comprising a plurality of master stores each storing blocks of data, a plurality of subsidiary stores each associated with a corresponding one of the master stores and each arranged to store point in time copy data comprising blocks of data copied from said master store for a point in time, and a plurality of bitmap stores each bitmap store being associated with a corresponding different one of the master stores and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store; </claim-text>
<claim-text>generating a point in time copy at a point in time by checking, when a data block in a master store is about to be changed, whether the data in that data block for the associated point in time copy has already been copied to the associated subsidiary store, and, if not, copying that data to the associated subsidiary store; and </claim-text>
<claim-text>maintaining data indicating differences between the master store and the point in time copy by causing data to be stored in the associated bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, which comprises also checking whether or not each block of data present in the corresponding master store at the point in time has been copied to the corresponding subsidiary store and copying any of those blocks of data not already in the subsidiary store to that subsidiary store, so that each subsidiary store contains a copy of each block of data in the corresponding master store. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A method system according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, which comprises generating the point in time copies for the different master stores for the same point in time. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the plurality of subsidiary stores are replaced by a shared overflow store arranged to store point in time copy data comprising blocks of data copied from each of said master stores at particular points in time, such that each bitmap store is associated with a corresponding different one of the master stores and is configured to store data indicating when a data block of a master store differs from a corresponding data block stored in the overflow store and to which blocks in the overflow store the blocks of data from each of said master stores have been copied, and the method further comprises checking, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the overflow store, and, if not, copying that data to the overflow store and storing in the associated bitmap data representing the address of the block in the overflow store to which the data was copied. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, which comprises also checking whether or not each block of data present in the master store at the point in time has been copied to the overflow store and copying any of those blocks of data not already in the overflow store to the overflow store so that the overflow store contains a copy of each block of data. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. A method of making a point in time copy, the method comprising a computer processing system: 
<claim-text>accessing a data storage device comprising a master store storing blocks of data, a subsidiary store arranged to store point in time copy data comprising blocks of data copied from said master store for the same particular point in time, wherein the master store is capable of storing more blocks of data than the subsidiary store, and a bitmap store associated with the master store and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the subsidiary store and to which blocks in the subsidiary store the blocks of data from said master store have been copied; </claim-text>
<claim-text>generating a point in time copy by checking, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the subsidiary store, and, if not, copying that data to the subsidiary store and storing in the bitmap store data representing the address of the block in the subsidiary store to which the data was copied; and </claim-text>
<claim-text>maintaining data indicating differences between the master store and the point in time copy by causing data to be stored in the bitmap store to indicate when a data block in the master store differs from a corresponding data block of the point in time copy. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the data storage device has an overflow store arranged to store, when said subsidiary store is full, blocks of data copied from said master store for the particular point in time and the method comprises checking, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to one of the subsidiary store or the overflow store, and, if not, copying that data to the subsidiary store, or if the subsidiary store is full to the overflow store, and storing in the bitmap store data representing the address of the block in the subsidiary or overflow store to which the data was copied. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. A method of maintaining a point in time copy using a computer system comprising a first computer processing device and a second computer processing device, the method comprising: 
<claim-text>the first computer processing device accessing a master store storing blocks of data, storing a point in time copy data comprising blocks of data copied from said master store at a particular point in time in a subsidiary store, and storing data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store in a first bitmap store; and </claim-text>
<claim-text>the second computer processing device selectably coupling to the subsidiary store in place of the first computer processing device to access the point in time copy, and storing data indicating when a data block of a point in time copy has been modified in a second bitmap store coupled to the second computer processing device and configured to accessed by the second computer processing device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, further comprising the computer processing system responding to a request to restore a master copy from one of the first and second point in time copies by identifying from the bitmap store for that point in time copy any data block in the master store that differs from the corresponding data block in that point in time copy and copying from the associated subsidiary store to the master store the or each identified data block to restore the point in time copy as a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>, wherein the computer processing system accesses a data storage device in which each bitmap store comprises a data bitmap storing, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap arranged to store copy data for each data block of the master store, the copy bitmap being configured such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and the method further comprises the computer processing system responding to a request to restore a master copy from one of the first and second point in time copies by copying the data in the associated data bitmap to the associated copy bitmap, identifying any data block associated with a copy bit and, for the or each identified data block, copying the data block from the associated subsidiary store to the master store and resetting the copy bit after the data block has been copied back to the master store. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the computer processing system accesses a data storage device in which each bitmap store comprises a data bitmap storing, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap configured to store copy data for each data block of the master store, and the method further comprises the computer processing system responding to a request to restore a master copy from one of the first and second point in time copies by setting each bit in the copy bitmap as a copy bit representing that the data block should be copied, copying each data block in the associated subsidiary store to the master store, resetting a copy bit after the corresponding data block has been copied back to the master store and determining that the one of the first and second point in time copies has been restored as a master copy in the master store when all the copy bits in the associated copy bitmap have been reset. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, wherein the method further comprises the computer processing system, after a point in time copy has been created, updating the data in the bitmap store indicating differences between the master store and each subsidiary store each time a data block in the master store is overwritten after creation of a point in time copy in that subsidiary store and, in response to a request to create a subsequent point in time copy, determining from the data in the bitmap store indicating differences between the master store and the subsidiary store any data block in the master store that differs from the corresponding data block in that subsidiary store and copying each such data block from the master store to that subsidiary store to create the subsequent point in time copy. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, the method further comprises the computer processing system responding to a request to restore a master copy from a point in time copy by identifying from the bitmap store for the point in time copy any data block in the corresponding master store that differs from the corresponding data block in the point in time copy and copying any such identified data block from the associated subsidiary store to the corresponding master store to restore a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the computer processing system accesses a data storage device in which each bitmap store comprises a data bitmap storing, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated point in time copy and a copy bitmap configured to store copy data for each data block of the master store, the copy bitmap being configured such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and the method further comprises the computer processing system responding to a request to restore a master copy from a point in time copy by copying the data in the associated data bitmap to the associated copy bitmap, copying from the associated subsidiary store to the master store any data block associated with such a copy bit, and resetting a copy bit after the corresponding data block has been copied back to the master store. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein the computer processing system accesses a data storage device in which each bitmap store comprises a data bitmap storing, for each data block of the master store, the data indicating whether or not that data block differs from the corresponding data block of the associated subsidiary store and a copy bitmap configured to store copy data for each data block of the master store, and the method further comprises the computer processing system responding to a request to restore a master copy from a point in time copy by setting each bit in the copy bitmap as a copy bit representing that the data block should be copied, copying each data block in the associated subsidiary store to the master store, resetting a copy bit after the corresponding data block has been copied back to the master store and determining that a master copy has been restored in the master store when all the copy bits in the associated copy bitmap have been reset. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, further comprising the computer processing system, after a point in time copy has been created, updating the data indicating differences between a master store and a corresponding subsidiary store each time a data block in the master store is overwritten after creation of a point in time copy using that subsidiary store and, in response to a request to create a subsequent point in time copy, determining from the data indicating differences between the master store and the subsidiary store any data block in the master store that differs from the corresponding data block in that subsidiary store and copying each such data block from the master store to that subsidiary store to create the subsequent point in time copy. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, further comprising the computer processing system responding to a request to restore a master copy from a point in time copy by identifying from the data stored in the bitmap store any data block in the master store that differs from the corresponding data block in the point in time copy, and, for each such identified data block, determining from the bitmap store the address data of the data block in the subsidiary store and copying the data block from the determined address in the subsidiary store to the master store to restore the point in time copy as a master copy in the master store. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>, wherein the computer processing system accesses a data storage device in which the bitmap store comprises a data bitmap storing, for each data block of the master store, data indicating whether or not that data block differs from the corresponding data block of a point in time copy and a copy bitmap configured to store copy data for each data block of the master store such that a bit in the data bitmap indicating that a data block in the master store differs from the corresponding data block of the associated point in time copy would represent in the copy bitmap a copy bit indicating that the data block should be copied, and the method further comprises the computer processing system responding to a request to restore a master copy from a point in time copy by copying the data in the data bitmap to the copy bitmap, identifying any data block associated with a copy bit and, for the or each such identified data block, determining from the bitmap store the address data of the data block, copying the data block from the determined address in the subsidiary store to the master store, and resetting the copy bit after the data block has been copied back to the master store. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, comprising overwriting a point in time copy in response to a user instruction. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference>, comprising allowing a user to select whether or not the first point in time copy is overwritten with the second point in time copy. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. A method system according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, which comprises generating the point in time copies for the different master stores for the same point in time. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00033">claim 34</dependent-claim-reference>, wherein the plurality of subsidiary stores are replaced by a shared overflow store arranged to store point in time copy data comprising blocks of data copied from each of said master stores at particular points in time, such that each bitmap store is associated with a corresponding different one of the master stores and is configured to store data indicating when a data block of a master store differs from a corresponding data block stored in the overflow store and to which blocks in the overflow store the blocks of data from each of said master stores have been copied, and the method further comprises checking, when a data block in the master store is about to be changed, whether the data in that data block for the point in time copy has already been copied to the overflow store, and, if not, copying that data to the overflow store and storing in the associated bitmap data representing the address of the block in the overflow store to which the data was copied. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. A system according to <dependent-claim-reference depends_on="CLM-00055">claim 54</dependent-claim-reference>, which comprises also checking whether or not each block of data present in the master store at the point in time has been copied to the overflow store and copying any of those blocks of data not already in the overflow store to the overflow store so that the overflow store contains a copy of each block of data. </claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. A computer storage medium storing processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. A computer storage medium storing processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. A computer storage medium storing processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. A computer storage medium storing processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. A signal comprising processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00022">claim 28</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. A signal comprising processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. A signal comprising processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00033">claim 38</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00067">
<claim-text><highlight><bold>67</bold></highlight>. A signal comprising processor implementable instructions for programming a processor to carry out a method in accordance with <dependent-claim-reference depends_on="CLM-00044">claim 40</dependent-claim-reference>. </claim-text>
</claim>
<claim id="CLM-00068">
<claim-text><highlight><bold>68</bold></highlight>. A data storage device, comprising: 
<claim-text>a master store arranged to store blocks of data; </claim-text>
<claim-text>a first subsidiary stores arranged to store first point in time copy data comprising blocks of data copied from said master store at a first point in time; </claim-text>
<claim-text>a second subsidiary stores arranged to store second point in time copy data comprising blocks of data copied from said master store at a second point in time; and </claim-text>
<claim-text>a plurality of bitmap stores each bitmap store being associated with a corresponding different one of the subsidiary stores and being configured to store data indicating when a data block of the master store differs from a corresponding data block stored in the associated subsidiary store. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00069">
<claim-text><highlight><bold>69</bold></highlight>. A data storage device according to claim <highlight><bold>68</bold></highlight>, wherein the bitmap store is configured also to store data indicating whether or not each block of data present in the master store at a particular point in time has been copied to the associated subsidiary store.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>9</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005235A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005235A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005235A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005235A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005235A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005235A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005235A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005235A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005235A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005235A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005235A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005235A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005235A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005235A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005235A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005235A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005235A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005235A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005235A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030005235A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030005235A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
