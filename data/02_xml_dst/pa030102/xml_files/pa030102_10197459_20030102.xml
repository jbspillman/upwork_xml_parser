<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005227A1-20030102-D00000.TIF SYSTEM "US20030005227A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00001.TIF SYSTEM "US20030005227A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00002.TIF SYSTEM "US20030005227A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00003.TIF SYSTEM "US20030005227A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00004.TIF SYSTEM "US20030005227A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00005.TIF SYSTEM "US20030005227A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00006.TIF SYSTEM "US20030005227A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00007.TIF SYSTEM "US20030005227A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00008.TIF SYSTEM "US20030005227A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00009.TIF SYSTEM "US20030005227A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00010.TIF SYSTEM "US20030005227A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005227A1-20030102-D00011.TIF SYSTEM "US20030005227A1-20030102-D00011.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005227</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10197459</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020718</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>119000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>154000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Storage control device and storage control method</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10197459</doc-number>
<kind-code>A1</kind-code>
<document-date>20020718</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>PCT/JP00/00234</doc-number>
<document-date>20000119</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>UNKNOWN</parent-status>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Iwao</given-name>
<family-name>Yamazaki</family-name>
</name>
<residence>
<residence-non-us>
<city>Kawasaki</city>
<country-code>JP</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>FUJITSU LIMITED</organization-name>
<address>
<city>Kawasaki</city>
<country>
<country-code>JP</country-code>
</country>
</address>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>STAAS &amp; HALSEY LLP</name-1>
<name-2></name-2>
<address>
<address-1>700 11TH STREET, NW</address-1>
<address-2>SUITE 500</address-2>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20001</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention is related to a storage control device and a storage control method including a plurality of store buffers and storing and fetching with respect to the store buffers, and it is an object of the present invention to provide the storage control device and the storage control method in which store data can be effectively read. Accordingly, a predetermined store buffer is selected from the plurality of store buffers by corresponding to identification in a data issue request in which the identification is provided to identify an issue order in response to an instruction, and predetermined data are output from the predetermined store buffer by corresponding to an address. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to storage control devices and storage control methods, and more particularly to a storage control device and a storage control method that include a plurality of store buffers and store or fetch with respect to the plurality of store buffers. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> There is a processing unit to which a store buffer is provided to temporarily maintain data that is to be written to cache memory or main memory. A store process can be completed by providing the store buffer before a preparation of writing the data to cache memory or main memory. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In such the processing unit, when it is detected that store data in the store buffer, which has not completed writing data to cache memory or main memory, is subjected to a fetch for a following process, a retrieving part for retrieving data to be fetched from the store buffer retrieves the store data in the store buffer. Using the retrieving part, a fetch request can be completed before the store data is written in the cache memory or the main memory. </paragraph>
</section>
<section>
<heading lvl="1">DESCRIPTION OF RELATED ART </heading>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In the case described above, to check whether or not one store area indicated by one fetch request overlaps with another store area indicated by another fetch request, the fetch request, a store request, an address, and a byte mark to be processed are checked. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Accordingly, if it is more required to execute a plurality of instructions in response to a request for improving a process performance of a device, a plurality of store requests or a plurality of fetch requests with respect to the same area at the same time occurs. In this state, when a store buffer is selected to fetch by an address and a byte mark, data in a different store buffer are required for each of the fetch requests in a case in which each of the fetch requests indicates the same area to fetch. Thus, it is difficult to accurately indicate the store buffer storing data to be fetched for each of the fetch requests at the same time. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Accordingly, in a state in which there are a plurality of store requests and a plurality of fetch requests that operate on the same storage area, there is a problem in that in order to properly process a current fetch request, the current fetch request is required to wait until other preceding store requests are actually processed, that is, until only one preceding store request remains in the store buffer and it completes writing to cache memory or main memory. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A processing unit according to the present invention includes a plurality of store buffers for temporarily storing store data, selects a predetermined store buffer from the plurality of store buffers by corresponding to identification in a data issue request when the data issue request, in which the identification for identifying an issue order in response to an instruction is provided, is supplied, and outputs predetermined data from the predetermined buffer by corresponding to the address. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> According to the present invention, in the processing unit, even in a state in which a plurality of store requests and a plurality of fetch requests simultaneously indicate the same store area to operate on, it is possible to fetch data from the store buffer by detecting the identification provided in the instruction. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Moreover, a process is conducted by a byte mark unit of the store buffer but not by a store buffer unit, so that in a state in which the plurality of store requests and the plurality of fetch requests simultaneously indicate the same store area to operate on, fetch data can be correctly created over the plurality of store buffers by properly combining the store buffers to select for each fetch request.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing a configuration according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing a configuration of a store unit according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a table showing a data configuration of a store buffer according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram for explaining a method for generating instruction identification according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram showing a configuration of a storage controlling part according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing a checking circuit according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram showing a determining circuit according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram showing a configuration of SFB-LIMIT-IID detecting circuit according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a diagram for explaining an operation according to an embodiment of the present invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a diagram for explaining an operation according to an embodiment of the present invention; and </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a timing chart according to an embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram showing a configuration according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A processing unit <highlight><bold>1</bold></highlight> includes an instruction unit <highlight><bold>2</bold></highlight>, a store unit <highlight><bold>3</bold></highlight>, and an arithmetic unit <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The instruction unit <highlight><bold>2</bold></highlight> analyzes an instruction, requests necessary data for the store unit <highlight><bold>3</bold></highlight>, and also controls the arithmetic unit <highlight><bold>4</bold></highlight>. The store unit <highlight><bold>3</bold></highlight> processes and manages data based on the request from the instruction unit <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Data are supplied from the store unit <highlight><bold>3</bold></highlight> to the arithmetic unit <highlight><bold>4</bold></highlight>, and the arithmetic unit <highlight><bold>4</bold></highlight> conducts an arithmetic operation based on an instruction from the instruction unit <highlight><bold>2</bold></highlight> with respect to the data from the store unit <highlight><bold>3</bold></highlight>. An arithmetic operation result by the arithmetic unit <highlight><bold>4</bold></highlight> is maintained by the store unit <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Next, the store unit <highlight><bold>3</bold></highlight> will be described in detail. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram showing a configuration of the store unit according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The store unit <highlight><bold>3</bold></highlight> includes a store buffer part <highlight><bold>11</bold></highlight>, a cache memory <highlight><bold>12</bold></highlight>, a move-in-data (MIB) buffer <highlight><bold>13</bold></highlight>, a bypass-data-register (BPDR) <highlight><bold>14</bold></highlight>, a storage controlling part <highlight><bold>15</bold></highlight>, and a data selecting circuit <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The store buffer part <highlight><bold>11</bold></highlight> includes store buffers (store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n), and each of the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n stores data. The store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n store data fetched based on the instruction from the instruction unit <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The cache memory <highlight><bold>12</bold></highlight>, the move-in-data buffer <highlight><bold>13</bold></highlight>, and the bypass-data-register <highlight><bold>14</bold></highlight> temporarily maintain data to be used by the arithmetic unit <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n will be described in detail. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a table showing a configuration of the store buffers according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> The store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n each includes an instruction identification storage part <highlight><bold>21</bold></highlight>, a byte mark storage part <highlight><bold>22</bold></highlight>, an address storage part <highlight><bold>23</bold></highlight>, a data storage <highlight><bold>24</bold></highlight>, a store fetch bypass upper limitation instruction identification storage part <highlight><bold>25</bold></highlight>, and a store fetch bypass upper instruction identification valid information storage part <highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> The instruction identification storage part <highlight><bold>21</bold></highlight> stores an instruction identification (IID: Instruction ID). The instruction identification IID is information for identifying an execution order of each request. The instruction identification IID is provided by the instruction unit <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The instruction identification IID will be described in detail. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a diagram for explaining a method for generating instruction identification according to an embodiment of the present invention. An instruction &ldquo;MVC&rdquo; will be described. For example, the instruction &ldquo;MVC&rdquo; is described as &ldquo;MVC 190 ADR1 ADR2&rdquo;. The instruction &ldquo;MVC&rdquo; shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an instruction for moving data having a 190-byte operand length from an address ADR<highlight><bold>1</bold></highlight> to an address ADR<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, fetches FETCH <highlight><bold>1</bold></highlight> through FETCH m and stores STORE <highlight><bold>1</bold></highlight> through STORE m are alternately requested so that the instruction &ldquo;MVC&rdquo; is executable. The fetches FETCH <highlight><bold>1</bold></highlight> through FETCH m are instructions for fetching data from the addresses ADR<highlight><bold>1</bold></highlight>-<highlight><bold>1</bold></highlight> through ADR-m. The stores STORE <highlight><bold>1</bold></highlight> through STORE m are instructions for storing data at the addresses ADR<highlight><bold>2</bold></highlight>-<highlight><bold>1</bold></highlight> through ADR<highlight><bold>2</bold></highlight>-m. In this case, when the identification identifying the instruction &ldquo;MVC&rdquo; is &ldquo;0&rdquo;, the identifications IID <highlight><bold>1</bold></highlight> through 2 m are given to the fetches FETCH <highlight><bold>1</bold></highlight> through FETCH m and stores STORE <highlight><bold>1</bold></highlight> through STORE m constituting the instruction &ldquo;MVC&rdquo; in the request order. That is, the identification IID corresponds to the execution order of the instructions. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> The byte mark storage part <highlight><bold>22</bold></highlight> stores a byte mark. For example, the byte mark BMK consists of information of 16 bits that identifies a store location by an address. The address store part <highlight><bold>23</bold></highlight> stores the address. The address is information identifying the store location of the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The data store part <highlight><bold>24</bold></highlight> stores data. The data are data to be stored. The store fetch bypass upper limitation instruction identification storage part <highlight><bold>25</bold></highlight> stores a store fetch bypass upper limit instruction identification (SFB-LIMIT-IID). The store fetch bypass upper limit instruction identification SFB-LIMIT-IID is identification information for identifying data in which an overlap is detected, and corresponds to the identification IID of overlapped data. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The storage controlling part <highlight><bold>15</bold></highlight> controls store buffer part <highlight><bold>11</bold></highlight>, the cache memory <highlight><bold>12</bold></highlight>, the move-in-data buffer <highlight><bold>13</bold></highlight>, the bypass data register <highlight><bold>14</bold></highlight>, and the fetch data selecting circuit <highlight><bold>16</bold></highlight> in response to instructions from the instruction unit <highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The storage controlling part <highlight><bold>15</bold></highlight> will be described in detail. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram showing the configuration of the storage controlling part according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The storage controlling part <highlight><bold>15</bold></highlight> includes a fetch port <highlight><bold>31</bold></highlight>, a translation look-aside buffer (TLB; Translation Look-aside Buffer) <highlight><bold>32</bold></highlight>, a tag buffer <highlight><bold>33</bold></highlight>, a tag match detecting address comparator <highlight><bold>34</bold></highlight>, an absolute address register <highlight><bold>35</bold></highlight>, a store address selecting circuit <highlight><bold>36</bold></highlight>, a store data selecting circuit <highlight><bold>37</bold></highlight>, a checking circuit <highlight><bold>38</bold></highlight>, judging circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n, and a TLB detecting address comparator <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The fetch port <highlight><bold>31</bold></highlight> maintains an instruction from the instruction unit <highlight><bold>2</bold></highlight>. The instruction maintained by the fetch port <highlight><bold>31</bold></highlight> is supplied to the translation look-aside buffer <highlight><bold>32</bold></highlight>, the tag buffer <highlight><bold>33</bold></highlight>, and the cache memory <highlight><bold>12</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The translation look-aside buffer <highlight><bold>32</bold></highlight> converts a fetch logical address to an absolute address. The absolute address converted by the translation look-aside buffer <highlight><bold>32</bold></highlight> is supplied to the tag match detecting address comparator <highlight><bold>34</bold></highlight>, the absolute address register <highlight><bold>35</bold></highlight>, and the checking circuit <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The tag buffer <highlight><bold>33</bold></highlight> converts a fetch address to a tag address. The tag address converted by the tag buffer <highlight><bold>33</bold></highlight> is supplied to the tag match detecting address comparator <highlight><bold>34</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The cache memory <highlight><bold>12</bold></highlight> outputs data corresponding to the fetch logical address. The data output from the cache memory <highlight><bold>12</bold></highlight> are supplied to the fetch data selecting circuit <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The tag match detecting address comparator <highlight><bold>34</bold></highlight> compares the absolute address with the tag address, and detects a consistency or an inconsistency between the absolute address and the tag address. A comparison result of the tag match detecting address comparator <highlight><bold>34</bold></highlight> is supplied to the checking circuit <highlight><bold>38</bold></highlight> and the fetch data selecting circuit <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The absolute address register <highlight><bold>35</bold></highlight> maintains the absolute address converted by the translation look-aside buffer <highlight><bold>32</bold></highlight>. The absolute address maintained by the absolute address register <highlight><bold>35</bold></highlight> is supplied to the checking circuit <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The store address selecting circuit <highlight><bold>36</bold></highlight> controls to output an address based on a judgment result of the judging circuit <highlight><bold>39</bold></highlight>. The address selected by the store address selecting circuit <highlight><bold>36</bold></highlight> is supplied to the checking circuit <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The store data selecting circuit <highlight><bold>37</bold></highlight> controls to output data based on the judgment result of the judging circuit <highlight><bold>39</bold></highlight>. The data selected by the store data selecting circuit <highlight><bold>37</bold></highlight> are supplied to the fetch data selecting circuit <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> In addition, the address is supplied from the translation look-aside buffer <highlight><bold>32</bold></highlight> and the fetch port <highlight><bold>31</bold></highlight> to the TLB detecting address comparator <highlight><bold>40</bold></highlight>. The TLB detecting address comparator <highlight><bold>40</bold></highlight> compares the logical address from the translation look-aside buffer <highlight><bold>32</bold></highlight> with the logical address which is supplied from the fetch port <highlight><bold>31</bold></highlight> and is not used for a TLB search, and detects the consistency/inconsistency between both addresses. The comparison result of the TLB detecting address comparator <highlight><bold>40</bold></highlight> is supplied to the checking circuit <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The checking circuit <highlight><bold>38</bold></highlight> will be described in detail. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram showing the configuration of the checking circuit according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> The checking circuit <highlight><bold>38</bold></highlight> includes an absolute address consistency checking circuit <highlight><bold>41</bold></highlight>, a single fetch candidate checking circuit <highlight><bold>42</bold></highlight>, and a fetch data validity condition detecting circuit <highlight><bold>43</bold></highlight>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> The absolute address is supplied from the absolute address register <highlight><bold>35</bold></highlight> to the absolute address consistency checking circuit <highlight><bold>41</bold></highlight> and also the store address is supplied from the store address selecting circuit <highlight><bold>36</bold></highlight> to the absolute address consistency checking circuit <highlight><bold>41</bold></highlight>. The absolute address consistency checking circuit <highlight><bold>41</bold></highlight> compares the absolute address from the absolute address register <highlight><bold>35</bold></highlight> with the store address from the store address selecting circuit <highlight><bold>36</bold></highlight>, and checks the consistency or inconsistency. A check result of the absolute address consistency checking circuit <highlight><bold>41</bold></highlight> is supplied to the fetch data validity condition detecting circuit <highlight><bold>43</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Check results of the n checking circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n are supplied to the single fetch candidate checking circuit <highlight><bold>42</bold></highlight>. The single fetch candidate checking circuit <highlight><bold>42</bold></highlight> checks whether or not a fetch candidate is single based on the check results of the n checking circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The comparison result of the TLB detecting address comparator <highlight><bold>40</bold></highlight>, a check result of the absolute address consistency checking circuit <highlight><bold>41</bold></highlight>, and the single fetch candidate checking circuit <highlight><bold>42</bold></highlight> are supplied to the fetch data validity condition detecting circuit <highlight><bold>43</bold></highlight>. The fetch data validity condition detecting circuit <highlight><bold>43</bold></highlight> outputs information showing that the fetch data are valid when all of the comparison result of the TLB detecting address comparator <highlight><bold>40</bold></highlight>, the check result of the absolute address consistency checking circuit <highlight><bold>41</bold></highlight>, and the single fetch candidate checking circuit <highlight><bold>42</bold></highlight> are valid. An output of the absolute address consistency checking circuit <highlight><bold>41</bold></highlight> is supplied to the instruction unit <highlight><bold>2</bold></highlight> and the arithmetic unit <highlight><bold>3</bold></highlight>. The instruction unit <highlight><bold>2</bold></highlight> and the arithmetic unit <highlight><bold>3</bold></highlight> control the instruction and the arithmetic operation, respectively, in response to the output of the absolute address consistency checking circuit <highlight><bold>41</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The judging circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n compare the instruction and the addresses, the byte marks, and the identifications IID of the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n, respectively, and select data that are to be validated. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The judging circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n will be described in detail. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram showing the configuration of the judging circuits according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The judging circuits <highlight><bold>39</bold></highlight>-i each includes an address consistency comparator <highlight><bold>51</bold></highlight>, a byte mark comparator <highlight><bold>52</bold></highlight>, an STB-IID comparator <highlight><bold>53</bold></highlight>, an SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight>, an AND circuit <highlight><bold>55</bold></highlight>, and an SBF-LIMIT-IID detecting circuit <highlight><bold>56</bold></highlight>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The address is supplied from the store buffer <highlight><bold>11</bold></highlight>-i to the address consistency comparator <highlight><bold>51</bold></highlight> and the fetch logical address is supplied from the fetch port <highlight><bold>31</bold></highlight> to the address consistency comparator <highlight><bold>51</bold></highlight>. The address consistency comparator <highlight><bold>51</bold></highlight> compares the address from the store buffer <highlight><bold>11</bold></highlight>-i with the fetch logical address from the fetch port <highlight><bold>31</bold></highlight> and detects the consistency/inconsistency between the address from the store buffer <highlight><bold>11</bold></highlight>-i and the fetch logical address from the fetch port <highlight><bold>31</bold></highlight>. The address consistency comparator <highlight><bold>51</bold></highlight> outputs a logical value &ldquo;1&rdquo; when the address from the store buffer <highlight><bold>11</bold></highlight>-i is consistent with the fetch logical address from the fetch port <highlight><bold>31</bold></highlight>, and outputs a logical value &ldquo;0&rdquo; when the address from the store buffer <highlight><bold>11</bold></highlight>-i is inconsistent with the fetch logical address from the fetch port <highlight><bold>31</bold></highlight>. The comparison result of the address consistency comparator <highlight><bold>51</bold></highlight> is supplied to the AND circuit <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The byte mark is supplied from the store buffer <highlight><bold>11</bold></highlight>-i to the byte mark comparator <highlight><bold>52</bold></highlight> and also in response to the request, a byte mark from the fetch port <highlight><bold>31</bold></highlight> is supplied to the byte mark comparator <highlight><bold>52</bold></highlight>. The byte mark comparator <highlight><bold>52</bold></highlight> compares the byte mark from the store buffer <highlight><bold>11</bold></highlight>-i to the byte mark in response to the request from the fetch part <highlight><bold>31</bold></highlight>, and those sizes are compared. When the byte mark in response to the request from the fetch port <highlight><bold>31</bold></highlight> is smaller than or equal to the byte mark from the store buffer <highlight><bold>11</bold></highlight>-i, it is determined that the byte mark comparator <highlight><bold>52</bold></highlight> is included in the request. Thus, the byte mark comparator <highlight><bold>52</bold></highlight> outputs the logical value &ldquo;1&rdquo;. When the byte mark in response to the request from the fetch port <highlight><bold>31</bold></highlight> is greater, the byte mark comparator <highlight><bold>52</bold></highlight> outputs the logical value &ldquo;0&rdquo;. The comparison result of byte mark comparator <highlight><bold>52</bold></highlight> is supplied to the AND circuit <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The identification IID is supplied from the store buffer <highlight><bold>11</bold></highlight>-i to the STB-IID comparator <highlight><bold>53</bold></highlight>, and also the identification IID from the fetch port <highlight><bold>31</bold></highlight> in response to the request is supplied to the STB-IID comparator <highlight><bold>53</bold></highlight>. The STB-IID comparator <highlight><bold>53</bold></highlight> compares the identification IID from the store buffer <highlight><bold>11</bold></highlight>-i with the identification IID from the fetch port <highlight><bold>31</bold></highlight> in response to the request. When the identification IID from the store buffer <highlight><bold>11</bold></highlight>-i is smaller than the identification IID from the fetch port <highlight><bold>31</bold></highlight>, it is determined as an inclusive relation. Thus, the logical value &ldquo;1&rdquo; is output. When the identification IID from the store buffer <highlight><bold>11</bold></highlight>-i is greater, the logical value &ldquo;0&rdquo; is output. The comparison result of the STB-IID comparator <highlight><bold>53</bold></highlight> is supplied to the AND circuit <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The identification IID from the fetch port <highlight><bold>31</bold></highlight> in response to the request is supplied to the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> and also the store fetch bypass upper limit instruction identification SFB-LIMIT-IID is supplied to the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight>. The SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> compares the identification IID from the fetch port <highlight><bold>31</bold></highlight> in response to the request with the store fetch bypass upper limit instruction identification SFB-LIMIT-IID from the SBF-LIMIT-IID detecting circuit <highlight><bold>56</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> The SBF-LIMIT-IID detecting circuit <highlight><bold>56</bold></highlight> will be described in detail. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram showing the configuration of the SFB-LIMIT-IID detecting circuit according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The SBF-LIMIT-IID detecting circuit <highlight><bold>56</bold></highlight> includes an overlap comparator <highlight><bold>61</bold></highlight>, an address consistency detecting circuit <highlight><bold>62</bold></highlight>, an SFB-LIMIT-IID detecting circuit <highlight><bold>63</bold></highlight>, and an SFB-LIMIT-IID setting part <highlight><bold>64</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The byte mark provided in a request destination and the byte mark from the store buffer <highlight><bold>11</bold></highlight>-i are supplied to the overlap comparator <highlight><bold>61</bold></highlight>. The overlap comparator <highlight><bold>61</bold></highlight> compares and determines a consistency or an inconsistency between the byte mark provided in the request and the byte mark from the store buffer <highlight><bold>11</bold></highlight>-i. The overlap comparator <highlight><bold>61</bold></highlight> outputs the logical value &ldquo;1&rdquo; when both byte marks are consistent with each other, and output the logical value &ldquo;0&rdquo; when both byte marks are inconsistent. An output of the overlap comparator <highlight><bold>61</bold></highlight> is supplied to the SFB-LIMIT-IID detecting part <highlight><bold>63</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> The address of the request destination and the address of the store buffer <highlight><bold>11</bold></highlight>-i are supplied to the address consistency detecting circuit <highlight><bold>62</bold></highlight>. The address consistency detecting circuit <highlight><bold>62</bold></highlight> compares the address of the request destination with the address of the store buffer <highlight><bold>11</bold></highlight>-i, and checks whether or not both addresses are consistent with each other. The address consistency detecting circuit <highlight><bold>62</bold></highlight> outputs the logical value &ldquo;1&rdquo; when both addresses are consistent, and outputs the logical value &ldquo;0&rdquo; when both addresses are inconsistent. The logical value output from the address consistency detecting circuit <highlight><bold>62</bold></highlight> is supplied to the SFB-LIMIT-IID detecting part <highlight><bold>63</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The SFB-LIMIT-IID detecting part <highlight><bold>63</bold></highlight> outputs the logical value &ldquo;1&rdquo; in a case in which the overlap comparator <highlight><bold>61</bold></highlight> outputs &ldquo;<highlight><bold>1</bold></highlight>&rdquo;, the address consistency detecting circuit <highlight><bold>62</bold></highlight> outputs &ldquo;1&rdquo;, and the ID valid information SFB-LIMIT-VAL is &ldquo;0&rdquo;; and outputs the logical value &ldquo;0&rdquo; in other cases. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The identification IID and the logical value of the SFB-LIMIT-IID detecting circuit <highlight><bold>63</bold></highlight> are supplied to the SFB-LIMIT-IID setting part <highlight><bold>64</bold></highlight>. The SFB-LIMIT-IID setting part <highlight><bold>64</bold></highlight> sets the identification IID to the SFB-LIMIT IID when the logical value output from the SFB-LIMIT-IID detecting part <highlight><bold>63</bold></highlight> is &ldquo;1&rdquo;. And the SFB-LIMIT-IID setting part <highlight><bold>64</bold></highlight> operates nothing when the logical value is &ldquo;0&rdquo;. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> When the identification IID corresponding to the request from the fetch port <highlight><bold>31</bold></highlight> is smaller than the store fetch bypass upper limit instruction identification SFB-LIMIT-IID from the SFB-LIMIT-IID detecting circuit <highlight><bold>56</bold></highlight>, it is determined to be an inclusive relation. Thus, the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> outputs the logical value &ldquo;1&rdquo;. The SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> outputs the logical value &ldquo;0&rdquo; when the identification IID is greater. The comparison result of the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> is supplied to the AND circuit <highlight><bold>55</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Comparison results of the address consistency comparator <highlight><bold>51</bold></highlight>, the byte mark comparator <highlight><bold>52</bold></highlight>, the STB-IID comparator <highlight><bold>53</bold></highlight>, and the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> are supplied to the AND circuit <highlight><bold>55</bold></highlight>. The AND circuit <highlight><bold>55</bold></highlight> calculates a logical product of the comparison results of the address consistency comparator <highlight><bold>51</bold></highlight>, the byte mark comparator <highlight><bold>52</bold></highlight>, the STB-IID comparator <highlight><bold>53</bold></highlight>, and the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight>. The AND circuit <highlight><bold>55</bold></highlight> outputs the logical value &ldquo;1&rdquo; when all comparison results of the address consistency comparator <highlight><bold>51</bold></highlight>, the byte mark comparator <highlight><bold>52</bold></highlight>, the STB-IID comparator <highlight><bold>53</bold></highlight>, and the SFB-LIMIT-IID comparator <highlight><bold>54</bold></highlight> are the logical value &ldquo;1&rdquo;. And the AND circuit <highlight><bold>55</bold></highlight>, outputs the logical value &ldquo;0&rdquo; when other states. An output of the AND circuit <highlight><bold>55</bold></highlight> is supplied to the fetch data selecting circuit <highlight><bold>16</bold></highlight>, the store address selecting circuit <highlight><bold>36</bold></highlight>, the store data selecting circuit <highlight><bold>37</bold></highlight>, and the checking circuit <highlight><bold>38</bold></highlight>. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The fetch data selecting circuit <highlight><bold>16</bold></highlight> selects store information from the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n corresponding to the judgment results from the judging circuits <highlight><bold>39</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>39</bold></highlight>-n. Data selected by the fetch data selecting circuit <highlight><bold>16</bold></highlight> are supplied to the arithmetic unit <highlight><bold>4</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Next, an operation according to the embodiment of the present invention will be described. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> and <cross-reference target="DRAWINGS">FIG. 10</cross-reference> are diagrams for explaining the operation according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a state in which the requests have been already issued to the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n but data have not been stored to the cache memory <highlight><bold>12</bold></highlight> or the main memory <highlight><bold>5</bold></highlight>. When the requests are issued to the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n, the identification information IID showing the execution order for each of the requests is stored. The identification information IID is stored to the store buffer <highlight><bold>11</bold></highlight>-i. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Also, an address STAR used to indicate a store destination of a store request ST REQ and a store byte mark BMKR for showing an area to store are simultaneously stored to the store buffer <highlight><bold>11</bold></highlight>-i. The store data STDR is set to a corresponding address when the store data are prepared later. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Next, when a following store request ST REQ is issued, the store address STAR and the store byte mark BMKR of the store buffer <highlight><bold>11</bold></highlight>-i are compared with those of the following store request ST REQ. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> In this case, the store buffer <highlight><bold>11</bold></highlight>-i, to which the ID valid information SFB-LIMIT-VAL is not informed, is to be compared. By comparing based on the ID valid information SFB-LIMIT-VAL, it is possible to narrow a range for a bypass. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> As a comparison result from comparing the store address STAR and the store byte mark BMRK of the store buffer <highlight><bold>11</bold></highlight>-i and those of the store request ST REQ, when an overlap between one area to be operated for the store request ST REQ and another area to be operated for a preceding store request ST REQ is detected, it is determined to store to the same area. In this case, with respect to the store buffer <highlight><bold>11</bold></highlight>-i where the overlap is detected, the identification STB-IID of the store request ST REQ is set as the store fetch bypass upper instruction identification SFB-LIMIT-IID and also the ID valid information SFB-LIMIT-VAL is set as valid. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> As described above, the identification IID of the fetch request FC REQ, which is subject to store fetch bypass from each of the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n, is set when the store request STREQ is issued. When the ID valid information SFB-LIMIT-VAL is valid, the identification FCH-IID of the fetch request FC REQ, which is subject for store fetch bypass from the store buffer <highlight><bold>11</bold></highlight>-i, is determined as identification IID from the identification STB-IID set in the store buffers to the store fetch bypass upper limit instruction identification SFB-LIMIT-IID. When the ID valid information SFB-LIMIT-VAL is not valid, all identification IID after the identification STB-IID is set in the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-i. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Next, an operation for fetching to the store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n will be described. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the range of the fetch request FC REQ subject for the store fetch bypass is determined. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Regarding to the fetch request FC REQ issued later, the IID, the address, and the byte mark are compared with those in all store buffers <highlight><bold>11</bold></highlight>-<highlight><bold>1</bold></highlight> through <highlight><bold>11</bold></highlight>-n. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> When the identification STB-IID of each store buffer <highlight><bold>11</bold></highlight>-i is compared with the identification FCH-IID of the fetch instruction, the identification FCH-IID of the fetch instruction is checked to be later than the identification STB-IID of each store buffer <highlight><bold>11</bold></highlight>-i. When the identification SFB-LIMIT-IID is compared with the identification FCH-IID, an issuance order of the identification FCH-IID is checked to be later than that of the identification SFB-LIMIT-IID. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> It should be noted that when the ID valid information SFB-LIMIT-VAL is not valid, it is not necessary to compare the identification SFB-LIMIT-IID with the identification FCH-IID. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> In addition, the store address STAR is compared with the fetch address FCAR and the consistency is confirmed. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Moreover, the store byte mark BMKR is compared with the fetch byte mark BMKR, it is checked whether or not the store byte mark BMRK includes the fetch byte mark BMRK. It is possible to confirm by a check result that the entire area to be operated on by the fetch request FC REQ is included in a single store buffer. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> As described above, it is possible to select only one store buffer by comparing the IIDs, the addresses, and the byte marks BMRK. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Next, an operation according to the embodiment will be described with reference to a timing chart. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Timing charts are shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, according to the embodiment of the present invention. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> is a diagram showing an execute timing of a store ST<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> is a diagram showing a store data issue timing of the store ST<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11C</cross-reference> is a diagram showing a store permit timing of a store buffer STB<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11D</cross-reference> is a diagram showing a write timing of the store buffer STB<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11E</cross-reference> is a diagram showing the execution timing of a fetch FETCH<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11F</cross-reference> is a diagram showing a waiting time of the fetch FETCH<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11G</cross-reference> is a diagram showing the execute timing of a store ST<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11H</cross-reference> is a diagram showing the store data issue timing of the store ST<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11I</cross-reference> is a diagram showing the store permit timing of a store buffer STB<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11J</cross-reference> is a diagram showing the store permit timing of the store buffer STB<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11K</cross-reference> is a diagram showing the execute timing of a fetch FETCH<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11L</cross-reference> is a diagram showing the waiting time of the fetch FETCH<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11M</cross-reference> is a diagram showing a store data preparation period of the store buffer STB<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11N</cross-reference> is a diagram showing the store data preparation period of the store buffer STB<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11O</cross-reference> is a diagram showing a recycle execute timing of the FETCH<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11P</cross-reference> is a diagram showing the fetch successful timing of the fetch FETCH<highlight><bold>1</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11Q</cross-reference> is a diagram showing the recycle execute timing of the fetch FETCH<highlight><bold>2</bold></highlight>, <cross-reference target="DRAWINGS">FIG. 11R</cross-reference> is a diagram showing the fetch successful timing of the fetch FETCH<highlight><bold>2</bold></highlight>, and <cross-reference target="DRAWINGS">FIG. 11S</cross-reference> is a diagram showing an output timing of selected data. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the stores ST<highlight><bold>1</bold></highlight> and ST<highlight><bold>2</bold></highlight>, and the fetches FETCH<highlight><bold>1</bold></highlight> and FETCH<highlight><bold>2</bold></highlight> are processed by a pipeline processing method. In this case, even if the same address is valid in the store buffers STB<highlight><bold>1</bold></highlight> and STB<highlight><bold>2</bold></highlight> as shown in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>M and <cross-reference target="DRAWINGS">FIG. 11</cross-reference>N, data are identified by the identification IID and then it is possible to fetch in order of the store data STRD<highlight><bold>1</bold></highlight> and STRD<highlight><bold>2</bold></highlight>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> According to the embodiment of the present invention, in a case in which a plurality of the fetch requests simultaneously conduct a search for all store buffers with respect to the store fetch bypass, it is possible to properly select a different store buffer for each of the plurality of the fetch requests. Thus, especially, it is possible to conduct a speedy execution for a plurality of the fetch requests and the store requests in a super scalar processor conducting an out-of-order process. Therefore, it is possible to improve the performance of the processing unit. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> According to the embodiment of the present invention, the store fetch bypass upper limit instruction identification SFB-LIMIT-IID is set by a store buffer unit but can be set by a byte mark unit. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In this case in which the store fetch bypass upper limit instruction identification SFB-LIMIT-IID is set, the overlap of the area to be operated on is confirmed by the byte mark unit but not the store buffer unit. Also, the store fetch bypass upper limit instruction identification SFB-LIMIT-IID and the ID valid information SFB-LIMIT-VAL are maintained by the byte mark unit. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Moreover, when the fetch request FC REQ is checked, it is not necessary to include areas to be fetched in a single store buffer. Therefore, it is possible to fetch by passing the store buffers. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In this case, if necessary, it is possible to combine data read from the cache memory <highlight><bold>12</bold></highlight> or the main memory <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Furthermore, it is possible to fetch by a few bytes but not the byte mark. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A storage control device, comprising: 
<claim-text>a plurality of storing parts storing data; and </claim-text>
<claim-text>a storage controlling part, to which a data issue request providing identification identifying an issue order is supplied, selecting a predetermined storing part from said plurality of storing parts by corresponding to said identification of the data issue request, and outputting predetermined data from the predetermined storing part by corresponding to an address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The storage control device as claimed in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said plurality of storing parts provide said identification to data corresponding to the data; and </claim-text>
<claim-text>said storage controlling part compares the identification provided to the data issue request with identifications stored in said plurality of storing parts and identifies the storing part in response to a comparison result. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The storage control device as claimed in <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference> or <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein: 
<claim-text>said storing part stores a range setting identification for indicating a range to be operated on in preceding data; and </claim-text>
<claim-text>said storage controlling part identifies data to be operated on corresponding to said range setting identification. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A storage control method, comprising the steps of: 
<claim-text>receiving a supply of a data issue request in which identification for identifying an issue order; </claim-text>
<claim-text>selecting a predetermined storing part from a plurality of storing parts by corresponding to the identification in the data issue request; and </claim-text>
<claim-text>outputting predetermined data from the predetermined storing part by corresponding to an address.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005227A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005227A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005227A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005227A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005227A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005227A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005227A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005227A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005227A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005227A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005227A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005227A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
