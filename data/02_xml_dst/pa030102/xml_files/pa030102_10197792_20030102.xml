<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005314A1-20030102-D00000.TIF SYSTEM "US20030005314A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005314A1-20030102-D00001.TIF SYSTEM "US20030005314A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005314A1-20030102-D00002.TIF SYSTEM "US20030005314A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005314</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10197792</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020718</filing-date>
</domestic-filing-data>
<foreign-priority-data>
<priority-application-number>
<doc-number>001 00 954.7</doc-number>
</priority-application-number>
<filing-date>20000118</filing-date>
<country-code>EP</country-code>
</foreign-priority-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/32</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>189000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Microprocessor configuration and method for operating a microprocessor configuration</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10197792</doc-number>
<kind-code>A1</kind-code>
<document-date>20020718</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>PCT/DE01/00018</doc-number>
<document-date>20010105</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>UNKNOWN</parent-status>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Berndt</given-name>
<family-name>Gammel</family-name>
</name>
<residence>
<residence-non-us>
<city>Munchen</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Oliver</given-name>
<family-name>Kniffler</family-name>
</name>
<residence>
<residence-non-us>
<city>Munchen</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Holger</given-name>
<family-name>Sedlak</family-name>
</name>
<residence>
<residence-non-us>
<city>Egmating</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>LERNER AND GREENBERG, P.A.</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 2480</address-1>
<city>Hollywood</city>
<state>FL</state>
<postalcode>33022-2480</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">In a microprocessor configuration, data is temporarily stored in a cache memory or a register bank. A respectively assigned cryptographic unit ensures that the data is encrypted or decrypted when the cache memory or the register bank is accessed. The keyword which is used here is changed if the cache memory or the register no longer contains any valid data to be read out. As a result, an increased protection is obtained against unauthorized monitoring of data and program sequences. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a continuation of copending International Application No. PCT/DE01/00018, filed Jan. 5, 2001, which designated the United States and was not published in English. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
</section>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates to a microprocessor configuration with a processing unit and a memory which is connected to the processing unit in order to execute a reading or writing access operation. The invention also relates to a method for operating a microprocessor configuration with such a memory. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Microprocessors require a memory in order to store in a permanent or volatile fashion data or programs which are to be processed. During the execution of the program, the microprocessor accesses the memory in order to load currently required program parts or data. Microprocessors are used, inter alia, in systems which are critical for security, for example in chip cards. The microprocessor is used there, inter alia, to encrypt data traffic or to execute other applications which are critical for security for the owner of the chip card. Here, data and programs which are critical for security are stored in the volatile and nonvolatile memory units of the microprocessor. In order to prevent this information from being monitored without authorization and displayed, such data is stored in encrypted form. The encryption method is relatively complex and requires a corresponding amount of expenditure on hardware and computing time during the reading and writing access operations to these memories. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The data which is to be processed at a particular time by the central processing and control unit (CPU) of the microprocessor is therefore buffered in further memories which can respond significantly more quickly. On the one hand, a cache memory is provided in which data which is to read out of the slower, encrypted memories or to be written into them is buffered. On the other hand, registers are provided in which data values or operational settings which are to be processed at a particular time are buffered. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> As the information is to be made available, if possible, already in the next operating cycle when there is an access request to the cache memory or one of the registers, encryption of the buffered information there has previously not been considered. If conventional encryption methods were to be used for the encryption of the content of cache memories or registers, the response time would be too long. For this reason, hitherto the data has been buffered in cache memories and the working registers of the processor in plain text. It is a problem that the data can be monitored without authorization through the use of suitable measuring methods. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> It is accordingly an object of the invention to provide a microprocessor configuration which overcomes the above-mentioned disadvantages of the heretofore-known microprocessor configurations of this general type and which protects stored data better against unauthorized monitoring. A further object of the invention is to provide a method for operating a microprocessor configuration with a memory. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> With the foregoing and other objects in view there is provided, in accordance with the invention, a microprocessor configuration, including: </paragraph>
<paragraph id="P-0008" lvl="2"><number>&lsqb;0008&rsqb;</number> a processing unit; </paragraph>
<paragraph id="P-0009" lvl="2"><number>&lsqb;0009&rsqb;</number> a memory connected to the processing unit for executing a reading access operation or a writing access operation; </paragraph>
<paragraph id="P-0010" lvl="2"><number>&lsqb;0010&rsqb;</number> a cryptographic unit for encrypting and decrypting data values being written to or read from the memory; and </paragraph>
<paragraph id="P-0011" lvl="2"><number>&lsqb;0011&rsqb;</number> a device for providing a variable key, the device for providing a variable key being controlled such that a variable key is changed if the memory contains no data values to be read out. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In other words, the object of the invention is achieved through the use of a microprocessor configuration which includes: a processing unit, a memory which is connected to the processing unit for the execution of a reading or writing access operation; a cryptographic unit for encrypting and decrypting data values written or read into the memory; a device for providing a variable key, wherein it is possible to control the device in such a way that the key is changed if there are no longer any data values to be read out contained in the memory. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> According to another feature of the invention, a further memory is operatively connected to the processing unit for storing data values in encrypted form; and a decryption device is operatively connected to the further memory, the decryption device decrypting data values read out from the further memory. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to yet another feature of the invention, the memory is a cache memory. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> According to a further feature of the invention, the cache memory has an access controller, the access controller checks whether the cache memory contains a data value of an access request from the processing unit and, if the cache memory contains the data value of the access request from the processing unit, the access controller causes the data value to be read out from the cache memory. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> According to yet a further feature of the invention, a bus for handling data traffic is provided; a further memory for storing data values in encrypted form is provided, the further memory being connected to the processing unit via the bus; and the memory is connected into a data path between the bus and the processing unit. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> According to another feature of the invention, the memory is a register including register cells which are embodied as bistable flip-flops. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> According to another feature of the invention, logic operation elements are provided; the memory includes memory cells; lines for accessing the memory cells in the memory are provided; the device for providing a variable key includes a register having register outputs; and the register outputs are connected, via the logic operation elements, to the lines. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> According to yet another feature of the invention, a random generator is connected to the register for feeding in the variable key. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> According to a further feature of the invention, the register is configured to be loaded by the random generator when the processing unit is initialized for executing a further application. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> With the objects of the invention in view there is also provided, a method for operating a microprocessor configuration having a processing unit and a memory connected to the processing unit for executing a reading access operation or a writing access operation, the method includes the steps of: </paragraph>
<paragraph id="P-0022" lvl="2"><number>&lsqb;0022&rsqb;</number> encrypting or decrypting data values in accordance with a key when the memory is accessed by the microprocessor configuration; and </paragraph>
<paragraph id="P-0023" lvl="2"><number>&lsqb;0023&rsqb;</number> changing the key if the memory contains no longer any data values to be read out. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In other words, the object of the invention is achieved through the use of a method for operating a microprocessor configuration which contains a processing unit and a memory which is connected to the processing unit for executing a reading or writing access operation and in which, while the memory is being accessed by the microprocessor configuration, the data values are encrypted or decrypted in accordance with a key, and the key is changed if there is no longer any data to be read out contained in the memory. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Another mode of the method according to the invention includes the step of changing the key in a random-controlled manner. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A further mode of the method according to the invention includes the step of changing the key if the memory is completely read out. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Another mode of the method according to the invention includes the steps of changing the key if a program processed by the microprocessor configuration is changed. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In a microprocessor configuration according to the invention and in contrast to known microprocessor configurations, a cryptographic unit is additionally inserted into the access path to a memory, for example a cache memory or a register, which is connected to the processing unit. The key, which is used to operate the encryption and decryption, is changed. So that the reading into and out of the memory can be carried out with the same key; the key is changed only if there are no longer any data values to be read out contained in the memory. Because of the changing key, the encryption method itself can be relatively easy. The data is stored in the memory in a nonvolatile fashion so that, even after the supply voltage is switched off, there is no longer any useable information present, and repeated attempts at reading out are not successful. During operation, the available time for unauthorized monitoring of the key before a key change occurs is short. Overall, the combination of variable key with a simple encryption method provides sufficiently high protection against an attempt at monitoring. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The invention is particularly suitable in conjunction with a further, slower memory in which the data is stored with a hard, complex encryption. The data is buffered in the memory which is wired according to the invention in order to provide it quickly to the central processing unit of the processor. The further, hard-encrypted memories may be nonvolatile memories such as ROMs (Read-Only Memories) or E<highlight><superscript>2</superscript></highlight>PROMs (Electrically Erasable Programmable Read-Only Memories) or volatile RAMs (Random-Access Memories). In conventional process architectures, the CPU accesses these memories via a bus. With respect to this, the cache memory is located between the bus and the CPU. When the invention is applied to a register bank, the registers are connected directly to the CPU, as in the conventional way. The cache memory is characterized in that when there is an access request to a memory which is external, i.e. only accessible via the bus, it is firstly checked whether the cache memory contains a data value. If the data value is contained there, it is output to the processor from the cache memory, and not from the external memory. If the requested data word is not contained in the cache memory, the cache memory is first reloaded with the data value and a suitable environment of this data value, the requested data value is also output to the CPU. The cache memory contains for this purpose a memory field in order to be able to detect the presence of the requested data value. The memory cells of the memory cell field are static or dynamic memory cells. A register bank is characterized in that it contains a plurality of registers which can be addressed directly by the CPU. The registers provide, for example, operands for logic operations or status and configuration setting values to be processed in the CPU. The register cells are embodied as bistable flip-flops. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The safety expenditure for the encryption provides logic operation elements, expediently exclusive OR gates which are connected into the data lines in the access path of the memory. The data of the memory which is to be stored or read out is logically linked to a keyword through the use of exclusive OR gates. The keyword is made available by a register which contains the key which can vary from time to time. The keywords are preferably generated with random control. For this purpose, a random generator, which is connected at the output end to the key register, is used. The random generator provides the key in a physically random or pseudo-random way. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The random generator is then prompted to provide a new keyword if there is no longer any valid data present in the memory. This applies, on the one hand, if all the data read into the memory has already been read out. This also applies, on the other hand, if the processor is switched over to another application and re-initialized for this purpose. Conventionally, the content of the memory would then have to be completely deleted so that there is no longer any data from the previous application available for the following application. In the invention, it is no longer necessary to initialize the memory by resetting each memory cell. Instead it is sufficient to change only the key with random control. The data values contained in the memory can then no longer be encrypted. It is no longer necessary to reset each individual memory cell. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Other features which are considered as characteristic for the invention are set forth in the appended claims. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Although the invention is illustrated and described herein as embodied in a microprocessor configuration and a method for operating a microprocessor configuration, it is nevertheless not intended to be limited to the details shown, since various modifications and structural changes may be made therein without departing from the spirit of the invention and within the scope and range of equivalents of the claims. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> The construction and method of operation of the invention, however, together with additional objects and advantages thereof will be best understood from the following description of specific embodiments when read in connection with the accompanying drawings.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block circuit diagram of a microprocessor according to the invention; and </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block circuit diagram of a cache memory which shows details relevant to the invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Referring now to the figures of the drawings in detail and first, particularly, to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> thereof, there is shown a microprocessor which includes a data bus <highlight><bold>1</bold></highlight> via which the various functional units of the microprocessor exchange data, control or programming information with one another. The data bus <highlight><bold>1</bold></highlight> includes a plurality of lines for transferring the useful information and control information. A central processing unit <highlight><bold>2</bold></highlight> controls the program sequence and carries out calculations. Data and program information can be permanently stored in an invariable fashion in a ROM memory <highlight><bold>3</bold></highlight> or permanently stored in a variable fashion in an E<highlight><superscript>2</superscript></highlight>PROM (Electrically Erasable Programmable Read-Only Memory) <highlight><bold>4</bold></highlight>. Volatile data is stored in a RAM (Random Access Memory) <highlight><bold>5</bold></highlight>. In addition, at least one peripheral unit <highlight><bold>6</bold></highlight> is provided in order to receive data from the outside or output it to the outside. All functional units are arranged on a single integrated semiconductor chip. The units <highlight><bold>2</bold></highlight>, . . . , <highlight><bold>6</bold></highlight> are all connected to the bus <highlight><bold>1</bold></highlight> and exchange the information to be processed via the bus <highlight><bold>1</bold></highlight>. The access control to the bus is monitored by a bus control unit <highlight><bold>7</bold></highlight>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The data which is stored in the memories <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight> is encrypted. When the data values are output onto the bus, the data is decrypted and passed on as plain text. For this purpose, a corresponding encryption and decryption unit <highlight><bold>71</bold></highlight> (MED&equals;Memory En/Decryption) is used. When data values are stored in the RAM memory <highlight><bold>5</bold></highlight>, the unit <highlight><bold>71</bold></highlight> carries out corresponding encryption. As the data contained in the memories <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight> is available for a relatively long time in a volatile or nonvolatile fashion, the cryptographic method executed by the MED unit <highlight><bold>71</bold></highlight> is correspondingly complex. Memory access operations last a relatively long time. As an alternative to the central MED unit <highlight><bold>71</bold></highlight>, each of the memories <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight> can be directly assigned a cryptographic unit. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> In order to speed up data access operations to the external memories <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight>, a cache memory <highlight><bold>8</bold></highlight> is provided. The cache memory <highlight><bold>8</bold></highlight> lies in the signal path between the bus controller <highlight><bold>7</bold></highlight> and the CPU <highlight><bold>2</bold></highlight>. The data which is requested by the CPU <highlight><bold>2</bold></highlight> at a particular time and a suitable environment of this data are buffered in the cache memory <highlight><bold>8</bold></highlight>. A read request to one of the memories <highlight><bold>3</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>5</bold></highlight> is processed in such a way that it is firstly checked in the cache memory <highlight><bold>8</bold></highlight> whether it contains the requested data. If not, the data and the corresponding environment are reloaded from the external memories into the cache. If the requested data is contained in the cache <highlight><bold>8</bold></highlight>, the reloading is omitted. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In the exemplary embodiment, the cache memory <highlight><bold>8</bold></highlight> is divided into an instruction cache memory and a data cache memory. In the former, instruction sequences of the program which is being processed at that particular time are buffered, and in the latter the associated data. In principle, other structures for the cache memory are also possible. The cache memory can also be configured as a common cache for instructions and data (unified cache). In the case of associative cache memory architecture, such a unit is in turn divided into an associative memory for the addresses and the associated instruction/data storage part. By interrogating the associative memory, it is very quickly detected whether the requested data is contained in the cache. If the data item is not present (referred to as a cache miss), a request to reload is output to the corresponding external memory. Corresponding processes occur when a data value is written back into the RAM <highlight><bold>5</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> During the reloading of the cache memory <highlight><bold>8</bold></highlight>, the information received via the bus <highlight><bold>1</bold></highlight> is encrypted in plain text through the use of a cryptographic unit <highlight><bold>61</bold></highlight>. During a writing operation, the device <highlight><bold>81</bold></highlight> decrypts the data stored in encrypted form in the cache memory <highlight><bold>8</bold></highlight>. When the data stored in encrypted form in the cache memory <highlight><bold>8</bold></highlight> is transferred to the CPU <highlight><bold>2</bold></highlight>, it is decrypted by a cryptographic unit <highlight><bold>82</bold></highlight>. During a writing operation, the unit <highlight><bold>82</bold></highlight> in the cache memory 8 encrypts information which is to be buffered. As described below, the key supplied to the cryptographic units <highlight><bold>81</bold></highlight>, <highlight><bold>82</bold></highlight> is identical and is changed with random control if there is no longer any valid data to be read out in the cache memory <highlight><bold>8</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> Operators and status information for the CPU <highlight><bold>2</bold></highlight> are stored in a register bank <highlight><bold>9</bold></highlight>. The CPU <highlight><bold>2</bold></highlight> can access directly and immediately one or more of the registers arranged in the register bank <highlight><bold>9</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Data stored there-is encrypted or decrypted by a cryptographic unit <highlight><bold>91</bold></highlight> when one of the registers of the register bank <highlight><bold>9</bold></highlight> is accessed. The key used at a given time in the units <highlight><bold>81</bold></highlight> and <highlight><bold>82</bold></highlight> on the one hand and the unit <highlight><bold>91</bold></highlight> on the other is expediently different. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The cryptographic units are illustrated in detail through the use of the example of the cache memory <highlight><bold>8</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. A key register <highlight><bold>83</bold></highlight> contains the key which is being used at a given time. The key is provided by a random generator <highlight><bold>84</bold></highlight> which generates the keyword in a physically genuinely random or pseudo-random fashion. Respective exclusive OR gates <highlight><bold>85</bold></highlight><highlight><italic>a, </italic></highlight><highlight><bold>85</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>85</bold></highlight><highlight><italic>c </italic></highlight>are connected into the data signal lines or bit lines which conduct the information written into or read out of the cache memory <highlight><bold>8</bold></highlight>. Each of the exclusive OR gates <highlight><bold>85</bold></highlight> is in turn connected to an output of the register <highlight><bold>83</bold></highlight>. The exclusive OR gates <highlight><bold>85</bold></highlight> are located both on the side of the cache memory <highlight><bold>8</bold></highlight> which faces the bus <highlight><bold>1</bold></highlight> and on the side of the cache memory <highlight><bold>8</bold></highlight> which faces the CPU <highlight><bold>2</bold></highlight>. When data is read into the cache memory <highlight><bold>8</bold></highlight>, encryption occurs owing to the exclusive OR operation performed on the data values with the keyword supplied from the register <highlight><bold>83</bold></highlight>. In the case of reading out, the complementary decryption takes place through the use of the same exclusive OR logic operation with the same keyword. As long as valid data for reading out is stored in the cache memory <highlight><bold>8</bold></highlight>, the keyword provided by the register <highlight><bold>83</bold></highlight> must remain the same without modification. Each of the n bit lines corresponds to one bit of the keyword. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> According to the invention, the keyword is changed if the cache memory <highlight><bold>8</bold></highlight> does not contain any valid data, i.e. data which is still to be read out. The random generator <highlight><bold>84</bold></highlight> is then activated in order to calculate a new keyword which is generated with random control. There is no longer any valid data contained in the memory <highlight><bold>8</bold></highlight> if all data values stored there are read out again. Furthermore, the keyword is to be changed when an initialization of the cache memory <highlight><bold>8</bold></highlight> is performed, referred to as a cache flush. A cache flush occurs, for example, when there is a change in the program executed by the microprocessor if the application, i.e. the application case in which the microprocessor is used, changes. In this case, it is also possible to dispense with a cache flush and a complete initialization and resetting of all the memory cells of the cache memory <highlight><bold>8</bold></highlight> which is brought about by this as the data can in any case no longer be decrypted owing to a change of the keyword in the register <highlight><bold>83</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The cryptographic unit <highlight><bold>91</bold></highlight> is constructed in detail in accordance with one of the cryptographic units in the access path to the cache memory <highlight><bold>8</bold></highlight>. Its key register is then loaded with a new random value if all the registers of the register bank <highlight><bold>9</bold></highlight> no longer contain any valid data to be read out or have to be re-initialized. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As a result of the invention, increased protection against unauthorized monitoring is provided to temporarily stored data in that the data is stored in encrypted form and the key is changed from time to time. Even when there is a program sequence which repeats many times, the stored data is different owing to different keys. The current drawn from the microprocessor during the execution of the program, in particular the current peaks or current troughs, varies. As a result, attempts at unauthorized monitoring which apply an evaluation of the current profile are made more difficult. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A microprocessor configuration, comprising: 
<claim-text>a processing unit; </claim-text>
<claim-text>a memory connected to said processing unit for executing one of a reading access operation and a writing access operation; </claim-text>
<claim-text>a cryptographic unit for encrypting and decrypting data values being one of written to and read from said memory; and </claim-text>
<claim-text>a device for providing a variable key controlled such that a variable key is changed if said memory contains no data values to be read out. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, including: 
<claim-text>a further memory operatively connected to said processing unit for storing data values in encrypted form; and </claim-text>
<claim-text>a decryption device operatively connected to said further memory, said decryption device decrypting data values read out from said further memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said memory is a cache memory. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said cache memory has an access controller, said access controller checks whether said cache memory contains a data value of an access request from said processing unit and, if said cache memory contains the data value of the access request from said processing unit, said access controller causes the data value to be read out from said cache memory. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, including: 
<claim-text>a bus for handling data traffic; </claim-text>
<claim-text>a further memory for storing data values in encrypted form, said further memory being connected to said processing unit via said bus; and </claim-text>
<claim-text>a data path between said bus and said processing unit, said memory being connected into said data path between said bus and said processing unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said memory is a register including register cells embodied as bistable flip-flops. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, including: 
<claim-text>logic operation elements; </claim-text>
<claim-text>said memory including memory cells; </claim-text>
<claim-text>lines for accessing said memory cells in said memory; </claim-text>
<claim-text>said device for providing a variable key including a register having register outputs; and </claim-text>
<claim-text>said register outputs being connected, via said logic operation elements, to said lines. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, including a random generator connected to said register for feeding in the variable key. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein said register is configured to be loaded by said random generator when said processing unit is initialized for executing a given application. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method for operating a microprocessor configuration having a processing unit and a memory connected to the processing unit for executing one of a reading access operation and a writing access operation, the method which comprises: 
<claim-text>one of encrypting and decrypting data values in accordance with a key when the memory is accessed by the processing unit; and </claim-text>
<claim-text>changing the key if the memory contains no longer any data values to be read out. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method for operating a microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, which comprises changing the key in a random-controlled manner. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The method for operating a microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, which comprises changing the key if the memory is completely read out. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The method for operating a microprocessor configuration according to <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, which comprises changing the key if a program processed by the microprocessor configuration is changed.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005314A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005314A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005314A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
