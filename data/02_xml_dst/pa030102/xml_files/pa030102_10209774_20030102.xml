<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005243A1-20030102-D00000.TIF SYSTEM "US20030005243A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00001.TIF SYSTEM "US20030005243A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00002.TIF SYSTEM "US20030005243A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00003.TIF SYSTEM "US20030005243A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00004.TIF SYSTEM "US20030005243A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00005.TIF SYSTEM "US20030005243A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00006.TIF SYSTEM "US20030005243A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00007.TIF SYSTEM "US20030005243A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00008.TIF SYSTEM "US20030005243A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00009.TIF SYSTEM "US20030005243A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005243A1-20030102-D00010.TIF SYSTEM "US20030005243A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005243</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10209774</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020801</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>159000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>170000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>154000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>147000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>158000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Mailbox for controlling storage subsystem reconfigurations</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10209774</doc-number>
<kind-code>A1</kind-code>
<document-date>20020801</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09396146</doc-number>
<document-date>19990915</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Avinoam</given-name>
<family-name>Zakai</family-name>
</name>
<residence>
<residence-us>
<city>Cambridge</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>Wayne</middle-name>
<family-name>DesRoches</family-name>
</name>
<residence>
<residence-us>
<city>Methuen</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Victoria</given-name>
<family-name>Dubrovsky</family-name>
</name>
<residence>
<residence-us>
<city>Westboro</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Shai</given-name>
<family-name>Bar-Nefy</family-name>
</name>
<residence>
<residence-us>
<city>Shrewsbury</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ruben</given-name>
<family-name>Michel</family-name>
</name>
<residence>
<residence-us>
<city>Hopkinton</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>EMC CORPORATION</name-1>
<name-2></name-2>
<address>
<address-1>35 PARKWOOD DRIVE</address-1>
<city>HOPKINTON</city>
<state>MA</state>
<postalcode>01748</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method balances workloads of storage devices of a storage subsystem. The method includes reading a mailbox to obtain control parameters and collecting historical data on numbers of accesses to storage volumes of the storage devices. The control parameters are written in the mailbox by host devices. The method also includes selecting data swaps that lead to better balanced workloads for storage devices based on the historical data. The act of selecting and/or the act of collecting being initialized by the control parameters. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The invention relates to data storage of a distributed storage subsystem. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Enterprises often have storage subsystems that use large arrays of physical storage devices to provide shared data storage for host devices. Typically, the host devices are isolated so that they are unaware of the complete physical layout of data storage of the storage subsystem. Instead, the host devices know the logical layout of data storage. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> By isolating host devices from the physical layout of the storage subsystem, host applications become more portable. The host applications can execute on host devices using storage subsystems having different physical layouts. But, such host devices are also unaware of the workloads of the individual physical storage devices. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Since the host devices do not know the workloads of physical storage devices, they cannot change their storage usage patterns to compensate for overloading particular physical storage devices. Overloading a physical storage device can cause the device&apos;s physical drives to operate slowly. Slow physical drives lead to long access times and degraded performance of the host applications that use the storage device. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> In a first aspect, the invention provides a method of balancing workloads of storage devices of a storage subsystem. The method includes reading a mailbox to obtain control parameters and collecting historical data on numbers of accesses to storage volumes of the storage devices. The control parameters are written in the mailbox by host devices. The method also includes selecting data swaps that lead to better-balanced workloads of storage devices based on the historical data. Either the act of selecting or the act of collecting depends on the control parameters. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> In a second aspect, the invention provides a storage subsystem that provides data storage to a plurality of host devices. The storage subsystem includes a plurality of data storage devices accessible to host devices, a data storage medium storing a mailbox, and a computer able to read the mailbox. The mailbox stores control parameters that are rewritable by the host devices. The computer stores an executable program of instructions for a method of data swapping between storage volumes of the storage subsystem. The computer reads the control parameters to initialize the program. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In a third aspect, the invention provides a storage medium storing an executable program of instructions. The instructions cause a computer to perform the above-described method of balancing workloads of storage devices of a storage subsystem.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Other objects, features, and advantages of the invention will be apparent from the following description taken together with the drawings in which: </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a block diagram of a storage subsystem providing shared data storage to a group of host devices; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is a diagram of one embodiment of the storage subsystem of <cross-reference target="DRAWINGS">FIG. 1A</cross-reference>; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of one of the host devices shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>B; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of the service processor shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>B; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> illustrates a table that the service processor of <cross-reference target="DRAWINGS">FIGS. 1A, 1B</cross-reference> and <highlight><bold>3</bold></highlight> uses to store historical data on workloads; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> illustrates a file that stores priority data on storage volumes; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flow chart illustrating a cyclic method of balancing workloads of the storage devices shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>B; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a flow chart illustrating a method of selecting data swaps that better balance workloads; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C are a time sequence illustrating a data swap between a pair of storage devices shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>B; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the mailbox assigned to the service processor shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>B; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow chart illustrating a method of accessing the mailbox of the service processor; and </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flow chart illustrating a method of collecting historical data.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> This application incorporates, by reference, in the entirety, co-pending U.S. application Ser. No. 09/______,______, &ldquo;Load Balancing on Disk Array Storage Device&rdquo;, by Eitan Bachmat et al, filed on Sep. 15, 1999, and co-pending U.S. application Ser. No. 09/______,______, &ldquo;Method for the Transparent Exchange of Logical Volumes in a Disk Array&rdquo;, by Musik Schreiber et al, filed on Sep. 15, 1999. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As used in this application, the workload of a storage device is defined to be the amount of work that the device performs as a result of data access requests. One measure of the workload is a total number of accesses. Another measure uses a weighted sum of the numbers of each type of access, e.g., reads, writes, and prefetches. The measure thus can attach different weights to the various types of accesses. </paragraph>
</section>
<section>
<heading lvl="1">DISTRIBUTED STORAGE SUBSYSTEM </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> shows a storage subsystem <highlight><bold>10</bold></highlight> that provides shared data storage to a group of host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight>. The shared data storage is located on physical storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>, e.g., multiple disk devices, that are accessible to the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> through a global memory <highlight><bold>19</bold></highlight>. The host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> and storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> connect to the global memory <highlight><bold>19</bold></highlight> through channels <highlight><bold>20</bold></highlight>&equals; and <highlight><bold>20</bold></highlight>, respectively, e.g., busses or networks. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> shows an embodiment <highlight><bold>10</bold></highlight>&prime; of the storage subsystem <highlight><bold>10</bold></highlight> that uses several intelligent controllers <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight>. Each controller <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight> manages communications between one or more devices <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight> to the controller <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight> and the remainder of the storage subsystem <highlight><bold>10</bold></highlight>&prime;. Each controller <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight> includes a processor P and a local memory M. The local memory M stores executable software for communication protocols adapted to communicating with the particular devices <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight> coupled to the controller <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The controllers <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight> couple the devices <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight> and service processor <highlight><bold>28</bold></highlight> to the global memory <highlight><bold>19</bold></highlight> via a collection of busses and/or a network <highlight><bold>20</bold></highlight>&Prime;&Prime;. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The global memory <highlight><bold>18</bold></highlight> is a staging area for communications and data transfers between the host and storage devices <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight>. The locally coupled controller <highlight><bold>21</bold></highlight>-<highlight><bold>26</bold></highlight>, first transfers data from the source device <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight> to a cache memory located in the global memory <highlight><bold>19</bold></highlight>. Then, the data is transferred from the cache memory to the destination device <highlight><bold>12</bold></highlight>-<highlight><bold>17</bold></highlight>. The cache memory includes a cache memory manager for managing cache accesses and a cache index directory for identifying data stored in the cache. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Since several host controllers <highlight><bold>21</bold></highlight>-<highlight><bold>23</bold></highlight> may request access the storage devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> simultaneously, the global memory <highlight><bold>19</bold></highlight> includes a lock. A requesting device <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> obtains the lock prior to accessing the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> and relinquishes the lock after performing the desired accesses. Requests for the lock are stored in a lock request queue. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> physically divide into separate storage volumes, A-G. The storage volumes A-G may either be disk partitions identified by device, head, and cylinder identifiers or smaller regions of the physical storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. The distribution of data over the physical storage volumes A-G is at least partially hidden from the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight>, because the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> see the storage subsystem <highlight><bold>10</bold></highlight> as a collection of logical volumes. Since the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> do not see the underlying physical layout, the physical distribution of data in the storage subsystem <highlight><bold>10</bold></highlight> may be changed transparently to the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight>. One way of changing the distribution of data involves performing a series of swaps between pairs of the physical storage volumes A-G. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of one of the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1, i</cross-reference>.e., host device <highlight><bold>12</bold></highlight>. The host device <highlight><bold>12</bold></highlight> is a personal computer that has a microprocessor <highlight><bold>30</bold></highlight>, a data storage device <highlight><bold>32</bold></highlight>, such as a random access memory (RAM), and/or mass storage such as a magnetic or optical disk, and an I/O interface <highlight><bold>34</bold></highlight>. The data storage device <highlight><bold>32</bold></highlight> stores application programs <highlight><bold>36</bold></highlight>, <highlight><bold>37</bold></highlight> and a communication program <highlight><bold>38</bold></highlight> that can be executed by the microprocessor <highlight><bold>30</bold></highlight>. The application programs <highlight><bold>36</bold></highlight>, <highlight><bold>37</bold></highlight> communicate with the storage subsystem <highlight><bold>10</bold></highlight> through the communication program <highlight><bold>38</bold></highlight>. The communication program <highlight><bold>38</bold></highlight> also generates a GUI that enables a user to control communications interactively. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 1A, a</cross-reference> service processor <highlight><bold>28</bold></highlight> couples to the global memory <highlight><bold>19</bold></highlight> through a bus <highlight><bold>20</bold></highlight>&Prime; and the controller <highlight><bold>23</bold></highlight>. The global memory <highlight><bold>19</bold></highlight> stores a mailbox <highlight><bold>29</bold></highlight> for the service processor <highlight><bold>28</bold></highlight> at a fixed and known address. The mailbox <highlight><bold>29</bold></highlight> can receive and store data from the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight>. Subsequently, the stored data can be read from the mailbox <highlight><bold>29</bold></highlight> by the service processor <highlight><bold>28</bold></highlight>. The mailbox <highlight><bold>29</bold></highlight> provides file locations for direct communication between the host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> and the service processor <highlight><bold>28</bold></highlight>. The service processor <highlight><bold>28</bold></highlight> may read its mailbox <highlight><bold>29</bold></highlight> frequently, e.g., every minute. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating the service processor <highlight><bold>28</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The service process is a programmed computer, e.g., a laptop, that has a microprocessor <highlight><bold>41</bold></highlight>, a data storage device <highlight><bold>42</bold></highlight>, e.g., a RAM, a hard drive, and/or a mass storage such as a magnetic or optical disk, and an interface <highlight><bold>43</bold></highlight>. The data storage device <highlight><bold>42</bold></highlight> stores a software program <highlight><bold>44</bold></highlight> for balancing workloads, a communication program <highlight><bold>45</bold></highlight>, and a table <highlight><bold>46</bold></highlight> for storing historical data describing the workloads. The programs <highlight><bold>44</bold></highlight>, <highlight><bold>45</bold></highlight> are executable by the microprocessor <highlight><bold>41</bold></highlight>. The program <highlight><bold>44</bold></highlight> for balancing workloads generates a GUI that enables interactive user control while balancing workloads of the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. The program <highlight><bold>44</bold></highlight> communicates with the storage subsystem <highlight><bold>10</bold></highlight> through the communication program <highlight><bold>45</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> illustrates the table <highlight><bold>46</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, which stores historical data on the workloads of the storage volumes A-G. The table <highlight><bold>46</bold></highlight> is a matrix having columns <highlight><bold>47</bold></highlight> that identify individual storage volumes A-G and rows <highlight><bold>48</bold></highlight> that identify time slices over which the workload data has been collected. Each entry is a counter value indicating a total number of data accesses to the associated physical storage volume A-G. In some embodiments, the entries give separate counter values for the numbers of reads, writes and prefetches to the associated storage volume A-G. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Several properties of the table <highlight><bold>46</bold></highlight> are controlled by parameter values read from the service processor&equals;s mailbox <highlight><bold>29</bold></highlight>. One such parameter determines the total number N of rows <highlight><bold>48</bold></highlight> in the table <highlight><bold>46</bold></highlight>, i.e., the maximum number of time slices of stored workload data. Other such parameters, of column <highlight><bold>49</bold></highlight> determine whether to exclude data from selected rows <highlight><bold>48</bold></highlight> of the table <highlight><bold>46</bold></highlight> from use in algorithms that select the data swaps used to better balance workloads of the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, other control parameters fix swap priorities for each individual storage volume A-G. The service processor <highlight><bold>28</bold></highlight> stores the values of the swap priorities in a file <highlight><bold>50</bold></highlight>. The service processor <highlight><bold>28</bold></highlight> updates the swap priorities in the file <highlight><bold>50</bold></highlight> by reading new values of the priorities from the mailbox <highlight><bold>29</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In one embodiment, the swap priority for a storage volume A-G can have one of three values, i.e., enabled, disabled, and preferred. The value disabled stops the service processor <highlight><bold>28</bold></highlight> from swapping data in the associated storage volume A-G. The enabled value allows the service processor <highlight><bold>28</bold></highlight> to swap data in the associated storage volume A-G. The preferred value makes the service processor <highlight><bold>28</bold></highlight> swap the associated storage volume A-G before swapping storage volumes having the enabled value as explained in more detail below. The preferred priority may be assigned to those storage volumes A-G requiring fast accesses. </paragraph>
</section>
<section>
<heading lvl="1">BALANCING WORKLOADS </heading>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The service processor <highlight><bold>28</bold></highlight> balances workloads of the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> based on historical data detailing the number of data accesses. The host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> can adjust the balancing process. The host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> can change values of control parameters for the process by writing new values to the service processor&equals;s mailbox <highlight><bold>29</bold></highlight>. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> is a flow chart illustrating a cyclic method <highlight><bold>51</bold></highlight> used by the service processor <highlight><bold>28</bold></highlight> to better balance workloads of the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. To start a new balancing cycle, the service processor <highlight><bold>28</bold></highlight> reads its mailbox <highlight><bold>29</bold></highlight> to get new values, if any, of parameters that control the balancing process (step <highlight><bold>52</bold></highlight>). Then, the service processor <highlight><bold>28</bold></highlight> collects samples of historical data (step <highlight><bold>53</bold></highlight>). The samples describe the number of data accesses to each physical storage volume A-G of the storage subsystem <highlight><bold>10</bold></highlight> during a time slice. The collected historical data is stored in the internal table <highlight><bold>46</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> After collecting each sample, the service processor <highlight><bold>28</bold></highlight> loop back (<highlight><bold>53</bold></highlight>&prime;) to step <highlight><bold>52</bold></highlight> to start the collection cycle for the next sequential time slice by rereading the mailbox <highlight><bold>29</bold></highlight>. The loop back frequency is controlled by a control parameter obtained from the mailbox <highlight><bold>29</bold></highlight>. The default frequency is once every fifteen minutes. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> After collecting a predetermined number of samples, the service processor <highlight><bold>28</bold></highlight> selects data swaps that will lead to better-balanced workloads for the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> (step <highlight><bold>54</bold></highlight>). The predetermined number of samples is fixed by another control parameter from the mailbox <highlight><bold>29</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The swap selections are based on predictions that assume that future workloads will track trends described by the historical data. One algorithm selects data swaps that would have produce more balanced workloads when averaged over the period of the historical workload data provided that the swaps had been performed earlier. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> The selected data swaps are performed to implement balancing (step <highlight><bold>55</bold></highlight>). After performing the swaps, the service processor <highlight><bold>28</bold></highlight> performs loop <highlight><bold>55</bold></highlight>&prime; to restart the balancing process. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The service processor <highlight><bold>28</bold></highlight> regularly rereads the mailbox <highlight><bold>29</bold></highlight>. After each read, the service processor performs loop <highlight><bold>52</bold></highlight>&prime; waiting a preselected time and then rereading the mailbox <highlight><bold>29</bold></highlight>. Parameters from each read are used to re-initialize control parameters stored in the service processor <highlight><bold>28</bold></highlight> for controlling workload balancing. The frequent rereads of the mailbox <highlight><bold>29</bold></highlight> keep the method <highlight><bold>51</bold></highlight> updated with respect to changes in the control parameters. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> As an example of the timing of loops <highlight><bold>52</bold></highlight>&prime;, <highlight><bold>53</bold></highlight>&prime;, and <highlight><bold>55</bold></highlight>&prime;, the service processor <highlight><bold>28</bold></highlight> may perform loop <highlight><bold>52</bold></highlight>&prime; every minute, perform loop <highlight><bold>53</bold></highlight>&prime; every fifteen minutes, and perform loop <highlight><bold>55</bold></highlight>&prime; every day. But, the length of each loop <highlight><bold>52</bold></highlight>&prime;, <highlight><bold>53</bold></highlight>&prime;, <highlight><bold>55</bold></highlight>&prime; can differ substantially. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> is a more detailed flow chart for a method <highlight><bold>56</bold></highlight> of selecting the data swaps that balance workloads as described in step <highlight><bold>54</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. To start the selection of data swaps, the service processor <highlight><bold>28</bold></highlight> ranks the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> according to workloads (step <highlight><bold>57</bold></highlight>). The ranking is based on the non-excluded historical data from the table <highlight><bold>46</bold></highlight>. After performing the ranking, the service processor <highlight><bold>28</bold></highlight> pairs off the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> (step <highlight><bold>58</bold></highlight>). The storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> having the heaviest workloads are paired off with the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> with the lightest workloads. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> For each identified pair of storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> searches for swaps of physical storage volumes A-G that produce better balanced workloads (step <highlight><bold>59</bold></highlight>). A swap must reduce historical imbalances of workloads for the paired storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> by more than predetermined threshold amount, e.g., ten percent, to be retained. Two storage volumes A-G must have the same size and emulation characteristics to qualify as potentially swappable. The service processor <highlight><bold>28</bold></highlight> then orders the storage subsystem <highlight><bold>10</bold></highlight> to perform the retained swaps (step <highlight><bold>60</bold></highlight>). The retained swaps are performed, at step <highlight><bold>60</bold></highlight>, provided that the swaps are not time excluded by control parameters and data availability will not be compromised. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The service processor <highlight><bold>28</bold></highlight> makes a check to determine whether performing the swap will impact data availability. Availability is less affected if the storage subsystem <highlight><bold>10</bold></highlight> has multiple copies of the data to be swapped. If multiple copies exist, the swap of a storage volume A-G holding one copy does not reduce the overall availability of the data. If swapping compromises data availability, the swap is not performed at step <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> To implement priorities stored in file <highlight><bold>50</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, the service processor <highlight><bold>28</bold></highlight> searches for swaps of storage volumes A-G in two stages for each pair of storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. First, the service processor <highlight><bold>28</bold></highlight> searches for swaps of storage volumes A-G of a pair of devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> in which at least one volume A-G of the pair has the &ldquo;preferred&rdquo; priority value. Second, the service processor <highlight><bold>28</bold></highlight> searches for additional swaps between the remaining storage volumes A-G that will further balance the pair. The additional swaps are between storage volumes A-G having the &ldquo;enabled&rdquo; priority value. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>A, the data of the table <highlight><bold>46</bold></highlight> will be used to illustrate one algorithm for selecting data swaps in steps <highlight><bold>57</bold></highlight>-<highlight><bold>59</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5B</cross-reference>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> At step <highlight><bold>57</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> uses an algorithm that ranks the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> based on average workload per non-excluded time slice. Non-excluded time slices correspond to rows <highlight><bold>1</bold></highlight>-<highlight><bold>3</bold></highlight> of exemplary table <highlight><bold>46</bold></highlight> as is seen from the column <highlight><bold>49</bold></highlight>. During the non-excluded time slices, table <highlight><bold>46</bold></highlight> shows that the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> had 66 and 36 accesses, respectively. During the same period, the storage device <highlight><bold>17</bold></highlight> had 54 accesses (not shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>). From the numbers of accesses, the average workloads of the storage devices <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, and <highlight><bold>17</bold></highlight> are 22, 12, and 18 accesses per time slice, respectively. Thus, the service processor <highlight><bold>28</bold></highlight> will rank the respective storage devices <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight>, and <highlight><bold>17</bold></highlight> as most busy, least busy, and second most busy, respectively. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> At step <highlight><bold>58</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> pairs off the most and least busy of the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight>. Thus, the service processor <highlight><bold>28</bold></highlight> pairs storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> and determines that the storage device <highlight><bold>17</bold></highlight> will not participate in data swaps. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> At step <highlight><bold>59</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> uses a search algorithm to select data swaps that decrease workload imbalances by more than a threshold amount. Since the imbalance between the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> is ten accesses per time slice, only data swap that reduce the imbalance by at least 2.5 accesses per time slice can be selected if the threshold is 25%. Swapping the data of storage volume A with storage volume D or E will reduce the imbalance between storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> by 1.33 and 2 accesses per time slice, respectively. Both reductions are too small for the service processor <highlight><bold>28</bold></highlight> to select these data swaps. Swapping storage volumes A and E will reduce the imbalance between the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> by 4.66 accesses per time slice, which is greater than the exemplary threshold of twenty-five percent. Thus, the service processor <highlight><bold>28</bold></highlight> will select the data swap between volume A and volume E at step <highlight><bold>59</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> After selecting the data swap between storage volumes A and E, the service process <highlight><bold>28</bold></highlight> searches for other data swaps between the remaining storage volumes B, C and D, F. Any further selections of data swaps must further decrease the workload imbalance between the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight> by an above threshold amount. Swapping the storage volumes A and E makes the workload of the storage device <highlight><bold>15</bold></highlight> less than the workload of the storage device <highlight><bold>16</bold></highlight>. Any data swaps between the storage volumes B, C and the storage volumes D, F will increase the imbalance between the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight>. Thus, the method <highlight><bold>56</bold></highlight> will only select to swap the storage volumes A and E for the workloads shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Other algorithms exist for determining which data swaps better balance workloads at step <highlight><bold>59</bold></highlight>. Co-pending U.S. application Ser. No. 09/______,______, &ldquo;Maximizing Sequential Output in a Disk Array Storage Device&rdquo;, by Eitan Bachmat et al, filed Sep. 15, 1999, and co-pending U.S. application Ser. No. 09/______,______, &ldquo;Method for Analyzing Disk Seek Times in a Disk Array Storage Device&rdquo; by Tao Kai Lam et al, filed Sep. 15, 1999 disclose, such algorithms and are incorporated by reference, in their entirety, in the present application. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C illustrate a time sequence for making the above-selected data swap between storage volumes A and E of the storage devices <highlight><bold>15</bold></highlight> and <highlight><bold>16</bold></highlight>. To swap data, the pair of physical storage volumes A and E should have the same size and store data in the same emulation, e.g., fixed-block versus count-key-data. The swap uses a pair of buffer storage regions H and I, which are large enough to store the data from the storage volumes A and E, respectively. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> shows the storage devices <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight> and buffers H, I prior to the swap. Storage volumes A-C and D-F contain data D<highlight><subscript>A</subscript></highlight>-D<highlight><subscript>C </subscript></highlight>and D<highlight><subscript>D</subscript></highlight>-D<highlight><subscript>F</subscript></highlight>, respectively. The buffers H, I initially store old or nonsense data X, Y. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> shows the storage devices <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight> and buffers H, I after a parallel write of the data D<highlight><subscript>A </subscript></highlight>and D<highlight><subscript>E </subscript></highlight>from the storage volumes A, E to the buffers H, I. Now, the buffers H, I store the data D<highlight><subscript>A </subscript></highlight>and D<highlight><subscript>E </subscript></highlight>being swapped. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6C</cross-reference> shows the storage devices <highlight><bold>15</bold></highlight>, <highlight><bold>16</bold></highlight> and buffers H, I after parallel writes of the data D<highlight><subscript>A </subscript></highlight>from buffer H and the data D<highlight><subscript>E </subscript></highlight>from buffer I back to the storage volumes E and A, respectively. The write back sends the data D<highlight><subscript>A </subscript></highlight>originally in the storage volume A to the storage volume E and the data D<highlight><subscript>E </subscript></highlight>originally in the storage volume E to the storage volume A completing the swap. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> The service processor <highlight><bold>28</bold></highlight> also changes mapping information relating the physical storage volumes A, E, which store the data D<highlight><subscript>A</subscript></highlight>, D<highlight><subscript>E </subscript></highlight>to logical identifiers. After changing the mapping information, the logical identifiers for D<highlight><subscript>A </subscript></highlight>point to the storage volume E and the logical identifiers for D<highlight><subscript>E </subscript></highlight>point to the storage volume A. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates the form of the mailbox <highlight><bold>29</bold></highlight> assigned to the service processor <highlight><bold>28</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The mailbox <highlight><bold>29</bold></highlight> stores control parameters <highlight><bold>72</bold></highlight>-<highlight><bold>79</bold></highlight> whose validity or invalidity is indicated in a header <highlight><bold>87</bold></highlight> area. The control parameters <highlight><bold>72</bold></highlight>-<highlight><bold>79</bold></highlight> can be overwritten by the host devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> to change details of the method <highlight><bold>51</bold></highlight>, <highlight><bold>56</bold></highlight> of FIGS. <highlight><bold>5</bold></highlight>A-<highlight><bold>5</bold></highlight>B. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> One parameter <highlight><bold>72</bold></highlight> of the mailbox <highlight><bold>29</bold></highlight> acts like a switch for turning the method <highlight><bold>50</bold></highlight> on and off. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The parameters <highlight><bold>73</bold></highlight>-<highlight><bold>74</bold></highlight> control the collection of data on workloads, shown in step <highlight><bold>53</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. The parameter <highlight><bold>73</bold></highlight> defines the frequency at which the service processor <highlight><bold>28</bold></highlight> samples for new data on workloads of the storage volumes A-G. The parameter <highlight><bold>74</bold></highlight> defines the maximum number of time slices of workload data that the service processor <highlight><bold>28</bold></highlight> stores in the table <highlight><bold>46</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The parameters <highlight><bold>75</bold></highlight>-<highlight><bold>77</bold></highlight> control the method for selecting which storage volumes A-G to swap at steps <highlight><bold>54</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. The parameter <highlight><bold>75</bold></highlight> defines the number of time slices of workload data collected between selections of storage volumes A-G to swap. The parameter <highlight><bold>76</bold></highlight> indicates time slices of collected historical data that should be ignored when ranking the storage devices <highlight><bold>15</bold></highlight>-<highlight><bold>17</bold></highlight> and searching for swaps at steps <highlight><bold>54</bold></highlight> and <highlight><bold>59</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 5A and 5B</cross-reference>. The parameter <highlight><bold>76</bold></highlight> enables users to determine which workload data is used during swap selection. For example, a user may exclude weekends that are unlikely to be indicative of actual workloads on weekdays. The parameter <highlight><bold>77</bold></highlight> limits the run time for selecting storage volumes to swap. The run time limit enables users to cut off long determinations, which occur when swaps would only produce small improvements to load balancing. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Finally, the parameter <highlight><bold>79</bold></highlight> defines an exclusion time zone in which performing selected swaps is forbidden. The exclusion time zone does not affect the collection of historical data at step <highlight><bold>53</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The parameters <highlight><bold>78</bold></highlight> assign a value for a swapping priority to each physical storage volume A-G. The three values of the priority are disabled, enabled, and preferred. A storage volume A-G with the &ldquo;disabled&rdquo; value cannot be swapped. Storage volumes A-G with either the &ldquo;enabled&rdquo; or the &ldquo;preferred&rdquo; values can be swapped. A storage volume A-G with the &ldquo;preferred&rdquo; value swaps preferentially over a storage volume A-G with the &ldquo;enabled&rdquo; value as was explained above in more detail. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a method <highlight><bold>80</bold></highlight> by which a device, e.g., host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> and service processor <highlight><bold>28</bold></highlight>, accesses the service processor&apos;s mailbox <highlight><bold>29</bold></highlight>. The device sends a message to the controller <highlight><bold>18</bold></highlight> requesting the right to access the mailbox <highlight><bold>29</bold></highlight> (step <highlight><bold>82</bold></highlight>). If the mailbox <highlight><bold>29</bold></highlight> is locked, the device receives an &ldquo;access denied&rdquo; message from the controller (step <highlight><bold>84</bold></highlight>). The device waits a preselected time to enable other devices to release the lock on the mailbox <highlight><bold>29</bold></highlight> before again requesting access (step <highlight><bold>86</bold></highlight>). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the mailbox <highlight><bold>29</bold></highlight> is locked while any device has a right to access. The locked status is indicated by a flag entry stored at a known storage location <highlight><bold>85</bold></highlight> of the memory <highlight><bold>19</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Only one device has the right of access to the mailbox <highlight><bold>29</bold></highlight> at one time so that consistency of the control parameters therein is assured. To release the locked status, the device granted the right of access must take an affirmative action. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the device receives an &ldquo;access granted&rdquo; message from the controller <highlight><bold>18</bold></highlight> if the mailbox <highlight><bold>29</bold></highlight> is not locked (step <highlight><bold>88</bold></highlight>). After being granted access, the device accesses the mailbox <highlight><bold>29</bold></highlight> to read and/or write control parameters as desired (step <highlight><bold>90</bold></highlight>). After completing the desired accesses, the device sends a message to the controller <highlight><bold>18</bold></highlight> to terminate its right of access to the mailbox <highlight><bold>29</bold></highlight>, i.e., to unlock the mailbox <highlight><bold>28</bold></highlight> (step <highlight><bold>92</bold></highlight>). </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> After being unlocked, other host devices <highlight><bold>12</bold></highlight>-<highlight><bold>14</bold></highlight> can access the mailbox <highlight><bold>29</bold></highlight>. If new values of the control parameters are written to the mailbox <highlight><bold>29</bold></highlight>, the new values affect the balancing of workloads after the service processor <highlight><bold>28</bold></highlight> again reads the mailbox <highlight><bold>29</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flow chart illustrating one method <highlight><bold>100</bold></highlight> of collecting historical data on workloads at step <highlight><bold>53</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. The service processor <highlight><bold>28</bold></highlight> reads the mailbox <highlight><bold>29</bold></highlight> according to the method <highlight><bold>80</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> to get parameters for initializing the program <highlight><bold>44</bold></highlight> for balancing workloads (step <highlight><bold>102</bold></highlight>). The service processor <highlight><bold>28</bold></highlight> rereads the mail box regularly, e.g., once per minute (loop <highlight><bold>103</bold></highlight>). After getting initial values of the control parameters, the service processor <highlight><bold>28</bold></highlight> polls the storage subsystem <highlight><bold>10</bold></highlight> to obtain a sample of workload data for each physical storage volume A-G (step <highlight><bold>104</bold></highlight>). Next, the service processor <highlight><bold>28</bold></highlight> checks whether the number of collected samples exceeds the value of the parameter <highlight><bold>74</bold></highlight>, shown in FIG. <highlight><bold>7</bold></highlight>, for the number of samples to store (step <highlight><bold>106</bold></highlight>). The control parameter <highlight><bold>74</bold></highlight> fixes the maximum number of time slices for which samples are stored in the table of historical data on workloads <highlight><bold>46</bold></highlight>, shown in <cross-reference target="DRAWINGS">FIG. 4A</cross-reference>. If the number of time slices for collected samples exceeds the value of the parameter <highlight><bold>74</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> overwrites the sample in the table <highlight><bold>46</bold></highlight> for the oldest time slice with the new sample (step <highlight><bold>108</bold></highlight>). Otherwise, the service processor <highlight><bold>28</bold></highlight> writes a new entry for the new sample in the table <highlight><bold>46</bold></highlight> (step <highlight><bold>110</bold></highlight>). </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> After writing the new workload data in the table <highlight><bold>46</bold></highlight>, the service processor <highlight><bold>28</bold></highlight> returns step <highlight><bold>104</bold></highlight> to reread the mailbox starting a new sampling cycle (loop <highlight><bold>112</bold></highlight>). The service processor <highlight><bold>28</bold></highlight> polls for samples of workload data with a sampling frequency fixed by a control parameter read from the mailbox <highlight><bold>29</bold></highlight> at step <highlight><bold>102</bold></highlight>. After a predetermined number of samples have been collected, the service processor <highlight><bold>28</bold></highlight> selects and performs swaps to better balance workloads, i.e., steps <highlight><bold>54</bold></highlight>-<highlight><bold>55</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5A</cross-reference>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> Other additions, subtractions, and modifications of the described embodiments may be apparent to one of ordinary skill in the art.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of balancing workloads of storage devices of a storage subsystem, comprising: 
<claim-text>reading a mailbox to obtain control parameters written therein by one or more host devices; </claim-text>
<claim-text>collecting historical data on numbers of accesses to storage volumes of the storage devices; and </claim-text>
<claim-text>selecting one or more data swaps that lead to better balanced workloads of storage devices based on the historical data, one of the act of selecting and the act of collecting being defined by the control parameters. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein each data swap comprises a swap of data between a pair of physical storage volumes having the same size and emulation. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein both the act of selecting and act of collecting are defined by the control parameters. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the act of collecting further comprises: 
<claim-text>updating a table having entries for numbers of accesses to physical storage volumes during a set of time slices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the control parameters determine one of a maximum number of time slices represented in the table and a frequency of collecting historical data for new time slices. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the control parameters include one of exclusion time zones for data swaps and exclusion zones for the time slices of historical data used to select data swaps. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the control parameters define a run time limit for the selecting of data swaps. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the control parameters include priorities for swapping storage volumes. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>performing the selected data swaps in response to the selected swaps not being excluded by values of the control parameters. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference>, wherein the act of selecting further comprises: 
<claim-text>ranking the storage devices by workloads; and </claim-text>
<claim-text>searching for data swaps between pairs of the storage devices that better balance workloads based on the historical data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the control parameters define a number of samples per algorithm cycle. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A storage subsystem for providing data storage to a plurality of host devices, comprising: 
<claim-text>a plurality of data storage devices accessible to host devices; </claim-text>
<claim-text>a data storage medium storing a mailbox, the mailbox storing control parameters rewritable by the host devices; and </claim-text>
<claim-text>a computer coupled to read the mailbox and storing an executable program of instructions for a method of data swapping between storage volumes of the storage subsystem, the control parameters for initializing the program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the program includes instructions for a method of collecting data on numbers of accesses to storage volumes of the storage devices during a sequence of time slices; and 
<claim-text>wherein the control parameters initialize the method of collecting data. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the control parameters initialize one of a frequency for collecting data and a number of time slices of collected data to store. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the program comprises: 
<claim-text>instructions for selecting data swaps between storage devices that better balance workloads based on the collected data; and </claim-text>
<claim-text>the control parameters include a schedule for performing new selections of the data swaps to rebalance workloads. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the schedule includes a number of time slices of new data on workloads to collect prior to performing one of the new selections of data swaps. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the schedule identifies a portion of the time slices of collected data to ignore when selecting data swaps that better balance workloads. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein the schedule fixes a time limit for selecting the data swaps. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the control parameters include priorities for swapping the physical storage volumes of the storage devices. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the program further comprises instructions for performing the selected swaps; and 
<claim-text>wherein the control parameters include an excluded time period for performing swaps. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the control parameters define a number of samples per algorithm cycle. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A storage medium storing an executable program of instructions for balancing workloads of storage devices of a storage subsystem, the instructions to cause a computer to: 
<claim-text>read a mailbox to obtain control parameters written therein by one or more host devices; </claim-text>
<claim-text>collect historical data on numbers of accesses to storage volumes of the storage devices; and </claim-text>
<claim-text>select one or more data swaps that lead to better balanced workloads of storage devices based on the historical data, one of the instructions to cause the computer to collect historical data and select one or more data swaps being initialized by the control parameters. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein each data swap is between a pair of physical storage volumes having the same size and emulation. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein both one of the instructions to cause the computer to collect historical data and one of the instructions to cause the computer to select one or more data swaps are initialized by the control parameters. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the instructions to cause the computer to collect historical data further cause the computer to: 
<claim-text>update a table with entries for numbers of accesses to physical storage volumes during a set of time slices. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the control parameters determine one of the maximum number of time slices represented in the table and a frequency of collecting the historical data for a new time slice. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the control parameters include at least one of an exclusion time zone for data swaps and an exclusion zone for the time slices of historical data available for selecting data swaps. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the control parameters define a run time limit for the acts of selecting data swaps. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the control parameters include priorities for swapping data of the storage volumes. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The storage subsystem of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the control parameters define a number of samples per algorithm cycle. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The storage medium of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the instructions further cause the computer to: 
<claim-text>perform the selected data swaps in response to the selected swaps not being excluded by the control parameters. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The storage medium of claim <highlight><bold>31</bold></highlight>, wherein the instruction to select further causes the computer to: 
<claim-text>rank the storage devices by workloads; and </claim-text>
<claim-text>search for data swaps between pairs of the storage devices that better balance workloads based on the historical data.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>5A</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005243A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005243A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005243A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005243A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005243A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005243A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005243A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005243A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005243A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005243A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005243A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
