<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005334A1-20030102-D00000.TIF SYSTEM "US20030005334A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00001.TIF SYSTEM "US20030005334A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00002.TIF SYSTEM "US20030005334A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00003.TIF SYSTEM "US20030005334A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00004.TIF SYSTEM "US20030005334A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00005.TIF SYSTEM "US20030005334A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00006.TIF SYSTEM "US20030005334A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00007.TIF SYSTEM "US20030005334A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00008.TIF SYSTEM "US20030005334A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005334A1-20030102-D00009.TIF SYSTEM "US20030005334A1-20030102-D00009.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005334</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10210326</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020801</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>201000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Firewall providing enhanced network security and user transparency</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10210326</doc-number>
<kind-code>A1</kind-code>
<document-date>20020801</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09552476</doc-number>
<document-date>20000418</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>ABANDONED</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>09552476</doc-number>
<document-date>20000418</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09299941</doc-number>
<document-date>19990426</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6052788</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>09299941</doc-number>
<document-date>19990426</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08733361</doc-number>
<document-date>19961017</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>5898830</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Ralph</given-name>
<middle-name>E.</middle-name>
<family-name>Wesinger</family-name>
<name-suffix>JR.</name-suffix>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Christopher</given-name>
<middle-name>D.</middle-name>
<family-name>Coley</family-name>
</name>
<residence>
<residence-us>
<city>Morgan Hill</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>FRANK C. NICHOLAS</name-1>
<name-2>CARDINAL LAW GROUP</name-2>
<address>
<address-1>Suite 2000</address-1>
<address-2>1603 Orrington Avenue</address-2>
<city>Evanston</city>
<state>IL</state>
<postalcode>60201</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention, generally speaking, provides a firewall that achieves maximum network security and maximum user convenience. The firewall employs &ldquo;envoys&rdquo; that exhibit the security robustness of prior-art proxies and the transparency and ease-of-use of prior-art packet filters, combining the best of both worlds. No traffic can pass through the firewall unless the firewall has established an envoy for that traffic. Both connection-oriented (e.g., TCP) and connectionless (e.g., UDP-based) services may be handled using envoys. Establishment of an envoy may be subjected to a myriad of tests to &ldquo;qualify&rdquo; the user, the requested communication, or both. Therefore, a high level of security may be achieved. The usual added burden of prior-art proxy systems is avoided in such a way as to achieve fall transparency-the user can use standard applications and need not even know of the existence of the firewall. To achieve full transparency, the firewall is configured as two or more sets of virtual hosts. The firewall is, therefore, &ldquo;multi-homed,&rdquo; each home being independently configurable. One set of hosts responds to addresses on a first network interface of the firewall. Another set of hosts responds to addresses on a second network interface of the firewall. In one aspect, programmable transparency is achieved by establishing DNS mappings between remote hosts to be accessed through one of the network interfaces and respective virtual hosts on that interface. In another aspect, automatic transparency may be achieved using code for dynamically mapping remote hosts to virtual hosts in accordance with a technique referred to herein as dynamic DNS, or DDNS. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application claims priority to U.S. patent application Ser. No. 09/552,476 filed on Apr. 18, 2000 entitled &ldquo;Firewall Providing Enhanced Network Security and User Transparency&rdquo; by Ralph E. Wesinger, Jr., et al., which is a continuation of U.S. patent application Ser. No. 09/299,941 filed on Apr. 26,1999 entitled &ldquo;Firewall Providing Enhanced Network Security and User Transparency&rdquo; by Ralph E. Wesinger, Jr., et al. now issued as U.S. Pat. No. 6,052,788, which is a continuation of U.S. patent application Ser. No. 08/733,361 filed on Oct. 17,1996 entitled &ldquo;Firewall Providing Enhanced Network Security and User Transparency&rdquo; by Ralph E. Wesinger, Jr., et al., now issued as U.S. Pat. No. 5,898,830 the entire disclosures of which are incorporated by reference, herein.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to computer network security and more particularly to firewalls, i.e., a combination of computer hardware and software that selectively allows &ldquo;acceptable&rdquo; computer transmissions to pass through it and disallows other non-acceptable computer transmissions. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In the space of just a few years, the Internet&mdash;because it provides access to information, and the ability to publish information, in revolutionary ways&mdash;has emerged from relative obscurity to international prominence. Whereas in general an internet is a network of networks, the Internet is a global collection of interconnected local, mid-level, and wide-area networks that use the Internet Protocol (IP) as the network layer protocol. Whereas the Internet embraces many local- and wide-area networks, a given local- or wide-area network may or may not form part of the Internet. For purposes of the present specification, a &ldquo;wide-area network&rdquo; (WAN) is a network that links at least two LANs over a wide geographical area via one or more dedicated connections. The public switched telephone network is an example of a wide-area network. A &ldquo;local-area network&rdquo; (LAN) is a network that takes advantage of the proximity of computers to typically offer relatively efficient, higher speed communications than wide-area networks. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> In addition, a network may use the same underlying technologies as the Internet. Such a network is referred to herein as an &ldquo;Intranet,&rdquo; an internal network based on Internet standards. Because the Internet has become the most pervasive and successful open networking standard, basing internal networks on the same standard is very attractive economically. Corporate Intranets have become a strong driving force in the marketplace of network products and services. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The present invention is directed primarily toward the connection of an Intranet to the Internet and the connection of intranets to other intranets, and any network connection where security is an issue. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> As the Internet and its underlying technologies have become increasingly familiar, attention has become focused on Internet security and computer network security in general. With unprecedented access to information has also come unprecedented opportunities to gain unauthorized access to data, change data, destroy data, make unauthorized use of computer resources, interfere with the intended use of computer resources, etc. As experience has shown, the frontier of cyberspace has its share of scofflaws, resulting in increased efforts to protect the data, resources, and reputations of those embracing intranets and the Internet. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Firewalls are intended to shield data and resources from the potential ravages of computer network intruders. In essence, a firewall functions as a mechanism which monitors and controls the flow of data between two networks. All communications, e.g., data packets, which flow between the networks in either direction must pass through the firewall; otherwise, security is circumvented. The firewall selectively permits the communications to pass from one network to the other, to provide bidirectional security. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Ideally, a firewall would be able to prevent any and all security breaches and attacks. Although absolute security is indeed a goal to be sought after, due to many variables (e.g., physical intrusion into the physical plant) it may be difficult to achieve. However, in many instances, it is of equal if not greater importance to be alerted to an attack so that measures may be taken to thwart the attack or render it harmless, and to avoid future attacks of the same kind. Hence a firewall, in addition to security, should provide timely information that enables attacks to be detected. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Firewalls have typically relied on some combination of two techniques affording network protection: packet filtering and proxy services. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Packet filtering is the action a firewall takes to selectively control the flow of data to and from a network. Packet filters allow or block packets, usually while routing them from one network to another (often from the Internet to an internal network, and vice versa). To accomplish packet filtering, a network administrator establishes a set of rules that specify what types of packets (e.g., those to or from a particular IP address or port) are to be allowed to pass and what types are to be blocked. Packet filtering may occur in a router, in a bridge, or on an individual host computer. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> Packet filters are typically configured in a &ldquo;default permit stance&rdquo;; i.e., that which is not expressly prohibited is permitted. In order for a packet filter to prohibit potentially harmful traffic, it must know what the constituent packets of that traffic look like. However, it is virtually impossible to catalogue all the various types of potentially harmful packets and to distinguish them from benign packet traffic. The filtering function required to do so is too complex. Hence, while most packet filters may be effective in dealing with the most common types of network security threats, this methodology presents many chinks that an experienced hacker may exploit. The level of security afforded by packet filtering, therefore, leaves much to be desired. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Recently, a further network security technique termed &ldquo;stateful inspection&rdquo; has emerged. Stateful inspection performs packet filtering not on the basis of a single packet, but on the basis of some historical window of packets on the same port. Although stateful inspection may enhance the level of security achievable using packet filtering, it is as yet relatively unproven. Furthermore, although an historical window of packets may enable the filter to more accurately identify harmful packets, the filter must still know what it is looking for. Building a filter with sufficient intelligence to deal with the almost infinite variety of possible packets and packet sequences is liable to prove an exceedingly difficult task. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The other principal methodology used in present-day firewalls is proxies. In order to describe prior-art proxy-based firewalls, some further definitions are required. A &ldquo;node&rdquo; is an entity that participates in network communications. A subnetwork is a portion of a network, or a physically independent network, that may share network addresses with other portions of the network. An intermediate system is a node that is connected to more than one subnetwork and that has the role of forwarding data from one subnetwork to the other (i.e., a &ldquo;router&rdquo;). </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> A proxy is a program, running on an intermediate system, that deals with servers (e.g., Web servers, FTP servers, etc.) on behalf of clients. Clients, e.g. computer applications which are attempting to communicate with a network that is protected by a firewall, send requests for connections to proxy-based intermediate systems. Proxy-based intermediate systems relay approved client requests to target servers and relay answers back to clients. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Proxies require either custom software (i.e., proxy-aware applications) or custom user procedures in order to establish a connection. Using custom software for proxying presents several problems. Appropriate custom client software is often available only for certain platforms, and the software available for a particular platform may not be the software that users prefer. Furthermore, using custom client software, users must perform extra manual configuration to direct the software to contact the proxy on the intermediate system. With the custom procedure approach, the user tells the client to connect to the proxy and then tells the proxy which host to connect to. Typically, the user will first enter the name of a firewall that the user wishes to connect through. The firewall will then prompt the user for the name of the remote host the user wishes to connect to. Although this procedure is relatively simple in the case of a connection that traverses only a single firewall, as network systems grow in complexity, a connection may traverse several firewalls. Establishing a proxied connection in such a situation starts to become a confusing maze, and a significant burden to the user, since the user must know the route the connection is to take. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Furthermore, since proxies must typically prompt the user or the client software for a destination using a specific protocol, they are protocol-specific. Separate proxies are therefore required for each protocol that is to be used. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Another problematic aspect of conventional firewall arrangements, from a security perspective, is the common practice of combining a firewall with other packages on the same computing system. The firewall package itself may be a combination of applications. For example, one well-known firewall is a combination Web server and firewall. In other cases, unrelated services may be hosted on the same computing platform used for the firewall. Such services may include e-mail, Web servers, databases, etc. The provision of applications in addition to the firewall on a computing system provides a path through which a hacker can potentially get around the security provided by the firewall. Combining other applications on the same machine as a firewall also has the result of allowing a greater number of users access to the machine. The likelihood then increases that a user will, deliberately or inadvertently cause a security breach. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> There remains a need for a firewall that achieves both maximum security and maximum user convenience, such that the steps required to establish a connection are transparent to the user. The present invention addresses this need. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> The present invention, generally speaking, provides a firewall that achieves maximum network security and maximum user convenience. The firewall employs &ldquo;envoys&rdquo; that exhibit the security robustness of prior-art proxies and the transparency and ease-of-use of prior-art packet filters, combining the best of both worlds. No traffic can pass through the firewall unless the firewall has established an envoy for that traffic. Both connection-oriented (e.g., TCP) and connectionless (e.g., UDP-based) services may be handled using envoys. Establishment of an envoy may be subjected to a myriad of tests to &ldquo;qualify&rdquo; the user, the requested communication, or both. Therefore, a high level of security may be achieved. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Security may be further enhanced using out-of-band authentication. In this approach, a communication channel, or medium, other than the one over which the network communication is to take place, is used to transmit or convey an access key. The key may be transmitted from a remote location (e.g, using a pager or other transmission device) or may be conveyed locally using a hardware token, for example. To gain access, a hacker must have access to a device (e.g., a pager, a token etc.) used to receive the out-of-band information. Pager beep-back or similar authentication techniques may be especially advantageous in that, if a hacker attempts unauthorized access to a machine while the authorized user is n possession of the device, the user will be alerted by the device unexpectedly receiving the access key. The key is unique to each transmission, such that even if a hacker is able to obtain it, it cannot be used at other times or places or with respect to any other connection. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Using envoys, the added burden associated with prior-art proxy systems is avoided so as to achieve full transparency-the user can use standard applications and need not even know of the existence of the firewall. To achieve full transparency, the firewall is configured as two sets of virtual hosts. The firewall is, therefore, &ldquo;multi-homed,&rdquo; each home being independently configurable. One set of hosts responds to addresses on a first network interface of the firewall. Another set of hosts responds to addresses on a second network interface of the firewall. In accordance with one aspect of the invention, programmable transparency is achieved by establishing DNS mappings between remote hosts to be accessed through one of the network interfaces and respective virtual hosts on that interface. In accordance with another aspect of the invention, automatic transparency may be achieved using code for dynamically mapping remote hosts to virtual hosts in accordance with a technique referred to herein as dynamic DNS, or DDNS. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The firewall may have more than two network interfaces, each with its own set of virtual hosts. Multiple firewalls may be used to isolate multiple network layers. The full transparency attribute of a single firewall system remains unchanged in a multi-layered system: a user may, if authorized, access a remote host multiple network layers removed, without knowing of the existence of any of the multiple firewalls in the system. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Furthermore, the firewalls may be configured to also transparently perform any of various kinds of channel processing, including various types of encryption and decryption, compression and decompression, etc. In this way, virtual private networks may be established whereby two remote machines communicate securely, regardless of the degree of proximity or separation, in the same manner as if the machines were on the same local area network. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The problem of Internet address scarcity may also be addressed using multi-layer network systems of the type described. Whereas addresses on both sides of a single firewall must be unique in order to avoid routing errors, network segments separated by multiple firewalls may reuse the same addresses.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWING </heading>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The present invention may be further understood from the following description in conjunction with the appended drawing. In the drawing: </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a multi-layered computer enterprise network in which the present invention may be used; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of a network similar to the network of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> but in which a two-sided firewall has been replaced by a three-sided firewall; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram showing in greater detail a special-purpose virtual host used for configuration of a firewall; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of a load-sharing firewall; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of one embodiment of the firewall of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram illustrating the manner in which the present firewall handles connection requests; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is an example of a portion of the master configuration file of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a block diagram illustrating in greater detail the structure of the present firewall; and </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram of a combination firewall that allows the bulk of the entire Internet address space to be used on both sides of the firewall.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PRESENTLY PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The following terms are used in the present specification in accordance with the following definitions:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="84PT" align="left"/>
<colspec colname="2" colwidth="133PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Concept/Feature</entry>
<entry>Definition</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Multi-homing</entry>
<entry>Multiple virtual hosts running on a</entry>
</row>
<row>
<entry></entry>
<entry>single physical machine, using multiple</entry>
</row>
<row>
<entry></entry>
<entry>network addresses on a single network</entry>
</row>
<row>
<entry></entry>
<entry>interface. A virtual host assumes the</entry>
</row>
<row>
<entry></entry>
<entry>identity of one of multipe,</entry>
</row>
<row>
<entry></entry>
<entry>independently-configurable &ldquo;homes&rdquo; to</entry>
</row>
<row>
<entry></entry>
<entry>handle a particular connection at a</entry>
</row>
<row>
<entry></entry>
<entry>particular time.</entry>
</row>
<row>
<entry>Programmable transparency</entry>
<entry>The ability to establish a connection</entry>
</row>
<row>
<entry></entry>
<entry>through a firewall without requiring</entry>
</row>
<row>
<entry></entry>
<entry>that the user be aware of the firewall.</entry>
</row>
<row>
<entry>Envoy</entry>
<entry>An intervening program that functions</entry>
</row>
<row>
<entry></entry>
<entry>as a transparent applications gateway.</entry>
</row>
<row>
<entry>Multi-layering</entry>
<entry>The use of programmable transparency</entry>
</row>
<row>
<entry></entry>
<entry>to achieve end-to-end connection</entry>
</row>
<row>
<entry></entry>
<entry>across an arbitrary number of networks</entry>
</row>
<row>
<entry></entry>
<entry>that are connected by multiple multi-</entry>
</row>
<row>
<entry></entry>
<entry>homing firewalls.</entry>
</row>
<row>
<entry>Configurator</entry>
<entry>Code that provides a Web-like</entry>
</row>
<row>
<entry></entry>
<entry>interface, accessible remotely through</entry>
</row>
<row>
<entry></entry>
<entry>a secure port, for configuring a</entry>
</row>
<row>
<entry></entry>
<entry>firewall.</entry>
</row>
<row>
<entry>N-dimensional firewall</entry>
<entry>A firewall having N network interfaces</entry>
</row>
<row>
<entry></entry>
<entry>and configured to provide multiple</entry>
</row>
<row>
<entry></entry>
<entry>virtual hosts for each interface.</entry>
</row>
<row>
<entry>Out-of-band authentication</entry>
<entry>In deciding whether to allow or</entry>
</row>
<row>
<entry></entry>
<entry>disallow a connection by a user, the</entry>
</row>
<row>
<entry></entry>
<entry>use of information communicated to</entry>
</row>
<row>
<entry></entry>
<entry>the user through means other than the</entry>
</row>
<row>
<entry></entry>
<entry>desired connection.</entry>
</row>
<row>
<entry>Channel processing</entry>
<entry>Processing performed on data flowing</entry>
</row>
<row>
<entry></entry>
<entry>through a communications channel to</entry>
</row>
<row>
<entry></entry>
<entry>enhance some attribute of the data,</entry>
</row>
<row>
<entry></entry>
<entry>such as security, reproduction quality,</entry>
</row>
<row>
<entry></entry>
<entry>content, etc.</entry>
</row>
<row>
<entry>virtual private network</entry>
<entry>An internet in which envoys</entry>
</row>
<row>
<entry></entry>
<entry>(intervening programs) are used to</entry>
</row>
<row>
<entry></entry>
<entry>perform encrypted communications</entry>
</row>
<row>
<entry></entry>
<entry>from one secure network to another</entry>
</row>
<row>
<entry></entry>
<entry>through a none-secure network.</entry>
</row>
<row>
<entry>DDNS</entry>
<entry>The dynamic assignment of network</entry>
</row>
<row>
<entry></entry>
<entry>addresses to virtual hosts on a time-</entry>
</row>
<row>
<entry></entry>
<entry>limited basis.</entry>
</row>
<row>
<entry>Load sharing</entry>
<entry>The use of DDNS to assign a network</entry>
</row>
<row>
<entry></entry>
<entry>address for a particular connection to a</entry>
</row>
<row>
<entry></entry>
<entry>virtual host on one of multiple</entry>
</row>
<row>
<entry></entry>
<entry>machines based on the load of the</entry>
</row>
<row>
<entry></entry>
<entry>machines.</entry>
</row>
<row>
<entry>Address reuse</entry>
<entry>The use of the same network address</entry>
</row>
<row>
<entry></entry>
<entry>within different networks separated by</entry>
</row>
<row>
<entry></entry>
<entry>firewalls.</entry>
</row>
<row>
<entry>Programmable</entry>
<entry>The use of envoys for connectionless</entry>
</row>
<row>
<entry></entry>
<entry>transparency--connectionless protocols (e.g.,</entry>
</row>
<row>
<entry></entry>
<entry>UDP) communications in which a</entry>
</row>
<row>
<entry></entry>
<entry>time-out value is used to achieve the</entry>
</row>
<row>
<entry></entry>
<entry>equivalent of a connection.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The present firewall provides a choke point used to control the flow of data between two networks. One of the two networks may be the Internet, or both of the two networks may be intranets-the nature and identity of the two networks is immaterial. The important point is that all traffic between the two networks must pass through a single, narrow point of controlled access. A firewall therefore brings a great deal of leverage to bear on the problem of network security, allowing security measures to be concentrated on this controlled access point. To avoid possible security compromises, the firewall should ideally run on a dedicated computer, i.e. one, which does not have any other user-accessible programs running on it that could provide a path via which communications could circumvent the firewall. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> One environment in which firewalls are particularly desirable is in enterprise network systems, in which a number of individual networks that may be respectively associated with different departments or divisions of a company, for example, are connected with one another. In such an environment, firewalls can be employed to restrict access to the individual networks. While not limited to this particular situation, the present invention will be, described hereinafter in such a context, to facilitate an understanding of its underlying principles. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, assume that the accounting departments of two remote corporate sites are networked, and that these two different accounting networks are to be connected via the Internet or a similar non-secure, wide-area network. For purposes of illustration, a first site <highlight><bold>101</bold></highlight> having a first accounting network <highlight><bold>103</bold></highlight> might be located in California, and a second site <highlight><bold>151</bold></highlight> having a second accounting network <highlight><bold>153</bold></highlight> might be located in Japan. Within each site, each accounting network may be part of a larger corporate network (<highlight><bold>109</bold></highlight>, <highlight><bold>159</bold></highlight>). Precautions are required to safeguard sensitive accounting data such that it cannot be accessed over the general corporate network. A first firewall (<highlight><bold>105</bold></highlight>, <highlight><bold>155</bold></highlight>) is used for this purpose. The first firewall is interposed between the accounting network and the general corporate network. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> A convenient way to place the two accounting networks in communication with each other is through the Internet <highlight><bold>120</bold></highlight>, which comprises another layer of a multi-layer network. As compared to other forms of connection, the Internet may be more economical, more easily accessible, and more robust. Connecting to the Internet, however, requires that access between the Internet and the respective sites be strictly controlled. A second firewall (<highlight><bold>107</bold></highlight>, <highlight><bold>157</bold></highlight>) is used at each site for this purpose. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> In the following description, the present firewall is illustrated most often as a rectangle having along each of two edges thereof a network connection and a row of boxes representing multiple &ldquo;homes,&rdquo; corresponding to respective virtual hosts. A virtal host along one edge may be used to initiate a connection only in response to a request from the network connection that enters the firewall at that edge. The connection, once established, is fully bi-directional, with the same virtual host passing data between the originating network connection and the network connection at the opposite edge of the firewall. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> More generally, the firewall may be N-sided, having N network connections and being illustrated as an N-sided polygon. Any virtual host may establish a connection between any pair of network connections so long as the connection originated from the network connection adjoining that virtual host. Again, the connection, once established, is fully bidirectional. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The firewalls <highlight><bold>105</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>155</bold></highlight> and <highlight><bold>157</bold></highlight> are each of a construction to be more particularly described hereinafter. Each firewall is multi-homing. This means that each firewall is configured as multiple virtual hosts running on a physical computer. In the example of <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> firewall is depicted as a single computer having multiple virtual hosts on each of its two interfaces. In practice, the multiple virtual hosts can be configured in this manner or, alternatively, implemented in any number of computers, as explained in detail hereinafter. Each virtual host corresponds to a &ldquo;home&rdquo;, i.e. a site via which a connection is made between the two networks on either side of the firewall. At different times, the same virtual host might correspond to different homes associated with different connections. At any given time, however, a virtual host represents one home. In the following description of the particular example illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, therefore, homes and virtual hosts are described as being synonymous with one another. Each virtual host is fully independently configurable and unique from each of the other virtual hosts. Considering the firewall <highlight><bold>105</bold></highlight> as being exemplary of each of the firewalls <highlight><bold>105</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>155</bold></highlight> and <highlight><bold>157</bold></highlight>, one set of hosts <highlight><bold>105</bold></highlight><highlight><italic>a </italic></highlight>responds to addresses on a first network interface of the firewall. Another set of hosts <highlight><bold>105</bold></highlight><highlight><italic>b </italic></highlight>responds to addresses on a second network interface of the firewall. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Normally, in accordance with the prior art, connecting from one computer to another remote computer along a route traversing one or more firewalls would require the user to configure a prior-art proxy for each firewall to be traversed. In accordance with one aspect of the invention, however, programmable transparency is achieved by establishing DNS mappings between remote hosts to be accessed through one of the network interfaces and respective virtual hosts on that interface. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> DNS is a distributed database system that translates host names to IP addresses and IP addresses to host names (e.g, it might translate host name omer.odyssey.com to 129.186.424.43). The information required to perform such translations is stored in DNS tables. Any program that uses host names can be a DNS client. DNS is designed to translate and forward queries and responses between clients and servers. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> When a client needs a particular piece of information (e.g., the IP address of homer.odyssey.com), it asks its local DNS server for that information. The local DNS server first examines its own local memory, such as a cache, to see if it already knows the answer to the client&apos;s query. If not, the local DNS server asks other DNS servers, in turn, to discover the answer to the client&apos;s query. When the local DNS server gets the answer (or decides that for some reason it cannot), it stores any information it received and answers the client. For example, to find the IP address for homer.odyssey.com, the local DNS server first asks a public root name server which machines are name servers for the corn domain. It then asks one of those &ldquo;com&rdquo; name servers which machines are name servers for the odyssey.com domain, and then it asks one of those name servers for the IP address of homer.odyssey.com. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> This asking and answering is all transparent to the client. As far as the client is concerned, it has communicated only with the local server. It does not know or care that the local server may have contacted several other servers in the process of answering the original question. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Referring still to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the firewall <highlight><bold>105</bold></highlight> is associated with a respective domain name server <highlight><bold>115</bold></highlight>. Each of the other firewalls <highlight><bold>107</bold></highlight>, <highlight><bold>155</bold></highlight>, <highlight><bold>157</bold></highlight> is also associated with a respective domain name server <highlight><bold>117</bold></highlight>, <highlight><bold>165</bold></highlight>, <highlight><bold>167</bold></highlight>. The domain name server may be a dedicated virtual host on the same physical machine as the firewall. Alternatively, the domain name server may be a separate machine. A domain name server is provided for each layer in the multi-layer network. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> In operation, assume now that a client C on the accounting network <highlight><bold>103</bold></highlight> is to connect to a host D on the accounting network <highlight><bold>153</bold></highlight> on a repeated basis. The DNS tables of each of the firewalls may then be programmed so as to enable such a connection to be established transparently, without the user so much as being aware of any of the firewalls <highlight><bold>105</bold></highlight>, <highlight><bold>107</bold></highlight>, <highlight><bold>155</bold></highlight>, <highlight><bold>157</bold></highlight>&mdash;hence the term programmable transparency. Both forward and reverse table entries are made in the domain name servers. Within a domain name server <highlight><bold>115</bold></highlight>, for example, D (the name of the remote host, e.g., machl.XYZcorp.com) might be mapped to a virtual host having a network address that concludes with the digits 1.1, and vice versa. Within the domain name server <highlight><bold>117</bold></highlight>, D might be mapped to 5.4, within the domain name server <highlight><bold>167</bold></highlight>, D might be mapped to 3.22, and within the domain name server <highlight><bold>165</bold></highlight>, D might be mapped to 4.5, where each of the foregoing addresses has been randomly chosen simply for purposes of illustration. Finally, within a conventional DNS server (not shown), D is mapped to the &ldquo;real&rdquo; network address (e.g, the IP address) of D, say, 55.2. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> When client C tries to initiate a connection to host D using the name of D, DNS operates in the usual manner to propagate a name request to successive levels of the network until D is found. The DNS server for D returns the network address of D to a virtual host on the firewall <highlight><bold>155</bold></highlight>. The virtual host returns its network address to the virtual host on the firewall <highlight><bold>157</bold></highlight> from which it received the lookup request, and so on, until a virtual host on the firewall <highlight><bold>105</bold></highlight> returns its network address (instead of the network address of D) to the client C. This activity is all transparent to the user. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Note that at each network level, the virtual host handling a connection is indistinguishable to the preceding virtual (or real) host from D itself. Thus, to the client C, the virtual host 1.1 is D, to the virtual host 1.1, the virtual host 5.4 is D, etc. There is no limit to the number of network layers that may be traversed in this fashion, or any difference in operation as the number of network layers increases. This multi-layering capability allows two remote machines to communicate with the same ease as if the machines were on the same local area network, regardless of the degree of proximity or separation. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Programmable transparency is based upon what may be termed &ldquo;envoys.&rdquo; Important differences exist between envoys as described herein and conventional proxies. Normally, a prior-art proxy would have to prompt the user to enter a destination. To enable such prompting to occur, different proxy code has conventionally been required for each protocol to be proxied. Using programmable transparency, the destination is provided to an envoy using DNS and/or DDNS as described more fully hereinafter. There is therefore no need to always prompt the user for a destination and no need for the user to always enter a destination (although a mode of operation may be provided in which the user is prompted for and does enter a destination). Instead of a collection of conventional protocol-specific proxies, a single generic envoy program may be used. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The foregoing discussion has focused on the programmable transparency aspects of the present firewall. Of course, a primary function of a firewall is to selectively allow and disallow communications. Hence, in the course of establishing a connection, each virtual host examines a configuration table to determine, based on the particulars of the requested connection&mdash;source, destination, protocol, time-of-day, port number, etc.&mdash;whether such a connection will be allowed or disallowed. The process by which connection requests may be scrutinized is described in greater detail in U.S. patent application Ser. No. 08/595,957 entitled FIREWALL SYSTEM FOR PROTECTING NETWORK ELEMENTS CONNECTED TO A PUBLIC NETWORK, filed Feb. 6, 1996 and incorporated herein by reference. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> The firewall may have more than two network interfaces, each with its own set of virtual hosts. Referring to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, for example, the two-sided firewall discussed previously in relation to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> has been replaced by a three-sided firewall <highlight><bold>205</bold></highlight>. An accounting department network <highlight><bold>203</bold></highlight> and a general corporate network <highlight><bold>209</bold></highlight> are connected to the firewall <highlight><bold>205</bold></highlight> as previously described. Also connected to the firewall <highlight><bold>205</bold></highlight> is an engineering department network <highlight><bold>202</bold></highlight>. In general, a firewall may be N-sided, having N different network connections. For each network connection there may be multiple virtual hosts which operate in the manner described above. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, configuration of the firewalls may be easily accomplished by providing on each firewall a special-purpose virtual host that runs &ldquo;Configurator&rdquo; software-software that provides a Web-based front-end for editing configuration files for the other virtual hosts on the firewall. The special-purpose virtual host (<highlight><bold>116</bold></highlight>, <highlight><bold>118</bold></highlight>, <highlight><bold>166</bold></highlight> and <highlight><bold>168</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>) is preferably configured so as to allow only a connection from a specified secure client. The Configurator software running on the special-purpose virtual host is HTML-based in order to provide an authorized system administrator a familiar &ldquo;point-and-click&rdquo; interface for configuring the virtual firewalls in as convenient a manner as possible using a standard Web browser. Since Web browsers are available for virtually every platform, there results a generic GUI interface that takes advantage of existing technology. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Referring more particularly to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, there is shown a firewall <highlight><bold>305</bold></highlight> having a first set of virtual hosts <highlight><bold>305</bold></highlight><highlight><italic>a</italic></highlight>, a second set of virtual hosts <highlight><bold>305</bold></highlight><highlight><italic>b</italic></highlight>, and a DNS/DDNS module <highlight><bold>315</bold></highlight>. The virtual hosts do not require and preferably do not have access to the disk files of the underlying machine. Instead, virtual host processes are spawned from a daemon process that reads a master configuration file from disk once at start-up. The DNS/DDNS module and the special-purpose virtual host <highlight><bold>317</bold></highlight> do have access to disk files <highlight><bold>316</bold></highlight> of the underlying physical machine. The special-purpose virtual host <highlight><bold>317</bold></highlight>, shown in exploded view, runs an HTML-based Configurator module <highlight><bold>319</bold></highlight>. Access to the special-purpose virtual host is scrutinized in accordance with rules stored on disk within configuration files <highlight><bold>321</bold></highlight>. Typically, these rules will restrict access to a known secure host, will require at least username/password authentication and optionally more rigorous authentication. Once access is granted, the Configurator module will send to the authorized accessing host a first HTML page. From this page, the user may navigate through different HTML pages using a conventional Web browser and may submit information to the special-purpose virtual host. The special-purpose virtual host will then use this information to update the configuration files <highlight><bold>321</bold></highlight>. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As will be appreciated more fully from the description of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> hereinafter, configuration is based on host names, not IP addresses. As a result, two mappings are required in order to handle a connection request. The requester needs an IP address. To this end, a first mapping maps from the host name received in the connection request to the IP address of a virtual host. The virtual host, however, needs the host name of the host to be connected to. To this end, the second mapping maps back to the host name in order to read an appropriate configuration file or sub-file based on the host name. Thus, when a connection request is received for homer.odyssey.com, DNS/DDNS in effect says to the requestor &ldquo;Use virtual host X.X.X.X,&rdquo; where X.X.X.X represents an IP address. Then, when the virtual host receives the request, it performs a reverse lookup using DNSIDDNS, whereupon DNSIDDNS in effect says &ldquo;Virtual host X.X.X.X, use the configuration information for homer.odyssey.com.&rdquo;</paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> Security may be further enhanced, both with respect to connections to the special-purpose virtual host for configuration purposes and also with respect to connections generally, by using out-of-band user authentication. Out-of-band authentication uses a channel, a device or any other communications method or medium which is different from that over which the inter-network communication is to take place to transmit or convey an access key. Hence, in the example of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the firewall <highlight><bold>155</bold></highlight>, upon receiving a connection request from a particular source, might send a message, including a key, to a pager <highlight><bold>119</bold></highlight> of the authorized user of the source client. The user might be requested to simply enter the key. In more sophisticated arrangements, the user may be required to enter the key into a special hardware token to generate a further key. To gain access, a hacker must therefore steal one or more devices (e.g, a pager used to receive the out-of-band transmissions, a hardware token, etc.). Furthermore, if a hacker attempts unauthorized access to a machine while the authorized user is in possession of the pager or other communications device, the user will be alerted by the device unexpectedly receiving a message and access key. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Other methods may be used to communicate out-of-band so as to deliver the required access key. For example, the firewall <highlight><bold>155</bold></highlight> might send a fax to the fax number of the user of the source machine. Alternatively, identifying information may be sent to the user across the network, after which the user may be required to dial an unpublished number and enter the identifying information in order to receive a voice message containing the required key. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In each of the foregoing methodologies, the key is connection-specific. That is, once the connection is closed or the attempt to establish a connection is abandoned, if a user again attempts to establish a connection, the key that previously applied or would have applied is no longer applicable. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The different virtual hosts may also be configured to perform channel processing of various sorts as traffic traverses different network segments. Channel processing may include encryption, decryption, compression, decompression, image or sound enhancement, content filtering, etc. Channel processing is the processing performed on data flowing through a communications channel to enhance some attribute of the data, such as security, reproduction quality, etc. In some instances, channel processing may actually affect the content of the data, for example &ldquo;bleeping&rdquo; obscenities by replacing them with a distinctive character string. Alternatively, channel processing may intervene to cause a connection to be closed if the content to be sent on that connection is found to be objectionable. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Channel processing may be performed using existing standard software modules. In the case of encryption and decryption, for example, modules for DES, RSA, Cylink, SET, SSL, and other types of encryption/decryption and authentication may be provided on the firewall. In the case of compression and decompression, standard modules may include MPEG, JPEG, LZ-based algorithms, etc. Based on information contained in the configuration files, information passing through the firewall may be processed using one or more such modules depending on the direction of data flow. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Channel processing may be used to perform protocol translation, for example between IP and some other protocol or protocols. One problem that has recently received attention is that of using IP for satellite uplink and downlink transmissions. The relatively long transit times involved in satellite transmissions can cause problems using IP. One possible solution is to perform protocol translation between IP and an existing protocol used for satellite transmissions. Such protocol translation could be performed transparently to the user using a firewall of the type described. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Channel processing may also be used to perform virus detection. Blanket virus detection across all platforms is a daunting task and may not be practical in most cases. A system administrator may, however, configure the system to perform specified virus checking for specified hosts. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> Encryption and decryption are particularly important to realizing the potential of the Internet and network communications. In the example just described, on the network segment between firewall <highlight><bold>105</bold></highlight> and <highlight><bold>107</bold></highlight>, DES encryption might be used, in accordance with the configuration file on firewalls <highlight><bold>105</bold></highlight> and <highlight><bold>107</bold></highlight>. Across the Internet, between firewall <highlight><bold>107</bold></highlight> and firewall <highlight><bold>155</bold></highlight>, triple DES may be applied. On the network segment between firewall <highlight><bold>155</bold></highlight> and <highlight><bold>157</bold></highlight> RSA encryption may be used. Alternatively, encryption could be performed between firewalls <highlight><bold>105</bold></highlight> and <highlight><bold>155</bold></highlight> and also between <highlight><bold>107</bold></highlight> and <highlight><bold>155</bold></highlight> and also between <highlight><bold>157</bold></highlight> and <highlight><bold>155</bold></highlight>. Thus the firewall <highlight><bold>157</bold></highlight> may then decrypt the cumulative results of the foregoing multiple encryptions to produce clear text to be passed on to host D. Combining encryption capabilities with programmable transparency as described above allows for the creation of virtual private networks-networks in which two remote machines communicate securely through cyberspace in the same manner as if the machines were on the same local area network. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> Using DDNS, mappings between a host machine and a virtual host are performed dynamically, on-the-fly, as required. Any of various algorithms may be used to select a virtual host to handle a connection request, including, for example, a least-recently-used strategy. A time-out period is established such that, if a connection has been closed and is not reopened within the time-out period, the virtual host that was servicing that connection may be re-mapped so as to service another connection&mdash;i.e., it becomes associated with a different node. In this manner, the number of clients that may be serviced is vastly increased. In particular, instead of the number of clients that may use a particular network interface being limited to the number of virtual hosts on that interface as would be the case using static DNS entries, using DDNS, any number of hosts may use a particular network interface subject to availability of a virtual host. Moreover, instead of making static DNS entries at each level of a multi-level network, using DDNS, such entries are rendered unnecessary. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> DDNS allows for dynamic load sharing among different physical machines. Hence, instead of a single physical machine, one or more of the firewalls in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> might be realized by two or more physical machines. When performing mapping, DDNS can take account of the load on the physical machine using conventional techniques. If one physical machine fails, the functions of that machine may still be performed by virtual hosts running on another physical machine. DDNS likewise allows a firewall to be scaled-up very easily, by adding one or more additional physical machines and configuring those machines as additional virtual hosts having identical configurations as on the existing physical machine or machines, but different network addresses. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> Referring more particularly to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> load-sharing firewall is realized using a first firewall <highlight><bold>407</bold></highlight> and a second firewall <highlight><bold>408</bold></highlight> connected in parallel to a network <highlight><bold>420</bold></highlight> such as the Internet. Redundancy is provided by conventional DNS procedures. That is, in DNS, redundant name servers are required by the DNS specification. If a query addressed to one of the redundant name servers does not receive a response, the same query may then be addressed to another name server. The same result holds true in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. If one of the physical firewall machines <highlight><bold>407</bold></highlight> or <highlight><bold>408</bold></highlight> is down, the other machine enables normal operation to continue. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The configuration of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, however, further allows the physical firewall machines <highlight><bold>407</bold></highlight> and <highlight><bold>408</bold></highlight> to share the aggregate processing load of current connections. Load sharing may be achieved in the following manner. Each of the DNS modules of all of the machines receive all DNS queries, because the machines are connected in parallel. Presumably, the DNS module of the machine that is least busy will be the first to respond to a query. An ensuing connection request is then mapped to a virtual host on the responding least-busy machine. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> As the popularity and use of the Internet continues to grow, there is a concern that all available addresses will be used, thereby limiting further expansion. An important result of DDNS is that network addresses may be reused on network segments between which at least one firewall intervenes. More particularly, the addresses which are employed on opposite sides of a firewall are mutually exclusive of one another to avoid routing errors. Referring again to the example of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, users of the Internet <highlight><bold>120</bold></highlight> are unaware of the addresses employed on a network segment <highlight><bold>110</bold></highlight>. Certain addresses can be reserved for use behind a firewall. As shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, for example, the subset of addresses represented as 192.168.X.X can be used on the network segment <highlight><bold>110</bold></highlight>. So long as an address is not used on both sides of the same firewall, no routing errors will be introduced. Therefore, the same set of addresses can be used on the network segment <highlight><bold>160</bold></highlight>, which is separated from the Internet via the firewall <highlight><bold>157</bold></highlight>. On network segment <highlight><bold>102</bold></highlight> and network segment <highlight><bold>152</bold></highlight>, the entire address space may be used, less those addresses used on the segments <highlight><bold>110</bold></highlight>, <highlight><bold>120</bold></highlight> of the respective firewalls <highlight><bold>105</bold></highlight> and <highlight><bold>155</bold></highlight>. Thus by isolating Internet Service Providers (ISPs) from the Internet at large using firewalls of the type described, each ISP could enjoy use of almost the full address space of the Internet (<highlight><bold>232</bold></highlight> addresses). Exhaustion of network addresses, presently a grave concern within the Internet community, is therefore made highly unlikely. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Address reuse may be further facilitated by providing multiple multi-homing firewall programs running on a single physical machine and defining a virtual network connection between the two firewall programs using an IP address within the range 192.168.X.X as described previously. To the user and to the outside world, this &ldquo;compound firewall&rdquo; appears as a single multi-homing firewall of the type previously described. However, since internally the firewall is really two firewalls, the entire Internet address space may be used on both sides of the firewall, except for the addresses 192.168.X.X. This configuration is illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> In essence, the use of firewalls as presently described allows the prevailing address model of network communications to be transformed from one in which IP addresses are used for end-to-end transport to one in which host names are used for end-to-end transport, with IP addresses being of only local significance. The current use of IP addresses for end-to-end transport may be referred to as address-based routing. Using address-based routing, address exhaustion becomes a real and pressing concern. The use of host names for end-to-end transport as presently described may be referred to as name-based routing. Using name-based routing, the problem of address exhaustion is eliminated. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The firewall as described also allows for envoys to handle connectionless (e.g, UDP-User Datagram Protocol) traffic, which has been problematic in the prior art. UDP is an example of a connectionless protocol in which packets are launched without any end-to-end handshaking. In the case of many prior-art firewalls, UDP traffic goes right through the firewall unimpeded. The present firewall handles connectionless traffic using envoys. Rules checking is performed on a first data packet to be sent from the first computer to the second computer. If the result of this rules checking is to allow the first packet to be sent, a time-out limit associated with communications between the first computer and the second computer via UDP is established, and the first packet is sent from one of the virtual hosts to the second computer on behalf of the first computer. Thereafter, for so long as the time-out limit has not expired, subsequent packets between the first computer and the second computer are checked and sent. A long-lived session is therefore created for UDP traffic. After the time-out limit has expired, the virtual host may be remapped to a different network address to handle a different connection. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The construction of a typical firewall in accordance with the present invention will now be described in greater detail. Referring to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the firewall is a software package that runs on a physical machine <highlight><bold>500</bold></highlight>. One example of a suitable machine is a super-minicomputer such as a SparcServer machine available from Sun Microsystems of Menlo Park, Calif. The firewall may, however, run on any of a wide variety of suitable platforms and operating systems. The present invention is not dependent upon a particular choice of platform and operating system. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Conventionally, the logical view of the firewall on the Internet, an intranet, or some other computer network is the same as the physical view of the underlying hardware. A single network address has been associated with a single network interface. As a result, no mechanism has existed for distinguishing between communications received on a single network interface and hence directing those communications to different logical machines. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> As described previously, this limitation may be overcome by recognizing multiple addresses on a single network interface, mapping between respective addresses and respective virtual hosts, and directing communications to different addresses to different virtual hosts. Therefore, the present firewall, although it runs on a limited number of physical machines, such as a single computer <highlight><bold>500</bold></highlight>, appears on the network as a larger number of virtual hosts VH<highlight><bold>1</bold></highlight> through VHn. Each virtual host has a separate configuration sub-file (sub-database) C<highlight><bold>1</bold></highlight>, C<highlight><bold>2</bold></highlight>, etc., that may be derived from a master configuration file, or database, <highlight><bold>510</bold></highlight>. The configuration sub-files are text files that may be used to enable or disable different functions for each virtual host, specify which connections and types of traffic will be allowed and which will be denied, etc. Because the configuration files are text files, they may be easily modified at any time following initial installation. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Preferably, each virtual host also has its own separate log file L<highlight><bold>1</bold></highlight>, L<highlight><bold>2</bold></highlight>, etc. This feature allows for more precise and more effective security monitoring. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> The firewall is capable of servicing many simultaneous connections. The number of allowable simultaneous connections is configurable and may be limited to a predetermined number, or may be limited not by number but only by the load currently experienced by the physical machine. The number of maximum allowable connections or the maximum allowable machine load may be specified in the configuration file. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> As described in greater detail in connection with <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, each configuration file C<highlight><bold>1</bold></highlight>, C<highlight><bold>2</bold></highlight>, etc., may have an access rules database <highlight><bold>513</bold></highlight>, including an Allow portion <highlight><bold>515</bold></highlight>, a Deny portion <highlight><bold>517</bold></highlight>, or both. Using the access rules database <highlight><bold>513</bold></highlight>, the firewall selectively allows and denies connections to implement a network security policy. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The firewall is self-daemoning, meaning that it is not subject to the limitations ordinarily imposed by the usual Internet meta-daemon, INETD, or other operating-system limitations. Referring to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, when the firewall is brought up, it first reads in the master configuration file and then becomes a daemon and waits for connection requests. When a connection request is received, the firewall spawns a process, or execution thread, to create a virtual host VHn to handle that connection request. Each process runs off the same base code. However, each process will typically use its own sub-database from within the master configuration database to determine the configuration of that particular virtual host. Processes are created &ldquo;on demand&rdquo; as connection requests are received and terminate as service of those connection requests is completed. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> An example of a portion of a master configuration file is shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. Within the master configuration file database, different portions of the file form sub-databases for different virtual hosts. Each sub-database may specify a root directory for that particular virtual host. Also as part of the configuration file of each virtual host, an access rules database is provided governing access to and through the virtual host, i.e., which connections will be allowed and which connections will be denied. The syntax of the access rules database is such as to allow greater flexibility in specifying not only what machines are or are not to be allowed access, but also when such access is allowed to occur and which users are authorized. The access rules database may have an Allow portion, a Deny portion or both. Processing with respect to the Allow database is performed prior to processing with respect to the Deny database. Therefore, if there is an entry for a requested connection in the Allow database and no entry for that connection in the Deny database, then the connection will be allowed. If there is no Allow database and no entry in the Deny database, then the connection will also be allowed. If there is an entry for the requested connection in the Deny database, then the connection will be denied regardless. Machines may be specified by name or by IP address, and may include &ldquo;wildcards,&rdquo; address masks, etc., for example: MisterPain.com, *.srmc.com, 192.168.0.*, 192.168.0.0/24, and so on. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Time restrictions may be included in either the Allow rules or the Deny rules. For example, access may be allowed from 1 am to 12 pm; alternatively, access may be denied from 12 pm to 1 am. Also, rules may be defined by identifiers, such as RULE1, RULE2, etc., and used elsewhere within the configuration sub-file of the virtual host to simplify and alleviate the need for replication. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> All access rules must be satisfied in order to gain access to a virtual host. Depending on the virtual host, however, and as specified within the configuration sub-file, separate access scrutiny may be applied based on DNS entries. The accessing machine may be required to have a DNS (Domain Name Services) entry. Having a DNS entry lends at least some level of legitimacy to the accessing machine. Furthermore, the accessing machine may in addition be required to have a reverse DNS entry. Finally, it may be required that the forward DNS entry and the reverse DNS entry match each other, i.e., that an address mapped to from a given host name map back to the same host name. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> If access is granted and a connection is opened, when the connection is later closed, a log entry is made recording information about that access. Log entries may also be made when a connection is opened, as data transport proceeds, etc. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the logical structure of the present firewall is shown in greater detail. The main execution of the firewall is controlled by a daemon. In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the daemon includes elements <highlight><bold>801</bold></highlight>, <highlight><bold>803</bold></highlight> and <highlight><bold>805</bold></highlight>. Although the daemon mode of operation is the default mode, the same code can also be run interactively under the conventional INETD daemon. Hence, when the firewall is first brought up, command-line processing is performed in block <highlight><bold>801</bold></highlight> to determine the mode of operation (daemon or interactive), which configuration file to read, etc. For purposes of the present discussion, the daemon mode of operation, which is the default, will be assumed. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> In the daemon mode of operation, a process first reads the configuration file before becoming a daemon. By daemonizing after the configuration file (e.g., the master configuration file) has been read, the configuration file in effect becomes &ldquo;hard coded&rdquo; into the program such that the program no longer has to read it in. The daemon then waits to receive a connection request. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> When a connection request is received, the daemon spawns a process to handle the connection request. This process then uses a piece of code referred to herein as an INET Wrapper <highlight><bold>810</bold></highlight> to check on the local side of the connection and the remote side of the connection to determine, in accordance with the appropriate Allow and Deny databases, whether the connection is to be allowed. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> First the address and name (if possible) are obtained of the virtual host for which a connection is requested. Once the virtual host has been identified by name or at least by IP address, the master configuration database is scanned to see if a corresponding sub-database exists for that virtual host. If so, the sub-database is set as the configuration database of the virtual host so that the master configuration database need no longer be referred to. If no corresponding sub-database is found, then by default the master configuration database is used as the configuration database. There may be any number of virtual hosts, all independently configurable and all running on the same physical machine. The determination of which virtual host the process is to become is made in block <highlight><bold>803</bold></highlight>, under the heading of &ldquo;multi-homing.&rdquo;</paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Once the process has determined which host it is, immediately thereafter, the process changes to a user profile in block <highlight><bold>805</bold></highlight> as defined in the configuration, so as to become an unprivileged user. This step of becoming an unprivileged user is a security measure that avoids various known security hazards. The INET Wrapper is then used to check on the remote host, i.e., the host requesting the connection. First, the configuration database is consulted to determine the level of access scrutiny that will be applied. (The default level of access scrutiny is that no DNS entry is required.) Then, the address and name (if possible) are obtained of the machine requesting the connection, and the appropriate level of access scrutiny is applied as determined from the configuration database. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> If the remote host satisfies the required level of access scrutiny insofar as DNS entries are concerned, the INET Wrapper gets the Allow and Deny databases for the virtual host. First the Allow database is checked, and if there is an Allow database but the remote host is not found in it, the connection is denied. Then the Deny database is checked. If the remote host is found in the Deny database, then the connection is denied regardless of the allow database. All other rules must also be satisfied, regarding time of access, etc. If all the rules are satisfied, then the connection is allowed. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Once the connection has been allowed, the virtual host process invokes code <highlight><bold>818</bold></highlight> that performs protocol-based connection processing and, optionally, code <highlight><bold>823</bold></highlight> that performs channel processing (encryption, decryption, compression, decompression, etc.). When processing is completed, the connection is closed, if it has not already been closed implicitly. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> It will be appreciated by those of ordinary skill in the art that the invention can be embodied in other specific forms without departing from the spirit or essential character thereof. The presently disclosed embodiments are therefore considered in all respects to be illustrative and not restrictive. The scope of the invention is indicated by the appended claims rather than the foregoing description, and all changes which come within the meaning and range of equivalents thereof are intended to be embraced therein. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of operating a system for selectively facilitating a connection between a first computer and a second computer, the method comprising: 
<claim-text>receiving a request from the first computer for the connection, the request including a name of the second computer; and </claim-text>
<claim-text>initiating one or more verification checks in response to the request including the name, the one or more verification checks for selectively facilitating the connection of the first computer to the second computer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>identifying a network address of the second computer based upon the name of the second computer. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>mapping the name of the second computer to one or more network addresses associated with the system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>mapping the name of the second computer to one or more private IP addresses associated with the system. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>channel processing any information passed between the first computer and the </claim-text>
<claim-text>second computer, wherein the channel processing includes one or more acts of encrypting, decrypting, encoding, decoding, compression, decompression, content filtering, image enhancement, sound enhancement, data enhancement, or virus detection. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method of operating a third computer network in processing a request from a first computer network for connection to a second computer network, said method comprising: 
<claim-text>receiving a request from the first computer network for the connection to the second computer network, the request including a domain name associated with the second computer network; and </claim-text>
<claim-text>initiating one or more verification checks in response to the reception of the request including the domain name, the one or more verification checks for selectively facilitating the connection of the first computer network to the second computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>identifying one or more network addresses associated with second computer network based upon the domain name associated with the second computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>mapping the domain name associated with the second computer network to one or more network addresses associated with the second computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>mapping the domain name associated with the second computer network to one or more private IP addresses associated with the second computer network. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further comprising: 
<claim-text>channel processing any information passed between the first computer network and the </claim-text>
<claim-text>second computer network, wherein the channel processing includes one or more acts of encrypting, decrypting, encoding, decoding, compression, decompression, content filtering, image enhancement, sound enhancement, data enhancement, or virus detection. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A method of communicating data, comprising: 
<claim-text>receiving a data unit, said data unit includes a destination address and a first set of information representing a first domain name, said destination address corresponds to each entity in a set of two or more entities, said domain name corresponds to a first entity in the set of two or more entities; </claim-text>
<claim-text>translating said first domain name to a first address, said first address corresponds to said first entity and does not correspond to any other entity in said set of two or more entities; and </claim-text>
<claim-text>sending said data unit to said first entity using said first address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said first set of information includes said first domain name. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said first set of information includes said first domain name and a second domain name, said second domain name associated with a source of said data unit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said first set of information includes a compressed form of said first domain name. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said first set of information includes a encoded form of said first domain name. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said first set of information includes an encrypted form of said first domain name. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said step of translating includes finding a record in a table associated with said first domain name, said record in said table includes first address; and </claim-text>
<claim-text>said steps of receiving, translating and sending are performed by a firewall. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said step of sending includes sending said data unit to a firewall. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said destination address is a global address; and </claim-text>
<claim-text>said first address is a local address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further comprising the step of: 
<claim-text>replacing said global address in said data unit with said local address, said step of replacing being performed after said step of translating. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein: 
<claim-text>said step of receiving is performed by a second entity, said second entity corresponds to said destination address.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005334A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005334A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005334A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005334A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005334A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005334A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005334A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005334A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005334A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005334A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
