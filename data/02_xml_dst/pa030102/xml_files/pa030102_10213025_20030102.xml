<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005442A1-20030102-D00000.TIF SYSTEM "US20030005442A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00001.TIF SYSTEM "US20030005442A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00002.TIF SYSTEM "US20030005442A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00003.TIF SYSTEM "US20030005442A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00004.TIF SYSTEM "US20030005442A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00005.TIF SYSTEM "US20030005442A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00006.TIF SYSTEM "US20030005442A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00007.TIF SYSTEM "US20030005442A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00008.TIF SYSTEM "US20030005442A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00009.TIF SYSTEM "US20030005442A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00010.TIF SYSTEM "US20030005442A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00011.TIF SYSTEM "US20030005442A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00012.TIF SYSTEM "US20030005442A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00013.TIF SYSTEM "US20030005442A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00014.TIF SYSTEM "US20030005442A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00015.TIF SYSTEM "US20030005442A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00016.TIF SYSTEM "US20030005442A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00017.TIF SYSTEM "US20030005442A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030005442A1-20030102-D00018.TIF SYSTEM "US20030005442A1-20030102-D00018.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005442</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10213025</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020805</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>725</class>
<subclass>044000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Authoring system and method</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10213025</doc-number>
<kind-code>A1</kind-code>
<document-date>20020805</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09010267</doc-number>
<document-date>19980121</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6453459</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Rainer</given-name>
<family-name>Brodersen</family-name>
</name>
<residence>
<residence-us>
<city>Santa Clara</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Gregory</given-name>
<middle-name>Kent</middle-name>
<family-name>Wallace</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Apple Computer, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>David A. Jakopin</name-1>
<name-2>PILLSBURY WINTHROP LLP</name-2>
<address>
<address-1>1600 Tysons Boulevard</address-1>
<city>McLean</city>
<state>VA</state>
<postalcode>22102</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A DVD authoring system in a processor-based system removes an author from consideration of the DVD Specification during authoring. According to a preferred embodiment, the authoring system provides an authoring engine having an interactive graphical authoring interface, a data management engine, an emulator, a compiler, a multiplexer and a simulator. Using summary authoring data, the compiler builds a skeleton-form PGC layout structure comprising control PGC abstractions and router PGC abstractions. The compiler then resolves the PGC abstractions according to source-target connections. During playback on a DVD player, the PGC abstractions form elements in a connection-switching abstraction superstructure. Accordingly, in response to DVD-consumer and other control events, a source PGC preferably determines target PGC information and then transfers control, via virtual connections through necessary router PGC abstractions, to a target PGC abstraction. The target PGC abstraction then correspondingly initiates playback of a movie chapter or displays a menu. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to mass data storage and retrieval, and more particularly to apparatus and methods for authoring a digital versatile disk. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> New mass data storage means provide not only for storing greater amounts of multimedia and other information, but also for more interactive data retrieval by consumers. For example, one such storage means is espoused by the &ldquo;DVD Specification for Read-Only Disc, Physical, File Format and Video Specifications&rdquo; (DVD Consortium 1997), hereinafter referred to as the &ldquo;DVD Specification&rdquo;. Other examples include further DVD-related technologies (e.g. DVD-Audio, DVD-RAM, etc.) as well as non-DVD technologies. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The Physical and File System portions of the DVD Specification defines the physical encoding and organization of data for storage on read-only digital versatile disk (&ldquo;DVD ROM&rdquo;) media. The Video portion of the DVD Specification defines a data set (&ldquo;DVD-Video data set&rdquo;) with which pre-recorded DVD-Video discs must conform in order to assure proper reading, decoding and playback when inserted into a media reader/decoder (&ldquo;DVD-player&rdquo;). More specifically, the Video portion specifies how &ldquo;control data&rdquo; and audio/video &ldquo;presentation data&rdquo; are encoded and ordered within the data set. The control data determines how presentation of audio/video data will proceed when the disc is played back on a DVD-player and consists of low-level state information, data structures and instruction sets which govern what kinds of functions and user operations a DVD player can perform. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The DVD Specification is further hereby fully incorporated herein by reference as if repeated verbatim immediately hereinafter. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The process of encoding and authoring a DVD movie title, as currently practiced, includes a number of separate and distinct steps requiring similarly separate and distinct expertise. After movie production, raw film and/or video footage is edited, the soundtrack is edited and mixed, and a movie film or video master is created. This master is subsequently digitized, encoded as video and audio streams and stored as data files. In accordance with the DVD Specification, the Moving Pictures Expert Group (&ldquo;MPEG-1 or MPEG-2&rdquo;) format is used to encode the video streams and any one or more of a number of specified formats (e.g. MPEG-1 or MPEG-2 Audio, Dolby AC-3, PCM) is used to encode the audio streams. Graphic data (i.e. still or moving images for creating menus and other presentation data) is also created and stored in conventional graphic files. Finally, authoring guidelines, the encoded audio and video stream files and the graphic files are gathered for the authoring phase. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> During authoring, a DVD author utilizes the guidelines and file information to construct a DVD movie-title. The authored movie-title determines what a user of a resultant movie title will see and hear, and what kinds of interactions the user can command when the movie title is played back by a DVD-player. The author organizes the video, audio and (often author-created) subtitle files, divides the movie into segments (&ldquo;chapters&rdquo;), creates menus, and specifies low-level instructions. The low-level instructions will set parameters, define fixed or optional jump points and their destinations and determine the order and options by which playback of still pictures, movie chapters and associated audio tracks will proceed based on the user&apos;s menu selections and/or use of other DVD-player controls (i.e. typically using a remote control device). </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Once authored, the author&apos;s organizational decisions, subtitle, chapter and menu decisions, and low-level instructions are compiled into control data, and the encoded video, audio and subtitle streams, as well as the graphic data files, are multiplexed into presentation data, which together constitute the DVD-Video data set. Finally, this DVD-Video data is converted into a &ldquo;disc image layout&rdquo; file, which can be used to burn a &ldquo;write-once DVD-R&rdquo; disc, or can be stored onto a tape to send to a DVD-ROM manufacturing plant for creating a &ldquo;master&rdquo; disc, which can then be used for replication. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Conventional DVD authoring systems comprise a computer system running an application-specific DVD authoring program. An exemplary, widely used conventional DVD authoring system is Scenarist-II. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Scenarist-II is essentially an attempted, nearly direct embodiment of the DVD Specification. Using Scenarist-II, an author organizes data streams, and constructs menus and DVD structures according to the DVD Specification. Top level structures (i.e. up to 99 &ldquo;VTSs&rdquo; and &ldquo;VTSMs&rdquo;, a &ldquo;VMG&rdquo; and a VMGM&rdquo;) are constructed by selecting the structure type and then populating the structure with one or more low-level command segments (&ldquo;program chains&rdquo; or &ldquo;PGCs&rdquo;) including movie or menu references. Throughout this process, the author also selects from among available data formats, as well as from among the numerous DVD options and requisite parameters, using a number of provided lists and other data and parameter representations. Stated alternatively, all structures and PGC parameters, capabilities and references must be fully specified by the author on an ongoing basis during authoring. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Unfortunately, the DVD Specification is very complex, as are the conventional programs that attempt to embody it. Available options are extensive, as are the numerous listings of options and parameters within programs such as Scenarist-II. The potential combinations of structures and PGCs are also extensive, and many such combinations will not ultimately result in functional DVD movie-titles. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> To make matters more difficult, the PGCs (i.e. basic and frequent constructs of the DVD Specification and therefore of programs such as Scenarist-II) are counter-intuitive. Often, many PGCs (including both operative and so-called &ldquo;dummy&rdquo; PGCs) must be used in specific combinations to provide a DVD consumer with even the most basic control capabilities. Limitations imposed by the DVD Specification must also be considered throughout the process. Thus, errors in planning and/or programming might well remain undetected until after a substantial number of structures are formed. In addition, given the sheer number of structures, PGCs, commands, options and parameters involved, identifying, locating and correcting errors is difficult and time-consuming. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Consequently, while providing extensive low-level control and an expedient authoring-to-compilation correspondence, conventional authoring systems require an extensive expertise with regard to both the DVD Specification and the authoring system itself. Further, even assuming such expertise, authoring is extremely time-consuming and is therefore typically very costly. In addition, even assuming resolution of other factors, the time and expertise required would likely prevent authoring of even a preliminary movie-title as a directorial aid during the movie production process. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> A further disadvantage of conventional authoring systems is that experimentation and all but necessary modification are often compromised due to time and cost considerations. Thus, many DVD movie titles (due to limited budget to support expensive authoring time) provide a DVD consumer with only minimal playback control, navigation flexibility and interactivity. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Accordingly, there is a need for an authoring system and method that enables DVD authoring in a manner removed from the structures and low-level instruction sets of the DVD Specification, thereby reducing the time, cost and complexity of the authoring process. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> There is further a need for such an apparatus and method whereby authoring can be conducted in an intuitive manner, while maximizing flexibility and access to features provided by or otherwise not in conflict with the DVD Specification. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The present invention provides a data processing-system based authoring system and method that essentially removes an author from consideration of the structures and low-level instruction sets of the DVD Specification. More specifically, the present authoring system removes the ordered tasks associated with creating DVD structures and programming PGCs, and replaces them instead with an interactive, intuitive and graphical authoring environment. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The present invention further provides for flexible program flow in response to control events. Many interactive controls, menu button destinations and other features that are possible in accordance with the DVD Specification can be specified by an author in multiple instances and according to quick, intuitive and interactively modifiable selections. Thus the invention facilitates authoring of a DVD movie title by even an inexperienced author with context sensitive responsiveness to DVD consumer instructions and other DVD player-generated events. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Accordingly, a preferred embodiment of the present invention comprises an authoring engine having an integrated interface with which an author performs the above tasks a data management engine for storing and recalling authoring information, a simulator for viewing progressive and/or comparatively authored movie titles prior to compiling, a compiler, a multiplexer and an emulator for viewing authored movie titles after compiling and multiplexing. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Included within and facilitating the ability of these elements to remove an author from the DVD Specification are several abstractions. Preferably, the interface provides such &ldquo;user abstractions&rdquo; as arranging movies (i.e. data streams including video, audio, subtitles, chapter points and other elements), creating menu layouts (i.e. menus, menu buttons and still or moving images with or without sound) and specifying connections among these arrangements and layouts, each in a simple and intuitive, yet highly flexible way. Further abstractions include a network or connection-switching abstraction and a number of control and router PGC abstractions from which the connection-switching abstraction is constructed. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Authoring instructions entered through the interface are preferably broken down into component parts and stored by the data management engine. The invoked compiler, using only summary authoring information, preferably constructs a skeleton form PGC layout structure comprised of PGC abstractions corresponding to the number of authored movie elements. The compiler then completes the layout structure according to author-selected and default source-target connections. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Further according to a preferred embodiment, during playback of a resultant DVD movie title, a source PGC abstraction is invoked in response to DVD player and/or consumer instructions. The source PGC abstraction determines target information and transfers control, through necessary router PGC abstractions, to a target PGC abstraction. The target, in accordance with the target information, plays a movie chapter, displays a menu, or sets and/or modifies one or more DVD parameter. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> These and other objects, advantages and benefits of the present invention will become apparent from the drawings and specification that follow. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is functional block diagram generally illustrating an authoring system according to a preferred embodiment of the invention; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a functional block diagram illustrating in more detail a preferred authoring program of the authoring system shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, according to the invention; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a screenshot of a preferred performance element arrangement interface portion of the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> authoring program, according to the invention; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a blowup of the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> screenshot showing, in more detail, a preferred authoring toolbar for accessing authoring program modules and functions; </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart illustrating an exemplary method used by an author to create a performance element arrangement using the performance element arrangement interface portion of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>; </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>a </italic></highlight>is a flowchart illustrating preferred responses of the authoring program to authoring while the performance element arrangement interface portion of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is active; </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference><highlight><italic>b </italic></highlight>is a flowchart further illustrating preferred responses of the authoring engine to authoring while the performance element arrangement interface portion of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is active; </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a screenshot of a menu element layout interface portion of the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> authoring program, according to the invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart illustrating an exemplary method used by an author to create a menu layout using the menu element layout interface portion of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a screenshot of a preferred connections interface portion of the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> authoring program, according to the invention; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a screenshot of a preferred simulator interface portion of the <cross-reference target="DRAWINGS">FIG. 2</cross-reference> authoring program, according to the invention; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a functional block diagram of a preferred data management engine according to the invention; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>a </italic></highlight>is a flowchart showing generally the operation of a preferred compiler according to the invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b </italic></highlight>is a flowchart showing how a compiler according to the invention preferably constructs a skeleton-form PGC layout structure; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>c </italic></highlight>is a flowchart showing how the compiler preferably resolves source-target connections and substitutes those connections for null operations in a preferred skeleton-form PGC layout structure, according to the invention; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram showing the format of a preferred PGC layout structure according to the invention; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a functional block diagram showing a preferred connection-switching abstraction according to the invention; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a flowchart showing a preferred operation of the connection-switching abstraction of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, according to the invention; </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF A PREFERRED EMBODIMENT </heading>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> For clarity sake, the discussed embodiment herein will be directed primarily toward storage according to the DVD Specification, and more specifically at authoring motion picture DVD ROMS (&ldquo;movie titles&rdquo;). It should be understood, however, that the present invention relates to a broad range of program and data storage and retrieval utilizing a variety of media, only a subset of which will be specifically identified herein. The types of DVD ROMS which can be authored are further in no way limited to movie titles. Other examples include but are not limited to music videos, documentaries, educational videos, corporate training, medical applications and other continuous play or interactive information which utilizes audio, video and/or other presentation data. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> preferred embodiment of authoring system <highlight><bold>100</bold></highlight> according to the invention preferably comprises electrically connected hardware elements including input devices <highlight><bold>110</bold></highlight>, processor <highlight><bold>115</bold></highlight>, memory <highlight><bold>120</bold></highlight>, storage <highlight><bold>125</bold></highlight>, MPEG encoder/decoder <highlight><bold>130</bold></highlight>, video I/O device <highlight><bold>135</bold></highlight> and audio I/O device <highlight><bold>140</bold></highlight>. Authoring system <highlight><bold>100</bold></highlight> further comprises software elements including operating system <highlight><bold>150</bold></highlight>, authoring engine <highlight><bold>160</bold></highlight>, data management engine <highlight><bold>165</bold></highlight>, compiler <highlight><bold>170</bold></highlight>, simulator <highlight><bold>175</bold></highlight>, emulator <highlight><bold>180</bold></highlight> and multiplexer <highlight><bold>185</bold></highlight>. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> It will be apparent to those skilled in the art that several variations of the authoring system elements are contemplated and within the intended scope of the present invention. For example, given processor and computer performance variations and ongoing technological advancements, hardware elements such as MPEG encoder/decoder <highlight><bold>130</bold></highlight> may be embodied in software or in a combination of hardware and software. Similarly, software elements such as multiplexer <highlight><bold>185</bold></highlight> may be embodied in hardware or in a combination of hardware and software. Further, while connection to other computing devices is indicated as network I/O <highlight><bold>145</bold></highlight>, wired, wireless, modem and/or other connection or connections to other computing devices (including but not limited to local area networks, wide area networks and the internet) might be utilized. A further example is that the use of distributed processing, multiple site viewing, information forwarding, collaboration, remote information retrieval and merging, and related capabilities are each contemplated. Various operating systems and data processing systems can also be utilized, however at least a conventional multitasking operating system such as Windows95&reg; or Windows NT&reg; (trademarks of Microsoft, Inc.) running on an IBM&reg; (trademark to International Business Machines) compatible computer is preferred and will be presumed for the discussion herein. Input devices <highlight><bold>110</bold></highlight> can comprise any number of devices and/or device types for inputting commands and/or data, including but not limited to a keyboard, mouse, and/or speech recognition. (The use of a keyboard and a mouse are exemplified throughout the discussion that follows.) </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The FIG. 2 block diagram illustrates in greater functional detail an authoring program <highlight><bold>201</bold></highlight> of the preferred authoring system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. As shown, authoring program <highlight><bold>201</bold></highlight> comprises authoring engine <highlight><bold>160</bold></highlight> (which includes interface <highlight><bold>160</bold></highlight><highlight><italic>a</italic></highlight>), data management engine <highlight><bold>165</bold></highlight>, compiler <highlight><bold>170</bold></highlight>, simulator <highlight><bold>175</bold></highlight>, emulator <highlight><bold>180</bold></highlight>, multiplexer <highlight><bold>185</bold></highlight>, output DVD data storage <highlight><bold>290</bold></highlight> and layout formatter <highlight><bold>187</bold></highlight>, user abstractions <highlight><bold>285</bold></highlight> and PGC abstractions <highlight><bold>287</bold></highlight>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> It is discovered through examination of the features supported by DVD players that the basic presentation data types and consumer controls available to an author of DVD movie titles can be generalized and then reconstructed as abstracted user data types and controls. Further, despite the complexity of the DVD Specification, many of its programming constructs can also be generalized and then reconstructed as abstracted DVD program chains (&ldquo;PGCs&rdquo;) operating within a further abstracted network or connection-switching superstructure. Such user abstractions <highlight><bold>285</bold></highlight> and PGC abstractions <highlight><bold>287</bold></highlight>, as integrated into authoring engine <highlight><bold>160</bold></highlight>, data management engine <highlight><bold>165</bold></highlight> and compiler <highlight><bold>170</bold></highlight> (as illustrated), effectively remove an author using authoring program <highlight><bold>201</bold></highlight> from consideration of DVD Specification <highlight><bold>205</bold></highlight>. These abstractions further remove such consideration without unduly limiting, for most practical purposes, authoring flexibility, PGC efficiency or interactive responsiveness of a resultant DVD-ROM, among other factors. In addition, these abstractions provide a framework of re-useable components that are readily adaptable to further modification for providing improvements, and for re-use in a variety other DVD and non-DVD applications. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Authoring program <highlight><bold>201</bold></highlight> is preferably implemented in C&plus;&plus;, an object-oriented language, for reliability, updateability and other known generalized advantages of object-oriented programming. Those skilled in the computer arts will appreciate however, that despite such advantages, other environments and/or programming languages of various object-oriented and non-object-oriented types can also be utilized. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> Operationally, an author enters authoring information and instructions for activating and controlling authoring program <highlight><bold>201</bold></highlight> through interface portion <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>of authoring engine <highlight><bold>160</bold></highlight>. Authoring engine <highlight><bold>160</bold></highlight> interactively receives entered information and commands by correspondingly adjusting interface portion <highlight><bold>160</bold></highlight><highlight><italic>a</italic></highlight>, invoking a further authoring program module, sending entered authoring information to data management engine <highlight><bold>165</bold></highlight>, retrieving authored information from data management engine <highlight><bold>165</bold></highlight>, and sending and/or retrieving presentation data from presentation data storage <highlight><bold>203</bold></highlight>. Data management engine <highlight><bold>165</bold></highlight> responds to authoring engine <highlight><bold>160</bold></highlight> by receiving and storing authored information from authoring engine <highlight><bold>160</bold></highlight> and/or sending information, which it retrieves from storage (and/or from a remote source), to authoring engine <highlight><bold>160</bold></highlight>. Simulator <highlight><bold>175</bold></highlight> responds to authoring engine <highlight><bold>160</bold></highlight> by retrieving authoring data from data management engine <highlight><bold>165</bold></highlight>, retrieving multiplexed presentation data from multiplexer, and simulating an authored DVD-ROM in conjunction with interface <highlight><bold>160</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Compiler <highlight><bold>170</bold></highlight> responds to authoring engine <highlight><bold>160</bold></highlight> by retrieving authored information from data management engine <highlight><bold>165</bold></highlight>, compiling the information and storing the compiled information (&ldquo;.ifo files&rdquo;) in output DVD data storage <highlight><bold>290</bold></highlight>. Emulator <highlight><bold>180</bold></highlight> responds to authoring engine <highlight><bold>160</bold></highlight> by retrieving compiled data from output DVD data storage <highlight><bold>290</bold></highlight>, retrieving multiplexed data from output DVD data storage <highlight><bold>290</bold></highlight> and emulating an authored DVD-ROM in conjunction with interface <highlight><bold>160</bold></highlight><highlight><italic>a</italic></highlight>. Multiplexer <highlight><bold>185</bold></highlight> responds to authoring engine <highlight><bold>160</bold></highlight> by receiving DVD parameter information from compiler <highlight><bold>170</bold></highlight>, retrieving presentation data from presentation data storage <highlight><bold>203</bold></highlight> and combining the retrieved information and data in accordance DVD Specification <highlight><bold>205</bold></highlight>. Multiplexer <highlight><bold>185</bold></highlight> then stores the combined information and data (&ldquo;DVD data stream&rdquo; or &ldquo;.vob file&rdquo;) in output DVD data storage <highlight><bold>290</bold></highlight>. Layout formatter <highlight><bold>187</bold></highlight> retrieves the .vob files and .ifo files from output DVD data storage <highlight><bold>290</bold></highlight> and combines these files into a single &ldquo;disc image&rdquo; file, which it then stores in disc image file storage <highlight><bold>207</bold></highlight>. The disc image file can then be sent through network I/O <highlight><bold>145</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) to additional apparatus for further review, processing and/or for burning one or more DVD-ROMs <highlight><bold>207</bold></highlight>. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3 through 10</cross-reference>, with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, illustrate how an interface according to the invention enables an author to assemble a movie title essentially removed from DVD programming specifications <highlight><bold>207</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) of the DVD Specification. Preferred interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>is illustrated as an application running under a Windows95&reg; or Windows NT&reg; (trademark of Microsoft, Corp.) operating system. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 3</cross-reference> screenshot illustrates a preferred authoring window <highlight><bold>300</bold></highlight>, which an author can utilize to select an arrangement of audio-visual material including video segments (&ldquo;video clips&rdquo;), audio segments (&ldquo;audio clips&rdquo;) and subtitles (hereinafter referred to collectively as &ldquo;performance data&rdquo;). </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Authoring window <highlight><bold>300</bold></highlight> is divided into movable, modifiable and replaceable groupings or &ldquo;views&rdquo; and &ldquo;panels&rdquo; including presentation data panel <highlight><bold>301</bold></highlight>, performance assembly panel <highlight><bold>302</bold></highlight>, assembled elements panel <highlight><bold>307</bold></highlight>, log panel <highlight><bold>308</bold></highlight> and preview video panel <highlight><bold>309</bold></highlight>. Assembly panel <highlight><bold>302</bold></highlight> is further divided into video assembly portion <highlight><bold>320</bold></highlight>, audio assembly portion <highlight><bold>330</bold></highlight> and subtitle assembly portion <highlight><bold>340</bold></highlight> (which are collectively referred to herein as performance view <highlight><bold>303</bold></highlight>), and performance tools portion <highlight><bold>360</bold></highlight>. Authoring window <highlight><bold>300</bold></highlight> also includes authoring toolbar <highlight><bold>399</bold></highlight><highlight><italic>a </italic></highlight>and menu bar <highlight><bold>399</bold></highlight><highlight><italic>b</italic></highlight>. For clarity sake, the following discussion assumes that a single, continuous movie is being authored (i.e. a movie having component video, audio and subtitle data streams each of which begins at the start of the movie and ends at the conclusion of the movie). </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Presentation data panel <highlight><bold>301</bold></highlight> provides a display listing for each presentation data file that an author has selected and loaded for use in assembling movies and menus either during a current authoring session or when continuing a re-initiated, prior authoring session. File listings include file name <highlight><bold>311</bold></highlight>, file duration <highlight><bold>313</bold></highlight>, and file type <highlight><bold>315</bold></highlight> parameters. File name <highlight><bold>311</bold></highlight> lists the name of a file. File duration <highlight><bold>313</bold></highlight> lists the playback duration of files such as video data files and audio data files. File type <highlight><bold>315</bold></highlight> alternatively lists a file format, which is generally indicated by a filename extension, or a recognized data type such as &ldquo;video&rdquo; data or &ldquo;audio&rdquo; data. As will be further discussed, presentation data file listings can be used interactively during an authoring session. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Performance assembly view <highlight><bold>303</bold></highlight> of performance assembly panel <highlight><bold>302</bold></highlight> is used by an author to graphically and interactively assemble loaded video and/or audio data, to add and assemble subtitles, and/or to add chapter points. For these purposes, performance view <highlight><bold>303</bold></highlight> includes video assembly portion <highlight><bold>320</bold></highlight>, audio assembly portion <highlight><bold>330</bold></highlight>, subtitle assembly portion <highlight><bold>340</bold></highlight> and chapter assembly portion <highlight><bold>350</bold></highlight> respectively. Video assembly portion <highlight><bold>320</bold></highlight> is used by an author to assemble graphic objects referencing stored video data files (&ldquo;video clips&rdquo;). As discussed, these files, once initially selected, are listed in presentation data panel <highlight><bold>301</bold></highlight>. Video frame thumbnails <highlight><bold>323</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>323</bold></highlight><highlight><italic>b </italic></highlight>are indicative of chapter points as will be further discussed herein. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Audio assembly portion <highlight><bold>330</bold></highlight> of performance assembly panel <highlight><bold>302</bold></highlight> is used by an author to receive graphic objects referencing stored audio data files (&ldquo;audio clips&rdquo;). As with video clips, audio clips, once selected for use, are listed in and selected from presentation data panel <highlight><bold>301</bold></highlight> for arrangement purposes. Up to eight (alternate language) audio data streams or audio &ldquo;tracks&rdquo;, exemplified by audio tracks <highlight><bold>331</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>331</bold></highlight><highlight><italic>c</italic></highlight>, are available in accordance with DVD Specification <highlight><bold>205</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Audio bars <highlight><bold>332</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>332</bold></highlight><highlight><italic>b</italic></highlight>, which represent author-arranged audio clips, have a length that reflects the playback time of the audio data represented. Separators <highlight><bold>333</bold></highlight> are further indicators of chapter points, as with video frame thumbnails <highlight><bold>323</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>323</bold></highlight><highlight><italic>b </italic></highlight>of video assembly portion <highlight><bold>320</bold></highlight>. Audio tracks <highlight><bold>332</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>332</bold></highlight><highlight><italic>c </italic></highlight>further include audio encoding indicators <highlight><bold>334</bold></highlight><highlight><italic>a</italic></highlight>, audio format indicators <highlight><bold>334</bold></highlight><highlight><italic>b</italic></highlight>, track number indicators <highlight><bold>335</bold></highlight> and selected language indicators <highlight><bold>336</bold></highlight>, which are indicative respectively of audio data file encoding and playback format, selectable audio track number <highlight><bold>336</bold></highlight> and modifiable language label <highlight><bold>335</bold></highlight>. Language labels <highlight><bold>335</bold></highlight> can be set by author selection or, as is expected, automatically by recognition of languages spoken in a recorded dialog of a respective audio track. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Subtitle assembly portion <highlight><bold>340</bold></highlight> provides for entry, retrieval and/or editing of up to thirty-two (alternate language) frame-based subtitle sequences, as exemplified by tracks <highlight><bold>341</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>341</bold></highlight><highlight><italic>b</italic></highlight>. Exemplary subtitle frames <highlight><bold>342</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>342</bold></highlight><highlight><italic>b </italic></highlight>illustrate textual subtitle contents. Subtitles are entered in a conventional manner using a conventional text editor (not shown) which is invoked by activating a subtitle frame (e.g. by menu selection or double-clicking) and/or by retrieving a pre-existing subtitle file using, for example, presentation data panel <highlight><bold>301</bold></highlight>. As with audio assembly portion <highlight><bold>330</bold></highlight>, subtitle portion <highlight><bold>340</bold></highlight> includes selectable track numbers and modifiable language label indicators. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Performance assembly view <highlight><bold>303</bold></highlight> also includes chapter assembly portion <highlight><bold>350</bold></highlight>, which is used by an author to graphically and interactively assemble chapter points. Chapter assembly portion <highlight><bold>350</bold></highlight> includes wall clock <highlight><bold>351</bold></highlight>, reference offset clock <highlight><bold>352</bold></highlight>, author-assembled chapter indicators <highlight><bold>353</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>353</bold></highlight><highlight><italic>c</italic></highlight>, chapter time indicators <highlight><bold>354</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>354</bold></highlight><highlight><italic>c </italic></highlight>and reference time indicators <highlight><bold>355</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>355</bold></highlight><highlight><italic>c</italic></highlight>. Wall clock <highlight><bold>351</bold></highlight> indicates a time within a video clip corresponding to a cursor position over chapter portion <highlight><bold>350</bold></highlight> of assembly panel <highlight><bold>302</bold></highlight>. Offset clock <highlight><bold>352</bold></highlight> indicates the start time of a currently indicated video clip according to the reference timecode of a master tape (i.e. from which the video data file was created). Chapter indicators <highlight><bold>353</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>353</bold></highlight><highlight><italic>c </italic></highlight>show chapter points (i.e. points to which a DVD-ROM consumer can advance) as arranged during authoring. Chapter time indicators <highlight><bold>354</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>354</bold></highlight><highlight><italic>c </italic></highlight>and reference time indicators <highlight><bold>355</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>355</bold></highlight><highlight><italic>c </italic></highlight>display the elapsed time of corresponding selected chapter points from the start of a movie and from the start of a clip respectively. Reference times are typically recorded (and thus can be selectively retrieved and displayed) utilizing Society of Motion Pictures and Television (&ldquo;SMPTE&rdquo;) timecode. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> As noted earlier, performance assembly panel <highlight><bold>302</bold></highlight> and the other panels and views of authoring window <highlight><bold>300</bold></highlight> are replaceable. Tabs <highlight><bold>302</bold></highlight><highlight><italic>a </italic></highlight>provide one alternative control structure for selectively switching between initiated or &ldquo;open&rdquo; authoring tasks, for example, to alternate between assembling presentation data of multiple movies, for creating menu layouts, and/or for other authoring tasks. Other control structures include menu options (not shown) for selectively de-coupling panels and transport enabling controls (<highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>362</bold></highlight><highlight><italic>c </italic></highlight>and <highlight><bold>363</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>363</bold></highlight><highlight><italic>b</italic></highlight>), and further for re-coupling in the illustrated default arrangement, in an author-selectable arrangement and/or interactively by an author. Panels can be resized and/or re-arranged among other window capabilities, as will be understood by those skilled in the art in view of the discussion herein. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Assembly tools portion <highlight><bold>360</bold></highlight> of performance assembly panel <highlight><bold>302</bold></highlight> comprises selectable zoom controls <highlight><bold>361</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>361</bold></highlight><highlight><italic>c</italic></highlight>, preview transport buttons including stop <highlight><bold>362</bold></highlight><highlight><italic>a</italic></highlight>, play <highlight><bold>362</bold></highlight><highlight><italic>b </italic></highlight>and frame advance <highlight><bold>362</bold></highlight><highlight><italic>c</italic></highlight>, preview transport start time selector <highlight><bold>363</bold></highlight><highlight><italic>a </italic></highlight>and stop time selector <highlight><bold>363</bold></highlight><highlight><italic>b</italic></highlight>, selected clip indicator <highlight><bold>364</bold></highlight><highlight><italic>a </italic></highlight>and total clips indicator <highlight><bold>364</bold></highlight><highlight><italic>b</italic></highlight>. Zoom controls <highlight><bold>361</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>361</bold></highlight><highlight><italic>c </italic></highlight>are used respectively for increasing the viewable data range of a selected area within performance assembly view <highlight><bold>303</bold></highlight> of performance assembly panel <highlight><bold>302</bold></highlight>, for selecting a portion of performance assembly view <highlight><bold>302</bold></highlight> for such viewing, and for decreasing the viewable data range. Transport controls <highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>362</bold></highlight><highlight><italic>c </italic></highlight>provide video playback control when previewing a video clip, audio clip and/or subtitle data using preview video panel <highlight><bold>309</bold></highlight>, or when selecting a representative video frame in a video clip as a preview thumbnail (as with exemplary thumbnails <highlight><bold>323</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>323</bold></highlight><highlight><italic>b</italic></highlight>). Transport control <highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>halts video, audio and/or subtitle playback, transport control <highlight><bold>362</bold></highlight><highlight><italic>b </italic></highlight>initiates/continues playback and transport control <highlight><bold>362</bold></highlight><highlight><italic>c </italic></highlight>provides for per-frame (&ldquo;step&rdquo;) viewing, as will be understood by those skilled in the art. Start and end time selectors <highlight><bold>363</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>363</bold></highlight><highlight><italic>b </italic></highlight>are used respectively for selecting and monitoring video, audio and/or subtitle playback position and for setting and monitoring a playback stop time. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> Assembled elements panel <highlight><bold>306</bold></highlight> provides interactive and selectable listings of authored contents of a current movie title, including but not limited to movie volume <highlight><bold>361</bold></highlight>, movies <highlight><bold>362</bold></highlight> and menus <highlight><bold>363</bold></highlight>. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Log panel <highlight><bold>308</bold></highlight> provides selectable progress reports and other information relating to decoding/encoding of presentation data, compiling and layout of a disk file format according to DVD disk format specifications <highlight><bold>205</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). These reports are automatically created and can be accessed using log tabs exemplified by tabs <highlight><bold>381</bold></highlight> and <highlight><bold>383</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Preview video panel <highlight><bold>303</bold></highlight> selectively displays a video frame corresponding to a cursor position over assembly panel chapter portion <highlight><bold>350</bold></highlight>, video assembly portion <highlight><bold>320</bold></highlight>, audio assembly portion <highlight><bold>330</bold></highlight>, subtitle portion <highlight><bold>340</bold></highlight> and/or chapter portion <highlight><bold>350</bold></highlight> of assembly panel <highlight><bold>302</bold></highlight>. In addition, preview video panel is used for previewing video data using transport controls <highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>362</bold></highlight><highlight><italic>c</italic></highlight>, start and stop time selectors <highlight><bold>363</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>363</bold></highlight><highlight><italic>b </italic></highlight>or directly invoking the panel using selection or drag-and-drop capabilities. (As will be understood by those skilled in the art, encoded video and audio files are decoded and buffered, as needed, for playback in a conventional manner using MPEG encoder/decoder <highlight><bold>130</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>.) </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> The following toolbar chart lists the respective elements of toolbar <highlight><bold>399</bold></highlight>. It will be understood by those skilled in the art, in view of the discussion herein, that the toolbar elements can vary substantially and includes user-defined expandable and replaceable elements. The elements shown are provided as defaults.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="35PT" align="center"/>
<colspec colname="2" colwidth="63PT" align="left"/>
<colspec colname="3" colwidth="119PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Label</entry>
<entry>Referenced as</entry>
<entry>Description</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>401</entry>
<entry>New volume</entry>
<entry>Loads default values and adjusts the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>interface for a new movie title.</entry>
</row>
<row>
<entry>403</entry>
<entry>New menu</entry>
<entry>Loads default values and adjusts the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>interface for a new menu layout.</entry>
</row>
<row>
<entry>405</entry>
<entry>New movie</entry>
<entry>Loads default values and adjusts the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>interface for authoring a new movie.</entry>
</row>
<row>
<entry>407</entry>
<entry>Connections</entry>
<entry>Switches to an existing connections</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>interface or adjusts the interface,</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>according to default values for initially</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>setting connections.</entry>
</row>
<row>
<entry>413-415</entry>
<entry>Cut, copy and paste</entry>
<entry>Provide conventional functions except</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>as described herein for connections.</entry>
</row>
<row>
<entry>421</entry>
<entry>Compile start</entry>
<entry>Initiating compiler operation.</entry>
</row>
<row>
<entry>423</entry>
<entry>Compiler stop</entry>
<entry>Interrupts compiler operation.</entry>
</row>
<row>
<entry>425</entry>
<entry>DVD Layout</entry>
<entry>Invokes DVD Disk layout operation.</entry>
</row>
<row>
<entry>427</entry>
<entry>Write Tape</entry>
<entry>Provides for output of multiplexed</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>data stream to tape.</entry>
</row>
<row>
<entry>429</entry>
<entry>Simulator</entry>
<entry>Invokes simulator</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 5</cross-reference> flowchart illustrates, by way of example and with reference to <cross-reference target="DRAWINGS">FIGS. 3 and 4</cross-reference>, how an interface in accordance with the invention enables an author to assemble performance data and objects without consideration for structures, commands or ordered tasks imposed by DVD programming specifications <highlight><bold>207</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). Select, open and drag-and-drop, among other operations, and clicking, double-clicking, click-and-drag and other user actions associated with graphic interfaces are well known and will not be further expounded upon herein. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> As shown, in step <highlight><bold>505</bold></highlight>, an author initiates a new project (&ldquo;volume&rdquo;) by selecting new volume <highlight><bold>401</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>). In step <highlight><bold>510</bold></highlight>, the author initiates a new movie by selecting new movie <highlight><bold>405</bold></highlight>. In step <highlight><bold>515</bold></highlight>, the author adds video and audio files to presentation data panel <highlight><bold>301</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>) for potential use in the volume by movies and menus. In step <highlight><bold>520</bold></highlight>, the author can preview a video file in preview panel <highlight><bold>304</bold></highlight> by dragging its icon in presentation data panel <highlight><bold>301</bold></highlight> to preview panel <highlight><bold>304</bold></highlight> and/or, if desired, by invoking transport controls <highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>362</bold></highlight><highlight><italic>c</italic></highlight>, preview timer <highlight><bold>393</bold></highlight> and/or other playback-related controls. In step <highlight><bold>525</bold></highlight>, the author adds a selected video clip to the currently opened movie by double-clicking its icon in presentation data panel <highlight><bold>301</bold></highlight> or by dragging the icon from presentation data panel <highlight><bold>301</bold></highlight> to video assembly portion <highlight><bold>320</bold></highlight> of performance view <highlight><bold>303</bold></highlight>. In step <highlight><bold>530</bold></highlight>, the author can select a video frame thumbnail other than a first frame for reference viewing by dragging the pointer of thumbnail timer <highlight><bold>325</bold></highlight><highlight><italic>a </italic></highlight>and/or by using transport controls <highlight><bold>362</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>362</bold></highlight><highlight><italic>b. </italic></highlight></paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> In step <highlight><bold>535</bold></highlight>, the author can preview an audio file by selecting its icon in presentation data panel <highlight><bold>301</bold></highlight> and using controls including stop <highlight><bold>362</bold></highlight>, play <highlight><bold>362</bold></highlight><highlight><italic>b</italic></highlight>, using start time and end time selectors <highlight><bold>363</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>363</bold></highlight><highlight><italic>b </italic></highlight>and/or using other play-related controls. In step <highlight><bold>540</bold></highlight>, the author adds a selected audio clip to a next available track of the currently opened movie by double-clicking its icon in presentation data panel <highlight><bold>301</bold></highlight>. (Alternatively, the author can add a selected audio clip to a specific audio track by dragging the icon from presentation data panel <highlight><bold>301</bold></highlight> to a selected track in audio assembly portion <highlight><bold>330</bold></highlight> of performance view <highlight><bold>303</bold></highlight>. In step <highlight><bold>545</bold></highlight>, the author selects a language label by selecting selected language indicator <highlight><bold>335</bold></highlight> and selecting a listed element. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> In step <highlight><bold>550</bold></highlight>, the author opens a subtitle frame and enters subtitle information for display in a video frame during playback of video clips. In step <highlight><bold>555</bold></highlight>, the author selects a language label corresponding to the subtitle track containing the subtitle frame. If, in step <highlight><bold>560</bold></highlight>, the author elects to add more performance data, then the author returns to step <highlight><bold>520</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> In step <highlight><bold>565</bold></highlight>, the author moves a cursor within chapter assembly portion <highlight><bold>350</bold></highlight> of performance view <highlight><bold>303</bold></highlight> to view video frames available as chapter points. In step <highlight><bold>570</bold></highlight>, the author selects a chapter point. If, in step <highlight><bold>575</bold></highlight>, the author elects to add more chapter points, then the author continues at step <highlight><bold>565</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In step <highlight><bold>580</bold></highlight>, the author selects an audio track number and optionally selects a subtitle track number and/or playback start and/or end times before selecting play button <highlight><bold>362</bold></highlight><highlight><italic>b </italic></highlight>to preview playback of the video clip and the audio clip referenced by the selected track number. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The <cross-reference target="DRAWINGS">FIGS. 6</cross-reference><highlight><italic>a </italic></highlight>and <highlight><bold>6</bold></highlight><highlight><italic>b </italic></highlight>flowchart (with reference to <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>) generally illustrates responses by the preferred authoring program <highlight><bold>201</bold></highlight> to an author&apos;s actions according to the invention. As shown, if in step <highlight><bold>602</bold></highlight> an author selects a movie assembled in a prior authoring session, then, in step <highlight><bold>604</bold></highlight>, data management engine <highlight><bold>165</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) loads related parameters and, in step <highlight><bold>606</bold></highlight>, sends the parameters to authoring engine <highlight><bold>160</bold></highlight>. Otherwise, default parameters for a new movie are loaded in step <highlight><bold>608</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> In step <highlight><bold>609</bold></highlight>, authoring engine <highlight><bold>160</bold></highlight> updates assembled elements panel <highlight><bold>307</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>) and other affected interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>elements to indicate the movie parameters. If, in step <highlight><bold>612</bold></highlight>, the author selects presentation data files, then data management engine <highlight><bold>165</bold></highlight> loads and sends the respective presentation data file parameters to authoring engine <highlight><bold>160</bold></highlight> in step <highlight><bold>614</bold></highlight>, which updates presentation data panel <highlight><bold>301</bold></highlight> in step <highlight><bold>616</bold></highlight>. If, in step <highlight><bold>622</bold></highlight>, the author assembles one of the selected video clips, then authoring engine <highlight><bold>160</bold></highlight> accordingly updates video assembly portion <highlight><bold>320</bold></highlight>, chapter assembly portion <highlight><bold>350</bold></highlight> and offset clock <highlight><bold>352</bold></highlight> in step <highlight><bold>624</bold></highlight>, updates assembled elements panel <highlight><bold>307</bold></highlight> in step <highlight><bold>626</bold></highlight>, and sends the video clip parameters to data management engine <highlight><bold>165</bold></highlight> for storage in step <highlight><bold>628</bold></highlight>. Similarly, if the author assembles one of the selected audio clips in step <highlight><bold>632</bold></highlight>, then authoring engine <highlight><bold>160</bold></highlight> updates the selected track of audio assembly portion <highlight><bold>320</bold></highlight> in step <highlight><bold>634</bold></highlight>, updates assembled elements panel <highlight><bold>307</bold></highlight> in step <highlight><bold>636</bold></highlight>, and sends the audio clip parameters to data management engine <highlight><bold>165</bold></highlight> in step <highlight><bold>638</bold></highlight>. If, in step <highlight><bold>642</bold></highlight>, the author assembles subtitle data, then authoring engine <highlight><bold>165</bold></highlight> updates subtitle assembly portion <highlight><bold>340</bold></highlight> in step <highlight><bold>644</bold></highlight>, updates assembled elements <highlight><bold>307</bold></highlight> in step <highlight><bold>646</bold></highlight>, and sends subtitle data and parameters to data management engine <highlight><bold>160</bold></highlight> in step <highlight><bold>628</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> If, in step <highlight><bold>652</bold></highlight>, the author moves an interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>pointer (e.g. a mouse pointer) within chapter assembly portion <highlight><bold>360</bold></highlight>, then in step <highlight><bold>654</bold></highlight> authoring engine <highlight><bold>160</bold></highlight> updates wallclock <highlight><bold>351</bold></highlight>, finds an I-frame (i.e. a video frame that is completely described without reference to other frames) within the video clip corresponding to the mouse pointer position and displays the I-frame in preview video panel <highlight><bold>309</bold></highlight>. If, in step <highlight><bold>672</bold></highlight>, the author assembles a chapter point, then authoring engine <highlight><bold>160</bold></highlight> updates video assembly portion <highlight><bold>340</bold></highlight> and chapter assembly portion <highlight><bold>350</bold></highlight> in step <highlight><bold>674</bold></highlight>, updates assembled elements panel <highlight><bold>307</bold></highlight> in step <highlight><bold>676</bold></highlight>, and sends corresponding chapter parameters to data management engine <highlight><bold>165</bold></highlight> in step <highlight><bold>678</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 7</cross-reference> screenshot illustrates the preferred authoring window <highlight><bold>300</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> with the performance data assembly panels replaced by panels for allowing an author to layout menus. More particularly, menu layout panel <highlight><bold>701</bold></highlight> and menu tools panel <highlight><bold>702</bold></highlight> ate selected, sized and positioned to replace performance view <highlight><bold>303</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. An exemplary menu layout including graphic and textural images is shown in menu layout panel <highlight><bold>701</bold></highlight> for purposes of illustration. Menu layout panel <highlight><bold>701</bold></highlight> is used visually and interactively by an author to retrieve, add, place and modify menu elements using menu tools panel <highlight><bold>702</bold></highlight> selections. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In accordance with the DVD Specification, menu elements presentable to a DVD consumer can include a background image (&ldquo;background&rdquo;), an overlay image (&ldquo;subpicture&rdquo;) and up to twenty-five buttons. For the present example, author-selected background <highlight><bold>710</bold></highlight> is a multicolor design, and author-selected subpicture <highlight><bold>711</bold></highlight> includes the textural information, Dolby Demo <highlight><bold>1</bold></highlight>, Dolby Demo <highlight><bold>2</bold></highlight>, Play Both Demos and Main Menu. Four author-created buttons <highlight><bold>720</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>720</bold></highlight><highlight><italic>d </italic></highlight>including button frames <highlight><bold>721</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>721</bold></highlight><highlight><italic>d </italic></highlight>are also shown. Each of button numbers <highlight><bold>722</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>722</bold></highlight><highlight><italic>d </italic></highlight>is added by authoring program <highlight><bold>201</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) in response to creation of a respective button for identification purposes (i.e. during authoring and for use in compilation). </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Menu tools panel <highlight><bold>702</bold></highlight> comprises controls for implementing selectable menu element parameters and for selectably altering the display characteristics of elements within menu layout panel <highlight><bold>701</bold></highlight> during an authoring session. For example, color selection boxes <highlight><bold>732</bold></highlight>, <highlight><bold>734</bold></highlight>, <highlight><bold>736</bold></highlight> and <highlight><bold>738</bold></highlight> allow an author to choose a button outline color for display (in a consumer viewing scenario) when a button is not selected (&ldquo;normal&rdquo;), when a consumer points at the button (&ldquo;selection&rdquo;) and when a button is invoked (&ldquo;action&rdquo;) respectively. An author can also select the opacity of the buttons for these cases using opacity sliders <highlight><bold>733</bold></highlight>, <highlight><bold>735</bold></highlight>, and <highlight><bold>737</bold></highlight> respectively. Similarly, an author can select button shapes and other characteristics by selecting one of the layout feature tabs <highlight><bold>739</bold></highlight> and utilizing the tool sets that appear in a respective tool set panel (not shown). An author might, for example, utilize prior button shape, color, texture, opacity and/or normal, selection and activation color combinations used with a prior authoring session as either a starting point for further changes or without further modification. Other parameter combinations might also be utilized. Safe area toggle <highlight><bold>755</bold></highlight><highlight><italic>a </italic></highlight>allows an author to selectively display safe area indicator <highlight><bold>755</bold></highlight><highlight><italic>b </italic></highlight>of menu layout panel <highlight><bold>701</bold></highlight> (which bounds an area that is assured to be displayed on a consumer television). Display controls <highlight><bold>751</bold></highlight> and <highlight><bold>752</bold></highlight> provide for altering the characteristics indicated which, in light of the prior discussion, will be understood by those skilled in the art without further edification. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Layout feature tabs <highlight><bold>749</bold></highlight> also provide access to button ordering tools (not shown). As with other authoring parameters, an author can selectively utilize an existing order of buttons that will be traversed in a currently displayed menu when a consumer pushes directional buttons on a remote control device. An alternative order can also be set using any number of methods including but not limited to using a displayed remote control device or dragging an arrow from a starting point to an ending point. Such features and their operational characteristics, given the foregoing, will be understood by those skilled in the art without further edification. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> flowchart shows how the actions required for laying out a menu are consistent with those for assembling performance data. Once again, authoring is visually and interactively achieved without requiring any specific ordering of actions. Therefore, as with performance data assembly, the specific ordering of actions is given for purposes of illustration only. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> As shown, in step <highlight><bold>805</bold></highlight>, the author selects background and subpicture files for inclusion in a menu layout. Selected files will appear in presentation data panel <highlight><bold>301</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 7</cross-reference>). In step <highlight><bold>810</bold></highlight>, an author adds a background and a subpicture to the current menu by double-clicking on file listings, dragging the files to menu layout panel <highlight><bold>701</bold></highlight> or by using a similar method. In step <highlight><bold>815</bold></highlight>, the author draws (i.e. drags a box) around subpicture text forming a button frame, thereby indicating button placement directly in menu layout panel <highlight><bold>701</bold></highlight>. If, in step <highlight><bold>820</bold></highlight>, more button frames remain to be added, then the author returns to step <highlight><bold>815</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In step <highlight><bold>825</bold></highlight>, the author selects a button and sets shape, size, opacity and other parameters using preset combinations and/or color selection boxes <highlight><bold>732</bold></highlight>, <highlight><bold>734</bold></highlight>, <highlight><bold>736</bold></highlight> and <highlight><bold>738</bold></highlight>, opacity sliders <highlight><bold>733</bold></highlight>, <highlight><bold>735</bold></highlight>, and <highlight><bold>737</bold></highlight> and/or other tools. In step <highlight><bold>830</bold></highlight>, the author sets the intra-menu button order in the manner already described. If, in step <highlight><bold>840</bold></highlight>, more menus remain to be created, then the author selects add menu button <highlight><bold>413</bold></highlight> in step <highlight><bold>840</bold></highlight>, and returns to step <highlight><bold>805</bold></highlight>. New elements appear in assembled elements panel <highlight><bold>307</bold></highlight> and control data (i.e. relating to added elements and their layout characteristics) are sent to data management engine <highlight><bold>165</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) as with performance data assembly. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 9</cross-reference> screenshot illustrates a further selectable configuration of the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> interface for linking together presentation data, menu layouts, buttons within menu layouts and available control functions of a DVD player. As shown, connection view <highlight><bold>901</bold></highlight> includes available targets panel <highlight><bold>903</bold></highlight> and linking panel <highlight><bold>905</bold></highlight>. Linking panel <highlight><bold>905</bold></highlight> further includes available sources portion <highlight><bold>950</bold></highlight> and connected targets portion <highlight><bold>960</bold></highlight>. While connections view <highlight><bold>901</bold></highlight> is active, assembled elements panel <highlight><bold>307</bold></highlight> can further be used as a selection means for navigating more quickly to a desired target within available targets panel <highlight><bold>903</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Operationally, an author forms a link or &ldquo;available connection&rdquo; simply by copying (i.e. performing a copy action or dragging) a target from available targets portion <highlight><bold>903</bold></highlight> to a position in connected targets portion <highlight><bold>960</bold></highlight> that is in the same row as a desired source in available sources view <highlight><bold>950</bold></highlight>. As with assembling a movie and menu layouts, an author can interactively remove, move or otherwise modify links in a conventional manner. For example, a link can be removed by deletion or a target can be moved or copied to another row in linking portion <highlight><bold>905</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> As with arranging performance data and forming menu layouts, an author has easy and complete flexibility in adding interactivity to a consumer&apos;s viewing experience. A DVD movie can be authored, for example, such that entry and exit from a menu can be controlled by any available event. Referring also to the <cross-reference target="DRAWINGS">FIG. 10</cross-reference> simulator window <highlight><bold>1000</bold></highlight>, any menu button can further be linked to any DVD event, including but not limited to a chapter point (e.g. chapter point <highlight><bold>953</bold></highlight>), the end of chapter playback or depressing a DVD remote control device menu button <highlight><bold>1020</bold></highlight> and <highlight><bold>1040</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 10</cross-reference>). A particular menu button can also be used as a target in multiple instances, as might be creatively appropriate. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Thus, for example, a consumer interface can be quickly and easily created which is interactively responsive (&ldquo;context sensitive&rdquo;) to a consumer&apos;s actions. Stated alternatively, an interface can be authored such that, for example. the conclusion of a specific chapter playback or menu button activation will determine a next chapter playback, a next menu or even a next menu wherein an author-selected menu button is highlighted. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Among the reasons for such ease and flexibility is that, contrary to conventionally authored DVD movies, program chains are not created during the authoring process. Similarly, connections specified during authoring are not permanent (&ldquo;hard wired&rdquo;). Rather, program chains are not created until compilation and available connections are not fully resolved until playback, each according to additional abstractions of the invention, as will be further discussed herein. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 11</cross-reference> block diagram illustrates the structure of a preferred data management engine <highlight><bold>165</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) according to the invention. As illustrated, data management engine <highlight><bold>165</bold></highlight> only partially reflects the interface constructs and the structures of the DVD Specification. While reflecting interface abstractions (e.g. a movie, menu and connection based movie-title description) and DVD Specification requirements (e.g. first play jump source), data management engine <highlight><bold>165</bold></highlight> is further structured as a flexible network of data storage and distribution objects that also reflects other abstractions of the invention. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> One further abstraction, for example, is a model of a DVD player, a consumer&apos;s controller and the compiled authoring instructions as an actively connection-switched network. Within this network, DVD program chains representative of action-oriented authoring instructions (&ldquo;routers&rdquo;), perform switching among available connections in response to DVD-player (i.e. consumer) instructions, thereby re-directing program flow and control. Control-receiving program chains then perform more localized tasks (e.g. such as displaying a menu). Stated alternatively, a router program chain resolves an available connection from a DVD-player control instruction to a receiving program chain, which again routes control or executes the instruction. Further abstractions also include models of program chains for performing a common base functionality in a same or similar manner using a derived common program chain structure. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Such an arrangement provides real world flexibility and efficiency. For example, data management engine <highlight><bold>165</bold></highlight> supports authoring flexibility with regard to source-target connections that are switchable. Further, given the power of even conventional computer systems, data management engine <highlight><bold>165</bold></highlight> is sufficiently robust to enable the interactive operation of interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>(<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) as well as minimal compilation times of compiler <highlight><bold>170</bold></highlight> (i.e. only milliseconds) without direct interface or DVD program specification <highlight><bold>205</bold></highlight> correlation. Data management engine <highlight><bold>165</bold></highlight> is therefore also readily adaptable to interface variations and further interfaces, as well as to compiler variations and other compilers supporting other DVD and non-DVD data storage and/or retrieval applications. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Referring again to <cross-reference target="DRAWINGS">FIG. 11</cross-reference> and with further reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, data management engine <highlight><bold>165</bold></highlight> comprises a root volume object <highlight><bold>1100</bold></highlight>, which manages data management engine <highlight><bold>165</bold></highlight> communication and storage. Volume object <highlight><bold>1100</bold></highlight> provides an interface for communicating messaged data to and from its component parts, including title key jump source <highlight><bold>1101</bold></highlight>, first play jump source <highlight><bold>1102</bold></highlight>, media database <highlight><bold>1103</bold></highlight>, DVD layout properties <highlight><bold>1104</bold></highlight>, movies list <highlight><bold>1105</bold></highlight>, menus list <highlight><bold>1106</bold></highlight> and connections list <highlight><bold>1107</bold></highlight> (objects). Media database <highlight><bold>1103</bold></highlight> further includes media files list <highlight><bold>1130</bold></highlight>, which stores pointers to media files referred to by the performance data arrangement as a result of authoring. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> In addition, each of the presentation data objects (i.e. movies list <highlight><bold>1105</bold></highlight> and menus list <highlight><bold>1106</bold></highlight>) and a connection sets list object <highlight><bold>1107</bold></highlight> contain links to other data management engine objects in the form of an object tree. More specifically, movies list <highlight><bold>1105</bold></highlight> is linked to movie objects movie-<highlight><bold>1150</bold></highlight><highlight><italic>a </italic></highlight>through movie-M <highlight><bold>1150</bold></highlight><highlight><italic>b</italic></highlight>, wherein M is the total number of movies authored for storage on a single DVD-ROM (&ldquo;movie title&rdquo;). Each movie object contains a respective track list object <highlight><bold>1151</bold></highlight> and a respective chapter list object <highlight><bold>1152</bold></highlight>. Each track list object <highlight><bold>1151</bold></highlight> contains respective track objects, track-1 <highlight><bold>1153</bold></highlight><highlight><italic>a </italic></highlight>through track-T <highlight><bold>1153</bold></highlight><highlight><italic>b</italic></highlight>, wherein T is the total number of tracks authored within a respective movie. Track-1 through track-T further contain clip lists, which in turn contain clip objects clip-1 <highlight><bold>1154</bold></highlight><highlight><italic>a </italic></highlight>through clip-CL <highlight><bold>1154</bold></highlight><highlight><italic>b </italic></highlight>(and wherein CL is the total number of clips in a given track within a given movie). Finally, each clip object contains a respective clip properties object, as exemplified by clip object <highlight><bold>1155</bold></highlight>. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Menu objects are structured in a manner similar to that of movie objects. Menus list object <highlight><bold>1160</bold></highlight> contains menu objects menu-1 <highlight><bold>1160</bold></highlight><highlight><italic>a </italic></highlight>through menu-N, wherein N is the total number of menus authored for storage on a given DVD-ROM. Each menu object further contains a respective button list object (e.g. object <highlight><bold>1161</bold></highlight>), each button list object contains a respective button objects (button-1 <highlight><bold>1162</bold></highlight><highlight><italic>a </italic></highlight>through button-B <highlight><bold>1162</bold></highlight><highlight><italic>b</italic></highlight>) and each button object is linked to a button properties object (e.g. object <highlight><bold>1163</bold></highlight>). B indicates a total number of buttons in a respective menu. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Finally, connections sets list <highlight><bold>1107</bold></highlight> contains respective connections lists (i.e. connect-list-1 <highlight><bold>1170</bold></highlight><highlight><italic>a </italic></highlight>through connect-list-CL <highlight><bold>1170</bold></highlight><highlight><italic>b</italic></highlight>), wherein CL is the total number of connections lists authored for storage on a given DVD-ROM. Each connect-list is further linked to respective connections objects (i.e. connect-1 <highlight><bold>1171</bold></highlight><highlight><italic>a </italic></highlight>through connect-CN), wherein CN is the total number of connections authored to facilitate flexible program flow and control. Each connections object (<highlight><bold>1171</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>1171</bold></highlight><highlight><italic>b</italic></highlight>) represents an action-oriented switch between a respective source and a respective target (as indicated by source-pointer variable <highlight><bold>1172</bold></highlight> and target-pointer variable <highlight><bold>1173</bold></highlight>), as will be discussed further herein. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Where applicable, each object includes an indexed object list having a pointer to each connected dependent object (i.e. an object &ldquo;further down the tree&rdquo; as illustrated), as well as a totals variable. The object list is updated to include new dependent objects as these objects are created (&ldquo;instantiated&rdquo;) to reflect, for example, an added chapter point or menu. Dependent objects are similarly removed from the object list according to authoring deletions. Totals variables are also updated during authoring to reflect each corresponding dependent object instantiation and deletion. Undo and redo operations are handled in a conventional manner using authoring instructions which are further conventionally stored within respective objects during each authoring session. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Using this structure, data management engine <highlight><bold>165</bold></highlight> breaks down or filters control data generated during authoring into its basic component parts for storage in a corresponding object&apos;s indexed data list. These basic component parts are then retrieved by authoring engine <highlight><bold>160</bold></highlight>, or retrieved and reconstructed into an applicable form by compiler <highlight><bold>170</bold></highlight>, as needed. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Operationally, data management engine <highlight><bold>165</bold></highlight> receives messages from authoring engine <highlight><bold>160</bold></highlight> in response to and reflecting each author modification of a performance assembly, menu layout or connection. Volume <highlight><bold>1100</bold></highlight> receives the message, polls its contained-objects list for a recipient object according to the message type, and sends the message to the matching recipient object. If the message includes a reference to a title key source or a first play source (which is author-slectable in connections view <highlight><bold>901</bold></highlight>), then volume <highlight><bold>1100</bold></highlight> sends the message respectively to either title key jump source <highlight><bold>1101</bold></highlight> or first play jump source <highlight><bold>1102</bold></highlight>. Upon receipt, title key jump source <highlight><bold>1101</bold></highlight> or first play jump source <highlight><bold>1102</bold></highlight> will accordingly store included data, delete stored data or modify stored data. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> If a received message includes a reference to a video, audio or subtitle file, then volume <highlight><bold>1100</bold></highlight> sends the message to media database <highlight><bold>1103</bold></highlight>. If the message contains an instruction to add a data element, then media database <highlight><bold>1103</bold></highlight> stores the data (which will include a pointer to a media file) in media files list <highlight><bold>1130</bold></highlight>. If the message contains an instruction to delete a stored pointer, then media database <highlight><bold>1103</bold></highlight> deletes the pointer. If the message contains an instruction to modify a stored pointer (e.g. if the file was moved to a new location), then media database <highlight><bold>1103</bold></highlight> locates and replaces the file pointer. Media database <highlight><bold>1103</bold></highlight> further updates its totals variable to reflect additions and deletions. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> If a received message type relates to the content of a movie arrangement, menu layout or connection, then volume <highlight><bold>1103</bold></highlight> sends the message respectively to movies list <highlight><bold>1105</bold></highlight>, menus list <highlight><bold>1106</bold></highlight> or connections list <highlight><bold>1107</bold></highlight>. Each of movies list <highlight><bold>1105</bold></highlight>, menus list <highlight><bold>1106</bold></highlight> and connection sets list <highlight><bold>1107</bold></highlight> operates similarly to objects described thus far. Each parses through a received message for included control information, sends the message respectively to a corresponding movie object, menu object or connections list and adjusts its totals variable as needed. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> A movie message, for example, will then progress down through the movie object tree, and, depending upon the message type, will be filtered, by track list <highlight><bold>1152</bold></highlight>, track-1 <highlight><bold>1153</bold></highlight><highlight><italic>a </italic></highlight>and then handled a matching clip, or will be filtered by chapter list <highlight><bold>1152</bold></highlight> and then handled by corresponding chapter or by a clip properties object (i.e. as illustrated). Menu layout data will similarly progress (as illustrated) down through the menus list tree, being handled by a matching menu properties object, and connections data will progress down the connection sets list tree until it is handled by a connection object (with reference to its source pointer or destination pointer variables). Upon receipt, a clip properties, menu key, end key, menu properties or connection object will handle the message and store included data, delete stored data or modify stored data in a similar manner as with media database object <highlight><bold>1103</bold></highlight>. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> Each respective storage object stores authoring modifications in a sequentially indexed list according to its type (i.e. each object name is illustrated to reflect the data type the object stores). Thus, for example, chapter points within a movie are stored from a first chapter point during playback to a final chapter point in the movie. (Playback will however, be determined by authored connections.) The list accommodates added, inserted or deleted data interactively by expanding or contracting about the addition, insertion or deletion point. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> While other data structures might be utilized, interactively adjusted indexed lists and limited object definitions, using even a minimally equipped computer, are sufficiently robust to accommodate an author&apos;s input rate, given the relatively small amount of data stored in each list. Alternative structures that might be used, for example, include but are not limited to a lesser number of objects each containing a less restricted dataset and/or the addition of summary objects for storing total numbers of menus, buttons and system other status and/or statistical information. Such arrangements however, have been found to add complexity with only moderate gains in application-specific operational characteristics. Alternative data structures, including but not limited to multi-dimensional arrays, multiple queues and linked lists stored locally and/or remotely, present similar tradeoffs. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Data management engine <highlight><bold>165</bold></highlight> returns stored data to authoring engine <highlight><bold>160</bold></highlight> in a manner essentially the reverse of that for storing data. Volume <highlight><bold>1100</bold></highlight>, upon receipt of a request for stored data, parses the request call for a data type, searches its contained objects list for a corresponding object, and forwards the request to title key jump source <highlight><bold>1101</bold></highlight>, first play jump source <highlight><bold>1102</bold></highlight>, media database <highlight><bold>1103</bold></highlight>, DVD layout properties list <highlight><bold>1105</bold></highlight>, movies list <highlight><bold>1106</bold></highlight>, menus list <highlight><bold>1107</bold></highlight> or connection sets list <highlight><bold>1107</bold></highlight>. Movies list <highlight><bold>1105</bold></highlight>, menus list <highlight><bold>1106</bold></highlight> or connection sets list <highlight><bold>1107</bold></highlight>, upon receipt of such a request, parses its available objects list and forwards the message correspondingly to a movie object, menu object or connection list object, and so on, until the message is received by a last recipient object. The last recipient object then retrieves the requested data and sends the data in the reverse direction of request receipt until the data reaches volume <highlight><bold>1100</bold></highlight>. Volume <highlight><bold>1100</bold></highlight>, upon receipt of the data, sends the requested data to authoring engine <highlight><bold>160</bold></highlight>. (Error handling and messaging functionality are otherwise handled in a conventional manner.) </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Data management engine <highlight><bold>165</bold></highlight> further responds to queries from authoring engine <highlight><bold>160</bold></highlight> for purposes such as totaling the number of data elements of a given type or for reviewing the contents of a particular object&apos;s data list. As with data storage and retrieval above, data management engine <highlight><bold>165</bold></highlight> receives a call from authoring engine <highlight><bold>160</bold></highlight> requesting information. Volume <highlight><bold>1100</bold></highlight> parses the message, polls its available objects list and sends the message to a corresponding object. For objects linked to a tree-structure, such as movies list <highlight><bold>1105</bold></highlight>, menus list <highlight><bold>1106</bold></highlight> and connection sets list <highlight><bold>1107</bold></highlight>, the message is forwarded down through respective objects as already discussed, and a last recipient object will respond. If the message requests, for example, a total number of data elements of a given type, then a last recipient will either poll its totals variable or, if necessary, poll its data list for corresponding data, count the number of corresponding occurrences and return a response including the total. The response is sent back through the tree structure to volume <highlight><bold>1100</bold></highlight>, which sends the message (including the total) to authoring engine <highlight><bold>160</bold></highlight>. Given the relatively small number of objects, alternatives (such as asynchronous multiple-messaging and, in particular, broadcast messages) add some expediency, but with unnecessarily added complexity. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> As with the authoring engine interface objects, the object types, inter-object messaging protocol and data objects utilized in data management engine <highlight><bold>165</bold></highlight>, in view of the disclosure herein, will be apparent to those skilled in the computer arts. Preferably, available object libraries from Microsoft&reg; are utilized. For example, the preferred available objects and data lists utilize Standard Template Libraries and, in particular, Expandable Indexed Buffered/Vectored Lists. Such objects provide robust response with the flexibility of expandable lists and indexed vectors for easy lookup in light of the typically small number of objects and datasets, among other factors. As noted earlier however, use of an object-oriented architecture and/or the specific data structures are not essential and many conventional alternatives can be utilized. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> As discussed, the particular arrangement of objects of the preferred data management engine <highlight><bold>165</bold></highlight> is preferred according to its flexibility, performance and adaptability among other factors. It should be noted therefore, that any number of modifications will be apparent according to the teachings and within the spirit and scope of the invention. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>a </italic></highlight>through <highlight><bold>15</bold></highlight>, with reference to <cross-reference target="DRAWINGS">FIGS. 2 and 11</cross-reference>, illustrate compilation according to a preferred embodiment of the invention. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> As shown generally in <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>a</italic></highlight>, compiler <highlight><bold>170</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) preferably operates on data entered through the authoring process into the interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>of authoring engine <highlight><bold>160</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) and stored by data management engine <highlight><bold>165</bold></highlight> in three stages. In step <highlight><bold>1201</bold></highlight>, compiler <highlight><bold>170</bold></highlight> builds an intermediate skeleton-form PGC layout data structure. The skeleton-form PGC layout data structure is preferably formed according to DVD program code segment (&ldquo;program chain&rdquo; or &ldquo;PGC&rdquo;) abstractions and a network abstraction according to the invention, utilizing only summary data gathered from data management engine <highlight><bold>165</bold></highlight>. Broadly stated, each PGC abstraction is preferably comprised of pre-determined command combinations, wherein the number of PGCs of a given type and the number of command combinations of a given type (e.g. button command combinations) are determined according to either a default value (e.g. typically one PGC) or according to the number of corresponding authored element types. (e.g. the number of menu buttons in a given menu). </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In step <highlight><bold>1203</bold></highlight>, compiler <highlight><bold>170</bold></highlight> resolves source-target connections as indices to source and target identifier information within data management engine <highlight><bold>165</bold></highlight>. In step <highlight><bold>1205</bold></highlight>, compiler <highlight><bold>170</bold></highlight> replaces the indices with identifier information which is retrieved by further querying data management engine <highlight><bold>165</bold></highlight>. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> illustrates a preferred PGC layout structure according to the invention. As shown, the PGC layout structure is divided into a single first play PGC space <highlight><bold>1301</bold></highlight> (in accordance with the DVD Specification), a single video manager (&ldquo;VMGM&rdquo;) domain <highlight><bold>1302</bold></highlight>, and one or more video title set (&ldquo;VTS&rdquo;) domains (e.g. <highlight><bold>1303</bold></highlight> and <highlight><bold>1304</bold></highlight>) according to the number of movies in the movie title. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The preferred VMGM domain PGC layout structure includes a single title key PGC abstraction, <highlight><bold>1321</bold></highlight> and a single movie router PGC abstraction <highlight><bold>1322</bold></highlight>. Thereafter, the VMGM PGC structure includes 2 menu PGC abstractions (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1323</bold></highlight><highlight><italic>b</italic></highlight>) for each authored menu and a single PGC abstraction for each end command (in each movie) that an author for which an author has specified a connection. As will be discussed further, each menu PGC abstraction pair includes a menu display PGC (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>1324</bold></highlight><highlight><italic>a</italic></highlight>) and a menu button router PGC (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>b </italic></highlight>and <highlight><bold>1324</bold></highlight><highlight><italic>b</italic></highlight>). </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Each VTS domain PGC layout structure (e.g. <highlight><bold>1303</bold></highlight>) includes a movie display PGC <highlight><bold>1331</bold></highlight> and a video title set menu (&ldquo;VTSM&rdquo;) area <highlight><bold>1332</bold></highlight>. VTSM area further consists of from one to four remote key router PGCs (e.g. remote key router PGCs <highlight><bold>1332</bold></highlight>), depending upon the number of different remote key commands necessary, given the preferred layout structure, to realize the chapter target connections selected using connection view <highlight><bold>901</bold></highlight>. More specifically: </paragraph>
<paragraph id="P-0109" lvl="2"><number>&lsqb;0109&rsqb;</number> number of remote key router PGCs in a given VTSM&equals;total number of chapter points in a corresponding movie/25 (rounded, if a non-integer, to a next higher integer value). </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> In each case, an attempt has been made to minimize the number of PGCs without detrimental impact on flexibility. Thus, while the number of PGCs is as indicated above, complete authoring flexibility with regard to connecting menus, menu buttons and presentation data without concern for limitations of the DVD programming specification <highlight><bold>207</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) is provided. Further, the practical impact of resultant limitations is also minimized. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> For example, the number of remote key router PGCs per VTSM area calculation reflects that each chapter point abstraction requires more than four commands. This in turn reflects that only one hundred twenty eight commands are allowable in a single PGC chain in accordance with the DVD programming specification <highlight><bold>207</bold></highlight>. While not essential, placing each abstraction completely within a separated chains and in equal numbers throughout like chains provides an efficiently symmetrical structure. Since DVD programming specifications <highlight><bold>207</bold></highlight> provide for up to ninety nine chapter points per movie, a maximum of four PGC abstractions is required without detrimental impact in terms of connectability. Considering the same parameters and calculations for menus however, it is seen that only twenty five menu buttons are available per menu without limitation on connectability. In practical terms however (i.e. displaying a menu on a conventional television set), this number does not present any practical detrimental effect. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> The use of consecutive locations in the PGC layout structure greatly simplifies the task of finding specific PGCs relating to specific data types and further for resolving PGC connections. A movie title PGC will always be the first element, a movie router PGC will always be the second element, and a display menu PGC can always be located merely by adding a known constant plus two times the menu number, etc. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Those skilled in the art will appreciate however, in view of the discussion herein, that the PGC abstractions provide for other than consecutively arranged elements as an indexed list in memory <highlight><bold>120</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Such alternatives, for example, include but are not limited to multiple lists, queues and/or multi-dimensional arrays stored in memory, in other media, and/or in more than one media either locally or in a distributed fashion, as with data management engine <highlight><bold>165</bold></highlight>. Such methods can be useful where more than one authoring location or other distributed environments are utilized. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b </italic></highlight>flowchart, with reference to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, shows in greater detail how compiler <highlight><bold>170</bold></highlight> constructs a preferred PGC layout data structure in an initial skeleton form. As shown, compiler <highlight><bold>170</bold></highlight> begins by storing a first play PGC abstraction, a title key PGC abstraction and a menu router PGC abstraction into PGC layout structure <highlight><bold>1300</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>) in steps <highlight><bold>1207</bold></highlight>, <highlight><bold>1208</bold></highlight> and <highlight><bold>1209</bold></highlight> respectively. Next, in step <highlight><bold>1213</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for a total number, MenusTot, of menus authored and, in step <highlight><bold>1214</bold></highlight>, initializes a menu pointer, MenuPtr. In step <highlight><bold>1215</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for a total number, ButtonsTot, of buttons authored in a current menu (e.g. initially, a first menu). MenusTot will specify the number of pre-determined menu display and menu button router PGC abstractions (i.e. &ldquo;menu PGC abstraction pairs&rdquo;) that compiler <highlight><bold>170</bold></highlight> will add to the structure, while ButtonsTot will specify the number of commands that compiler <highlight><bold>170</bold></highlight> will add to each PGC of a current menu PGC abstraction pair. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In step <highlight><bold>1216</bold></highlight>, compiler <highlight><bold>170</bold></highlight> adds a menu PGC abstraction pair to VMGM PGC structure <highlight><bold>1302</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>) corresponding to the existence of and the number of buttons in a current authored menu (e.g. initially, a first menu). If, in step <highlight><bold>1217</bold></highlight>, one or more menus are not yet added to VMGM PGC structure <highlight><bold>1301</bold></highlight>, then in step <highlight><bold>1218</bold></highlight>, compiler <highlight><bold>170</bold></highlight> increments the menu counter and returns to step <highlight><bold>1211</bold></highlight>. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> At this point, compiler <highlight><bold>170</bold></highlight> lacks any authoring information other than MenusTot and a respective ButtonsTot value for each current menu. A similar same lack of further authoring details will also exist for other PGCs in the skeleton-form, PGC layout structure. The preferred PGC and network abstractions of the invention however, enable compiler <highlight><bold>170</bold></highlight> to accommodate missing authoring details merely by inserting null values (&ldquo;no-ops&rdquo;) into the commands of the abstracted PGCs for unknown connection information (i.e. source-target identification information). As discussed, compiler <highlight><bold>170</bold></highlight> will preferably resolve these no-ops later in compilation. These abstractions further enable menu PGCs to be created independently of movies and movie arrangements. Thus, independently created/conceived menu PGCs provide extensive flexibility, allowing an author to link any available menu button of any menu to any potential target using a user-friendly interface such as the preferred connection view <highlight><bold>901</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> If instead, in step <highlight><bold>1217</bold></highlight>, all authored menu layouts are reflected by corresponding menu PGC abstraction pairs, then compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1219</bold></highlight>. In step <highlight><bold>1219</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for the total number, MovieTot, of movies, which compiler <highlight><bold>170</bold></highlight> will use to create end commands, VTSs and VTS contents. In step <highlight><bold>1221</bold></highlight>, compiler <highlight><bold>170</bold></highlight> initializes a current movie pointer (&ldquo;MoviePtr&rdquo;), as well as two counters, &ldquo;EndTot&rdquo; and &ldquo;Remote&rdquo;. Compiler <highlight><bold>170</bold></highlight> will use EndTot to count the number of available end-of-chapter conditions in each movie for which an author has specified connections and will use Remote to count the number of available playback interruption conditions (i.e. by a user pressing a DVD-player control, typically on a remote control device) for which an author has specified connections. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In step <highlight><bold>1223</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for the total number of chapters (&ldquo;ChapterTot&rdquo;) in a current movie (e.g. initially, the first movie) and, in step <highlight><bold>1225</bold></highlight>, initializes a current chapter pointer (&ldquo;ChapterPtr&rdquo;). If, in step <highlight><bold>1227</bold></highlight>, the author has specified a target for the current chapter, end-of-chapter condition (i.e. using connection view <highlight><bold>901</bold></highlight>), then, in step <highlight><bold>1229</bold></highlight>, compiler <highlight><bold>170</bold></highlight> increments EndTot; otherwise, compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1231</bold></highlight>. Similarly, if, in step <highlight><bold>1231</bold></highlight>, the author has specified a target for the current chapter, remote-control key playback interruption (&ldquo;remote-key&rdquo;) condition, then, in step <highlight><bold>1233</bold></highlight>, compiler increments Remote; otherwise, compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1235</bold></highlight>. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The existence of authored connections is determined similarly for both end-of-chapter and remote-key conditions. Preferably, objects <highlight><bold>1101</bold></highlight>-<highlight><bold>1163</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 11</cross-reference>) contain actual source and target identifier information (i.e. corresponding to authored sources and targets), while the connection objects (e.g. <highlight><bold>1171</bold></highlight><highlight><italic>a</italic></highlight>) contain pointers to data stored by these objects. Stated alternatively, as a new potential source is authored, a connection object is instantiated, including a source pointer that points to the potential source and a null-value target pointer; if an author later connects such a source, then the corresponding connection-object target pointer value is replaced by a pointer to the target object. (Subsequent editing by an author correspondingly deletes or instantiates a connection object and/or changes a source pointer or target pointer value.) </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Therefore, compiler <highlight><bold>170</bold></highlight> determines the existence of a connected end command by first querying each connection object for a source pointer pointing to the currently selected chapter-object. Once found, compiler <highlight><bold>170</bold></highlight> checks the corresponding target pointer. A null-value target pointer indicates an unconnected end command while a non-null-value target pointer indicates the existence of a connection. Remote key (i.e. &ldquo;menu key&rdquo; in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>) connections are similarly determined by finding an identifier in a current chapter menu key object (e.g. <highlight><bold>1157</bold></highlight>), finding the corresponding source pointer in one of the connection objects, and then querying the connection object for the existence of a corresponding non-null-value target pointer. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Those skilled in the art, in view of the foregoing, will appreciate that considerable variation of the above structure will provide the same, related or similar functionality. For example, identifiers, labels and even complete movie tree, menu tree and/or other objects could well be contained within or duplicated within the connections-tree (i.e. objects <highlight><bold>1107</bold></highlight>-<highlight><bold>1173</bold></highlight>). A single connection object could also be used (i.e. having a single list of all connections), as could connection objects that remain despite the deletion of a source. Other variations are also anticipated. The current structure is however, preferred in that it provides a compilation time of only a few milliseconds, minimizes memory usage and further facilitates debugging, emulation, simulation and overall symmetry by separating these objects (and their contained data). In simulation, for example, the restrictions imposed by the DVD Specification are not controlling and simulation can therefore more efficiently utilize authoring data directly from the preferred, non-integrated data management engine <highlight><bold>165</bold></highlight> object structure. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Returning now to <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b</italic></highlight>, if, in step <highlight><bold>1235</bold></highlight>, more chapters remain in the current movie, then compiler <highlight><bold>170</bold></highlight> increments ChapterPtr and returns to step <highlight><bold>1227</bold></highlight>; otherwise, compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1237</bold></highlight>. In step <highlight><bold>1237</bold></highlight>, compiler <highlight><bold>170</bold></highlight> adds a 1-4 PGC, end command router PGC abstraction to layout structure <highlight><bold>1300</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>). In step <highlight><bold>1238</bold></highlight>, compiler <highlight><bold>170</bold></highlight> creates a VTS domain for the current movie (i.e. including a VTSM), adding to the VTS domain a movie display PGC in step <highlight><bold>1239</bold></highlight> and adding a 1-4 PGC, remote key PGC abstraction in step <highlight><bold>1240</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> If, in step <highlight><bold>1241</bold></highlight>, more movies remain in the current movie title (i.e. tested by comparing MovieTot with MoviePtr), then compiler increments moviePtr in step <highlight><bold>1243</bold></highlight>, re-initializes EndTot and Remote in step <highlight><bold>1245</bold></highlight> and returns to step <highlight><bold>1223</bold></highlight>. Otherwise, formation of a PGC layout structure in skeleton form has been completed. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>c </italic></highlight>flowchart with reference to <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows how compiler <highlight><bold>170</bold></highlight> replaces the no-ops in (skeleton form) PGC layout structure <highlight><bold>1300</bold></highlight> with indices (i.e. source or target pointers) to respective sources and targets, and then further replaces the indices with element identifiers. In step <highlight><bold>1251</bold></highlight>, compiler <highlight><bold>170</bold></highlight> initializes a movie pointer (&ldquo;MoviePtr&rdquo;) to a first movie, a chapter pointer (&ldquo;ChapterPtr&rdquo;) to a first chapter, a menu pointer (&ldquo;MenuPtr&rdquo;) to a first menu and a button pointer (&ldquo;ButtonPtr&rdquo;) to a first button. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In step <highlight><bold>1253</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> (i.e. connection-objects) for a source-pointer to a next (initially, a first) author-connected button. As discussed earlier, the connection object checks its source-pointer for a corresponding source having a corresponding non-null-value target pointer. Since specific connection values (rather than the existence of a connection as with <cross-reference target="DRAWINGS">FIG. 12</cross-reference><highlight><italic>b</italic></highlight>) are required in this case, the query utilized results in the return of such a source-pointer. In step <highlight><bold>1255</bold></highlight>, compiler <highlight><bold>170</bold></highlight> uses the returned source-pointer to query data management engine <highlight><bold>165</bold></highlight> for the corresponding target-pointer and, in step <highlight><bold>1257</bold></highlight>, compiler <highlight><bold>170</bold></highlight> uses the returned indices to query data management engine <highlight><bold>165</bold></highlight> (e.g. via volume <highlight><bold>1100</bold></highlight>, menu-1 <highlight><bold>1160</bold></highlight><highlight><italic>a </italic></highlight>and button list <highlight><bold>1161</bold></highlight> to button-1 <highlight><bold>1162</bold></highlight><highlight><italic>a</italic></highlight>) for the source and target identifiers corresponding to the source and target pointers. Then, in step <highlight><bold>1259</bold></highlight>, compiler <highlight><bold>170</bold></highlight> replaces the current button command no-ops (of the current menu PGC abstraction pair) with the returned identifiers. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> If, in step <highlight><bold>1261</bold></highlight>, more buttons remain unresolved in the current menu, then compiler <highlight><bold>170</bold></highlight> increments ButtonPtr in step <highlight><bold>1263</bold></highlight> and returns to step <highlight><bold>1253</bold></highlight>; otherwise, compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1265</bold></highlight>. If, in step <highlight><bold>1265</bold></highlight>, menus remain unresolved, then compiler <highlight><bold>170</bold></highlight> increments MenuPtr and resets ButtonPtr to one in step <highlight><bold>1267</bold></highlight>, and then returns to step <highlight><bold>1253</bold></highlight>; otherwise, compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1271</bold></highlight>. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> Having resolved and replaced all menu button no-ops, compiler <highlight><bold>170</bold></highlight> next resolves all chapter end-command and remote-key PGC abstraction no-ops in a similar manner. Compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for a (next connected) current chapter end command source-pointer in step <highlight><bold>1271</bold></highlight>, uses the returned source-pointer to query data management engine <highlight><bold>165</bold></highlight> for a corresponding target-pointer in step <highlight><bold>1272</bold></highlight>, uses the pointers to query data management engine <highlight><bold>165</bold></highlight> for corresponding identifiers in step <highlight><bold>1273</bold></highlight> and replaces corresponding layout structure <highlight><bold>1300</bold></highlight> PGC commands with the returned identifiers in step <highlight><bold>1274</bold></highlight>. Similarly, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> for a (next connected) current remote key source-pointer in step <highlight><bold>1277</bold></highlight>, uses the returned source-pointer to query data management engine <highlight><bold>165</bold></highlight> for a corresponding target-pointer in step <highlight><bold>1278</bold></highlight>, uses the pointers to query data management engine <highlight><bold>165</bold></highlight> for corresponding identifiers in step <highlight><bold>1279</bold></highlight> and replaces corresponding layout structure <highlight><bold>1300</bold></highlight> PGC commands with the returned identifiers in step <highlight><bold>1280</bold></highlight>. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> If, in step <highlight><bold>1283</bold></highlight>, more chapters remain unresolved, then compiler <highlight><bold>170</bold></highlight> increments the chapter pointer in step <highlight><bold>1285</bold></highlight> and returns to step <highlight><bold>1271</bold></highlight>. If instead, no chapters remain unresolved in the current movie, then compiler <highlight><bold>170</bold></highlight> proceeds to step <highlight><bold>1286</bold></highlight>. In step <highlight><bold>1286</bold></highlight>, compiler <highlight><bold>170</bold></highlight> queries data management engine <highlight><bold>165</bold></highlight> (i.e. via volume <highlight><bold>1100</bold></highlight> to media database <highlight><bold>1103</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 11</cross-reference>) for all audio and video file references which reference the current movie. In step <highlight><bold>1287</bold></highlight>, compiler <highlight><bold>170</bold></highlight> invokes multiplexer <highlight><bold>185</bold></highlight>, which retrieves the referenced audio and video files and outputs a resultant multiplexed data file in a conventional manner and in accordance with the DVD disk format specifications <highlight><bold>205</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) of the DVD Specification. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> If, in step <highlight><bold>1288</bold></highlight> more movies remain unresolved in layout structure <highlight><bold>1300</bold></highlight>, then compiler <highlight><bold>170</bold></highlight> resets pointers for the next movie and first chapter in step <highlight><bold>1289</bold></highlight> and returns to step <highlight><bold>1271</bold></highlight>. Otherwise, compiler <highlight><bold>170</bold></highlight> (in a similar manner) resolves first play, title key jump source and menu router no-ops respectively in steps <highlight><bold>1291</bold></highlight>, <highlight><bold>1293</bold></highlight> and <highlight><bold>1295</bold></highlight>. Then, in step <highlight><bold>1297</bold></highlight>, compiler <highlight><bold>170</bold></highlight> saves the PGC layout structure as a stored file. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> With regard to <cross-reference target="DRAWINGS">FIGS. 12</cross-reference><highlight><italic>b </italic></highlight>and <highlight><bold>12</bold></highlight><highlight><italic>c</italic></highlight>, total authored element values (i.e. such as MenusTot and ButtonsTot) are maintained on an ongoing basis in a corresponding list object or the functional equivalent of a list object as already discussed. For example, movies-list object <highlight><bold>1105</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 11</cross-reference>), in addition to a list for containing references to all instantiated movie objects, also contains a variable for updating the total number of movies in a current movie title during the course of one or more authoring sessions. Similarly, button-list object <highlight><bold>1161</bold></highlight> contains a list of instantiated button objects (e.g. <highlight><bold>1162</bold></highlight><highlight><italic>a </italic></highlight>through <highlight><bold>1162</bold></highlight><highlight><italic>b</italic></highlight>) as well as a variable indicating the total number of buttons in menu-1. Other list objects similarly include ongoing totals which are updated during the course of authoring. One reason is that some early-generation DVD-players limit the available memory space for storing PGCs, which correspondingly limits the number of elements (e.g. menus, menu buttons and chapters) that the invention permits to be authored. These limits and/or current totals are therefore selectively conveyed to an author through interface <highlight><bold>160</bold></highlight><highlight><italic>a</italic></highlight>. Ongoing totals are also beneficial in that no time periods are required during compilation for calculating such totals. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> As will be understood by those skilled in the art however, total values might become unimportant for other than compilation purposes as DVD-players are manufactured with increasing resources in conformance with the current DVD Specification, in accordance with expanded DVD capabilities and in accordance with the requirements of non-DVD systems. In such cases, totals can alternatively be calculated during compilation. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> The use of preferably pre-determined PGC abstraction types comprising preferably pre-determined command combinations and the preferred PGC layout structure are thus factors in providing a maximized authoring flexibility and efficient compilation among other benefits. Available connections remain completely flexible during authoring and, in fact, until substitutions are made for no-ops during compilation. The preferred structures of PGC abstractions further add to compilation efficiency, since a skeleton can be formed with only summary authoring data, and then authoring details can be quickly added thereafter. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 14 and 15</cross-reference>, with reference to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, illustrate a preferred network or &ldquo;connection-switching&rdquo; abstraction according to the invention. The connection-switching abstraction, while operationally active only during playback of a movie-title, is also a factor in determining PGC abstractions produced by compiler <highlight><bold>170</bold></highlight> as well as the movie, menu and connection movie-title abstraction utilized by data management engine <highlight><bold>165</bold></highlight>, interface <highlight><bold>160</bold></highlight><highlight><italic>a </italic></highlight>and authoring engine <highlight><bold>160</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>). </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Details of the DVD Specification including but not limited to multiplexed data stream and DVD player configurations, data formats, protocols and loading of data are known to those skilled in the art and will therefore be discussed only to the extent required for an understanding of the invention. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> DVD programming specifications <highlight><bold>207</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) provide that PGCs can reside (along with the corresponding presentation data) in virtual structures including a first play space, a video manager (&ldquo;VMGM&rdquo;) and any of 99 video title sets (&ldquo;VTSs&rdquo;), each of which includes a video title set menu space (&ldquo;VTSM&rdquo;). Among the limitations of this virtual structure however, is first that a PGC in an initial VTS or VTSM cannot directly trigger (i.e. jump to, using a DVD jump command) a PGC stored in another VTS (or VTSM). For example, while a PGC in an initial VTS can &ldquo;playback a chapter of presentation data&rdquo; and the conclusion of chapter playback can trigger a &ldquo;followup&rdquo; PGC, the followup PGC cannot be stored in a different VTS. Similarly, an initial PGC used to respond to DVD consumer menu-button activation cannot trigger a second PGC which is stored in a different VTS. A further relevant limitation is that the format of performance data must remain constant within a given VTS. So, for example, a video data stream having one aspect ratio cannot be stored in the same VTS with another video data stream having a different aspect ratio. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 14</cross-reference> functional diagram illustrates how the preferred connection-switching abstraction provides a flexible and robust functional superstructure within which movie-title, DVD-player and interactively occurring consumer-control events are routed and executed. In the figure, VTS-A <highlight><bold>1303</bold></highlight> and VTS-A&plus;1 exemplify any two different VTSs which have been created during compilation of a movie-title. It should also be noted that the illustrated connection arrows only denote the &ldquo;path&rdquo; from one box (i.e. PGC abstraction, PGC or command-set) to another that can result from an author&apos;s use of connection view <highlight><bold>901</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 9</cross-reference>). Thus, fewer connections than those illustrated might be authored and each path from one box to another is accomplished individually using a single &ldquo;jump command&rdquo; or a single transfer of control by a DVD-player. (The use of multiple connected arrows and shared arrows is used only for clarity sake, since the alternative use of individual arrows between each pair of boxes might otherwise obscure the invention.) </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Within each VTS, only a movie display PGC abstraction operates as a &ldquo;control PGC&rdquo; (i.e. directly controls menu and/or movie display). For example, VTS-A <highlight><bold>1303</bold></highlight> includes movie display PGC abstraction <highlight><bold>1331</bold></highlight> and (within its VTSM domain <highlight><bold>1322</bold></highlight>) remote key PGC abstraction <highlight><bold>1322</bold></highlight><highlight><italic>a</italic></highlight>. Movie display PGC abstraction <highlight><bold>1331</bold></highlight> comprises a single PGC which includes a command-set (&ldquo;pre-command&rdquo;) for selecting a chapter and initiating playback of the chapter, as well as an end command &ldquo;cell command&rdquo; that initiates routing upon the occurrence of an end-of-chapter-playback condition. Remote menu key <highlight><bold>1431</bold></highlight><highlight><italic>a</italic></highlight>, which denotes an automatic DVD player function, traps and forwards a remote-key condition (i.e. user depression of a remote menu key which interrupts playback). Remote menu key router PGC abstraction <highlight><bold>1322</bold></highlight><highlight><italic>a </italic></highlight>of VTSM-A <highlight><bold>1322</bold></highlight> sets the authored target for a corresponding remote menu key condition (i.e. where a consumer presses a remote menu key during playback) and then routes control to a corresponding movie PGC abstraction or menu PGC abstraction within VMGM <highlight><bold>1302</bold></highlight>. Other VTSs (e.g. VTS-A&plus;1 <highlight><bold>1304</bold></highlight>) are similarly structured for each movie within the current DVD movie-title. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Each remote menu key router PGC abstraction includes up to 4 PGCs to accommodate the up to 99 chapter points per movie limitation of the DVD Specification. The first remote menu key PGC is always assigned as a root menu and is always a hardwired (i.e. unalterable) target for any remote menu key condition (in accordance with the DVD Specification). Therefore, in order to provide for chapter dependent routing of a remote menu key condition, a DVD-player system register must first be queried for the last played chapter. Using the returned last played chapter information, program execution is then diverted to the corresponding authored remote menu key router PGC. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> VTSM <highlight><bold>1302</bold></highlight> comprises the discussed menu display PGC (e.g. <highlight><bold>1322</bold></highlight>) and menu button router PGC (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>b</italic></highlight>) abstraction pairs (for providing menu control), as well as the remaining router PGC abstractions. More specifically, movie router PGC abstraction <highlight><bold>1322</bold></highlight> acts as a playback bridge between VTS domains, receiving control from a remote key PGC in a first VTS (e.g. remote key PGC <highlight><bold>1322</bold></highlight><highlight><italic>a </italic></highlight>of VTS <highlight><bold>1303</bold></highlight>) and then forwarding control to a movie display PGC abstraction in second VTS (e.g. movie play PGC <highlight><bold>1341</bold></highlight> of VTS <highlight><bold>1304</bold></highlight>). In contrast, end router PGC abstractions (e.g. <highlight><bold>1325</bold></highlight> and <highlight><bold>1326</bold></highlight>) can be author-connected to route control from an end-of-chapter condition to either a selected chapter in a selected movie, or to a selected menu button in a selected menu. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> As shown, a separate PGC is provided for each author-connected end-of-chapter condition. Each end command router PGC abstraction is paired with (i.e. responds to) a specific end command such that each end-of-chapter condition for a given movie will be routed from the end command to a unique end router PGC abstraction. Separate end command PGCs are required due to a flaw in current generation DVD-players whereby the last played chapter is not reliably available at the end of chapter playback. Upon correction of this flaw in future generation DVD-players however, end command routing can be accomplished in a manner consistent with remote menu key PGC abstractions (i.e. using only up to four end-command router PGCs per movie). </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> A menu display PGC abstraction (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>a</italic></highlight>), when it receives control as a target and thereafter while a consumer continues to depress menu navigation buttons, effectuates control by highlighting a menu button and displaying the menu. If however, a consumer activates a menu button, then the DVD-player initiates the corresponding router PGC abstraction (e.g. <highlight><bold>1323</bold></highlight><highlight><italic>b</italic></highlight>), which routes control (i.e. according to an authored connection) to either a movie display PGC or to a menu display PGC. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> For clarity sake, the first play PGC abstraction <highlight><bold>1301</bold></highlight> and title key PGC abstraction <highlight><bold>1321</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 13</cross-reference>) are not shown in <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. Each operates to transfer control to either a menu display PGC or a movie display PGC as with the end command router PGCs and menu router PGCs. First play PGC <highlight><bold>1301</bold></highlight> is stored in a separate DVD-player storage location, while title key PGC <highlight><bold>1321</bold></highlight> is stored in VMGM <highlight><bold>1302</bold></highlight>. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> While those skilled in the art will appreciate, in view of the discussion herein, that considerable variation might be utilized, iterative experimentation with different connection-switching abstractions and DVD players has revealed a number of considerations. For example, command execution delays will necessarily occur as a result of PGC execution and greater delays typically result from transfer of control between a VTS (e.g. <highlight><bold>1303</bold></highlight> and <highlight><bold>1304</bold></highlight>) and VMGM <highlight><bold>1302</bold></highlight>. Another example is that a delay occurring prior to the start of a movie is observed to be more acceptable than a similar delay during navigation through what can be a large number of menus. A still further example is that consistent delay periods for similar transitions is more acceptable than inconsistent delays for similar transitions. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> Thus, the preferred connection-switching abstraction provides a generally symmetrical structure wherein delays are first minimized by source-router-target execution paths having a minimum number of PGCs and PGC commands. Movie display PGC abstractions are further placed similarly within each VTS, while menu PGC abstraction pairs are placed similarly within VMGM <highlight><bold>1302</bold></highlight>. (Note that an author typically only connects the end command of a last chapter within any given movie, such that the DVD-player will continuously play all chapters with the movie before control is routed outside the corresponding VTS). In addition, movie router <highlight><bold>1322</bold></highlight> is only used for VTS-to-VTS transitions This reflects, for example, that inconsistent delay between movie-to-movie playback and menu-to-movie playback is more acceptable than imposing further delay on menu-to-movie playback or other alternatives. (For example, further distribution and/or re-distribution of movie and/or menu routing functions have been observed to produce subjectively less acceptable results.) In addition, movie router <highlight><bold>1322</bold></highlight> complexity and PGC length is therefore reduced. It should be understood however, that these already short delay periods will further decrease as advances are made in DVD-player technology and that the resulting decreasing importance of such considerations might well contribute to further connection-switching abstraction variations. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 15</cross-reference> flowchart broadly illustrates the operation of preferred connection-switching abstraction <highlight><bold>1400</bold></highlight>. In step <highlight><bold>1503</bold></highlight>, first play PGC abstraction is invoked in response to insertion of a movie-title into a DVD-player. The first play PGC abstraction (i.e. now the current PGC abstraction) determines target information (i.e. a target identifier and, if needed, target parameters). If, in step <highlight><bold>1505</bold></highlight>, a router is required, then, the current PGC abstraction routes the target information and control to a next router abstraction in step <highlight><bold>1507</bold></highlight> and operation returns to step <highlight><bold>1511</bold></highlight>. If no router is required in step <highlight><bold>1505</bold></highlight>, then, in step <highlight><bold>1509</bold></highlight>, the current PGC abstraction routes the target information to the target PGC abstraction. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> If, in step <highlight><bold>1511</bold></highlight>, the target is not a chapter (i.e. playback of a chapter is not the resultant authored event) then the target displays a menu (i.e. according to the target information) in step <highlight><bold>1513</bold></highlight> and the DVD-player waits for a menu button to be selected (i.e. step <highlight><bold>1513</bold></highlight> through <highlight><bold>1515</bold></highlight> act as a wait loop). If, in step <highlight><bold>1515</bold></highlight> a menu button is selected, then the current PGC abstraction sets authored target information for the selected button in step <highlight><bold>1517</bold></highlight> and operation returns to step <highlight><bold>1505</bold></highlight>. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> If instead, in step <highlight><bold>1511</bold></highlight>, the target is a chapter, then the target initiates playback of the chapter. If further, in step <highlight><bold>1525</bold></highlight>, a consumer invokes the remote menu key during playback of the chapter, then the current PGC abstraction sets authored target information in step <highlight><bold>1527</bold></highlight> and operation returns to step <highlight><bold>1505</bold></highlight>. If, in step <highlight><bold>1525</bold></highlight>, the remote menu key is not invoked (i.e. the chapter plays uninterrupted to its conclusion) and a chapter end command target has been authored, then the current PGC abstraction sets the authored target information in step <highlight><bold>1537</bold></highlight> and operation returns to step <highlight><bold>1505</bold></highlight>. If, in step <highlight><bold>1535</bold></highlight>, a chapter end command target has not been authored, then operation continues in step <highlight><bold>1545</bold></highlight>. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> If, in step <highlight><bold>1545</bold></highlight>, more chapters exist in the current movie, then the DVD player increments the chapter number in step <highlight><bold>1543</bold></highlight> and operation returns to step <highlight><bold>1523</bold></highlight>. If instead, in step <highlight><bold>1545</bold></highlight>, no more chapters remain unplayed in the current movie, then the player suspends playback and (in some models) switches itself off. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> For clarity sake, the operation of preferred connection-switching abstraction <highlight><bold>1400</bold></highlight> will also be discussed, by way of example, with reference to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. If, for example, an authored-connection for first play is set to begin playback of a first chapter of a first movie stored in VTS-A <highlight><bold>1303</bold></highlight>, then upon insertion of the DVD movie-title into a DVD-player, movie display PGC abstraction <highlight><bold>1331</bold></highlight> will be invoked. Movie display PGC <highlight><bold>1331</bold></highlight> will select and initiate playback of the first chapter. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> If the first chapter playback is interrupted by a remote menu key condition, then <highlight><bold>1</bold></highlight><highlight><italic>o </italic></highlight>the DVD-player will automatically trap the condition (i.e. box <highlight><bold>143</bold></highlight> la) and will initiate the root menu PGC of remote menu key router <highlight><bold>1322</bold></highlight><highlight><italic>a </italic></highlight>of VTSM-A <highlight><bold>1322</bold></highlight>. Assuming further that less than 25 chapters exist in the first movie, the root menu PGC of remote menu key router <highlight><bold>1322</bold></highlight><highlight><italic>a </italic></highlight>(i.e. now the current source PGC abstraction) will set the author-selected target for the first chapter remote menu key condition and will route control to either movie router <highlight><bold>1322</bold></highlight> or a menu display PGC (e.g. <highlight><bold>1323</bold></highlight> or <highlight><bold>1324</bold></highlight>) within VMGM <highlight><bold>1302</bold></highlight>. If movie router <highlight><bold>1322</bold></highlight> receives control, then upon receipt, movie router further routes control to the author-connected movie display PGC, in this case, movie display PGC <highlight><bold>1341</bold></highlight> of VTS-A&plus;1 <highlight><bold>1304</bold></highlight>, which will set and initiates playback of the author-selected chapter of the VTS-A&plus;1 movie. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> If instead, playback of the first movie is not interrupted and only the last chapter of the first movie includes an author-connected end command, then the DVD-player will continue to play successive chapters of the first movie until the conclusion of the last movie. At the conclusion of the last movie, the DVD-player will execute cell command <highlight><bold>1431</bold></highlight><highlight><italic>b </italic></highlight>(i.e. end command), which will transfer control to the PGC in end router <highlight><bold>1325</bold></highlight> (in VTSM <highlight><bold>1302</bold></highlight>) that corresponds with the chapter last chapter played, i.e. the last chapter of VTS-A movie. (Since, in this case, only one chapter in the VTS-A movie has a connected end-of-chapter playback condition, end router <highlight><bold>1325</bold></highlight> will include only the one corresponding PGC.) </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> Upon receipt of control from end command <highlight><bold>1431</bold></highlight>, end router <highlight><bold>1325</bold></highlight> (i.e. now the current source) will set the corresponding author-connected target included in end router <highlight><bold>1325</bold></highlight>. Assuming the target is the VTS-A&plus;1 movie, end router <highlight><bold>1325</bold></highlight> will further route control to movie display PGC <highlight><bold>1341</bold></highlight> of VTS-A&plus;1 <highlight><bold>1304</bold></highlight>, which will set and initiate playback according to the chapter of the VTS-A&plus;1 movie set by end router <highlight><bold>1325</bold></highlight>. (Since control is not being routed from one VTS to another VTS, movie router <highlight><bold>1322</bold></highlight> is not utilized.) </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> If instead, the current source PGC of end router <highlight><bold>1325</bold></highlight> (i.e. again, the only PGC in end router <highlight><bold>1325</bold></highlight> in this example) includes an author-selected connection to menu N <highlight><bold>1323</bold></highlight>, then end router <highlight><bold>1325</bold></highlight> will set target parameters and will route control to menu display PGC <highlight><bold>1323</bold></highlight><highlight><italic>a</italic></highlight>. Menu display PGC <highlight><bold>1323</bold></highlight><highlight><italic>a </italic></highlight>will highlight the button of menu-N <highlight><bold>1323</bold></highlight> according to the received target parameters and will then display menu-N <highlight><bold>1323</bold></highlight>. Menu display PGC <highlight><bold>1323</bold></highlight><highlight><italic>a </italic></highlight>will thereafter continue to be invoked by the DVD-player and will continue to highlight a button and display menu-N <highlight><bold>1323</bold></highlight> correspondingly with each successive uninterrupted (i.e. by consumer selection of a conflicting DVD control function) consumer depression of a navigation button. If however, the consumer next activates a displayed menu button, then the DVD-player will invoke menu button router PGC <highlight><bold>1323</bold></highlight><highlight><italic>b</italic></highlight>. Once invoked, menu button router PGC <highlight><bold>1323</bold></highlight><highlight><italic>b </italic></highlight>will set target parameters according to the author-selected connection for the activated button, and so on. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> Attachment A attached hereto provides computer listings of preferred PGC abstractions source code according to the invention. For clarity sake, compilation has already been completed. Stated alternatively, the no-ops initially included in the skeleton-form PGC layout structure have been replaced by indices and the indices have been resolved to source and target identifiers using the discussed compiler and compilation methods. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> As shown in attachment A, the preferred PGC abstractions utilize a number of DVD player registers. According to the DVD specification, each DVD player includes 16 general purpose registers (&ldquo;GPs&rdquo;), and 20 system registers (&ldquo;SPs&rdquo;). The GPs are functionally undefined and merely &ldquo;available for use&rdquo; by movie title control program PGCs. Conversely, the SPs have fully defined purposes consistent with DVD player operation and movie title control program interfacing. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> The preferred GPs utilization and corresponding naming conventions according to the invention are indicated in the following chart. As shown, PGC abstractions exclusively utilize only 5 GPs, leaving a maximized number of remaining GPs available for adding further capabilities.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="3">
<colspec colname="1" colwidth="28PT" align="left"/>
<colspec colname="2" colwidth="77PT" align="left"/>
<colspec colname="3" colwidth="112PT" align="left"/>
<thead>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Register</entry>
<entry>Referenced as</entry>
<entry>Description</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>GP10</entry>
<entry>Stream Select</entry>
<entry>Bit 15 &equals; Select audio stream on/off</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>Bit 14 &equals; Select subtitle stream on/off</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>Bit 13 &equals; Select angle stream on, off</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>Bits 10-12 &equals; Audio stream number</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>Bits 7-9 &equals; Angle stream number</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>Bits 0-6 &equals; Subtitle stream number</entry>
</row>
<row>
<entry>GP12</entry>
<entry>Target Movie Number</entry>
<entry>Stored number &equals; Movie number</entry>
</row>
<row>
<entry>GP13</entry>
<entry>Target Button Number</entry>
<entry>Stored number &equals; Button number</entry>
</row>
<row>
<entry>GP14</entry>
<entry>Target Chapter Number</entry>
<entry>Stored number &equals; Chapter number</entry>
</row>
<row>
<entry>GP15</entry>
<entry>Temporary Register</entry>
<entry>Stored number &equals; value used with</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>current PGC</entry>
</row>
<row>
<entry>SP7</entry>
<entry>Last Chapter Played</entry>
<entry>DVD player fills the register with the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>number of the last chapter played</entry>
</row>
<row>
<entry>SP8</entry>
<entry>Last Highlighted Button</entry>
<entry>DVD player fills the register with the</entry>
</row>
<row>
<entry></entry>
<entry></entry>
<entry>number of the last highlighted button</entry>
</row>
<row><entry namest="1" nameend="3" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> As illustrated by the register utilization chart, GPs are utilized by source PGC abstractions primarily for designating (i.e. resolving an available connection to) target PGC abstractions and for passing to the targets parameters affecting target operation. The GPs are further utilized by target PGC abstractions primarily for establishing, manipulating and recalling localized variables (i.e. relating to a currently executing PGC command set). </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> For example, at a time prior to initiating playback of a chapter, a source PGC abstraction stores a value in GP10 (&ldquo;stream select&rdquo;). That value will later indicate to a target PGC which audio, subtitle and/or angle stream is to be selected for movie playback. A further example is that, at a time prior to routing control to a target PGC abstraction, a source PGC abstraction stores a target&apos;s designation in a combination of registers GP12 (&ldquo;Movie Number&rdquo;) and GP14 (&ldquo;Chapter Number&rdquo;) for a movie target or GP13 (&ldquo;Button Number&rdquo;) for a menu target. Finally, PGC abstractions preferably utilize GP15 to temporarily store values, typically for use within a current PGC operation. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> In most cases, only a portion of a given register (&ldquo;register bits&rdquo;) are utilized, while conversely, a given register may be used for multiple purposes, as seen in the utilization of GP10 in the register chart. Those skilled in the art will appreciate, given the discussion herein, that the preferred embodiment enables certain advantages. Among these are that a single register or register set can be designated in all cases for similar purposes, thereby minimizing complexities, the number of registers required and the number of commands required within a PGC without detrimentally affecting routing or parameter passing flexibility. Similarly, operations required to parse register data containing multiple data values are not needed. Other arrangements consistent with the teachings of the invention however, are likely in view of other applications facilitated by these teachings and in accordance with the scope and spirit of the invention. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> While the present invention has been described herein with reference to a particular embodiment thereof, a latitude of modification, various changes and substitutions are intended in the foregoing disclosure, and it will be appreciated that in some instances some features of the invention will be employed without a corresponding use of other features without departing from the spirit and scope of the invention as set forth. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of making a multimedia program comprising the steps of: 
<claim-text>selecting an arrangement of performance information containing a plurality performance elements; </claim-text>
<claim-text>creating a layout of a performance information access structure containing a plurality of access elements; </claim-text>
<claim-text>linking the performance elements and access elements with linking information to create linked performance and access elements; and </claim-text>
<claim-text>automatically generating programming data from the linked performance and access elements to construct said multimedia program. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A system for making a multimedia program comprising: 
<claim-text>means for selecting an arrangement of performance information containing a plurality performance elements; </claim-text>
<claim-text>means for creating a layout of a performance information access structure containing a plurality of access elements; </claim-text>
<claim-text>means for linking the performance elements and access elements with linking information to create linked performance and access elements; and </claim-text>
<claim-text>means for automatically generating programming data from the linked performance and access elements to construct said multimedia program.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>12B</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005442A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005442A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005442A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005442A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005442A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005442A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005442A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005442A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005442A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005442A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005442A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005442A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005442A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005442A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005442A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005442A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030005442A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030005442A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030005442A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
