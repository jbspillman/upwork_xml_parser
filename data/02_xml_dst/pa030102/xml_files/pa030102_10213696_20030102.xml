<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005238A1-20030102-D00000.TIF SYSTEM "US20030005238A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00001.TIF SYSTEM "US20030005238A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00002.TIF SYSTEM "US20030005238A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00003.TIF SYSTEM "US20030005238A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00004.TIF SYSTEM "US20030005238A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00005.TIF SYSTEM "US20030005238A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00006.TIF SYSTEM "US20030005238A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005238A1-20030102-D00007.TIF SYSTEM "US20030005238A1-20030102-D00007.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005238</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10213696</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020806</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F012/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>711</class>
<subclass>146000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>168000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>711</class>
<subclass>219000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Sram with tag and data arrays for private external microprocessor bus</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10213696</doc-number>
<kind-code>A1</kind-code>
<document-date>20020806</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09387031</doc-number>
<document-date>19990831</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6446169</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Joseph</given-name>
<middle-name>T.</middle-name>
<family-name>Pawlowski</family-name>
</name>
<residence>
<residence-us>
<city>Boise</city>
<state>ID</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Edward W. Bulchis, Esq.</name-1>
<name-2>DORSEY &amp; WHITNEY LLP</name-2>
<address>
<address-1>Suite 3400</address-1>
<address-2>1420 Fifth Avenue</address-2>
<city>Seattle</city>
<state>WA</state>
<postalcode>98101</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">The present invention includes a microprocessor having a system bus for exchanging data with a computer system, and a private bus for exchanging data with a cache memory system. Since the processor exchanges data with the cache memory system through the private bus, cache memory operations thus do not require use of the system bus, allowing other portions of the computer system to continue to function through the system bus. Additionally, the cache memory and the processor are able to exchange data in a burst mode while the processor determines from the tag data when a read or write miss is occurring. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates in general to cache memory systems that are coupled to processors and more particularly to a cache memory system adapted to be coupled to a processor through a private bus. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a simplified block diagram of a computer <highlight><bold>20</bold></highlight> including a processor <highlight><bold>22</bold></highlight> and a memory system <highlight><bold>24</bold></highlight>, in accordance with the prior art. The processor <highlight><bold>22</bold></highlight> is coupled to the memory system <highlight><bold>24</bold></highlight> through a system bus <highlight><bold>26</bold></highlight> that conveys data and addresses between system components. The computer <highlight><bold>20</bold></highlight> additionally includes a user input interface <highlight><bold>34</bold></highlight>, such as a keyboard, mouse and the like, and a user output interface <highlight><bold>36</bold></highlight>, such as a monitor, both coupled to the processor <highlight><bold>22</bold></highlight> through the system bus <highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The processor <highlight><bold>22</bold></highlight> typically executes instructions read from the memory system <highlight><bold>24</bold></highlight> to operate on input data from the user input interface <highlight><bold>34</bold></highlight> and display results using the user output interface <highlight><bold>36</bold></highlight>. The processor <highlight><bold>22</bold></highlight> also stores and retrieves data in the memory system <highlight><bold>24</bold></highlight>. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The memory system <highlight><bold>24</bold></highlight> includes several different types of memory units. A read-only memory (&ldquo;ROM&rdquo;) <highlight><bold>39</bold></highlight> storing instructions that form an operating system is often part of the memory system <highlight><bold>24</bold></highlight>. Magnetic disc or other mass data storage systems <highlight><bold>40</bold></highlight> for nonvolatile storage of information that may be altered are also often part of the memory system <highlight><bold>24</bold></highlight>. Mass data storage systems <highlight><bold>40</bold></highlight> are well adapted for storage and retrieval of large amounts of data, but are too slow to permit their effective usage in many applications. Dynamic random access memories (&ldquo;DRAM&rdquo;) <highlight><bold>42</bold></highlight> allow much more rapid storage and retrieval of data and are frequently used as &ldquo;system memory&rdquo; <highlight><bold>38</bold></highlight> in which data and instructions are temporarily stored. However, DRAMs used as system memory <highlight><bold>38</bold></highlight> generally do not have access times that allow the processor <highlight><bold>22</bold></highlight> to operate at full speed. For example, a DRAM <highlight><bold>42</bold></highlight> may have a data access time on the order of 100 nanoseconds, while the processor <highlight><bold>22</bold></highlight> may be able to operate with a clock speed of several hundred megahertz. As a result, the processor <highlight><bold>22</bold></highlight> has to wait for many clock cycles before a request for data retrieval can be fulfilled by the DRAM <highlight><bold>42</bold></highlight>. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> For these reasons, and also because the data that the processor <highlight><bold>22</bold></highlight> needs most frequently often is a limited subset of the data stored in the DRAMs <highlight><bold>42</bold></highlight>, a limited amount of high speed memory, known as a cache memory <highlight><bold>44</bold></highlight>, is typically also included in the system memory <highlight><bold>38</bold></highlight>. The cache memory <highlight><bold>44</bold></highlight> is more expensive and consumes more power than the DRAMs <highlight><bold>42</bold></highlight>, but the cache memory <highlight><bold>44</bold></highlight> is also markedly faster. Typical cache memories <highlight><bold>44</bold></highlight> use static random access memories (&ldquo;SRAM&rdquo;) having data access times on the order of 10 nanoseconds or less. As a result of including the cache memory <highlight><bold>44</bold></highlight>, the entire computer <highlight><bold>20</bold></highlight> operates much more rapidly than is possible without the cache memory <highlight><bold>44</bold></highlight>. Cache memories <highlight><bold>44</bold></highlight> of different types and using different information exchange and storage protocols have been developed to try to optimize performance of the computer <highlight><bold>20</bold></highlight> for different applications. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> One often-encountered problem occurs when the processor <highlight><bold>22</bold></highlight> accesses the cache memory <highlight><bold>44</bold></highlight> through the system bus <highlight><bold>26</bold></highlight>. No other portion of the computer <highlight><bold>20</bold></highlight> may then use the system bus <highlight><bold>26</bold></highlight> to transfer data. As a result, the computer <highlight><bold>20</bold></highlight> is unable to carry out many other kinds of operations while the system bus <highlight><bold>26</bold></highlight> is transferring data between the cache memory <highlight><bold>44</bold></highlight> and the processor <highlight><bold>22</bold></highlight>. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A first solution to this problem is to include a cache memory (not illustrated) in the processor <highlight><bold>22</bold></highlight> itself. This form of cache memory is also known as &ldquo;L1&rdquo; or level one cache memory. However, having a fixed size of L<highlight><bold>1</bold></highlight> cache memory in the processor <highlight><bold>22</bold></highlight> does not allow the size of the L<highlight><bold>1</bold></highlight> cache memory to be optimized for a particular type of computer <highlight><bold>20</bold></highlight>. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A second solution to this problem is to include a cache memory (not illustrated) between the processor <highlight><bold>22</bold></highlight> and the system bus <highlight><bold>26</bold></highlight>. This form of cache memory is known as a &ldquo;look through&rdquo; cache memory. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> With any form of cache memory <highlight><bold>44</bold></highlight>, data stored in the cache memory <highlight><bold>44</bold></highlight> also corresponds to data stored in the DRAMs <highlight><bold>42</bold></highlight>. When the contents of the cache memory <highlight><bold>44</bold></highlight> or the DRAMs <highlight><bold>42</bold></highlight> are updated, corresponding data in the other of the cache memory <highlight><bold>44</bold></highlight> or the DRAMs <highlight><bold>42</bold></highlight> will differ from the updated data, but these data still need to correspond to each other. As a result, writing data to either the cache memory <highlight><bold>44</bold></highlight> or the DRAMs <highlight><bold>42</bold></highlight> necessitates either updating corresponding data stored in the other of the cache memory <highlight><bold>44</bold></highlight> or the DRAMs <highlight><bold>42</bold></highlight>, or keeping track of invalid (out of date or stale) data stored in the other of the cache memory <highlight><bold>44</bold></highlight> or the DRAMs <highlight><bold>42</bold></highlight>. Attempting to read data from system memory <highlight><bold>38</bold></highlight> that is not stored in the cache memory <highlight><bold>44</bold></highlight> is known as a &ldquo;read miss,&rdquo; while attempting to read data from the system memory <highlight><bold>38</bold></highlight> that is stored in the cache memory <highlight><bold>44</bold></highlight> is known as a &ldquo;read hit.&rdquo; In a read hit, data is read from the cache memory, thus allowing the microprocessor <highlight><bold>22</bold></highlight> to read data significantly faster than in a read miss, in which the data must be read from the DRAM <highlight><bold>42</bold></highlight>. Attempting to overwrite updated information in the cache memory <highlight><bold>44</bold></highlight> before the corresponding data in the DRAM <highlight><bold>42</bold></highlight> can be updated is known as a &ldquo;write miss,&rdquo; and correctly writing new data to the cache memory <highlight><bold>44</bold></highlight> is known as a &ldquo;write hit.&rdquo;</paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> One method for tracking data stored in the cache memory <highlight><bold>44</bold></highlight> is to use a tag memory <highlight><bold>46</bold></highlight>. The tag memory <highlight><bold>46</bold></highlight> uses the low order address bits for a memory address to access high order address bits of the cache memory <highlight><bold>44</bold></highlight> that are stored in the tag memory <highlight><bold>46</bold></highlight>. The stored address bits from the tag memory <highlight><bold>46</bold></highlight> are also compared to the high order address bits of the memory address. In the event of a match, a cache hit is indicated, and the read data is thus read from the cache memory <highlight><bold>44</bold></highlight>. The tag memory <highlight><bold>46</bold></highlight> may also store data characterizing each storage location in the cache memory <highlight><bold>44</bold></highlight>. One protocol for characterizing data stored in the cache memory <highlight><bold>44</bold></highlight> and DRAMs <highlight><bold>42</bold></highlight> (&ldquo;snooping&rdquo; the memories) is known as &ldquo;MESI,&rdquo; which is an acronym formed from Modified, Exclusive, Shared or Invalid. This protocol requires only two additional bits to be stored together with the high address bits in the tag memory <highlight><bold>46</bold></highlight>. MESI allows ready determination of whether the data stored in the cache memory <highlight><bold>44</bold></highlight> have been modified, are exclusively stored in the cache memory <highlight><bold>44</bold></highlight>, have been shared with the DRAMs <highlight><bold>42</bold></highlight> or are no longer valid data. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In order for the data from the tag memory <highlight><bold>46</bold></highlight> to be checked to determine when the data stored in the cache memory <highlight><bold>44</bold></highlight> is current, the data stored in the tag memory <highlight><bold>46</bold></highlight> must be transferred to the processor <highlight><bold>22</bold></highlight> in a procedure known as &ldquo;snooping.&rdquo; This snooping procedure requires that the system bus <highlight><bold>26</bold></highlight> be occupied during the time that the data are being accessed and transferred from the tag memory <highlight><bold>46</bold></highlight> to the processor <highlight><bold>22</bold></highlight>. While data are being transferred on the system bus <highlight><bold>26</bold></highlight>, the system bus <highlight><bold>26</bold></highlight> is not available for other operations, again reducing data bandwidth, i.e., inhibiting other operation of the computer <highlight><bold>20</bold></highlight> for one or more clock cycles. As a result, the computer <highlight><bold>20</bold></highlight> cannot operate as rapidly as might otherwise be possible. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Therefore, there is a need for methods and systems whereby tag memory contents may be accessed by the processor without interfering with operation of at least some other portions of the computer. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one aspect, the present invention includes a microprocessor having a system bus for exchanging data with a system memory, and a private bus for allowing the microprocessor to access a cache memory without using at least part of the system bus. The microprocessor reads data from, and writes data to, the cache memory through the private bus. Cache memory operations thus do not require use of the system bus, allowing other portions of the computer system to continue to function through the system bus. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> According to another aspect of the invention, the address bus portion of the system bus is used to address the tag memory during the time that a bust transfer of data is occurring from either the system memory of the cache memory. It is possible to use the address bus in this manner because the address bus is normally idle during a burst data transfer. When addressed during a burst data transfer, the tag memory transfers tag data to the microprocessor through a dedicated tag data bus. The microprocessor is thus able to carry out tag snoops while cache data transfers are occurring. As a result, data transfer capability between the cache memory system and the microprocessor is not compromised by tag snoops.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a simplified block diagram of a processor and external cache system, in accordance with the prior art. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a simplified block diagram of a processor with a private bus coupled to a cache memory system, in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> in combination provide a simplified block diagram of an SRAM for the cache memory system of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a simplified timing diagram illustrating relationships between signals in the cache memory system of <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, and <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a simplified timing diagram illustrating relationships between signals for read and write hit and miss scenarios, in accordance with an embodiment of the present invention. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a simplified block diagram of a computer using the processor and cache memory system of <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, in accordance with an embodiment of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a simplified block diagram of a processor <highlight><bold>49</bold></highlight> with a private bus <highlight><bold>50</bold></highlight> coupled to a cache memory system <highlight><bold>51</bold></highlight>, in accordance with an embodiment of the present invention. In one embodiment, the cache memory system <highlight><bold>51</bold></highlight> is formed from two cache SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight>. A clock <highlight><bold>57</bold></highlight> supplies clock signals CLK to the processor <highlight><bold>49</bold></highlight> and to the cache SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight>. In one embodiment, the cache memory system <highlight><bold>51</bold></highlight> is formed as a single integrated circuit or as a matched set of integrated circuits each including a data portion <highlight><bold>56</bold></highlight> and a tag portion <highlight><bold>58</bold></highlight>, as described in co-pending U.S. patent application Ser. No. 08/681,674, filed on Jul. 29, 1996 and which is owned by the same entity as this application. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The private bus <highlight><bold>50</bold></highlight> allows the processor <highlight><bold>49</bold></highlight> to write data to or read data from the cache memory system <highlight><bold>51</bold></highlight> without using the system bus <highlight><bold>26</bold></highlight>. As a result, the rest of the computer system <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is free to carry out other kinds of operations that require use of the system bus <highlight><bold>26</bold></highlight> during cache memory system <highlight><bold>51</bold></highlight> read and write operations, and the computer system <highlight><bold>20</bold></highlight> is able to operate more rapidly without requiring a higher clock signal frequency. However, it is also possible for the lines of the private bus <highlight><bold>50</bold></highlight> that are not coupled to the tag portion <highlight><bold>58</bold></highlight> to be shared with similar lines of the system bus <highlight><bold>26</bold></highlight>. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In operation, the processor <highlight><bold>49</bold></highlight> and the cache memory system <highlight><bold>51</bold></highlight> interact by exchanging signals over the private bus <highlight><bold>50</bold></highlight>, including a data read-write signal D_R/W* that determines whether a data access will be a read or a write, a data enable signal D_ENABLE* that enables the SRAMs <highlight><bold>52</bold></highlight>, <highlight><bold>54</bold></highlight> to transfer data, data signals DATA DQ, a write cancel command WRITE_CANCEL* that terminates a write operation already in progress, address signals ADDRESS, tag data signals T_DQ, a tag read-write signal T_R/W*, a tag enable signal T_ENABLE*, a linear burst order signal LBO* and a burst length select signal BL<highlight><bold>4</bold></highlight>/<highlight><bold>8</bold></highlight>*, with the &ldquo;*&rdquo; designating the signal as active low or complement. These signals and the operation of the processor <highlight><bold>49</bold></highlight> and the cache memory system <highlight><bold>51</bold></highlight> are discussed below in more detail with reference to <cross-reference target="DRAWINGS">FIGS. 3 through 5</cross-reference>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 3A and 3B</cross-reference> in combination provide a simplified block diagram of the cache SRAMs <highlight><bold>52</bold></highlight> or <highlight><bold>54</bold></highlight> for the cache memory system <highlight><bold>51</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, in accordance with an embodiment of the present invention. The data portions <highlight><bold>56</bold></highlight> of the cache SRAMs <highlight><bold>52</bold></highlight> or <highlight><bold>54</bold></highlight> are shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>A and include an address bus <highlight><bold>60</bold></highlight>, which is shown as a <highlight><bold>17</bold></highlight> bit address bus in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, but which may include more or fewer bits. The address bus <highlight><bold>60</bold></highlight>, the data enable signal D_ENABLE* coupled through a signal line <highlight><bold>62</bold></highlight>, and the clock signal CLK from a clock buffer <highlight><bold>64</bold></highlight> are all coupled to an address register <highlight><bold>66</bold></highlight>. When enabled, the address register <highlight><bold>66</bold></highlight> stores the address of data that will be read from or written to the cache SRAMs <highlight><bold>52</bold></highlight>, <highlight><bold>54</bold></highlight> responsive to each CLK signal. The address register <highlight><bold>66</bold></highlight> is enabled by an active low D_ENABLE* signal. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> An output bus <highlight><bold>68</bold></highlight> is coupled from an output of the address register <highlight><bold>66</bold></highlight> to an input of a data write address register <highlight><bold>70</bold></highlight> and to a first input of a multiplexer (&ldquo;MUX&rdquo;) <highlight><bold>72</bold></highlight>. A second input to the MUX <highlight><bold>72</bold></highlight> is coupled to an output bus <highlight><bold>74</bold></highlight> from the write address register <highlight><bold>70</bold></highlight>. The MUX <highlight><bold>72</bold></highlight> is controlled by a signal from a read-write R/W* register <highlight><bold>79</bold></highlight> to couple the output of the address register <highlight><bold>66</bold></highlight> to the output of the MUX <highlight><bold>72</bold></highlight> in a read operation, and to couple the output of the l s write address register <highlight><bold>70</bold></highlight> to the output of the MUX <highlight><bold>72</bold></highlight> in a write operation. When enabled, the data write address register <highlight><bold>70</bold></highlight> latches the output of the address register <highlight><bold>66</bold></highlight> responsive to each CLK signal. The data write address register <highlight><bold>70</bold></highlight> is enabled by a low logic level at the output of a register <highlight><bold>77</bold></highlight>. The register <highlight><bold>77</bold></highlight> latches the output of an OR gate <highlight><bold>76</bold></highlight> responsive to each CLK signal. The OR gate <highlight><bold>76</bold></highlight> is enabled by an active low D_ENABLE* signal and a low D_R/W* signal indicative of a write operation. When enabled, the OR gate <highlight><bold>76</bold></highlight> causes the output of the register <highlight><bold>77</bold></highlight> to toggle responsive to each CLK pulse since the output of the register <highlight><bold>77</bold></highlight> is coupled to an inverting input of the OR gate <highlight><bold>76</bold></highlight>. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> A burst counter <highlight><bold>80</bold></highlight> is coupled to the lower three bits of an address bus <highlight><bold>82</bold></highlight> that couples read and write addresses from the data row and column decoder <highlight><bold>72</bold></highlight> to a data memory array <highlight><bold>84</bold></highlight>. The burst counter <highlight><bold>80</bold></highlight> also is coupled to the clock signal CLK from the clock buffer <highlight><bold>64</bold></highlight>, to the burst length signal BL<highlight><bold>4</bold></highlight>/<highlight><bold>8</bold></highlight>* and to the burst order signal LBO*. The burst length signal BL<highlight><bold>4</bold></highlight>/<highlight><bold>8</bold></highlight>* sets the burst length to four when it is logic &ldquo;1&rdquo; and to eight when it is logic &ldquo;0.&rdquo; The burst order signal LBO* sets the burst order to either a linear burst mode when it is logic &ldquo;0&rdquo; or to an interleaved burst mode when it is logic &ldquo;1.&rdquo; In the interleaved mode, the least significant bit is alternated, then the next least significant bit followed by the least significant bit etc. Data burst orders for these two burst modes are summarized below in Table I.  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="1">
<colspec colname="1" colwidth="217PT" align="center"/>
<thead>
<row>
<entry namest="1" nameend="1" align="center">TABLE I</entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="1" align="center" rowsep="1"></entry>
</row>
<row>
<entry>BURST ORDER FOR LINEAR AND INTERLEAVED MODES.</entry>
</row>
</tbody>
</tgroup>
<tgroup align="left" colsep="0" rowsep="0" cols="4">
<colspec colname="1" colwidth="70PT" align="left"/>
<colspec colname="2" colwidth="35PT" align="center"/>
<colspec colname="3" colwidth="42PT" align="center"/>
<colspec colname="4" colwidth="70PT" align="left"/>
<tbody valign="top">
<row>
<entry>MODE</entry>
<entry>LENGTH</entry>
<entry>START</entry>
<entry>SEQUENCE</entry>
</row>
<row><entry namest="1" nameend="4" align="center" rowsep="1"></entry>
</row>
<row>
<entry>LINEAR</entry>
<entry>4</entry>
<entry>0</entry>
<entry>0, 1, 2, 3</entry>
</row>
<row>
<entry>LINEAR</entry>
<entry>4</entry>
<entry>3</entry>
<entry>3, 0, 1, 2</entry>
</row>
<row>
<entry>LINEAR</entry>
<entry>8</entry>
<entry>0</entry>
<entry>0, 1, 2, 3, 4, 5, 6, 7</entry>
</row>
<row>
<entry>LINEAR</entry>
<entry>8</entry>
<entry>3</entry>
<entry>3, 4, 5, 6, 7, 0, 1, 2</entry>
</row>
<row>
<entry>INTERLEAVED</entry>
<entry>4</entry>
<entry>0</entry>
<entry>0, 1, 2, 3</entry>
</row>
<row>
<entry>INTERLEAVED</entry>
<entry>4</entry>
<entry>3</entry>
<entry>3, 2, 1, 0</entry>
</row>
<row>
<entry>INTERLEAVED</entry>
<entry>8</entry>
<entry>0</entry>
<entry>0, 1, 2, 3, 4, 5, 6, 7</entry>
</row>
<row>
<entry>INTERLEAVED</entry>
<entry>8</entry>
<entry>3</entry>
<entry>3, 2, 1, 0, 7, 6, 5, 4</entry>
</row>
<row><entry namest="1" nameend="4" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Input data may be coupled from data bus terminals DQ<highlight><bold>0</bold></highlight> . . . DQ<highlight><bold>31</bold></highlight> of the private bus <highlight><bold>50</bold></highlight> to input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight>. The input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight> latch the input data responsive to each CLK pulse when they are enabled by a low at the output of the R/W* register <highlight><bold>79</bold></highlight>. It will be recalled that the output of the R/W* register <highlight><bold>79</bold></highlight> is also used to control the operation of the MUX <highlight><bold>72</bold></highlight>. A write register <highlight><bold>90</bold></highlight> clocks the data from the input registers <highlight><bold>86</bold></highlight>, <highlight><bold>88</bold></highlight> responsive to each CLK signal when it is enabled by a low at the output of the R/W* register indicative of a write operation. Thus, the write register <highlight><bold>90</bold></highlight> is enabled at the same time as the input registers <highlight><bold>86</bold></highlight>, <highlight><bold>88</bold></highlight>. The outputs of the write register <highlight><bold>90</bold></highlight> are coupled to a write driver <highlight><bold>92</bold></highlight> which, in turn, apply the data to a data memory array <highlight><bold>84</bold></highlight>. Significantly, the write register <highlight><bold>90</bold></highlight> and the write driver <highlight><bold>92</bold></highlight> have reset inputs that are coupled to the WRITE_CANCEL* signal from the private bus <highlight><bold>50</bold></highlight> through a write cancel register <highlight><bold>94</bold></highlight>. The write cancel register <highlight><bold>94</bold></highlight> latches the WRITE_CANCEL* signal responsive to each CLK signal. The significance of the WRITE_CANCEL* signal will be described below in connection with <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The data stored in the memory array <highlight><bold>84</bold></highlight> is read by coupling an address through the address register <highlight><bold>66</bold></highlight> and the MUX <highlight><bold>72</bold></highlight> to the data memory array <highlight><bold>84</bold></highlight> to select memory locations to be read. Sense amplifiers <highlight><bold>96</bold></highlight> supply the data from the data memory array <highlight><bold>84</bold></highlight> to a data output register <highlight><bold>98</bold></highlight>. A multiplexer MUX <highlight><bold>100</bold></highlight> couples the data from an output of the data output register <highlight><bold>98</bold></highlight> to a data output buffer <highlight><bold>102</bold></highlight> that, in turn, is coupled to the data bus terminals DQ<highlight><bold>0</bold></highlight> . . . DQ<highlight><bold>31</bold></highlight> of the private bus <highlight><bold>50</bold></highlight>. The data output buffer <highlight><bold>102</bold></highlight> is enabled by coupling the data read-write signal D_R/W* through the data read-write register <highlight><bold>78</bold></highlight> and an output enable register <highlight><bold>104</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The tag portions <highlight><bold>58</bold></highlight> are shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>B and include an address bus <highlight><bold>118</bold></highlight> coupled to a tag address register <highlight><bold>120</bold></highlight> that latches an address from the address bus <highlight><bold>118</bold></highlight> responsive to each CLK pulse when enabled by an active low T_ENABLE* signal. The output of the address register <highlight><bold>120</bold></highlight> is applied to one input of a MUX <highlight><bold>124</bold></highlight> and an input of a write address register <highlight><bold>122</bold></highlight>. The write address register <highlight><bold>122</bold></highlight> similarly latches its input responsive to each CLK pulse when enabled by a low at the output of a tag read/write T_R/W* register <highlight><bold>132</bold></highlight> indicative of a write operation. The T_R/W* register <highlight><bold>132</bold></highlight> latches the T_R/W* input responsive to the CLK signal when enabled by a low T_ENABLE* signal. The output of the T_R/W* register <highlight><bold>132</bold></highlight> also controls the operation of the MUX <highlight><bold>124</bold></highlight> to couple the output of the T_R/W* register <highlight><bold>132</bold></highlight> to the output of the MUX <highlight><bold>124</bold></highlight> whenever the T_R/W* register <highlight><bold>132</bold></highlight> is enabled. The output of the MUX <highlight><bold>124</bold></highlight> is used to address a tag memory array <highlight><bold>126</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Input tag data from the private bus <highlight><bold>50</bold></highlight> are coupled through tag data bus terminals T_DQ<highlight><bold>0</bold></highlight> . . . T_DQ<highlight><bold>7</bold></highlight> to a tag input register <highlight><bold>130</bold></highlight>. The input tag data is latched in the input register <highlight><bold>130</bold></highlight> responsive to the CLK signal when the input register <highlight><bold>130</bold></highlight> is enabled by a low at the output of a register <highlight><bold>134</bold></highlight>. The register <highlight><bold>134</bold></highlight> latches the output of the T_R/W* register <highlight><bold>132</bold></highlight> responsive to the CLK signal, and the T_R/W* register <highlight><bold>132</bold></highlight> latches the tag read/write T_R/W* input when enabled by a low T_ENABLE* input. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The input tag data at the output of the input register <highlight><bold>130</bold></highlight> are coupled through a tag write register <highlight><bold>136</bold></highlight> responsive to the CLK signal and to a tag write driver <highlight><bold>138</bold></highlight>. The tag write driver <highlight><bold>138</bold></highlight> applies in input tag data to the tag memory array <highlight><bold>126</bold></highlight> in a fashion similar to analogous operations in the data portion <highlight><bold>56</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> In a tag read operation, tag data from the tag memory array <highlight><bold>126</bold></highlight> are coupled through sense amplifiers <highlight><bold>140</bold></highlight>, a tag output register <highlight><bold>142</bold></highlight> and a tag output buffer <highlight><bold>144</bold></highlight> to the tag data bus terminals T_DQ<highlight><bold>0</bold></highlight> . . . T_DQ<highlight><bold>7</bold></highlight>. The tag output buffer <highlight><bold>144</bold></highlight> is enabled by an output from a tag output enable T_OE register <highlight><bold>148</bold></highlight>, which had a high logic level that is applied to its input coupling to its output responsive to each transition at the output of an exclusive-OR gate <highlight><bold>146</bold></highlight>. The exclusive-OR gate <highlight><bold>149</bold></highlight> receives the output of the T_R/W* register <highlight><bold>132</bold></highlight> and the CLK signal and thus clocks the T_OE register <highlight><bold>148</bold></highlight> on one phase of the CLK signal in a read operation and the other phase of the CLK signal in a write operation. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a simplified timing diagram illustrating relationships between signals in the cache memory system <highlight><bold>51</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, and <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a simplified timing diagram illustrating relationships between signals for read and write hit and miss scenarios, in accordance with an embodiment of the present invention. The clock signal CLK illustrated at the top of the timing diagrams synchronizes operations between the processor <highlight><bold>49</bold></highlight> and the cache memory system <highlight><bold>51</bold></highlight> as well as operations internal to both the processor <highlight><bold>49</bold></highlight> and the cache memory system <highlight><bold>51</bold></highlight>. Addresses ADDRESS present on the address bus <highlight><bold>60</bold></highlight> and tag address bus <highlight><bold>118</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> are represented below the clock signal CLK. Four data signals, the data read-write signal D_R/W*, the data enable signal D_ENABLE*, a quadrature clock signal CQ (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>) or a write cancel signal WC* (<cross-reference target="DRAWINGS">FIG. 5</cross-reference>) and input/output data signals D_DQ, are illustrated below the address signals ADDRESS. Three tag signals, the tag read-write signal T_R/W*, the tag enable signal T_ENABLE* and the tag input/output data T_DQ, are illustrated below the four data signals. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> A tag read and linear burst data read sequence is illustrated at the left of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. A first address A<highlight><bold>1</bold></highlight> is sent from the processor <highlight><bold>49</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> to the cache memory system <highlight><bold>51</bold></highlight> through the private bus <highlight><bold>50</bold></highlight> on a rising edge of a first clock pulse. Both the data enable D_ENABLE* and tag enable T_ENABLE* signals go active low in conjunction with this clock edge, strobing the address A<highlight><bold>1</bold></highlight> into the data and tag address registers <highlight><bold>66</bold></highlight> and <highlight><bold>120</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. While not shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the burst length signal BL<highlight><bold>4</bold></highlight>/<highlight><bold>8</bold></highlight>* is set to logic &ldquo;1&rdquo; by the processor <highlight><bold>49</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, setting the burst length to four, and the burst order signal LBO* is set to logic &ldquo;0&rdquo;, setting the burst order to the linear burst mode. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Starting at a falling edge of a second clock pulse, cache data Q<highlight><bold>1</bold></highlight> through Q<highlight><bold>4</bold></highlight> from four cache memory locations are read through the data bus terminals DQ<highlight><bold>0</bold></highlight> . . . DQ<highlight><bold>31</bold></highlight> beginning at the address A<highlight><bold>1</bold></highlight>. Tag data TQ<highlight><bold>1</bold></highlight> corresponding to the first address A<highlight><bold>1</bold></highlight> is also read through the tag data bus terminals T_DQ<highlight><bold>0</bold></highlight> . . . T_DQ<highlight><bold>7</bold></highlight>. (As used herein, signals designated by &ldquo;Q&rdquo; represent output data, signals designated by &ldquo;D&rdquo; represent input data, and signals designated by &ldquo;T&rdquo; represent tag data). At the rising edge of a third clock pulse, address AS is present on the private bus <highlight><bold>50</bold></highlight> and is strobed into the data address register <highlight><bold>66</bold></highlight> by a second data enable signal D_ENABLE*. A second group of cache data Q<highlight><bold>5</bold></highlight> through Q<highlight><bold>8</bold></highlight> are read through the data bus terminals DQ<highlight><bold>0</bold></highlight> . . . DQ<highlight><bold>31</bold></highlight> from four cache memory locations starting at address AS during the next two clock pulses. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> A cache snoop follows the tag read sequence. At the rising edge of a fourth clock pulse, the processor <highlight><bold>49</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> applies the address A<highlight><bold>9</bold></highlight> to the private bus <highlight><bold>50</bold></highlight> and sets the tag enable signal T_ENABLE* low to read tag data TQ<highlight><bold>9</bold></highlight> at the tag memory location A<highlight><bold>9</bold></highlight>. At the rising edge of a sixth clock pulse, the address A<highlight><bold>9</bold></highlight> is applied to the private bus <highlight><bold>50</bold></highlight> and is strobed into the data address register <highlight><bold>66</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> by setting the signals data read-write D_R/W* and data enable D_ENABLE* low. Starting with the rising edge of a seventh clock pulse, cache data D<highlight><bold>9</bold></highlight> through D<highlight><bold>12</bold></highlight> intended to be written the cache memory system <highlight><bold>51</bold></highlight> at four consecutive locations starting at address A<highlight><bold>9</bold></highlight> are coupled to the cache memory system <highlight><bold>51</bold></highlight> through the data bus terminals DQ<highlight><bold>0</bold></highlight> . . . DQ<highlight><bold>31</bold></highlight>. The processor <highlight><bold>49</bold></highlight> determines from the tag TQ<highlight><bold>9</bold></highlight> (e.g., using MESI) that this is a write hit while the cache data D<highlight><bold>9</bold></highlight> through D<highlight><bold>12</bold></highlight> is still being written to the cache memory system <highlight><bold>51</bold></highlight>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> A cache read and cache snoop are shown next. At the rising edge of an eighth clock pulse, an address A<highlight><bold>13</bold></highlight> is applied to the private bus <highlight><bold>50</bold></highlight> by the processor <highlight><bold>49</bold></highlight> and the data enable signal D<highlight><subscript>13 </subscript></highlight>ENABLE* and tag enable T_ENABLE* signals are set to logic &ldquo;0,&rdquo; strobing the address A<highlight><bold>13</bold></highlight> into the data and tag address registers <highlight><bold>66</bold></highlight> and <highlight><bold>120</bold></highlight>. The processor <highlight><bold>49</bold></highlight> reads cache data Q<highlight><bold>13</bold></highlight> through Q<highlight><bold>17</bold></highlight> from the next four addresses beginning with A<highlight><bold>13</bold></highlight> and the tag data TQ<highlight><bold>13</bold></highlight> for the address A<highlight><bold>13</bold></highlight> during ninth through eleventh clock pulses. The processor <highlight><bold>49</bold></highlight> determines from the tag data TQ<highlight><bold>13</bold></highlight> that this is a read hit, e.g., using MESI, while the cache data Q<highlight><bold>13</bold></highlight> . . . Q<highlight><bold>16</bold></highlight> are being read. The address A<highlight><bold>17</bold></highlight> is strobed into the data address register <highlight><bold>66</bold></highlight> on the rising edge of a tenth clock pulse and data from addresses A<highlight><bold>17</bold></highlight> through A<highlight><bold>20</bold></highlight> are read out during eleventh through thirteenth clock pulses. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> New tag data TD<highlight><bold>9</bold></highlight> are written to the tag portions <highlight><bold>58</bold></highlight> of the cache SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight> next. On the rising edge of the eleventh clock pulse, tag data are written to the tag portion <highlight><bold>58</bold></highlight> by strobing the address A<highlight><bold>9</bold></highlight> into the tag address register <highlight><bold>120</bold></highlight> and setting the tag enable signal T_ENABLE* low. The tag read-write signal T_R/W* is also set low to indicate a write operation. The tag data D<highlight><bold>9</bold></highlight> is then written to the tag portions <highlight><bold>58</bold></highlight> of the cache SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight> on the rising edge of a twelfth clock pulse. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> At the rising edge of the twelfth clock pulse, an address A<highlight><bold>21</bold></highlight> is applied to the private bus <highlight><bold>50</bold></highlight> by the processor <highlight><bold>49</bold></highlight> and the data enable signal D_ENABLE* and tag enable T_ENABLE* signals are set to logic &ldquo;0,&rdquo; strobing the address A<highlight><bold>21</bold></highlight> into the data and tag address registers <highlight><bold>66</bold></highlight> and <highlight><bold>120</bold></highlight>. The processor <highlight><bold>49</bold></highlight> reads cache data Q<highlight><bold>21</bold></highlight> through Q<highlight><bold>24</bold></highlight> from the next four addresses beginning with A<highlight><bold>21</bold></highlight>. Since the T_R/W* line is set low with the assertion of the address A<highlight><bold>21</bold></highlight>, and tag data TD<highlight><bold>21</bold></highlight> is written to the tag portion <highlight><bold>58</bold></highlight> on the rising edge of the thirteenth clock pulse. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> It is important to note that the writing of tag data to and the reading of tag data from the tag portion <highlight><bold>58</bold></highlight> of the of the cache SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight> does not interfere with or otherwise slow down the writing of cache data to or the reading of cache data from the data portion of the SRAMs <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight>. This is because the tag portion <highlight><bold>58</bold></highlight> has its own data bus and control bus (which transfer the control signals T_R/W* and T_ENABLE*), and the address bus, although shared by the data portion <highlight><bold>56</bold></highlight> and the tag portion <highlight><bold>58</bold></highlight>, is either simultaneously addresses the data portion <highlight><bold>56</bold></highlight> and the tag portion <highlight><bold>58</bold></highlight> or addresses only the tag portion <highlight><bold>56</bold></highlight> during a burst transfer when addresses need not be applied to the data portion <highlight><bold>56</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Multiple tag snoops, executed without compromising data transaction capability through the system bus <highlight><bold>26</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 1 and 2</cross-reference>, are is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. A sequence of signals associated with a read hit is shown at the left hand edge of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. Addresses A<highlight><bold>1</bold></highlight>, A<highlight><bold>2</bold></highlight> and A<highlight><bold>3</bold></highlight> are strobed into address registers <highlight><bold>66</bold></highlight> and <highlight><bold>120</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> by setting the signals D_ENABLE* and T_ENABLE* low on the rising edges of first, third and fifth clock cycles, respectively. Tag data TQ<highlight><bold>1</bold></highlight> and cache data Q<highlight><bold>1</bold></highlight><highlight><subscript>1 </subscript></highlight>through Q<highlight><bold>1</bold></highlight><highlight><subscript>4 </subscript></highlight>are read during the third and fourth clock cycles, tag data TQ<highlight><bold>2</bold></highlight> and cache data Q<highlight><bold>2</bold></highlight><highlight><subscript>1 </subscript></highlight>through Q<highlight><bold>2</bold></highlight><highlight><subscript>4 </subscript></highlight>are read during fifth and sixth clock cycles and tag data TQ<highlight><bold>3</bold></highlight> and cache data Q<highlight><bold>3</bold></highlight><highlight><subscript>1 </subscript></highlight>through Q<highlight><bold>3</bold></highlight><highlight><subscript>4 </subscript></highlight>are read during seventh and eighth clock cycles, respectively. The processor <highlight><bold>49</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 2</cross-reference>) can identify tag hits using the MESI protocol on the first tag data TQ<highlight><bold>1</bold></highlight> and third tag data TQ<highlight><bold>3</bold></highlight> on rising edges of fourth and eighth clock pulses, respectively, and can identify a tag miss using second tag data TQ<highlight><bold>2</bold></highlight> on the rising edge of the sixth clock pulse. Because the processor <highlight><bold>49</bold></highlight> has identified the cache data Q<highlight><bold>2</bold></highlight><highlight><subscript>1 </subscript></highlight>through Q<highlight><bold>2</bold></highlight><highlight><subscript>4 </subscript></highlight>as a read miss, these cache data are ignored by the processor <highlight><bold>49</bold></highlight>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> On the rising edge of the eighth clock pulse, write commands are strobed into the cache read-write register <highlight><bold>78</bold></highlight> and the tag read-write register <highlight><bold>132</bold></highlight> by the D_R/W* and T_R/W* signals, respectively, and the address A<highlight><bold>4</bold></highlight> is strobed into the address registers <highlight><bold>66</bold></highlight> and <highlight><bold>132</bold></highlight> by setting the signals D_ENABLE* and T_ENABLE* low at the same time. The tag data TD<highlight><bold>4</bold></highlight> for the write are strobed into the tag portion <highlight><bold>58</bold></highlight> on the falling edge of the ninth clock pulse. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> On the rising edge of the tenth clock pulse, write commands are strobed into the cache read-write register <highlight><bold>78</bold></highlight> and the tag read-write register <highlight><bold>132</bold></highlight> by the D_R/W* and T_R/W* signals, respectively, and the address A<highlight><bold>5</bold></highlight> is strobed into the address registers <highlight><bold>66</bold></highlight> and <highlight><bold>132</bold></highlight> by setting the signals D_ENABLE* and T_ENABLE* low at the same time. Cache data D<highlight><bold>4</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>4</bold></highlight><highlight><subscript>4 </subscript></highlight>are clocked into the input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight> during the tenth and eleventh clock pulses and cache data D<highlight><bold>5</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>5</bold></highlight><highlight><subscript>4 </subscript></highlight>are clocked into the input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight> during the twelfth and thirteenth clock pulses. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The tag data TQ<highlight><bold>5</bold></highlight> is read from the T_DQ bus on the rising edge of the twelfth clock pulse and the processor <highlight><bold>49</bold></highlight> determines, on the rising edge of the thirteenth clock pulse, that the cache data locations D<highlight><bold>5</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>5</bold></highlight><highlight><subscript>4 </subscript></highlight>contain data that has not yet been written to the DRAMs <highlight><bold>42</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>), i.e., that the data D<highlight><bold>5</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>5</bold></highlight><highlight><subscript>4 </subscript></highlight>contained in these locations would be lost if they were overwritten with the data D<highlight><bold>5</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>5</bold></highlight><highlight><subscript>4 </subscript></highlight>that is being read into the input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight>, the write register <highlight><bold>90</bold></highlight> and the write driver <highlight><bold>92</bold></highlight>. As a result, the processor <highlight><bold>49</bold></highlight> sends a write cancel signal WC* to the cache memories <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight> on the rising edge of the fourteenth clock pulse to strobe the write cancel register <highlight><bold>94</bold></highlight> and thereby reset the write register <highlight><bold>90</bold></highlight> and the write driver <highlight><bold>92</bold></highlight>, preventing the previously-stored cache data D<highlight><bold>5</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>5</bold></highlight><highlight><subscript>4 </subscript></highlight>from being overwritten. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> On rising edges of the thirteenth and fifteenth clock pulses, the addresses A<highlight><bold>6</bold></highlight> and A<highlight><bold>7</bold></highlight>, respectively, are strobed into the address registers <highlight><bold>66</bold></highlight> and <highlight><bold>132</bold></highlight> by setting the signals D_ENABLE* and T_ENABLE* low at the same time. Cache data D<highlight><bold>6</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>6</bold></highlight><highlight><subscript>4 </subscript></highlight>and D<highlight><bold>7</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>7</bold></highlight><highlight><subscript>4 </subscript></highlight>and tag data TQ<highlight><bold>6</bold></highlight> and TQ<highlight><bold>7</bold></highlight> are read from the cache memories <highlight><bold>52</bold></highlight> and <highlight><bold>54</bold></highlight> during the fifteenth through eighteenth clock pulses. The processor <highlight><bold>49</bold></highlight> determines that the cache data D<highlight><bold>6</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>6</bold></highlight><highlight><subscript>4 </subscript></highlight>represent a read hit on the rising edge of the sixteenth clock pulse and that the cache data D<highlight><bold>7</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>7</bold></highlight><highlight><subscript>4 </subscript></highlight>represent a read hit on the rising edge of the eighteenth clock pulse. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> On the rising edge of the eighteenth clock pulse, the address A<highlight><bold>8</bold></highlight> is strobed into the address register <highlight><bold>66</bold></highlight> by setting the signal D<highlight><subscript>13 </subscript></highlight>ENABLE* low. A write cycle is initiated by setting the signal D_R/W* low at the same time. The data D<highlight><bold>8</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>8</bold></highlight><highlight><subscript>4 </subscript></highlight>are written to the input registers <highlight><bold>86</bold></highlight> and <highlight><bold>88</bold></highlight> during the twentieth and twenty-first clock cycles, and the tag data TQ<highlight><bold>8</bold></highlight> is read from the tag portion <highlight><bold>58</bold></highlight> on the rising edge of the twentieth clock pulse. The processor <highlight><bold>49</bold></highlight> determines that the data D<highlight><bold>8</bold></highlight><highlight><subscript>1 </subscript></highlight>through D<highlight><bold>8</bold></highlight><highlight><subscript>4 </subscript></highlight>represent a write hit during the rising edge of the twenty-first clock pulse. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> A<highlight><bold>1</bold></highlight>so shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> are sample cycles of additional tag transactions that could occur, but which are not part of the sequence described above. For instance, there is sufficient tag and address bus bandwidth to perform additional tag reads during clock cycles <highlight><bold>2</bold></highlight>, <highlight><bold>4</bold></highlight>, <highlight><bold>6</bold></highlight>, <highlight><bold>11</bold></highlight>, <highlight><bold>14</bold></highlight>, <highlight><bold>16</bold></highlight>, <highlight><bold>19</bold></highlight> and additional tag write cycles during clock cycle <highlight><bold>9</bold></highlight>. This extra bandwidth is available for multiprocessor snoop and coherency operations. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a simplified block diagram of a computer <highlight><bold>160</bold></highlight> using the processor <highlight><bold>49</bold></highlight> and cache memory system <highlight><bold>51</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>, in accordance with an embodiment of the present invention. The computer <highlight><bold>160</bold></highlight> includes elements common to the computer <highlight><bold>20</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, but incorporates the cache memory system <highlight><bold>51</bold></highlight> of <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference> and the modified processor <highlight><bold>49</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> to provide increased operating speed. Forming a cache memory system <highlight><bold>51</bold></highlight> that may be optimized for a particular application allows flexibility in the design of the computer <highlight><bold>160</bold></highlight>. Computers <highlight><bold>160</bold></highlight> find application in word processing systems, scientific and financial calculation systems, industrial control systems and myriad other applications where data are manipulated, collected, displayed, transmitted or stored. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> From the foregoing it will be appreciated that, although specific embodiments of the invention have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the invention. Accordingly, the invention is not limited except as by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer system, comprising: 
<claim-text>a processor having a system bus port and a private bus port; </claim-text>
<claim-text>a system bus coupled to the system bus port of the processor; </claim-text>
<claim-text>a private bus coupled to the private bus port of the processor; </claim-text>
<claim-text>a system memory coupled to the system bus; and </claim-text>
<claim-text>a cache memory coupled to the private bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein a portion of the system bus is coupled to the cache memory so that a portion of the system bus is shared by the system memory and the cache memory. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the cache memory comprises a cache data portion and a tag data portion, and wherein the private bus comprises a cache data bus coupled to the cache data portion, a cache control bus coupled to the cache data portion, a tag data bus coupled to the tag data portion, a tag control bus coupled to the tag data portion, and an address bus coupled to both the cache data portion and the tag data portion. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache memory comprises a cache data portion and a tag data portion, and wherein the processor is structured to provide to the cache data portion a write cancel instruction to cancel a cache write command after write data from the processor have been coupled to the cache data portion responsive to a cache write miss. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the cache memory comprises a cache data portion and a tag data portion, and wherein the processor is structured to address the tag data portion during a burst transfer of cache data to or from the cache data portion. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the processor is structured to transfer tag data to or from the tag data portion during a transfer of cache data to or from the cache data portion. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor is structured to perform snoops of the cache memory during a transfer of data between the processor and the cache memory. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the processor is structured to perform snoops of the cache memory during a write of cache data from the processor to the cache memory, and wherein the processor is further structured to cancel the writing of cache data to the cache memory responsive to the snoop of the cache memory indicating a cache write miss. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the cache memory comprises a cache data portion and a tag data portion, and the cache data portion comprises: 
<claim-text>an address register adapted to store an address applied to the cache data portion and to output from the address register an internal address; </claim-text>
<claim-text>a burst counter coupled to an output of the address register, the burst counter being structured to increments the internal address responsive to a clock signal; </claim-text>
<claim-text>a data input register coupled to receive and store cache data from the processor; </claim-text>
<claim-text>a memory array having an address input coupled to the address register and the burst counter, a data input coupled to an output of the data input register, and a data output, the memory array being structured to store data applied to its data input at a location in the memory array indicated by the internal address, and to output data to its data output from a location in the memory array indicated by the internal address; and </claim-text>
<claim-text>a data output register coupled to the data output of the memory array to apply cache data to the processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the cache data portion further comprises: 
<claim-text>a write cancel register structured to cancel writing of data to the cache data portion responsive to a write cancel command, and wherein the processor is structured to generate the write cancel command responsive to reading tag data from the tag data portion indicative of a cache write miss. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the cache memory comprises a cache data portion and a tag data portion, and the tag data portion comprises: 
<claim-text>an address register adapted to store an address applied to the tag data portion and to output from the address register an internal address; </claim-text>
<claim-text>a data input register coupled to receive and store tag data from the processor; </claim-text>
<claim-text>a memory array having an address input coupled to the address register, a data input coupled to an output of the data input register, and a data output, the memory array being structured to store data applied to its data input at a location in the memory array indicated by the internal address, and to output data to its data output from a location in the memory array indicated by the internal address; and </claim-text>
<claim-text>a data output register coupled to the data output of the memory array to apply tag data to the processor. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A computer system, comprising: 
<claim-text>a processor having an address bus port, a cache data bus port, a cache control bus port, a tag data bus port, and a tag control bus port; </claim-text>
<claim-text>an address bus coupled to the address bus port of the processor; </claim-text>
<claim-text>a cache data bus coupled to the cache data bus port of the processor; </claim-text>
<claim-text>a cache control bus coupled to the cache control bus port of the processor; </claim-text>
<claim-text>a tag data bus coupled to the tag data bus port of the processor; </claim-text>
<claim-text>tag control bus coupled to the tag control bus port of the processor; and </claim-text>
<claim-text>a cache memory including a cache data portion and a tag data portion, the cache data portion having a an address bus port coupled to the address bus, a cache data bus port coupled to the cache data bus, and a cache control bus port coupled to the cache control bus, and the tag data portion having a tag data bus port coupled to the tag data bus and tag control bus port coupled to the tag control bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further comprising a system memory coupled to the processor through a system bus. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein the system bus is independent from busses connecting the processor to the cache memory. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference> wherein a portion of the system bus is coupled to the cache memory so that a portion of the system bus is shared by the system memory and the cache memory. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the processor is structured to provide to the cache data portion a write cancel instruction to cancel a cache write command after write data from the processor have been coupled to the cache data portion responsive to a cache write miss. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the processor is structured to address the tag data portion during a burst transfer of cache data to or from the cache data portion. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the processor is structured to transfer tag data to or from the tag data portion during a transfer of cache data to or from the cache data portion. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the processor is structured to perform snoops of the cache memory during a transfer of data between the processor and the cache memory. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the processor is structured to perform snoops of the cache memory during a write of cache data from the processor to the cache memory, and wherein the processor is further structured to cancel the writing of cache data to the cache memory responsive to the snoop of the cache memory indicating a cache write miss. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the cache data portion of the cache memory comprises: 
<claim-text>an address register coupled to the address bus, the address register being adapted to store an address applied to the address bus and to output from the address register an internal address; </claim-text>
<claim-text>a burst counter coupled to an output of the address register, the burst counter being structured to increments the internal address responsive to a clock signal; </claim-text>
<claim-text>a data input register coupled to the cache data bus, the data input register being structured to receive and store cache data applied to the cache data bus; </claim-text>
<claim-text>a memory array having an address input coupled to the address register and the burst counter, a data input coupled to an output of the data input register, and a data output, the memory array being structured to store data applied to its data input at a location in the memory array indicated by the internal address, and to output data to its data output from a location in the memory array indicated by the internal address; and </claim-text>
<claim-text>a data output register coupled to the data output of the memory array, the data output register being structured to apply cache data to the cache data bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein the cache data portion further comprises: 
<claim-text>a write cancel register structured to cancel writing of data to the cache data portion responsive to a write cancel command, and wherein the processor is structured to generate the write cancel command responsive to reading tag data from the tag data portion indicative of a cache write miss. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> wherein the tag data portion of the cache memory comprises: 
<claim-text>an address register adapted to the address bus, the address register being adapted to store an address applied to the address bus and to output from the address register an internal address; </claim-text>
<claim-text>a data input register coupled to the tag data bus, the data input register being structured to receive and store tag data applied to the tag data bus; </claim-text>
<claim-text>a memory array having an address input coupled to the address register, a data input coupled to an output of the data input register, and a data output, the memory array being structured to store data applied to its data input at a location in the memory array indicated by the internal address, and to output data to its data output from a location in the memory array indicated by the internal address; and </claim-text>
<claim-text>a data output register coupled to the data output of the memory array, the data output register being structured to apply tag data to the tag data bus. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A computer system comprising: 
<claim-text>a processor having a processor bus; </claim-text>
<claim-text>an input device coupled to the processor through the processor bus and adapted to allow data to be entered into the computer system; </claim-text>
<claim-text>an output device coupled to the processor through the processor bus adapted to allow data to be output from the computer system; </claim-text>
<claim-text>a system memory coupled to the processor through the processor bus, the system memory; and </claim-text>
<claim-text>a cache memory system comprising: 
<claim-text>a private bus coupled to the processor for exchanging tag data and cache data with a cache memory system; and </claim-text>
<claim-text>a cache memory and a tag memory coupled to the private bus. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising means coupled to the processor for snooping the cache memory system during a burst transfer of data between the cache memory system and the processor, the snooping means operating during the burst transfer of data without interrupting the burst transfer of data. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising: 
<claim-text>means coupled to the processor for snooping the cache memory system during a burst transfer of data from the processor to the cache memory system in a cache write operation, the snooping means operating during the burst transfer of write data without interrupting the burst transfer of write data; and </claim-text>
<claim-text>means for providing a write cancel instruction to the cache memory for canceling a cache write command after the write data from the processor have been coupled from the processor to the cache memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> wherein the processor further comprises: 
<claim-text>means coupled to the processor for snooping the cache memory system during a cache memory read operation to determine when data from the cache memory are stale; and </claim-text>
<claim-text>means for ignoring stale cache memory data when the snooping means determines that the cache memory data are stale. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The computer system of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference> further comprising burst mode length setting means coupled to the processor and to the cache memory system, the burst mode length setting means for determining a length of data bursts exchanged between the processor and the cache memory system, the burst mode setting means. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. In a computer system, a method of snooping a cache memory system capable of storing tag data and cache data, and transferring cache data in a burst transfer mode, the method comprising: 
<claim-text>addressing the cache memory to transfer cache data to or from the cache memory during a burst cache date transfer; </claim-text>
<claim-text>transferring a burst of cache data to or from the cache memory; </claim-text>
<claim-text>addressing the cache memory to transfer tag data to or from the cache memory; and </claim-text>
<claim-text>while the burst of cache data is being transferred from the cache memory, transferring tag data to or from the cache memory. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein the act of addressing the cache memory to transfer tag data to or from the cache memory comprises addressing the cache memory to transfer tag data to or from the cache memory when there is no need to address the cache memory to transfer cache data to or from the cache memory. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein the burst of cache data is transferred to the cache memory and the tag data is transferred from the cache memory, and wherein the method further comprises: 
<claim-text>detecting from the tag data transferred from the cache memory whether there is a cache miss condition; and </claim-text>
<claim-text>canceling the writing of the bust of cache data to the cache memory in the event the cache miss condition id detected. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A method for detecting a cache memory read miss comprising: 
<claim-text>sending a first address from a processor to a cache memory; </claim-text>
<claim-text>sending a first tag read request from the processor to a tag memory associated with the cache memory; </claim-text>
<claim-text>sending a cache read request to read cache data from the first address; </claim-text>
<claim-text>reading first tag data from the first address in the tag memory; </claim-text>
<claim-text>determining in the processor from the first tag data, when the read request is a read miss while the cache memory is outputting cache read data in a burst; and </claim-text>
<claim-text>ignoring the read data when the cache read request is a read miss. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, further comprising setting a burst mode to provide one of several predetermined burst lengths of cache data. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, further comprising: 
<claim-text>determining when the read request is a read hit; and </claim-text>
<claim-text>accepting the read data when the read request is a read hit. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference> wherein the acts of sending a first address, sending a first tag read request and sending a cache read request comprise: 
<claim-text>sending a first address from the processor to a cache memory; </claim-text>
<claim-text>sending a first tag read request from the processor to a tag memory associated with the cache memory; and </claim-text>
<claim-text>sending a cache read request to read cache data from the first address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. A method for processing a cache write miss comprising: 
<claim-text>sending a first address from a processor to a cache memory; </claim-text>
<claim-text>sending a first tag read request from the processor to a tag memory associated with the cache memory; </claim-text>
<claim-text>sending a cache write request to write cache data to the first address in the cache memory; </claim-text>
<claim-text>reading first tag data from the first address in the tag memory; </claim-text>
<claim-text>determining in the processor that the cache write request is a cache miss from the first tag data; and </claim-text>
<claim-text>sending a write cancel instruction to the cache memory to inhibit writing the write data to the first address. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein sending a write cancel instruction comprises sending a write cancel instruction from the processor to the cache memory to inhibit writing the write data to the first address. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> further comprising: 
<claim-text>sending a second address from the processor to the cache and tag memories; </claim-text>
<claim-text>sending a second tag read request from the processor to the tag memory; </claim-text>
<claim-text>sending a data read request from the processor to the cache memory; </claim-text>
<claim-text>receiving second tag data in the processor from the tag memory in response to sending a second tag read request; </claim-text>
<claim-text>determining, in the processor, that the cache data is stale from the second tag data; and </claim-text>
<claim-text>ignoring the cache data in response to the second tag data.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>6</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005238A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005238A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005238A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005238A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005238A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005238A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005238A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005238A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
