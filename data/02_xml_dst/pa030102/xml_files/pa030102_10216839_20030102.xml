<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004731A1-20030102-D00000.TIF SYSTEM "US20030004731A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00001.TIF SYSTEM "US20030004731A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00002.TIF SYSTEM "US20030004731A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00003.TIF SYSTEM "US20030004731A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00004.TIF SYSTEM "US20030004731A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00005.TIF SYSTEM "US20030004731A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00006.TIF SYSTEM "US20030004731A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00007.TIF SYSTEM "US20030004731A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00008.TIF SYSTEM "US20030004731A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00009.TIF SYSTEM "US20030004731A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00010.TIF SYSTEM "US20030004731A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00011.TIF SYSTEM "US20030004731A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00012.TIF SYSTEM "US20030004731A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004731A1-20030102-D00013.TIF SYSTEM "US20030004731A1-20030102-D00013.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004731</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10216839</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020813</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G10L011/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>704</class>
<subclass>275000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Language-oriented user interfaces for voice activated services</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10216839</doc-number>
<kind-code>A1</kind-code>
<document-date>20020813</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09456922</doc-number>
<document-date>19991207</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Matthew</given-name>
<middle-name>John</middle-name>
<family-name>Yuschik</family-name>
</name>
<residence>
<residence-us>
<city>Andover</city>
<state>MA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Comverse Network Systems, Inc.</organization-name>
<address>
<city>Wakefield</city>
<state>MA</state>
</address>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>STAAS &amp; HALSEY LLP</name-1>
<name-2></name-2>
<address>
<address-1>700 11TH STREET, NW</address-1>
<address-2>SUITE 500</address-2>
<city>WASHINGTON</city>
<state>DC</state>
<postalcode>20001</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A comprehensive system is provided for designing a voice activated user interface (VA UI) having a semantic and syntactic structure adapted to the culture and conventions of spoken language for the intended users. The system decouples the content dimension of speech (semantics) and the manner-of-speaking dimension (syntax) in a systematic way. By decoupling these dimensions, the VA UI can be optimized with respect to each dimension independently and jointly. The approach is general across languages and encompasses universal variables of language and culture. Also provided are voice activated user interfaces with semantic and syntactic structures so adapted, as well as a prompting grammar and error handling methods adapted to such user interfaces. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a divisional of U.S. application Ser. No. 09/456,922, filed Dec. 7, 1999, now allowed.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> The present invention relates to user interfaces for voice actuated services. In particular, the present invention relates to user interfaces specifically adapted to the spoken language of the target users. The present invention specifically provides both language-oriented user interfaces and generally applicable systems and methods for building such language-oriented user interfaces. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Related Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A user interface is a component or tool of a computer system that enables a user to interact with the computer system, either to issue instructions controlling the operation of the system, enter data, examine results, or perform other operations in connection with the functions of the system. In effect, the user interface is the computer&apos;s &ldquo;cockpit.&rdquo; That is, the user interface presents information about the computer&apos;s operation to the user in an understandable form, and it enables the user to control the computer by converting the user&apos;s instructions into forms usable by the computer. Various types of user interfaces exist, such as text (or &ldquo;command line&rdquo;) interfaces, graphical user interfaces (&ldquo;GUIs&rdquo;), Dual Tone Multi-Frequency (DTMF) interfaces, and others. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> &ldquo;Voice activated&rdquo; (VA) or &ldquo;voice controlled&rdquo; (VC) user interfaces are a promising alternative type of user interface that enable users to interact with the computer by spoken words. That is, rather than typing in text commands, pressing numbers on a telephone keypad, or &ldquo;clicking&rdquo; on a graphical icons and menu items, the user provides instructions and data to the computer merely by speaking appropriate words. The ability of a user interface to receive inputs by voice signals has clear advantages in many application areas where other means of input (keyboard, telephone keypad, mouse or other pointing device, etc.) are unavailable or unfamiliar to the user. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Unfortunately, voice activated user interfaces (&ldquo;VA UIs&rdquo;) have generally failed to provide the level of usability necessary to make such devices practical in most application areas. This failure has been due in part to inherent technical challenges, such as the difficulty of reliably converting spoken words into corresponding computer instructions. However, continuing advances in acoustic signal recognition (ASR) technologies have largely removed such obstacles. The persistent inadequacies of existing VA UIs therefore arise from design flaws in the UIs themselves, rather than lack of adequate implementing technology. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Currently, voice activated user interfaces (VA UIs) are designed and implemented in an ad hoc manner. Most developers overlay a voice-activated UI onto a dual-tone multiple frequency (DTMF) UI and perform after-the-after fact testing on the integrated unit. Tests of these system are therefore performed without consideration of the change in input modality (spoken versus DTMF keypresses) and for the new usability effects generated by the coupling between the various submodules of the system. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Trial and error is the most common approach for VA UI design and development. The vocabulary wordset for the service is often the literal translation of the English command words used for the task into the target language. Two typical prompting structures are (1) to list out all the options at once and wait for the subscriber to speak the choice (either at the end or by barging-in), or (2) to say the options one at a time, and provide a pause or yes/no question to signal the subscriber to make a choice. Textual (visual) UIs essentially follow the first approach, while DTMF UIs use the second approach. Explicit turn-taking is generally signalled by introducing a tone to indicate that the subscriber should speak. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> However, to serve the needs of users effectively, a VA UI must have characteristics and must satisfy ease-of-use requirements different from those of a DTMF or visual/textual UI. The need for these differences arises because verbal dialogues are dynamic social interactions and differ across languages and cultures in ways that are not paralleled in visual or written interactions. To have any practical significance, therefore, a VA UI must flexibly accommodate different command words, tempos in which they are spoken, and ways in which turn-taking is signaled in the language in which the human-machine conversation is taking place. Put another way, designing a VA UI to be more than a technical curiosity requires more than simply adding (overlaying, substituting) command words to a DTMF service. All users, whether first-time, average, or experienced, must find the UI highly acceptable and easy to use. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> On the other hand, it has been the accepted wisdom that present-day software technology is too rudimentary to make possible user interfaces that are actually easy to use. U.S. Pat. No. 5,748,841, issued May 5, 1998, to Morin et al., expresses this view as follows: &ldquo;In one respect, the problem may be that even complex computer applications and computer programs do not provide the flexible input/output bandwidth that humans enjoy when interacting with other humans. Until that day arrives, the human user is relegated to the position of having to learn or acquire a precise knowledge of the language that the computer application can understand and a similar knowledge of what the computer application will and will not do in response. More precisely, the human user must acquire a knowledge of enough nuances of the application language to allow the user to communicate with the application in syntactically and semantically correct words or phrases.&rdquo;</paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Thus, the state of the art in user interface technology has explicitly assumed that effective use of a practical user interface requires the user to learn the syntax and semantics that are employed by the user interface. There has existed an unmet need for a user interface adapted to the conventions of the user&apos;s spoken language. Heretofore this need has actually been considered to be unmeetable with existing software technology. This need has been particularly acute for voice activated user interfaces, because the conventions of spoken language vary much more widely between different communities than the conventions of written language. Furthermore, voice activated services may have greatest potential for growth among users with little computer experience, provided usable VAU Is that follow univeral spoken language principles become available. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> It is an object of the present invention to provide a method of designing language-oriented user interfaces for voice activated services. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> The present invention provides, in a first aspect, a method for designing a voice activated user interface, the method comprising separately selecting a vocabulary set and a prompting syntax for the user interface based on results of first testing with subjects from a target community. The method further comprises jointly optimizing the vocabulary set and the prompting syntax based on results of second testing with subjects from the target community. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In a second aspect, the invention provides a method for selecting a vocabulary set for a voice activated user interface. The method of this aspect comprises collecting responses to task-oriented questions eliciting commonly used names for tasks and task-related items, and selecting a plurality of responses from the collected responses based on frequency of occurrence in the collected responses. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> In a third aspect, the invention provides a computer system and computer software providing a service through a voice activated user interface. The computer system comprises a storage and a processor. The storage has a vocabulary of command words stored therein, each command word being selected from responses to questions posed to members of a test group. The processor interprets a spoken response based on the stored command words. The computer software comprises instructions to perform the corresponding operations. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> In a fourth aspect, the invention provides a method for defining a prompting syntax for a voice actuated user interface. The method of this fourth aspect comprises identifying an initial value for each of one or more syntax parameters from samples of dialogue in a conversational language of a target community. The method further comprises specifying an initial temporal syntax for the user interface based on the one or more identified initial values. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In a sixth aspect, the invention provides a method for optimizing a prompting syntax of a voice actuated user interface, the method comprising testing performance of tasks by subjects from a target community using a the interface implemented with a command vocabulary and a temporal syntax each selected for the target community. The method of this aspect further comprises modifying the temporal syntax based on results of the testing. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> In a seventh aspect, the invention provides a method for defining a prompting syntax for a voice activated user interface, the method comprising specifying an initial temporal syntax for the user interface based on initial syntax parameter values identified through dialogue analysis. The method of this aspect also comprises modifying the initial temporal syntax based on results of testing user performance with the user interface using a selected command vocabulary with the initial temporal syntax. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In an eighth aspect, the invention provides a method for optimizing a voice activated user interface, the method comprising configuring the user interface with a vocabulary of command words including at least one word indicating a corresponding task and selected from plural words for the task based on frequency of use. The method of this aspect also comprises changing at least one of a command and a syntax parameter of the user interface based on results of testing the user interface with speakers of a target language. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In a ninth aspect, the invention provides a method for adaptive error handling in a voice activated user interface. The method comprises detecting that an error has occurred in a dialogue between the user and the user interface based on a change in behavior of the user. The method further comprises reprompting the user when the error is an omission error, and returning to a previous menu state responsive to a correction command by the user when the error is a commission error. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> In a tenth aspect, the invention provides a method for adaptive error handling in a voice activated user interface. The method of this aspect comprises detecting that an error has occurred in a dialogue with the user interface following a prompt delivered according to a first prompting structure, and reprompting the user according to a second prompting structure when a count of errors exceeds a predetermined value. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In an eleventh aspect, the invention provides a method for adaptive error handling in a voice activated user interface, the method comprising selecting an error prompt level based on an accumulated number of user errors when a user error occurs in a dialogue between the user interface and a user. The method of this aspect further comprises reprompting the user according to the selected error prompt level. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In a twelfth aspect, the invention provides a computer system and computer software providing a service to a user through a voice activated user interface. The computer system comprises a storage and a processor. The storage stores a menu of commands usable by the user in a dialogue between the user and the user interface. The processor detects an error in the dialogue based on a change in behavior of the user, reprompts the user when the error is an omission error, and returns to a previous menu state responsive to a correction command when the error is a commission error. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In a thirteenth aspect, the invention provides a computer system and software providing a service to a user through a voice activated user interface, the computer system comprising a storage and a processor. The storage stores a menu of commands usable by the user in a dialogue between the user and the user interface. The processor prompts a command selection by the user according to a first prompting style, detects an error in the dialogue when the error occurs, and prompts a command selection by the user according to a second prompting style when a count of errors by the user during the dialogue exceeds a predetermined value. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In a fourteenth aspect, the invention provides a method for prompting a user of a voice activated user interface. The method of this aspect comprises pausing for a first predetermined interval after presentation of a label identifying a current menu state of the user interface. The method further comprises presenting to the user a command option for the current menu state only when a command is not received from the user during the predetermined interval. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In a fifteenth aspect, the invention provides a method for developing an automatic speech recognition (ASR) vocabulary for a voice activated service. The method comprises posing, to at least one respondent, a hypothetical task to be performed and asking each of the at least one respondent for a word that the respondent would use to command the hypothetical task to be performed. The method of this aspect further comprises receiving, from each of the at least one respondent, a command word developing a list of command words from the received command word, and rejecting the received command word, if the received command word is acoustically similar to another word in the list of command words. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Additional objects and advantages of the invention will be set forth in part in the following description and, in part, will be obvious therefrom or may be learned by practice of the invention.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Further features and advantages of the present invention, as well as the structure and operation of various embodiments of the present invention, will become apparent and more readily appreciated from the following description of the preferred embodiments, taken in conjunction with the accompanying drawings of which: </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram illustrating a general context for and several embodiments of the present invention; </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows an overview flow diagram of a method provided by the present invention; </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a more detailed flow of a method for vocabulary selection provided by the present invention; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows an chart of command sub-menus and command functions for an exemplary voice controlled voice mail service; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a table of exemplary vocabulary testing questions adapted for use with various aspects of the present invention; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows a flow diagram illustrating a method of selecting an initial temporal syntax as provided by the present invention; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A and 7B</cross-reference> respectively show a template of a prompt grammar provided by an aspect of the present invention and an example prompt grammar for the illustrated template; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows a flow diagram illustrating a prompting method provided by the present invention; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> shows a flow diagram illustrating a secondary prompting structure provided by the present invention; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows a flow diagram illustrating an error handling method provided by the present invention; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows a flow diagram illustrating another error handling method provided by the present invention; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows a flow diagram illustrating a method for adaptive prompting levels as provided by the present invention; and </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a block diagram illustrating a general error handling procedure of the present invention.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> Reference will now be made in detail to the presently preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings, wherein like reference numerals refer to like elements throughout. </paragraph>
<paragraph id="P-0044" lvl="7"><number>&lsqb;0044&rsqb;</number> Overview </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> illustrates a computer system <highlight><bold>1</bold></highlight> that provides both a general context for and several selected embodiments of the present invention. System <highlight><bold>1</bold></highlight> may itself provide a useful service to users, or system <highlight><bold>1</bold></highlight> may constitute a &ldquo;front end&rdquo; through which users communicate with another system coupled to system <highlight><bold>1</bold></highlight>, such as computer system <highlight><bold>3</bold></highlight>. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> Computer system <highlight><bold>1</bold></highlight> includes a storage <highlight><bold>8</bold></highlight>, which may be a mass storage device (such as a magnetic or optical disk drive), a memory device, or other suitable data storage device. A processor <highlight><bold>6</bold></highlight> uses programs and data retrieved from storage <highlight><bold>8</bold></highlight> to provide a VA UI <highlight><bold>10</bold></highlight> through which a user (not shown) can interact with computer system <highlight><bold>1</bold></highlight>. The user may provide inputs to system <highlight><bold>1</bold></highlight> through a sound conversion device such as microphone <highlight><bold>12</bold></highlight>. Typically responses or other information may be output to the user through a sound generating device such as loudspeaker <highlight><bold>16</bold></highlight>, which preferably generates synthesized or recorded voice sounds. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The VA UI <highlight><bold>10</bold></highlight> is preferably implemented by a software program running on processor <highlight><bold>8</bold></highlight> and conceptually illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> as a dashed box including on the one hand a command vocabulary stored in the storage <highlight><bold>8</bold></highlight>, and on the other hand a process running on the processor <highlight><bold>6</bold></highlight>. The process, labeled &ldquo;MENU STATES&oplus;TIMING&rdquo; in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, defines menu states for the VA UI <highlight><bold>10</bold></highlight> and timing for the flow of a dialogue between a user and the VA UI <highlight><bold>10</bold></highlight>. Alternatively, VA UI <highlight><bold>10</bold></highlight> may be implemented in special purpose circuits that may be composed of integrated circuits or discrete components. Computer system <highlight><bold>1</bold></highlight> may be used by the user, through interactions with the VA UI <highlight><bold>10</bold></highlight>, to obtain services or to perform tasks. These services may be performed by other software programs running on processor <highlight><bold>8</bold></highlight> or by one or more other processors (not shown) included in computer system <highlight><bold>1</bold></highlight>. Alternatively, the services or task performance may be provided by any of peripheral devices <highlight><bold>16</bold></highlight>, <highlight><bold>18</bold></highlight>, etc., which may be included in computer system <highlight><bold>1</bold></highlight>, or by computer system <highlight><bold>3</bold></highlight> in communication with computer system <highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> The present invention embodies novel and unusual concepts for designing a voice activated interface such as VA UI <highlight><bold>10</bold></highlight>. Heretofore there have existed few de facto guidelines for design and development of a VA UI. Consistent with the fact that few services and deployments exist, all of the existing principles have been ad hoc in nature and narrow in scope. The user has been expected to adopt the vocabulary of the UI, without any recognition that the user might naturally choose different words to designate given tasks. Further, there has been a failure to consider explicitly the possibility of dialog management through verbal (or implicit) &ldquo;turn taking,&rdquo; in which an opportunity for response is signaled by the manner of speaking, and a response is anticipated. Even more so, the existing approaches have failed to recognize the effects on VA UI performance of variations in social interactions from country to country, or even from region to region within a country. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The present invention proceeds from the realization that an effective VA UI should be designed to account for two complementary aspects of spoken dialogue that roughly correspond to the linguistic concepts of semantics and syntax. These paired concepts appear in a dialogue as content and manner of speaking, and they correspond to the functional characteristics of parallel association and temporal linearity. Hence &ldquo;verbal semantics,&rdquo; or simply &ldquo;semantics,&rdquo; will here encompass what the words mean and when the meaning of a concept is understood. &ldquo;Verbal syntax,&rdquo; or simply &ldquo;syntax,&rdquo; includes the temporal structure underlying the sequence of spoken words and the grammatical relationships between the words. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The invention provides a universal framework that expressly accounts for the distinct aspects of semantics and syntax in a VA UI. The invention also provides a mechanism for explicitly accommodating cross-cultural spoken language variations in verbal communication. The semantics of the VA UI can be designed to incorporate commonly used words in the spoken language of the intended users. The specific language variant as spoken by the expected user population for the service will be called the &ldquo;target language.&rdquo;</paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Further, the invention allows the VA UI to incorporate the syntactic conventions particular to the language and culture of the expected users. The community of expected users will be called the &ldquo;target community.&rdquo; A &ldquo;conversational language&rdquo; of the target community is a language habitually used by members of the target community for routine conversations such as casual talk, routine purchases or business transactions, and so forth. Typically the target language of the VA UI will be such a conversational language of the target community. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> A key discovery embodied in the present invention is that the design of different components of a VA UI can proceed separately. That is, it has been found that the design process for a VA UI can be &ldquo;decoupled&rdquo; based on linguistic universals as applied to spoken language. The decoupled components are defined and refined separately, and then combined in the task domain for integrated optimization. The UI design, testing and modification processes of the present invention focus on the means to decouple content (semantics) and manner (syntax) in a systematic way. The recognition that such a decoupling is possible, and implementation of this decoupling in a structured methodology, permits significant improvement in performance of the resulting VA UI. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a conceptual diagram of a VA UI design process of the present invention. The first step is to decouple UI semantics and syntax, to the degree possible. Definition of the call flows for the target application is conceptually represented by block <highlight><bold>20</bold></highlight>. The analysis of semantics and syntax are then &ldquo;decoupled&rdquo; by following separate design tracks for vocabulary and temporal structure, respectively. These separate design tracks can be implemented either serially or in parallel. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Block <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> represents the semantics design track, which encompasses vocabulary testing and selection of a language-specific preferred vocabulary set. These procedures will be discussed in detail below with reference to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. Block <highlight><bold>60</bold></highlight> represents the syntax design track, which corresponds to proposing an initial structure for temporal testing on the sequences of temporal operations leading to selection of initial syntax parameters for specification of an initial language-specific syntax structure. Whereas the vocabulary testing track centers around a question-and-answer paradigm to elicit information relating to word content, the syntax testing track of block <highlight><bold>60</bold></highlight> centers around a paradigm of eliciting spoken &ldquo;sentences&rdquo; from the test subjects. In this context, a &ldquo;sentence&rdquo; may be a grammatically correct sentence, a phrase, a series of phrases, or any other fragment of spoken language for which the temporal structure may be characteristic of spoken conversation in the target community. Procedures for syntax specification will be discussed in detail with reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Block <highlight><bold>70</bold></highlight> represents the integration stage of the design process, where the separate vocabulary set and syntax structure are combined into an integrated language-specific dialogue structure for the UI and tested against performance criteria. Block <highlight><bold>80</bold></highlight> represents the optimization stage of the design process, where the integrated dialogue structure is modified based on the results of the performance testing. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> The customization of the syntax for a target language begins with an analysis of conversational manner, which then permits the specification of the initial temporal syntax for the dialogue. The goal is to identify a syntactical structure incorporating language-specific temporal features, such as pausing and pacing that provide turn-taking cues, and placing them into a temporal template, defined by temporal rules for that grammar. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The invention also embodies the discovery of a general prompt grammar (or syntactical template) that is particularly effective for VA UIs, and a method for prompting users of a voice-activated UI. The method includes a first embodiment in which a menu name is stated to set a context, a first pause for rapid response is provided, and then several sets of menu selections are offered to the user in succession. Each set of menu selections is a conceptual &ldquo;chunk&rdquo; of 2-4 choices. The chunk size, although conventionally thought to be a memory-dependent constant, is here considered to be a culturally-dependent variable. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> With initial semantic and syntactic structures defined, the next step is to combine these structures into a &ldquo;prompting structure.&rdquo; Here the term &ldquo;prompting structure&rdquo; will refer to an integrated dialogue structure composed of a semantically appropriate vocabulary word set implemented with a language-specific temporal syntax. The prompting structure is then optimized as a unit. The present invention provides a method for optimizing the customized semantics and the initial syntax in combination, thereby to fine-tune the syntax and optimize the usability of the VA UI. This approach allows the integrated prompting structure to be fully adapted to the speech conventions of a particular language and culture. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The method involves having each test participant engage in an interaction with the aforementioned words in a baseline syntax to achieve service-specific tasks. The user works to complete the tasks, and data are collected on key variables such as task duration, barge-in frequency and location, and throughput rate. Data also may be collected through interviews and questionnaires. It is preferred that alternative prompting structures are tested and compared to isolate the effects of syntactic changes. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The basic realization of the approach enables selection of the best words the subscriber should say to the service, and construction of the best prompts that the service should say to the subscriber. The approach is general across all spoken languages, encompasses language and cultural universals, and applies to any voice activated service. Voice Control of Voice Mail (VCVM) is used herein to illustrate the VA UI design techniques of the present invention since it provides significant complexity in which to reference VA UI instantiations. However, persons of ordinary skill in the art will readily appreciate that the examples described herein can be easily applied to other VA applications by following a similar methodology. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> The principle of decoupling the semantic and syntactic parts of the UI also provides advantages when applied to error handling. In a further aspect, the invention provides an adaptive error handling and error correction method that employs a general error-handling paradigm of notification, status, and solution, with its own syntax and semantics. As a further embodiment of semantic and syntactic decoupling, the method treats errors of omission and errors of commission separately. </paragraph>
<paragraph id="P-0062" lvl="7"><number>&lsqb;0062&rsqb;</number> Semantic Structure </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> A significant and unusual aspect of the present invention is a method for designing a voice command vocabulary, or &ldquo;wordset,&rdquo; (for voice recognition) with command words chosen to make the VA UI both reliable and easy to use. This method addresses the wordset semantics of the UI and balances common (natural) usage and acoustic (recognition) differentiation. Specifying the vocabulary word set semantics for a VA service begins by addressing the often-conflicting criteria of user acceptance and acoustic discrimination. The process utilized here is to identify command words by asking speakers of the target language indirect questions and to receive responses that contain words most likely to be spoken by service subscribers to invoke a service feature or function. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The design of the semantic component therefore begins with a second level of decoupling in which pure semantics are separated from acoustic analysis. This enables a set of optimal choices for the overall vocabulary set to be specified. The resulting, theoretically semantically optimal vocabulary set is then re-combined with acoustics and optimized in the context of sub-vocabulary recognition accuracy. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> An embodiment of the method may proceed according to the following outline. First, a basic set of questions in the target language is prepared. The questions are designed to elicit responses that are words (or short phrases) commonly used to identify outcomes or commands for the target VA application. Frequent responses are selected as likely command words and grouped into subvocabularies corresponding to the various command menus of the service application. Acoustic analysis of each subvocabulary identifies pairings that may present problems for acoustic differentiation, and appropriate substitutes are selected from the list of semantically equivalent responses. Some vocabulary words occur in multiple subvocabularies, so analysis is performed for each word across all applicable subvocabularies. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a flow diagram, corresponding to block <highlight><bold>30</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, that details implementation of the invention to select a preferred vocabulary set for the target application and the target community. The illustrated method encompasses operations for vocabulary testing, followed by acoustic differentiation. The goal of the sequential method is to identify a final set of most likely words that can be expected to be spoken in the target language as commands to the voice-activated service. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> The goal of the vocabulary test is to identify a final set of most likely words that can be expected to be spoken in the target language as commands to the voice activated service. Here, &ldquo;word&rdquo; means a word or phrase that is spoken to indicate an integral task concept. For example, &ldquo;erase&rdquo; may be used to instruct the system to erase a message just recorded, while skip password&rdquo; may be used to instruct password verification to be omitted. Thus, in this description the technical term &ldquo;word&rdquo; is not limited literally to single words in the target language. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> In the following description, occasional reference will be made to a voice-controlled voice mail (VCVM) service as an example VA application. These references to the VCVM service are purely for purposes of concrete examples and are not intended to imply that the present invention is limited to voice mail services. Rather, as noted above, the invention provides a universal framework applicable to all voice activated services. Examples of such services in telecommunications fields include personal assistant, voice activated dialing, directory assistance, reverse directory assistance, call routing, switch-based feature activation, and so forth. The invention also has application to voice activated services in other areas of commerce and industry, as will be apparent to those of skill in the art. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The first stage of the illustrated method, at block <highlight><bold>310</bold></highlight>, is to select those command functions of the target application for which command words will be specified using vocabulary testing. It is preferred, for cost effectiveness of the design process, that only command functions meeting certain criteria be specified by testing in the target language. The selection process of block <highlight><bold>310</bold></highlight> will now be explained. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a set of sub-menus and command words (in American English) for the exemplary VCVM service. The target service for the VA UI imposes constraints on the set of words which may be used to execute the service. The set of words used in the non-VA service, such as the command words illustrated in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, provides an initial guess at the target words to be investigated. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> This base set may be composed of the existing key words used in the call flows. By identifying the key words and looking at each call flow of the service, a table can be made which lists the word and the call flow in which the word is used. The base words are then rank-ordered according to frequency of use in the service. This provides a quantitative measure (also called a &ldquo;local performance indicator,&rdquo; or &ldquo;local PI&rdquo;) by which a cost-benefit analysis can be performed. The cost-benefit analysis identifies the base words for which target-language specification is expected to have the greatest impact on the service. In other words, specification of these high-ranking (i.e., most frequent) words will provide the greatest benefit in usability of the VA UI for the fixed cost to obtain each specification result. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> It has been found that words in the base set tend to aggregate into three major categories, which are termed &ldquo;universal,&rdquo; &ldquo;uncertain,&rdquo; and &ldquo;distributed.&rdquo; Universal base words are those for which test responses are found to be limited substantially to a single word. Uncertain words are those for which the test responses are more-or-less equally divided across many choices. Distributed words correspond to having one clear preference in the test responses, yet there are other viable alternatives which can also be used. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Base words that are universal or uncertain need not be included in the semantic testing, and therefore the cost of the semantic analysis for those words can be avoided. Instead, for a universal word the preferred procedure is to use the (single) response word as defined by the subscribers. For an uncertain word, the vocabulary word is preferably selected by the service developer from the available responses. This leaves the distributed words of the base set as the command functions selected for specification at block <highlight><bold>310</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The next stage, at block <highlight><bold>315</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, is to prepare questions for the vocabulary testing. These are very simple, general, spoken questions that are posed to volunteer members of the target community. The questions are translated and presented in the target language and are designed to elicit responses from the test subjects (the volunteers) that will be candidates for the final vocabulary set. The objective is to ask questions that will be answered with words commonly used by members of the target community to indicate the application-specific commands or items of the target application. Here a &ldquo;question&rdquo; is a request for a response, irrespective of whether the request is formed as a literal interrogatory statement. For example, an imperative statement beginning &ldquo;Please state the word you would use for . . . &rdquo; would constitute a &ldquo;question&rdquo; for the present purposes. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> An example set of such questions, adapted for use with the exemplary VCVM application discussed herein, is illustrated in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. The preferred question format follows a scenario/goal paradigm. For example, the question may describe a scenario relating to a specific task, and then specify a goal related to that task. In a preferred form of the questions, a short introductory statement orients the listener to the nature of the task. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The questions are designed to elicit responses relevant to the target application. Thus, the example questions in <cross-reference target="DRAWINGS">FIG. 5</cross-reference> relate to functions and tasks ordinarily performed with a voice mail application. The questions are preferably ordered according to difficulty, with easy questions in the beginning, so that the test subjects build confidence as they perform the test. Also, it is desirable that similar questions not be located close together in the question sequence. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> It is preferred that the questions be purposely formulated to be vague, in order not to pre-dispose the subject to selection of words that are used in the prompting questions. This helps to ensure that the subject does not merely &ldquo;parrot&rdquo; words that are heard in the particular prompt or in a previous question. It is also preferred that the questions be open-ended, rather than multiple-choice. The open-ended format has the advantage of forcing the subject to formulate an original response, rather than merely choosing from a list. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> A second stage of the question preparation, after the questions have been formulated and translated, is a pilot test to refine the questions prior to the primary vocabulary testing. The purpose of the pilot test is to finalize the word-set questions by identifying and eliminating any confusing aspects. This ensures that the final word-set questions have no ambiguity and are readily understood. Preferably the pilot test comprises presenting the questions to a few subjects (for example, 4-5 members of the target community) in the target language. A tape recorder may be used to record the questions and responses for later, more detailed analysis. Also, the test questions may be followed by post-test interviews. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> A native speaker then records the questions onto a computer running in data collection mode using a &ldquo;voice form&rdquo; IVR application. In a particularly preferred implementation, the test system includes a set of telephones accessing a TRILOGUE&trade; computer, by Comverse Network Systems, Inc. The TRILOGUETM computer has multiple active incoming channels and typically runs a set of, for example, 30 data boxes (&ldquo;D-boxes&rdquo;) in linked mode to support 30 vocabulary test questions. It is preferred that the recordings be prepared after the pilot test and any appropriate clarification of the question set. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the next phase of the method is the main vocabulary testing at block <highlight><bold>320</bold></highlight>. This trial includes presentation of the test questions to a group of subjects from the target community and collection of responses. In the preferred implementation the trial participants (preferably at least about 30, and more preferably up to 50 or more to tighten the confidence intervals of the results) call in to the platform and listen to the questions. Each question is a prompt that invites the participant to speak a response. In the preferred implementation the responses are recorded by the trial platform. In any case, the presentation of the questions and collection of responses generates the raw data to be used for semantic analysis. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Various refinements may be included in the off-line semantic analysis (blocks <highlight><bold>325</bold></highlight>-<highlight><bold>360</bold></highlight>). </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> After the data collection is completed at block <highlight><bold>320</bold></highlight>, the translator may assist in isolating the words spoken and placing them in a spreadsheet so that a word frequency analysis can be performed. The translator preferably identifies words that are slang or uncommon. Normal conversations also include thought-transitioning sounds, such as interjections, conjunctions or vocalized pauses. These &ldquo;non-content&rdquo; words and utterances are preferably identified in the responses for each question and removed from the word frequency analysis. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The final tallies in the frequency distribution (block <highlight><bold>325</bold></highlight>) represent the likelihood of occurrence of a word to the question or to similar questions. The candidate word selection (block <highlight><bold>330</bold></highlight>) may employ a few basic rules for identifying preferred words based on the tallies. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> A word spoken by all the subjects is most certain to be the preferred word for that particular Task (&ldquo;universal&rdquo;, as defined earlier). On the other hand, a small number of semantically equivalent responses to a question indicate no clear preference (&ldquo;distributed, as defined earlier)ln the latter situation the response word with best recognition accuracy is selected. When there are many different responses to a question, no preference is shown and the word is chosen to advantage the ASR engine (&ldquo;uncertain&rdquo;, as defined earlier). </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> With this approach, it is possible to identify for each sub-menu command words that are both easy to use and have high recognition accuracy. When the selected words are mapped onto the anticipated menu structure of the target application (block <highlight><bold>335</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), some menus may have words with acoustically similar pronunciations, or words of short length, or both. Each of these conditions will adversely impact recognizer performance, and so their effects must be reduced. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> For example, a token adjective may be added to a short word, thereby reducing the potential for confusion with a similar short word in the same sub-menu. Preference may be given to a word that is more common, even though another word is semantically equivalent, which would maintain consistency with a selection for an earlier sub-menu. Occasionally a word is proposed because it is the best semantic match (closest equivalent meaning) in the target language for the command functionality. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Semantic optimization is performed off-line. First, at block <highlight><bold>325</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> frequency distribution is generated for the collected responses. An analysis is then performed on the word frequencies at block <highlight><bold>330</bold></highlight>, which enables the selection of frequently-occurring responses as likely command words for the VA UI. The selected responses provide a preliminary, target-language vocabulary for the interface. The selected candidate words are then divided at block <highlight><bold>335</bold></highlight> into appropriate sub-vocabularies (compare the various menus shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>). </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> It is noted that the candidate words selected at block <highlight><bold>330</bold></highlight> are only likely command words for the VA UI. In fact, it is preferred that the selection procedure of block <highlight><bold>330</bold></highlight> include selection of alternatives to the preferred candidate words. This is because some of the selected candidate words may have acoustic similarities to other candidate words in the same sub-vocabulary. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> For each sub-vocabulary, a basic acoustic analysis is performed at block <highlight><bold>340</bold></highlight> to quantify any acoustic similarities and to identify words that must be reviewed. An example format for the basic acoustic analysis will be presented below. If a pair of words is found to be acoustically similar (YES at block <highlight><bold>345</bold></highlight>), then the method proceeds to block <highlight><bold>350</bold></highlight> where an alternative for at least one of the similar words is selected. The procedure then returns to block <highlight><bold>340</bold></highlight> for basic acoustic analysis of the sub-vocabulary including the substituted alternative word(s). </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The subvocabularies are tested in the order of most likely frequency of usage. For the example VCVM, the Main Menu is tested first, then the End of Message Menu, then Mailbox Options Menu, etc. Each time a sub-vocabulary passes the acoustic similarity test at <highlight><bold>345</bold></highlight>, the method advances to the next sub-vocabulary (block <highlight><bold>355</bold></highlight>) until no more sub-vocabularies remain to be tested (block <highlight><bold>360</bold></highlight>). This leads to definition of a final vocabulary, which is then proposed for more comprehensive acoustic analysis in view of the specific ASR engine (i.e., the speech recognizer) to be used in the VA UI. The comprehensive analysis, in turn, validates the final vocabulary word set as satisfying the system performance criteria for recognition accuracy. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> In a preferred implementation of the basic acoustic analysis (block <highlight><bold>340</bold></highlight>), a phonetic transcription is first performed using the ARPABET representation. Common alternative pronunciations can also be included. Rules that characterize the potential types of deletion and substitution errors are applied. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In a particularly preferred embodiment, the deletion rules applied between two words may be as follows: 1&equals;same number of syllables in a pair of words; 2&equals;exact vowels in a pair of words; 3&equals;exact vowel in identical syllables in a pair of words. Also, the substitution rules applied between two words in this preferred implementation may be as follows: 1&equals;identical phonemes anywhere in the words; 2&equals;identical phoneme in the same syllable position; 3&equals;identical vowel in the same syllable; 4&equals;identical vowel with the identical phoneme context; and, 5&equals;identical phonemes and the same vowel in the same syllable. If any subvocabulary word-pair contains more than one full set of rule matches, the pair is considered a candidate for modification using alternative words determined from the initial semantic testing and analysis. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> A preferred enhancement of the basic approach is to tune the final vocabulary to the target language and the target service application. In this procedure, consistency of usage throughout the UI may be considered for both grammatical forms and phrase structures. For example, candidate words may be considered to describe actions which can be taken to manage a group list in the example VCVM application. In this situation it may happen that the frequency analysis (block <highlight><bold>325</bold></highlight>) reveals no strong preference among the test subjects for words to be used. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> In this example situation it is possible that a word choice translating literally to &ldquo;group list&rdquo; or &ldquo;options list&rdquo; may be passed over in favor of a word meaning &ldquo;distribution list.&rdquo; One reason for the latter choice would be to maintain semantic equivalence with the English language counterpart. Similarly, a command may be modified to a different verb form (viz., progressive tense vs. infinitive) to maintain consistent usage of verb forms (action words) where possible. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Some words may be specific to the application and have no clear counterpart in the target language. In such cases, command words may be selected as those commonly understood, even though semantic equivalence to the functionality being named is less than perfect. Article adjectives may be added when the impact on the length of the transaction is slight compared to the amount of clarity or user friendliness it added. In some languages, adding a particular article may make the actual utterance longer and hence more attractive for an interrupt word. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Using the same word across multiple menus reduces the cognitive load on the user, because the word then refers the same concept and consequently leverages the user&apos;s comprehension and learning from an earlier menu state into later states. For example, using a word as a command to enter a menu and then having the same word announced (in echo) as the name of that menu is considerable positive reinforcement to the user. Similarly, parallelism may be used advantageously to reinforce similarities between objects of commands. For example, a word used to name the primary fax telephone number may indicate in one menu that the digits are to be entered, while in another menu the same word may indicate that the number is being used for message transfer. </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> Syntactic Structure </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the second design track (which can proceed in parallel with the semantic analysis outlined above) is to identify an effective syntax. The present invention provides a method for defining a formal structure (called a &ldquo;syntax&rdquo;) that includes the temporal rules and prompting manner to be used in the VA UI. Here a &ldquo;syntax&rdquo; for a VA UI is defined to be a structure for sequential presentation of spoken information defined by a set of rules. A conversational syntax may be implemented in a VA UI for a target service and a target language by specifying a prompt structure according to a set of grammatical rules. The components of the structure include context cues (e.g., menu labels), carrier phrases (explicit or implicit), slots (places) for words, intervals for pauses between words and phrases, intonation contours for words and phrases, and other prosodic features. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> The existing approaches to VA UI design have failed to recognize that improved VA UI performance can be realized by identifying and taking advantage of those areas where the verbal modality of dialogue differs from the written modality in the element of time. An effective VA UI must prompt the user in a manner that both provides easy-to-understand information for response and also must signal when it is time for the user to respond with commonly used command words. Recognition of these requirements leads to a framework within which to consider and implement cues for &ldquo;turn-taking,&rdquo; that is, grammatical and temporal indications that a unit of information has been conveyed and an opportunity for response will follow. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Any baseline syntax may be constructed with tokens (words) having some semantic applicability to the service. However, syntactic parameters are more accurately specified for a target language if the semantic content is chosen as described above, so as not to add additional cognitive load to the user who is intended to react to manner in which the message provided by the baseline syntax. Optimization of the UI in view of this coupling is described below. For a specific language, the temporal structure (the syntax) itself requires specification of pace, pauses, intonational cues, and means to present information &ldquo;chunks&rdquo; (e.g., groups of options). Every language and culture follows some conversational universals, but speed of presentation, length of turn-taking pauses, and clause (e.g., chunk) intonation all vary in different degrees between specific languages. Pauses are significant for at least two reasons: they mark out the boundaries of informational chunks, by highlighting beginning and ending, and they signal turn-taking positions in the dialogue. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The method provided by the invention for optimizing syntax may be implemented with a specialized simulation environment in which the simulator performs perfect speech recognition. This approach is preferred because signal recognition issues (ASR) can be thereby decoupled from the user interface issues posed by the prompting structure. One desirable platform for such simulations is VISIO Professional and Technical 5.0 by VISIO Corp., of Seattle, Wash. Another simulation tool with excellent features is Unisys Natural Language Speech Assistant 4.0 by Unisys Corp., of Malvern, Pa. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> The test prompts of the service provide the information to complete the tasks and to achieve the goal. Non-service specific tasks are also presented if they embody a prompt structure similar to the specific service, so as to de-couple service dependence while addressing the spoken syntax of the target language and culture. Turn-taking locations, content of the verbal information, rate of presentation, grouping of options, and pause durations are implicit cues given to the subscriber by the test prompts. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows a flow diagram for a method of the invention for identifying an initial temporal syntax identification. The illustrated method permits modification of parameters in order to accommodate language dependencies. At blocks <highlight><bold>610</bold></highlight>-<highlight><bold>640</bold></highlight>, samples of dialogue are collected relating to service tasks for the target application. In a preferred implementation, tasks are posed for achieving a set of service-specific goals. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In a particularly preferred embodiment, as illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the subjects are requested to perform several tasks calling for spoken responses. Different speaking tasks may emphasize different parameters for the temporal dimension of spoken dialogue in the target language. The purpose of these tasks generally is to generate (for capture and analysis) samples of conversational speech containing phrase parts or other speech elements from the target language that contain temporal features that contribute to clear, concise dialogue. It is preferable that several versions of each speaking task be performed by each of a group of subjects (10 to 50 or more). Larger numbers of versions for each task and larger numbers of subjects will tend to yield more accurate initial estimates of the optimal values for the speech parameters of interest in the target language. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> At block <highlight><bold>610</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, the task is to respond to an open-ended question with a suitable sentence that should contain a carrier phrase, such as (in English) &ldquo;How would you request someone&apos;s telephone number&quest;&rdquo; or, &ldquo;How would you say that you didn&apos;t hear the telephone number&quest;&rdquo; Samples of such statements provide initial estimates for overall pace and rate of presentation in a comfortable yet effective dialogue in the target language. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> At block <highlight><bold>620</bold></highlight>, the target task is to recite a list of items, generally having greater than 5 items, in response to an open ended question such as &ldquo;Say the colors of the rainbow.&rdquo; Each response by a test subject is a spoken recitation of a list and provides sample data containing durations and locations of pauses in such a spoken list in the target language. It is preferable that several different lists having various numbers of commonly known items (e.g., fruits, trees, cities) be requested from each subject. The request prompts may be written or spoken. Spoken prompts are preferred so as to promote spontaneous and natural speech patterns. If written, the request prompts may use different punctuation between the list items (e.g., items separated by commas, or semicolons) to test for context variations that affect the manner in which such lists are spoken. The request prompts for different lists are preferably interspersed with each other and with request prompts for other tasks (&ldquo;shuffled&rdquo;) to test for inter-recitation dependencies. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> The target task of block <highlight><bold>630</bold></highlight> is to have test subjects say a telephone number. It is preferable that responses are collected to open ended questions such as &ldquo;Please say your office telephone number.&rdquo; Alternatively, or in addition, the subjects may be requested to recite currency amounts or other numerical quantities that may be used in typical conversations in the target language. Further, at block <highlight><bold>640</bold></highlight>, the subjects are presented with sentences that contain a question probing for a yes/no format (e.g., &ldquo;What would you say to someone if you&apos;re not sure whether they said yes or no&quest;&rdquo;). The spoken responses provided for each of blocks <highlight><bold>610</bold></highlight>-<highlight><bold>640</bold></highlight> are collected (e.g., recorded) for analysis. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The task requests of blocks <highlight><bold>610</bold></highlight>-<highlight><bold>640</bold></highlight> are considered to provide particularly preferred procedures for effectively identifying the primitive, temporal &ldquo;phrase&rdquo; parts of the types of &ldquo;sentences&rdquo; in the target language that are likely to be spoken in a dialogue with the VA UI. The temporal components of such questions provide the initial parameter values that are specified in the initial temporal syntax. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> At block <highlight><bold>640</bold></highlight>, based on the response of the key variables, desirable values of the syntax parameters are identified. A consistent set of the desirable parameter values is selected at block <highlight><bold>650</bold></highlight>, whereby the initial syntax is specified. </paragraph>
<paragraph id="P-0110" lvl="7"><number>&lsqb;0110&rsqb;</number> Integration and Optimization </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Again returning to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the prompts used by the service (i.e., the outputs from the VA UI to the subscriber) are preferably tested again at block <highlight><bold>70</bold></highlight> after being integrated with the final vocabulary set. The combined syntax and semantics, now adapted for the target language, can then be optimized at block <highlight><bold>80</bold></highlight>. The objective of this joint optimization is to ensure that each prompt of the syntax structure reliably elicits from the subscriber a spoken command included in the words of the relevant sub-vocabulary wordset. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> As in the procedure for selecting an initial syntax, the prompts are preferably tested in the entire service task domain to ensure appropriate interpretation by the subscriber. The subjects are tested using the language-specific temporal syntax to verify that, for the entire service, functions are reliably executed in the easiest and most efficient manner. Similar to the protocol for selecting the initial syntax, the subjects may be asked to complete several realistic tasks that exercise all major call paths of the service. The tests may be videotaped for subsequent review and quantification of results in areas where performance may be improved. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> The preferred prompt testing for dialogue sample collection may be implemented by the following protocol. A &ldquo;session&rdquo; is a service interaction where a user is directed to achieve specific tasks, works to complete tasks, and receives a questionnaire for comments on how well the syntax helped complete the tasks. Subjects are usually videotaped for later review. After completion of a set of tasks, relevant variables are measured and performance values determined. Questionnaires may be analyzed for additional information. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> A task set is preferably composed of two tasks, one performed after the other, with the first task testing basic functions and enabling learning to take place. The second task is more complex and allows measurement of learning effects. Each task may be composed of a set of from 2 to 6 subtasks. The subtasks in Table 1 below are typical of activities required in the exemplary VCVM service:  
<table-cwu id="TABLE-US-00001">
<number>1</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="35PT" align="center"/>
<colspec colname="2" colwidth="182PT" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center">TABLE 1</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>Sub-task</entry>
<entry>Description</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>1.</entry>
<entry>Review messages and save or delete them, if the name and</entry>
</row>
<row>
<entry></entry>
<entry>telephone number is present.</entry>
</row>
<row>
<entry>2.</entry>
<entry>Transfer a specific message to another mailbox.</entry>
</row>
<row>
<entry>3.</entry>
<entry>Change the greeting.</entry>
</row>
<row>
<entry>4.</entry>
<entry>Change the passcode.</entry>
</row>
<row>
<entry>5.</entry>
<entry>Review messages in linked-listen mode.</entry>
</row>
<row>
<entry>6.</entry>
<entry>Speak a &ldquo;wake-up&rdquo; word to interrupt playback of a message.</entry>
</row>
<row>
<entry>7.</entry>
<entry>Correct a small number of simulated speech recognition</entry>
</row>
<row>
<entry></entry>
<entry>errors.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Key variables (performance indicators) are preferably tracked through each testing session. Identifying how these variables change in different conditions determines parameter settings for best overall system performance. A preferred set of key variables to be tracked in the testing sessions is set forth in Table 2 below. The key variables relevant to initial syntax identification are primarily those of the first category, for user interface issues. Key variables of the second category (for ASR issues) may also be tracked in the testing and are relevant at later stages of the VA UI development process.  
<table-cwu id="TABLE-US-00002">
<number>2</number>
<table frame="none" colsep="0" rowsep="0">
<tgroup align="left" colsep="0" rowsep="0" cols="2">
<colspec colname="1" colwidth="112PT" align="left"/>
<colspec colname="2" colwidth="105PT" align="left"/>
<thead>
<row>
<entry namest="1" nameend="2" align="center">TABLE 2</entry>
</row>
<row>
<entry></entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
<row>
<entry>User Interface</entry>
<entry>ASR Technology</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</thead>
<tbody valign="top">
<row>
<entry>Task duration measures the amount</entry>
<entry>Rejection rates and recovery from</entry>
</row>
<row>
<entry>of time has spent attempting to</entry>
<entry>rejections are monitored.</entry>
</row>
<row>
<entry>achieve the goal(s). It excludes time</entry>
</row>
<row>
<entry>spent listening to messages, a greet-</entry>
</row>
<row>
<entry>ing or a passcode.</entry>
</row>
<row>
<entry>The barge-in location and frequency</entry>
<entry>ASR Error Type and location are</entry>
</row>
<row>
<entry>is tracked. Barge-in indicates suffi-</entry>
<entry>logged. A user may mis-speak,</entry>
</row>
<row>
<entry>cient information for a decision, and</entry>
<entry>have a bad accent, say the wrong</entry>
</row>
<row>
<entry>turn-taking. These areas are im-</entry>
<entry>word, or background noise become</entry>
</row>
<row>
<entry>proved by refining turn-taking cues,</entry>
<entry>too loud. Analysis indicates</entry>
</row>
<row>
<entry>and providing better collateral</entry>
<entry>whether ASR technology needs re-</entry>
</row>
<row>
<entry>materials or on-line tutorials.</entry>
<entry>tuning, parameter resetting, or a</entry>
</row>
<row>
<entry></entry>
<entry>speaker fault occurred.</entry>
</row>
<row>
<entry>Throughput rates (successfully com-</entry>
<entry>OVW frequency and location</entry>
</row>
<row>
<entry>pletion the transaction) measures task</entry>
<entry>responses is tracked to determine</entry>
</row>
<row>
<entry>completion. Error handling is</entry>
<entry>that the rejected words can logical-</entry>
</row>
<row>
<entry>examined at points of failure.</entry>
<entry>ly be used as responses.</entry>
</row>
<row>
<entry>Interviews are performed during and</entry>
<entry>The location of yes/no questions,</entry>
</row>
<row>
<entry>after any taskset to identify specific</entry>
<entry>and the responses are tracked. A</entry>
</row>
<row>
<entry>points of trouble with the service,</entry>
<entry>yes/no question impacts through-</entry>
</row>
<row>
<entry>what the user was trying to do, and</entry>
<entry>put. Yes/no questions may also</entry>
</row>
<row>
<entry>how they failed.</entry>
<entry>indicate that the recognizer is</entry>
</row>
<row>
<entry></entry>
<entry>having trouble. Synonyms for yes</entry>
</row>
<row>
<entry></entry>
<entry>or no responses are tracked, and</entry>
</row>
<row>
<entry></entry>
<entry>even captured so these words may</entry>
</row>
<row>
<entry></entry>
<entry>be supported.</entry>
</row>
<row>
<entry>Questionnaires measure satisfaction,</entry>
</row>
<row>
<entry>and potential problem areas and user</entry>
</row>
<row>
<entry>needs. Surveys provide direct infor-</entry>
</row>
<row>
<entry>mation from users and a means to</entry>
</row>
<row>
<entry>track trends in satisfaction.</entry>
</row>
<row><entry namest="1" nameend="2" align="center" rowsep="1"></entry>
</row>
</tbody>
</tgroup>
</table>
</table-cwu>
</paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Depending on the degree of development of the service (software and hardware availability) testing may be performed by a simulation (in vitro). The simulation environment (also called a Wizard of Oz, or &ldquo;WOZ&rdquo; simulation) decouples the ASR technology from the VA UI. This means that the simulator (the &ldquo;wizard&rdquo;) acts as a perfect recognizer, thereby focusing the subject on only task-specific actions toward achieving the application goals. Preferably the simulator allows ASR errors to be injected into the simulation at later stages, in order to observe user actions and to test UI support of error handling. Such testing with controlled ASR errors helps to ensure that the user will be brought back into a successful service execution path when an error occurs in the deployed system. A simulation wizard may be used, as described above with respect to syntax optimization. Alternatively, testing may be performed on a trial platform (in vivo) that includes ASR technology and couples ASR performance back into the service. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In either case, it is preferred that a small number of volunteers (10-15 subjects) be tested to identify any difficulties. The tests are videotaped for subsequent review and quantification of areas of syntactic and semantic performance shortcomings. Tests to determine the values of syntactic parameters are posed to a set of subjects interacting with the service through a set of service-specific goals where the prompts of the service provide sufficient information to complete the tasks to achieve the goal. Turn-taking locations, content of the verbal information, rate of presentation, grouping of options, and pause durations are implicit cues given to the subscriber. The values of these parameters are varied through the tests in order to improve performance in the person-machine VA UI for the target language as used by the target community. Often, competing prompting grammars are tested to isolate the effects of syntactic changes. </paragraph>
<paragraph id="P-0118" lvl="7"><number>&lsqb;0118&rsqb;</number> Adaptive Prompting Method </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> The present invention also provides a new and unique syntactic structure that actually turns to advantage the temporal limitations of voice activated services. Heretofore, all UIs have utilized a simple, serial syntax in which options are stated iteratively, one at a time, and responses are requested only one at time. The present invention utilizes a syntactic structure that supports presentation of a small set of multiple (parallel) options, from which the user can select a desired choice by saying the corresponding command word from the current context at any time. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> The invention provides a general syntactic structure (or &ldquo;temporal template&rdquo;) that includes combining temporal and grammatical cues to signal those points where turn-taking is expected to occur. The speech recognizer can be active at all times, so the subscriber may actually speak at any time. However, the template increases the accuracy of the ASR technology, as well as permits identifying and taking advantage of the resource&apos;s duty cycle, by predicting speech inputs by the user at specific time intervals through use of turn-taking cues. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> illustrates a preferred prompt grammar template <highlight><bold>700</bold></highlight> as provided by the invention. The template begins with a short, spoken Introductory Label <highlight><bold>710</bold></highlight> (such as a menu name) which is designed to orient the listener. The label <highlight><bold>710</bold></highlight> provides a navigational cue (context) as to where the subscriber is in the overall menu structure, and to advanced user, an association with the permitted responses. A first pause <highlight><bold>715</bold></highlight> is then provided of length Pause<highlight><bold>1</bold></highlight>, to allow a short interval where a response may be spoken without hearing any of the available choices of that menu. Pause <highlight><bold>715</bold></highlight>, which will be called a &ldquo;carrier phrase pause,&rdquo; is used by advanced subscribers of the service who know what they want to choose at this point. The pause length Pause<highlight><bold>1</bold></highlight>, however, is not long enough to disrupt the dialogue. These culturally dependent pauses are determined by the syntactic tests described earlier. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> The grammar template <highlight><bold>700</bold></highlight> then breaks the set of menu selections into conceptual &ldquo;chunks&rdquo; of between 2 and 4 choices presented as a group. This grouping of choices improves the usability of the resulting VA UI by calling into service the user&apos;s capacity for parallel association. The preferred chunk size (2-4 choices) provides a small amount of information upon which action can be taken as well as not overload auditory short term memory. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> A first prompting chunk <highlight><bold>720</bold></highlight> begins with a short carrier phrase (e.g., &ldquo;You may say . . . ,&rdquo; or &ldquo;Say . . . ,&rdquo;), then a first group of response options Chunk<highlight><bold>1</bold></highlight> is spoken by the service. It is preferred that the group of choices for Chunk<highlight><bold>1</bold></highlight> includes the rank-ordered, most frequently used commands for the current menu. The pacing and intonation of the chunk is typical for the target language, generally with a slight falling inflection at the end of the last word to signal a grammatical break and an opportunity to respond. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> A second pause <highlight><bold>725</bold></highlight> of length Pause<highlight><bold>2</bold></highlight> is then provided for a response by the user. It is preferred that the pause duration Pause<highlight><bold>2</bold></highlight> be longer than Pausel and of sufficient time length to enable cognitive (decision making) processing and to provide reaction time for the user to select an option from the current chunk. Pause <highlight><bold>725</bold></highlight> is an implicit (syntactic) signal at a conceptual (semantic) boundary that indicates the listener may take a turn and speak. Both the falling intonation and Pause<highlight><bold>2</bold></highlight> signal that this is a turn-taking event. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> If no response is made by the subscriber, the syntax specifies that a second prompting chunk <highlight><bold>730</bold></highlight> be spoken by the service to present a second group Chunk<highlight><bold>2</bold></highlight> of response options. Chunk<highlight><bold>2</bold></highlight> preferably includes the next most frequent set of choices, after the choices offered in Chunk<highlight><bold>1</bold></highlight>. Although grammar template <highlight><bold>700</bold></highlight> as illustrated in <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> includes only two prompting chunks <highlight><bold>720</bold></highlight> and <highlight><bold>730</bold></highlight>, it will be apparent to those skilled in the art that as many such prompting chunks may be provided as are needed to present the current menu options. All of the alternatives in the menu are eventually covered in this manner, so that the subscribers eventually hear all available options. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> It is preferable for the UI to be able to make available all menu specific options at any time. General choices (cancel, help, Main Menu, for example) are preferably unstated but always available, and words from other menus may be accepted whereby the user may directly &ldquo;jump&rdquo; to another menu. However, a prompting structure implementing the template encourages selection from specific chunks of options at each of the pauses <highlight><bold>725</bold></highlight>, <highlight><bold>735</bold></highlight>, etc. This preferential prompting has the additional advantage of allowing greater emphasis on recognition of the response options offered in the preceding prompting chunk (chunk <highlight><bold>720</bold></highlight> for pause <highlight><bold>725</bold></highlight>, chunk <highlight><bold>730</bold></highlight> for pause <highlight><bold>725</bold></highlight>, and so forth). This feature increases the likelihood of successful recognition for the response options most likely to be chosen at each pause. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> After all options are proposed, a closure prompt <highlight><bold>740</bold></highlight> is spoken to indicate that all choices have been provided and a choice should be made (&ldquo;please say your choice now&rdquo;). This is an explicit verbal signal for turn-taking. A final pause <highlight><bold>745</bold></highlight> of duration Pause<highlight><bold>3</bold></highlight> is then provided to signify yet another turn-taking boundary before the system initiates an alternative prompting style. It is preferably that Pause<highlight><bold>3</bold></highlight> is slightly longer than Pause<highlight><bold>2</bold></highlight>, to provide more time for new users to make a final decision. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> provides an example prompt grammar <highlight><bold>750</bold></highlight> as provided by the invention and following the prompt grammar template <highlight><bold>700</bold></highlight>. In the prompt grammar <highlight><bold>750</bold></highlight> an introductory segment <highlight><bold>760</bold></highlight> has verbal content &ldquo;Main Menu&rdquo; and corresponds to the Introductory Label <highlight><bold>710</bold></highlight> of the grammar template <highlight><bold>700</bold></highlight>. A pause <highlight><bold>765</bold></highlight> corresponds to pause <highlight><bold>715</bold></highlight> of the template <highlight><bold>700</bold></highlight> and has a duration (Pause<highlight><bold>1</bold></highlight>) of 250 milliseconds (ms). A prompting chunk <highlight><bold>770</bold></highlight> includes an carrier phrase &ldquo;Please say . . . ,&rdquo; followed by a first chunk of options &ldquo;Messages, Fax or Address Book.&rdquo; A second pause <highlight><bold>775</bold></highlight>, of duration 500 ms (Pause<highlight><bold>2</bold></highlight>), is followed by a second prompting chunk <highlight><bold>780</bold></highlight> providing the options &ldquo;Settings, Help or Introduction.&rdquo;</paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> It is noted that <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> shows additional detail for the illustrated prompt grammar by indicating the presence of pauses (of duration 250 ms, in this example) between the individual list items in each prompt chunk. These so-called &ldquo;intrachunk pauses&rdquo; are natural separation intervals between successive items in a spoken list. It has been found that the most effective duration for such an intrachunk pause is culturally dependent and thus is desirably adjusted when designing a VA UI for a given target community. The intrachunk pauses demark the boundaries between successive list items, just as the &ldquo;interchunk pauses&rdquo; <highlight><bold>775</bold></highlight>, <highlight><bold>785</bold></highlight>, and so forth, demark the boundaries between successive chunks of information. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> It is noted that the second prompting chunk <highlight><bold>780</bold></highlight> omits the carrier phrase (&ldquo;Please say . . . .&rdquo;) that was provided with the first prompting chunk <highlight><bold>770</bold></highlight>. However, this arrangement is not essential to the prompt grammar of the invention. For example, alternative embodiment can use a suitable carrier phrase for the second and subsequent prompting chunks. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> The example prompt grammar <highlight><bold>750</bold></highlight> follows the second prompting chunk <highlight><bold>780</bold></highlight> by a second pause <highlight><bold>785</bold></highlight>, where again the duration Pause<highlight><bold>2</bold></highlight> in this example is 500 ms. A closure prompt <highlight><bold>790</bold></highlight> contains verbal content urging the user to select an option: &ldquo;Please say your choice now.&rdquo; Closure prompt <highlight><bold>790</bold></highlight> is followed by a third pause <highlight><bold>795</bold></highlight>, which in this example is much longer than the pauses <highlight><bold>775</bold></highlight> and <highlight><bold>785</bold></highlight>, or in this case 1000 ms. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates a flow diagram for a VA UI prompting method provided by the invention and corresponding to the prompt grammar template <highlight><bold>700</bold></highlight>. The introducuction, such as a name or descriptive title of a current menu, is announced to the user at block <highlight><bold>810</bold></highlight>. The UI determines at block <highlight><bold>815</bold></highlight> whether a recognizable command is received during the pause <highlight><bold>715</bold></highlight> following the introduction. If pause <highlight><bold>715</bold></highlight> passes without a response, then the method proceeds to block <highlight><bold>820</bold></highlight> where a prompting chunk for the current menu is recited. Block <highlight><bold>825</bold></highlight> determines whether a command is received during the second pause that follows the prompting chunk of lock <highlight><bold>820</bold></highlight>. If no response is detected at block <highlight><bold>825</bold></highlight>, the method tests at block <highlight><bold>830</bold></highlight> whether any more prompting chunks remain to be recited. If so, then the method returns to block <highlight><bold>820</bold></highlight> and the next prompting chunk is recited. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> If it is determined at block <highlight><bold>830</bold></highlight> that no more prompting chunks remain, then the method proceeds to the closure prompt at block <highlight><bold>835</bold></highlight>. A further test is performed at block <highlight><bold>840</bold></highlight> to determine whether a response has been received. The method then preferably switches to an alternative prompting style at block <highlight><bold>845</bold></highlight> and returns control of the device. Another syntactic template may include a counter in block <highlight><bold>845</bold></highlight> to repeat the prompting sequence starting at <highlight><bold>815</bold></highlight> one or more times. If any of the response detection queries <highlight><bold>815</bold></highlight>, <highlight><bold>825</bold></highlight>, and <highlight><bold>840</bold></highlight> indicate that a suitable command has been received, then the method proceeds directly to execution of the detected response at page <highlight><bold>850</bold></highlight> and returns. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates a flow diagram for an alternative prompting method as provided by the invention. A method of this aspect of the invention may begin at block <highlight><bold>910</bold></highlight> by entering a secondary prompt grammar, which in the preferred case occurs when prompting by the primary grammar fails to elicit a suitable response. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> The alternative prompting style illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is generally targeted for new users and is provided if no action is taken after the closure prompt at block <highlight><bold>835</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. Preferably this is a final prompt style that exhaustively iterates each individual choice, one at a time, posed in a yes/no context. A further introduction to use of the system may be presented, as shown by block <highlight><bold>915</bold></highlight>, which inform the user that this prompting syntax requires a response or the system will terminate the entire session. The goal is to forceably evoke a very simple response from those users who are still not sure what to do, yet have heard all the available options and have not yet responded. Turn-taking is explicit and forced: a response option is presented at block <highlight><bold>920</bold></highlight>, and a response request (&ldquo;yes or no&rdquo;) is stated at block <highlight><bold>925</bold></highlight>. At block <highlight><bold>930</bold></highlight> it is determined whether the user has answered &ldquo;yes.&rdquo; If so, then the method proceeds with processing the approved option and returns. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> If a &ldquo;yes&rdquo; response is not detected at block <highlight><bold>930</bold></highlight>, then at block <highlight><bold>945</bold></highlight> it is determined whether the user has responded with &ldquo;no.&rdquo; In one version of the method, if a &ldquo;no&rdquo; response has been received at block <highlight><bold>945</bold></highlight>, then it is determined at block <highlight><bold>950</bold></highlight> whether more response options exist to be offered in the yes/no format. The method returns to block <highlight><bold>920</bold></highlight> from block <highlight><bold>950</bold></highlight> if there are more options. If no further options are found at block <highlight><bold>950</bold></highlight>, or if no response from the user is detected at block <highlight><bold>945</bold></highlight>, then the method disconnects the user from the service at block <highlight><bold>955</bold></highlight> and exits. Alternatively, the method may augment a test procedure corresponding to block <highlight><bold>945</bold></highlight>, wherein no spoken response is taken to implicitly mean a spoken &ldquo;no&rdquo; response and propose the available options in order until all options are determined to be exhausted by block <highlight><bold>950</bold></highlight>. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> The alternative prompting method of <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is more efficient and easier to use than the method illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, because the former allows the user to dynamically take control of the dialogue. The explicit, forced turn-taking of the alternative method is desirable only in a limited set of situations, such as when the user is unprepared or hesitant to share control with the UI. Explicit, forced turn-taking can also be useful for handling errors, as discussed in the next section. </paragraph>
<paragraph id="P-0138" lvl="7"><number>&lsqb;0138&rsqb;</number> Adaptive Error Handling </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> Any VA UI must address two issues: successfully accomplishing a service supported task, and error handling of system or subscriber mistakes. Successful tasks are achieved by the subscriber saying the right words at the right time, hence by speaking valid &ldquo;sentences&rdquo; as determined by the syntax and semantic of the VA UI. The means for success were discussed above. The key measurement in this regard is the number of operations required to achieve the goal and the task duration. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> On the other hand, over many users, errors will inevitably occur. It is therefore highly desirable for a practical VA UI to include a consistent mechanism to handle errors. There are two types of VA UI failures: system and user. System errors are generally attributable to ASR errors, which often arise from microphone misplacement, spurious background noises, and user hesitations (&ldquo;er&rdquo;, &ldquo;uh&rdquo;). </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> User errors result from many reasons: didn&apos;t hear the prompt, misheard the prompt, said the wrong word, mispronounced a word, changed your mind, background sound was interpreted as a word, etc. The framework of syntax and semantics, as provided by the present invention, also applies to user errors. In particular, a further aspect of the invention provides for decoupling user errors from system errors and testing the user errors through the service simulation. This enables generation and analysis of UI results relating specifically to the user errors. The analysis can be looped back into the UI design process to provide further robustness against user errors and actions to remedy the errors. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> User errors are generally attributable to two types of causes: misleading or incorrect prompts, and the user&apos;s reliance on an improper mental model of the service. The PI goal is to minimize errors that are preventable (minimize number of operations) and to resolve errors as efficiently and quickly as possible (minimize task time). </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> The invention provides error handling methods in which two main user error treatments are decoupled: treatment for errors of omission (no response), and treatment for errors of commission (incorrect response). Error detection is measured by changes in the behavior of the individual. A confused subject normally exhibits increased reaction time before any new action is taken, or produces non-task related speech (OVWs, interjections, &ldquo;thinking out loud&rdquo;). Latency time leads to determining timing thresholds that may trigger a &ldquo;help&rdquo; command. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> Error correction is generally performed by speaking conceptually equivalent recovery words, such as &ldquo;back-up&rdquo;, &ldquo;undo&rdquo;, &ldquo;Main Menu&rdquo; or &ldquo;cancel.&rdquo; This results in the subject being moved backwards to the previous state or back to the start. The subject then solves the task from this new state. Different prompts may be given based on the degree of subject confusion: longer, more explicit prompts for subscribers having more trouble as measured by repeated errors, repetition of successful tasks or ongoing latency between spoken choices. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> Errors of omission occur when the user provides no response when expected. These errors are considered to arise from syntactical failures and are addressed by reprompting with an alternate prompting structure having a simpler syntactical component. Error handling is performed by a time-out treatment that builds on the syntactic (temporal) cues, followed by reprompt, followed by eventual disconnection if no response occurs. A primary prompting syntax may be repeated. A second, more structured syntax with more clarification given in each prompt choice may be provided if the omission error continues. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> illustrates an aspect of the invention providing a method for handling errors of omission. A monitoring process, which may be carried out in background, is performed at block <highlight><bold>1010</bold></highlight> to detect changes in the user&apos;s behavior responsive to prompts from the interface. At block <highlight><bold>1015</bold></highlight> it is determined whether the user has delayed providing a response beyond a predetermined timeout interval. As long as no timeout occurs, the monitoring merely continues. </paragraph>
<paragraph id="P-0147" lvl="0"><number>&lsqb;0147&rsqb;</number> If a timeout is detected (&ldquo;yes&rdquo; at block <highlight><bold>1015</bold></highlight>), then an omission error is determined to have occurred and the method advances to block <highlight><bold>1020</bold></highlight> where an error counter is incremented. Block <highlight><bold>1025</bold></highlight> determines whether a predetermined error limit has been exceeded. If not, then the user is reprompted at block <highlight><bold>1030</bold></highlight> and monitoring continues at block <highlight><bold>1010</bold></highlight>. For example, as noted above, the user may be given another opportunity to respond appropriately from within the primary prompting structure. In this case the error limit may be a local limit, indicating a limit for errors since the last prompt. Other types of error limits are possible also, such as a limit referencing the total number of errors that have occurred in a given dialogue session. </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> If the appropriate error limit has been exceeded (&ldquo;yes&rdquo; at block <highlight><bold>1025</bold></highlight>), then the illustrated method proceeds to block <highlight><bold>1035</bold></highlight> where a secondary prompting syntax is adopted. For example, a prompting method as illustrated in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> may be employed. At block <highlight><bold>1040</bold></highlight> the user is reprompted based on the seconary prompting structure. Timeout is again checked at block <highlight><bold>1045</bold></highlight>. If the user provides an appropriate response within the applicable timeout limit (which may be different from the timeout limit applied at block <highlight><bold>1015</bold></highlight>), then the method proceeds to block <highlight><bold>1050</bold></highlight> where the error counter is reset. If the error limit is other than the local limit noted above, then block <highlight><bold>1050</bold></highlight> may be omitted or relocated. Following block <highlight><bold>1050</bold></highlight>, or upon a &ldquo;no&rdquo; determination at block <highlight><bold>1045</bold></highlight>, the method returns to monitoring at block <highlight><bold>1010</bold></highlight>. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> If the user again fails to provide a response within the applicable timeout limit (&ldquo;yes&rdquo; at block <highlight><bold>1045</bold></highlight>), then the method proceeds to block <highlight><bold>1055</bold></highlight> where the user is disconnected from the service. This sequence parallels the &ldquo;no&rdquo; determination from block <highlight><bold>945</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 9</cross-reference> with flow proceeding to disconnection at block <highlight><bold>955</bold></highlight>. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Commission errors occur when the user provides an incorrect response, such as providing a recognized word that performs an undesired command, or when an appropriate word is recognized as an &ldquo;out of the vocabulary&rdquo; word (OVW). Such errors tend to arise from semantic failures and are addressed by &ldquo;second chances&rdquo; and error correction options. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates a method of the invention for handling commission errors. A monitoring procedure at block <highlight><bold>1110</bold></highlight> parallels the monitoring procedure of block <highlight><bold>1010</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 10</cross-reference>. At block <highlight><bold>1115</bold></highlight> it is determined whether the user has said a command word for a correction command. If not, then it is determined at block <highlight><bold>1120</bold></highlight> whether a response by the user is an OVW. If an OVW is not detected at block <highlight><bold>1120</bold></highlight>, then the method returns to the monitoring procedure at block <highlight><bold>1110</bold></highlight>. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> If a correction command is detected (&ldquo;yes&rdquo; at block <highlight><bold>1115</bold></highlight>), then the user is returned to a previous menu state at block <highlight><bold>1125</bold></highlight>. For example, the VA UI may provide the word &ldquo;main menu&rdquo; as an escape command by which the user can back out to the main menu from any of the submenus. See, for example, the submenus shown in the example subvocabulary specification of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. If the user says &ldquo;main menu&rdquo; from within a submenu, then the VA UI returns the menu state to the main menu and the user can try again to perform the desired task. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> Handling of commission errors by the invention may include simply returning to the monitoring state after a correction command has been executed. However, the method illustrated in <cross-reference target="DRAWINGS">FIG. 11</cross-reference> includes the optional feature of incrementing a prompt level at block <highlight><bold>1130</bold></highlight> following menu-state return at block <highlight><bold>1125</bold></highlight>. Error prompt levels will be discussed below with reference to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>. After incrementing the prompt level at block <highlight><bold>1130</bold></highlight>, the method of <cross-reference target="DRAWINGS">FIG. 11</cross-reference> proceeds to block <highlight><bold>1135</bold></highlight> where the user is prompted for the current menu based on the current prompt level. The flow then returns to the monitoring state at block <highlight><bold>1110</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates an exemplary implementation of error prompt levels as provided by the invention. A procedure for monitoring the user&apos;s behavior is again carried out at block <highlight><bold>1210</bold></highlight>. At block <highlight><bold>1215</bold></highlight> it is determined whether a user error has occurred. The error prompt levels provided by this aspect of the invention may be implemented with either omission error handling, or commission error handling, or both. If no error is detected, then the method continues monitoring at block <highlight><bold>1210</bold></highlight>. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> If an error is detected (&ldquo;yes&rdquo; at block <highlight><bold>1215</bold></highlight>), then the method increments an error counter at block <highlight><bold>1220</bold></highlight>. In the illustrated example, it is determined at block <highlight><bold>1225</bold></highlight> whether the error count exceeds a limit MAX. If so, then the VA UI disconnects the user from the service at block <highlight><bold>1230</bold></highlight>. For example, the user may be disconnected if repeated prompting fails to elicit an appropriate response. </paragraph>
<paragraph id="P-0156" lvl="0"><number>&lsqb;0156&rsqb;</number> If the error limit has not been exceeded (&ldquo;no&rdquo; at block <highlight><bold>1225</bold></highlight>), then the method proceeds to block <highlight><bold>1235</bold></highlight> where it is determined whether the error count is greater than a threshold value. In the example illustrated in <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, threshold&equals;1. If the error threshold has not been exceeded at the current prompt level, then the method maintains the current prompt level, reprompts the user at block <highlight><bold>1240</bold></highlight>, and returns to the monitoring procedure at block <highlight><bold>1210</bold></highlight>. </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> If the error threshold has been exceeded (&ldquo;yes&rdquo; at block <highlight><bold>1235</bold></highlight>), then the illustrated method advances to block <highlight><bold>1245</bold></highlight> where the error prompt level is incremented. The operation of block <highlight><bold>1245</bold></highlight> thus parallels the operation of block <highlight><bold>1130</bold></highlight> in the method illustrated in <cross-reference target="DRAWINGS">FIG. 11</cross-reference>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> As indicated by <cross-reference target="DRAWINGS">FIGS. 11 and 12</cross-reference>, a preferred embodiment of the invention provides plural error prompt levels. The invention may provide two or more prompting structures that together implement the use of more clarifying prompts at each of successive stages of user difficulty. An error counter, such as a local counter, a transaction counter, or a personal profile counter, keeps track of the number of errors which have occurred over a time interval, and lets the system take different action for different levels of error. For example, the UI may change the prompt wording to add more clarification, or break the task into simpler subtasks, or (the simplest prompt structure) pose a highly structured prompt to be answered by a yes or no response. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> shows a functional diagram of a standard form for system-wide error handling procedures in a preferred embodiment of the invention. A three-part procedure is followed that includes stages of notification, status, and solution. Notification can be null, non-verbal (longer silence, or an error tone sequence), or verbal (for example, &ldquo;sorry&rdquo;). This sets the context to indicate that an error has been detected by the system. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> The status describes the type of error made (for example, &ldquo;the telephone number is not correct&rdquo;). Preferably this information is omitted for one-step tasks, because in such situations the type of error that has occurred is merely reiterated (e.g., &ldquo;you have entered 708-555-1212&rdquo;). The solution stage explains what may be done or should be done to correctly perform the task (for example, &ldquo;you must enter a ten digit telephone number&rdquo;). </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> The syntax of error handling is the sequence of operations and pauses between the operations executed (some operations may be omitted). The semantics of error handling incorporates the words and sentences provided as feedback to the subscriber. Thus, the error handling semantics may depend on the nature of a persona attributed to the service at a specific prompting level. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> The terms and expressions employed herein are used as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding any equivalents of the features shown and described or portions thereof, but it is recognized that various modifications are possible within the scope of the invention claimed. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for prompting a user of a voice activated user interface, the method comprising: 
<claim-text>pausing for a first predetermined interval after presentation of a label identifying a current menu state of the user interface; and </claim-text>
<claim-text>presenting to the user a command option for the current menu state only when a command is not received from the user during the predetermined interval. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>presenting the command option to the user among a first plurality of command options when the command option is presented to the user; and </claim-text>
<claim-text>pausing for a second predetermined interval after presenting the first plurality of command options. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>presenting the command option to the user among a plurality of first command options and pausing thereafter for a second predetermined interval when the command option is presented to the user; and </claim-text>
<claim-text>presenting a second command option to the user after the second predetermined interval only when a command is not received from the user during the second predetermined interval. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>presenting the command option to the user among a first plurality of command options and pausing thereafter for a second predetermined interval when the command option is presented to the user; and </claim-text>
<claim-text>presenting a plurality of second command options to the user after the second predetermined interval only when a command is not received from the user during the second predetermined interval. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising: 
<claim-text>presenting the command option to the user among a plurality of first command options and pausing thereafter for a second predetermined interval when the command option is presented to the user; and </claim-text>
<claim-text>presenting a plurality of second command options to the user after the second predetermined interval only when a command is not received from the user during the second predetermined interval; </claim-text>
<claim-text>wherein each of the second command options is less frequently used than each of the first command options. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein the plurality of first command options includes fewer than five command options. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A method for prompting a user of a voice activated user interface, the method comprising: 
<claim-text>reciting a first plurality of command options to the user and then pausing for a predetermined time interval; and </claim-text>
<claim-text>reciting a second plurality of command options to the user when no response from the user is detected during the pause. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the first and second pluralities of command options each contains fewer than five command options. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein the second plurality of command options is recited to the user only when no response is detected during the pause. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method according to <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, further comprising: 
<claim-text>reciting plural command options for the user interface in succession and pausing for a further predetermined time interval after a final command option is recited; and </claim-text>
<claim-text>reciting a closure prompt to the user and pausing for an additional predetermined time interval after a final one of the plural command options is recited, when no response is received responsive to reciting the plural command options.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004731A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004731A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004731A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004731A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004731A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004731A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004731A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004731A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004731A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004731A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004731A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004731A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004731A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004731A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
