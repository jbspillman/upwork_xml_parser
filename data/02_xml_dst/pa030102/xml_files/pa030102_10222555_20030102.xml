<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004952A1-20030102-D00000.TIF SYSTEM "US20030004952A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00001.TIF SYSTEM "US20030004952A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00002.TIF SYSTEM "US20030004952A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00003.TIF SYSTEM "US20030004952A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00004.TIF SYSTEM "US20030004952A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00005.TIF SYSTEM "US20030004952A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00006.TIF SYSTEM "US20030004952A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00007.TIF SYSTEM "US20030004952A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00008.TIF SYSTEM "US20030004952A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00009.TIF SYSTEM "US20030004952A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00010.TIF SYSTEM "US20030004952A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00011.TIF SYSTEM "US20030004952A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00012.TIF SYSTEM "US20030004952A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00013.TIF SYSTEM "US20030004952A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004952A1-20030102-D00014.TIF SYSTEM "US20030004952A1-20030102-D00014.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004952</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10222555</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020816</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>010000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Accessing and updating a configuration database from distributed physical locations within a process control system</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10222555</doc-number>
<kind-code>A1</kind-code>
<document-date>20020816</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09560199</doc-number>
<document-date>20000428</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
<non-provisional-of-provisional>
<document-id>
<doc-number>60160104</doc-number>
<document-date>19991018</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Mark</given-name>
<family-name>Nixon</family-name>
</name>
<residence>
<residence-us>
<city>Round Rock</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Teresa</given-name>
<family-name>Chatkoff</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Stephen</given-name>
<family-name>Gilbert</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>MARSHALL, GERSTEIN &amp; BORUN</name-1>
<name-2></name-2>
<address>
<address-1>6300 SEARS TOWER</address-1>
<address-2>233 SOUTH WACKER</address-2>
<city>CHICAGO</city>
<state>IL</state>
<postalcode>60606-6357</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A configuration database includes multiple databases distributed at a plurality of physical locations within a process control system. Each of the databases may store a subset of the configuration data and this subset of configuration data may be accessed by users at any of the sites within the process control system. A database server having a shared cache accesses a database in a manner that enables multiple subscribers to read configuration data from the database with only a minimal number of reads to the database. To prevent the configuration data being viewed by subscribers within the process control system from becoming stale, the database server automatically detects changes to an item within the configuration database and sends notifications of changes made to the item to each of the subscribers of that item so that a user always views the state of the configuration as it actually exists within the configuration database. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This is a regular filed application based on Provisional Application Serial No. 60/160,104 filed Oct. 18, 1999 entitled &ldquo;Accessing and Updating a Configuration Database From Distributed Physical Locations Within a Process Control System.&rdquo;</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates generally to process control systems and, more particularly, to a process control configuration system having a configuration database that can be accessed and updated from geographically distributed physical locations within a process control system. </paragraph>
</section>
<section>
<heading lvl="1">DESCRIPTION OF THE RELATED ART </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Process control systems, like those used in chemical, petroleum or other processes, typically include at least one process controller communicatively coupled to at least one host device or operator workstation and to one or more field devices via analog and/or digital buses or other communication lines or channels. The field devices, which may be, for example, valves, valve positioners, switches, transmitters (e.g., temperature, pressure and flow rate sensors), etc. perform functions within the process such as opening or closing valves and measuring process parameters. During runtime of a process, the process controller receives signals indicative of process measurements made by the field devices and/or other information pertaining to the field devices via an input/output (I/O) device, uses this information to implement a control routine and then generates control signals which are sent over the buses or other communication channels via the input/output device to the field devices to control the operation of the process. Information from the field devices and the controller is typically made available during runtime to one or more applications executed by the operator workstation to enable an operator to perform any desired function with respect to the process, such as viewing the current state of the process. Additionally, configuration applications executed on a user interface, such as a host device, workstation, laptop computer, etc. may be used to modify the operation of the process, configure the process, view the configuration of the process, document the process configuration, etc. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Generally speaking, process control systems are configured using a configuration database that stores configuration information pertaining to each of the hardware and software elements within the process control system, the manner in which the hardware elements, such as different devices and controllers in the process, are physically interconnected and the manner in which different software elements, such as control modules, communication modules, etc., are associated with and executed by the different devices within the process control system to perform process control. In some cases, the configuration database is an object-oriented database that stores configuration objects or components for each different logical element of a process control system as objects. The configuration database may, for example, include a library that stores object templates for some or all of the hardware and software elements, these templates being used to create configuration objects for instances of hardware or software elements actually used within the process control system. The configuration database may also include setup or physical network sections that define the manner in which the physical elements of a process control system are set up, distributed and connected together. In some cases, the configuration database also includes a control section that defines how control is performed using controllers, field devices and control modules or control routines executed in the controllers and/or the field devices. During configuration of the process control system, a configuration routine or application executed in, for example, a user interface or workstation, is used to create or modify the configuration database to reflect the actual configuration of the process control system. This configuration application typically uses the information within the configuration database to configure devices, controllers, etc. associated with the process control system and stores new configuration information in the configuration database after any configuration activity is performed, such as when a device or software element is added to the system, changed, etc. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Still further, the configuration database is generally used to display the current configuration of the process control system to users via user interfaces connected to the process control system. In the past, some of the process control system user interfaces, configuration databases and controllers were communicatively connected together by a dedicated bus, such as an Ethernet bus, to form a local area network (LAN). Because the dedicated Ethernet bus has a large bandwidth, and because any particular signal or data request sent over the Ethernet bus does not have to travel over a very long distance within the LAN, communication with the configuration database by one of the user interfaces is fairly straightforward and fast in these systems. As a result, configuration display routines executed in the user interfaces typically access and retrieve configuration information from the configuration database each time the user indicates or requests information pertaining to the configuration of the process control system. This retrieved information is then sent out over the Ethernet bus and is displayed to the user at the user interface. Because of speed (or high bandwidth) of the dedicated Ethernet bus, multiple users can access the configuration database relatively simultaneously and can view the same or different configuration data pertaining to the configuration of the process control system. Similarly, different users can reconfigure different parts of the process control system because any new configuration data that was generated was able to be provided directly to the configuration database in a relatively short amount of time via the dedicated Ethernet bus. Still further, because only those devices connected to the LAN can access the configuration database, and because the LAN is typically limited to a single process location, there is not much need to enable a large number of user interfaces to access the configuration database simultaneously. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Recently, however, there has been a general increase in the size of some process control systems and there has been a desire to integrate configuration information for process control networks spread out or distributed over larger or separated geographical areas. For example, some users wish combine the configuration data associated with different process sites, which may be in different counties, states or even different countries, thereby allowing an operator at a first site to access and view configuration information about a second site and possibly even perform configuration activities that effect the second site from the first site. In another example, a user may wish to integrate an oil well located on a platform many miles out in the ocean with an oil refinery process control system having numerous controllers, user interfaces, etc. located on the mainland. In this case, it is desirable to enable a user at the oil refinery site to reconfigure or effect the configuration of the devices on the oil well platform without actually having to fly out to the platform, connect a user interface to a terminal on the oil well platform and reconfigure the oil well controller, as is typically necessary now. Still further, with the integration of multiple process control sites, the number of user interfaces which may be used to simultaneously access the configuration databases of these sites increases significantly. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> When integrating multiple geographically separated sites, however, it is practically, if not actually, impossible to connect the different sites using a common dedicated bus, such as the Ethernet bus, due to the distances involved. It is possible, however, to use a satellite, cellular or other type of wireless link or a wide area network link, such as the Internet, or T1 lines, to establish a communication connection between the different sites of a process control system, to thereby enable the integration of geographically separated portions of a process control network. However, satellite, cellular and other wide area wireless communication links are typically very expensive to use and, if used, are generally shared so that they can only provide a limited amount of bandwidth when compared to a dedicated bus, such as an Ethernet bus. Likewise, the Internet, T1 lines and other shared wide area networks provide only a limited amount of bandwidth or throughput and are, therefore, typically very slow for data transfer when compared to a dedicated Ethernet local area network bus. Still further, the geographical distance between the different sites and the need to provide secure and assured communications between the sites using, for example, acknowledgments of data packets, as provided in the IP, TCP and UDP communication protocols, further add to the delay of communications between the sites. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> As a result of the delay in communications between geographically diverse sites of a process control system and the increase in the number of user interfaces or other devices accessing a configuration database, it is difficult to provide a configuration database that stores the data for the entire process control system, including the devices in each of the geographically diverse sites in a manner that can be accessed in a fashion by users at all of the different sites and in a manner that can altered by users at the different sites using current configuration database accessing procedures. Specifically, if the configuration database is located at a main site, users at a remote site will have to download all of the configuration data on a refresh basis over the slow or remote link, which may take an inordinate amount of time. Still further, the sheer increase in the number of users accessing the configuration database may increase the access time to any piece of information within the configuration database to an unacceptable level. Likewise, when reconfiguring the process control system, the delay in communications between a main site and a remote site may enable two different users to try to reconfigure the same component of the process control system leading to confusion and error. Thus, for example, a user at a remote site may request and obtain the current configuration of the process from the configuration database at the main site, may reconfigure a portion of the process control system at the remote site and then send the new configuration data to the configuration database at the main site. In the meantime, however, a user at the main site may reconfigure the same portion of the process control system and, because there is relatively no delay in communications at the main site, may store this new configuration in the configuration database before the user at the remote site attempts to send new configuration data generated at the remote site to the configuration database for storage, which leads to errors. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In some cases, it may not be possible or practical to even provide a slow or low bandwidth communication link between different sites, in which case configuration of a remote site has to occur at the remote site and then has to be uploaded to the configuration database at the main site. However, this off-line configuration can cause problems if different users try to reconfigure the remote site at or near the same time, or if a user tries to reconfigure a remote site before another user who has already reconfigured the remote site updates the configuration database to reflect the changes already made to the remote site. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> A configuration database distribution, access and alteration strategy is provided to enable numerous geographically separated locations of a process control system to be integrated together using a common configuration database in a manner that enables users at each of the different locations to view and change the configuration database in a timely, secure and non-conflicting manner, even when the different locations of the process control system are communicatively connected via a low bandwidth or slow (i.e., delayed) communication link or are only intermittently communicatively connected via, for example, a modem connection. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to one aspect of the invention, a distributed configuration database is provided having components thereof spread over or throughout the different geographical portions of a process control system in such a manner that shared configuration data, i.e., configuration data pertaining to or applicable to more than one location, is stored in a database assessable by each of the other locations via one or more slow or low bandwidth communication links and data that pertains only to a particular location is stored in a configuration database at that location. In this manner, the configuration information that is most likely to be accessed at a particular location (i.e., the configuration information pertaining to that location) is accessible over a local area network while configuration information pertaining to other locations is accessible over a slow or low bandwidth communication link. As a result, only shared communication data and data that is related to a different location needs to be sent over a slow or low bandwidth communication link. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> To prevent configuration data being viewed by users within the process control system from becoming stale, the configuration database access system at each location may automatically send changes made to the configuration database to each of the users currently viewing that data so that the user views the state of the configuration as it actually exists in the configuration database. In one embodiment, each portion of the configuration database includes a data access routine that uses a shared cache to coordinate the delivery of configuration components to each of the users or subscribers currently viewing that data in a way that reduces the number of reads to the configuration database, which increases the speed of accessing data from the configuration database. This shared cache may incorporate a locking mechanism to enable locking and reservation of components within the configuration database. If desired, the configuration information obtained by each user may be stored locally to enable the user to view the configuration information even if the communication link to the configuration database storing the master copy of that information goes down or otherwise becomes unavailable.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of a process control system having two geographically separated sites communicatively connected via a satellite communication link; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a diagram of an exemplary process control system hierarchy displayed by a configuration application; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of a process control system having a main site and a remote site which are connected via a slow communication link and which share a common master configuration database; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram of a process control system having a main site and two off-line sites, all of which share a common master configuration database; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of a process control system having a control room connected to a plant site via a local area network and connected to a user interface via an intermittent communication connection, all of which share a common master configuration database; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram of a distributed configuration database system used in a process control system having different geographically separated portions communicatively connected via slow or low bandwidth communication links; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram of a configuration database client/server system that uses a shared cache within a configuration database server to implement subscriber/publisher communications between multiple clients and configuration components stored within a configuration database; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an object model used within the client/server system of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> to provide multiple clients access to configuration components stored within the configuration database of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a block diagram of the state of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> at start up; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a block diagram illustrating the operation of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> when a first client connects to the server to access a first configuration component from the configuration database; </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a block diagram illustrating the operation of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> when the first client loads children of a component from the configuration database; </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a block diagram illustrating the operation of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> when a second client connects to the database server to access first and second configuration components from the configuration database which are already stored in the shared cache of the database server; </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13</cross-reference> is a block diagram illustrating the operation of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> in response to an event notification generated by a database server notify thread; </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is a block diagram illustrating the operation of a lock manager within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> which arbitrates concurrent access to the shared cache within the database server; and </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a block diagram illustrating the operation of the objects within the database server of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> in response to an event notification generated by a runtime services notify thread.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> process control system <highlight><bold>10</bold></highlight> includes geographically separated sites or locations <highlight><bold>12</bold></highlight> and <highlight><bold>14</bold></highlight> communicatively connected via a satellite communication link <highlight><bold>16</bold></highlight> formed by a satellite <highlight><bold>18</bold></highlight> having a first uplink/downlink channel <highlight><bold>20</bold></highlight> and a second uplink/downlink channel <highlight><bold>22</bold></highlight> which may be two way channels. The first site <highlight><bold>12</bold></highlight>, which will be referred to herein as the local or main site <highlight><bold>12</bold></highlight>, includes two process controllers <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> connected to a user interface <highlight><bold>28</bold></highlight>, a configuration database <highlight><bold>30</bold></highlight> and a data server <highlight><bold>32</bold></highlight> via a dedicated local area network bus <highlight><bold>34</bold></highlight> which may be, for example an Ethernet or any other desired bus or communication line. The user interface <highlight><bold>28</bold></highlight> may be any desired type of host workstation or computer, such as any type of personal computer, laptop computer, etc. while the configuration database <highlight><bold>30</bold></highlight> may be a stand-alone database device or may be integrated into any other device, such as the user interface <highlight><bold>28</bold></highlight> or the data server <highlight><bold>32</bold></highlight>. The data server <highlight><bold>32</bold></highlight> includes an antenna <highlight><bold>39</bold></highlight> which the data server <highlight><bold>32</bold></highlight> uses to communicate over the slow or low bandwidth communication link <highlight><bold>16</bold></highlight> to the second process control site <highlight><bold>14</bold></highlight>, which will be referred to herein as the remote site <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Each of the controllers <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> is connected to one or more input/output (I/O) devices <highlight><bold>36</bold></highlight> which, in turn are connected to field devices which may be any desired type of field devices, such as conventional 4-20 milliamp devices <highlight><bold>38</bold></highlight> or any smart field devices <highlight><bold>40</bold></highlight> like HART&reg;, PROFIBUS&reg;, Actuator Sensor Interface (AS-Interface), WORLDFIP&reg;, Device-Net&reg;, CAN, FOUNDATION&trade; Fieldbus (hereinafter &ldquo;Fieldbus&rdquo;) etc., devices. Of course, the devices <highlight><bold>38</bold></highlight> and <highlight><bold>40</bold></highlight> may be any desired types of devices such as sensors, transmitters, valves, fans, mixers, positioners, etc. which may perform any control, measurement or other function within the process control system <highlight><bold>10</bold></highlight>. The controllers <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> may communicate with the field devices <highlight><bold>38</bold></highlight> and <highlight><bold>40</bold></highlight> using any known or desired type of I/O devices <highlight><bold>36</bold></highlight> and communication protocols such as the protocols associated with any of the above-identified types of devices. Generally speaking, the controllers <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight>, which may be, by way of example only, DeltaV&trade; controllers sold by Fisher-Rosemount Systems, Inc., each include a processor and a memory for storing data, programs, and control routines (such as process control modules) used to implement control of the process <highlight><bold>10</bold></highlight> at the main site <highlight><bold>12</bold></highlight>. Generally speaking, the controllers <highlight><bold>24</bold></highlight> and <highlight><bold>26</bold></highlight> receive signals from the field devices <highlight><bold>38</bold></highlight> and <highlight><bold>40</bold></highlight>, execute process control routines and provide control signals to the devices <highlight><bold>38</bold></highlight> and <highlight><bold>40</bold></highlight> to thereby implement control of the process <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Similarly, the remote site <highlight><bold>14</bold></highlight> includes a process controller <highlight><bold>50</bold></highlight> connected to user interfaces <highlight><bold>52</bold></highlight> and <highlight><bold>53</bold></highlight>, a configuration database <highlight><bold>54</bold></highlight> and a data server <highlight><bold>56</bold></highlight> via a dedicated local area network bus <highlight><bold>58</bold></highlight> which may be, for example an Ethernet or any other desired bus or communication line. The controller <highlight><bold>50</bold></highlight> is illustrated as being connected through an I/O device <highlight><bold>60</bold></highlight> to two smart field devices <highlight><bold>62</bold></highlight> but could be connected to any other numbers or types of field devices. The data server <highlight><bold>56</bold></highlight> uses an antenna <highlight><bold>64</bold></highlight> to communicate via the slow or low bandwidth link <highlight><bold>16</bold></highlight> to the data server <highlight><bold>32</bold></highlight> to thereby effect communications between the local site <highlight><bold>12</bold></highlight> and the remote site <highlight><bold>14</bold></highlight>. The devices within the remote site <highlight><bold>14</bold></highlight> may be the same as or similar to the corresponding devices within the local site <highlight><bold>12</bold></highlight> and perform process control and reporting operations at the remote site <highlight><bold>14</bold></highlight>. Likewise, it will be understood that other devices or other numbers of devices could be connected within either or both of the sites <highlight><bold>12</bold></highlight> and <highlight><bold>14</bold></highlight> to perform process control and configuration activities in any desired manner. In fact, one of the sites, such as the remote site <highlight><bold>14</bold></highlight>, could be a single device, like a user interface, if so desired. The data server <highlight><bold>32</bold></highlight> could be connected directly to the configuration database <highlight><bold>30</bold></highlight> and, similarly, the data server <highlight><bold>56</bold></highlight> could be connected directly to the configuration database <highlight><bold>54</bold></highlight> instead of being connected through an Ethernet bus. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> As will be understood, the data servers <highlight><bold>32</bold></highlight> and <highlight><bold>56</bold></highlight> operate to provide a communication connection between the two buses <highlight><bold>34</bold></highlight> and <highlight><bold>58</bold></highlight> to thereby enable communication between the devices within the local site <highlight><bold>12</bold></highlight> and the remote site <highlight><bold>14</bold></highlight>. While the communication link <highlight><bold>16</bold></highlight> is illustrated as a satellite link, any other communication link could be used instead, including for example, a cellular link, a modem or telephone line link, an Internet link or any other wireless or wide area or shared local area network link. Of course, any desired communication strategy may be employed within the communication link <highlight><bold>16</bold></highlight> to provide communication of data via the link <highlight><bold>16</bold></highlight>. Thus, any communication protocol, such as the IP or TCP or UDP protocols may be used and any modulation techniques, error encoding techniques, etc. may be used to implement communication via the link <highlight><bold>16</bold></highlight> including, for example, spread spectrum techniques. Preferably, some sort of data acknowledgment scheme is used in the communication link <highlight><bold>16</bold></highlight> to assure secure and reliable communications in the presence of noise or other interference. If desired, the data acknowledgment scheme or technique described in U.S. patent application Ser. No. 09/418,747, entitled &ldquo;Deferred Acknowledgment Communications and Alarm Management&rdquo; which was filed on Oct. 15, 1999, which is assigned to the assignee of the present invention and which is hereby expressly incorporated by reference herein, may be used to effect communications through the communication link <highlight><bold>16</bold></highlight>. Generally speaking, the use of the communication link <highlight><bold>16</bold></highlight> enables geographically separated process control sites or systems to be integrated together to form a single process control network wherein the devices within one site can communicate with the devices at the other site to perform control and configuration activities. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> Unfortunately, communications over the communication link <highlight><bold>16</bold></highlight> will typically be much slower than communications over the LAN buses <highlight><bold>34</bold></highlight> and <highlight><bold>58</bold></highlight> due to the distances between the sites <highlight><bold>12</bold></highlight> and <highlight><bold>14</bold></highlight>. Furthermore, the communication link <highlight><bold>16</bold></highlight> may have a low bandwidth as compared to the dedicated LAN buses <highlight><bold>34</bold></highlight> and <highlight><bold>58</bold></highlight> and will generally be more susceptible to noise and other errors than communications over the LAN buses <highlight><bold>34</bold></highlight> and <highlight><bold>58</bold></highlight>. These factors generally tend to make the communication link <highlight><bold>16</bold></highlight> a source of communication bottlenecks within the process control system <highlight><bold>10</bold></highlight>. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> According to the present invention, configuration data pertaining to the manner in which the process control system <highlight><bold>10</bold></highlight> is configured is stored in one or both of the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight>. Still further, one or more of the user interfaces <highlight><bold>28</bold></highlight>, <highlight><bold>52</bold></highlight> and <highlight><bold>53</bold></highlight> or other devices may store and, at an operator&apos;s request, execute a configuration application. This configuration application may access one or more of the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> to obtain configuration information, such as information pertaining to the configuration of the devices, software modules, etc. within the process control network <highlight><bold>10</bold></highlight>, and may display the obtained configuration information on a screen for viewing for a user. The configuration application may also enable a user to add new devices, software elements or other elements to the system, provide new communications between devices within the system, change already existing elements within the system, etc. to thereby reconfigure the process control system <highlight><bold>10</bold></highlight>. In another instance, a configuration application executed in a first database server, such as the server <highlight><bold>32</bold></highlight>, may access information from another database server, such as the server <highlight><bold>54</bold></highlight>, via the slow link <highlight><bold>16</bold></highlight> to provide this information to a still different remote location (not shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Of course, any desired process control configuration application or routine may be used, such as the configuration applications provided with the DeltaV products sold by Fisher Rosemount Systems, Inc. In particular, the DeltaV configuration applications display process control configuration information in a Windows-type explorer tree format and enables a user or operator to reconfigure the system by dragging and dropping elements within the configuration tree onto one another to thereby load those elements in different devices or to indicate the placement of process control elements in different areas of a process, to indicate the connection of devices to different controllers, buses or I/O devices, etc., or to load software elements within different devices. U.S. Pat. No. 5,838,563 to Dove et al.(&ldquo;System for Configuring a Process Control Environment&rdquo;), U.S. Pat. No. 5,828,851 to Nixon et al. (&ldquo;Process Control System Using Standard Protocol Control of Standard Devices and Nonstandard Devices&rdquo;), U.S. patent application Ser. No. 08/631,519 to Nixon et al. (&ldquo;Process Control System Including a Method and Apparatus for Automatically Sensing the Connection of Devices To a Network&rdquo;) filed Apr. 12, 1996, and U.S. patent application Ser. No. 08/631,458 to Dove (&ldquo;System for Assisting Configuring a Process Control Environment&rdquo;) filed Apr. 12, 1996, all of which are assigned to the assignee of the present invention, and all of which are expressly incorporated by reference herein, describe process control configuration applications which enable a user to graphically create process control routines and elements, to auto-sense devices within a process control system and to provide control of devices within a process control system. Of course, any other type of configuration applications could be executed in the user interface or in a server database or other device to access the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight>, including any other type of graphical configuration applications and non-graphical configuration applications. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> For the sake of illustration, <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows an example process control configuration tree <highlight><bold>65</bold></highlight> that may be used to display a configuration of a process control system and that may be used to specify changes to the configuration of a process control system graphically. Generally speaking, the configuration tree <highlight><bold>65</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts and provides information pertaining to the configuration of a plant named Tracey Island. The configuration system of Tracey Island (named &ldquo;traceyisland&rdquo; in the tree <highlight><bold>65</bold></highlight>) includes a library section <highlight><bold>66</bold></highlight> which may include, for example, templates for different device configurations, device definitions, software elements, such as control modules, etc., or other objects used at the Tracey Island plant. Although these templates are not shown in the tree <highlight><bold>65</bold></highlight>, they could be shown by selecting (e.g., double clicking) the Library icon <highlight><bold>66</bold></highlight>. The configuration tree <highlight><bold>65</bold></highlight> may also have a system configuration section <highlight><bold>67</bold></highlight> illustrating the manner in which the devices, such as controllers, I/O devices, field devices, user interfaces, etc. are physically located within the process. The illustrated system configuration for the Tracey Island plant has recipes (which define processes to be performed in the plant to, for example, make different products), setup information and control strategies. As illustrated, the control strategies icon or component has a number of children components including unassigned I/O references, equipment, and two areas (which are physical areas) named Area_A and Area1. The Area_A includes a Module1 child component illustrating that the Module1 control module is loaded within the Area_A part of the Tracey Island plant. The system configuration also includes a physical network having a list of decommissioned controllers, and a control network icon. The control network icon or component has one or more commissioned controllers (only controller CTRL<highlight><bold>1</bold></highlight> is illustrated) and a user interface (named Governmint) associated with the operation of the controller CTRL<highlight><bold>1</bold></highlight>. Each controller may have one or more I/O devices attached thereto and each I/O device may have one or more field devices attached thereto to be communicatively coupled to the controllers within the tree <highlight><bold>65</bold></highlight>. However, these components are not shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, but could be if, for example, the CTRL<highlight><bold>1</bold></highlight> icon was selected by a user. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> It will be noted that the configuration components illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> have parent child relationships, wherein, for example, the system configuration <highlight><bold>67</bold></highlight> has direct children of recipes, setup, control strategies and physical network. Likewise, the control strategies is a parent of unassigned I/O references, equipment, Area_A, and Area1. Area_A is a parent of the Module1 component. Of course, each of the children components may have further children and so on, so that the user may view any level of the configuration tree <highlight><bold>65</bold></highlight> to see what objects are stored in which devices, which devices are located in which physical zones, and how different devices are communicatively connected together. Generally, the hierarchy of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> indicates the presence of non-displayed children components by placing a plus (&plus;) symbol next to the parent component. Also, information about a selected component, including the children thereof, may be displayed on the right side of the screen as illustrated for the control strategies component of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. Of course, further information about these components may be obtained by selecting these components within the hierarchy of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> While <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates an example configuration hierarchy, it will be understood that the configuration hierarchy for a process control network can illustrate other devices and modules and take on other dependencies. Also, a process may be divided into a number of physical sites, and/or zones and each of these sites or zones may have controllers, user interfaces, etc. associated therewith, which may be shown in the hierarchy. Of course, a user may initially view a part of the tree <highlight><bold>65</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> and then select an element within the tree <highlight><bold>65</bold></highlight>, such as the Area_A, to drill down further into the configuration tree <highlight><bold>65</bold></highlight>. This selection causes the configuration application providing the hierarchy tree <highlight><bold>65</bold></highlight> to access the children of the selected object and to display these children on the display screen. In some cases, the configuration information may be stored as objects in an object oriented database and the objects within the database may have the same relationships as those illustrated in the configuration tree displayed by the configuration application. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> It will be understood that the configuration objects or components illustrated in the hierarchy tree <highlight><bold>65</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> may be stored in and accessed from the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The information stored in the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> which may be, for example, object oriented databases of any desired type, may be stored in any desired manner and may have relationships related to, or the same as the relationships illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> Prior art process control networks typically do not have separate sites, such as sites connected via a slow or remote communication link. As such, each process control system typically includes its own configuration database having configuration data pertaining only to the configuration of the devices within that system. Furthermore, this configuration database is typically accessible by all of the user interfaces or other devices connected to the LAN of the process control system and can be accessed very quickly due to the high bandwidth of the LAN bus and the relatively small distance between the user interface and the configuration database within the LAN. Thus, for example, in prior art systems, each of the sites <highlight><bold>12</bold></highlight> and <highlight><bold>14</bold></highlight> would include its own configuration database storing information pertaining only to the devices within one of the sites, i.e., the site <highlight><bold>12</bold></highlight> or the site <highlight><bold>14</bold></highlight>, but not both. In these cases, while providing the communication link <highlight><bold>16</bold></highlight> between the sites <highlight><bold>12</bold></highlight> and <highlight><bold>14</bold></highlight> would enable communication between these sites, the configuration database for one site would still not reflect the configuration of devices within the other site and there is no way for a configuration application to integrate configuration components stored in separate configuration databases into a signal configuration hierarchy or tree, such as that of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Also, prior art configuration applications typically access the configuration database to obtain the information being requested by the user every time the user performs a drilling down operation or other request for more information within the configuration hierarchy. Unfortunately, the actual data reads from the configuration database are the slowest part of the data retrieval process and, thus, with a large number of users, each viewing the configuration hierarchy, the reads into and out of the configuration database could cause undue delay in being able to access this information from a single database. This fact is exacerbated when more users are added to the system via one or more remote communication links, which increases the number of users capable of accessing the configuration database. Likewise, the data retrieves for these remotely located users may be further delayed by the bottleneck in communications associated with the remote link, such as the communication link <highlight><bold>16</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> and communications within the process control system <highlight><bold>10</bold></highlight> can be structured in a number of ways to provide configuration information about the process control system <highlight><bold>10</bold></highlight> to numerous configuration applications at one or both of the local site <highlight><bold>12</bold></highlight> and the remote site <highlight><bold>14</bold></highlight> and yet in a manner that reduces the amount of communication over the remote link <highlight><bold>16</bold></highlight>, that provides an integrated view of all or any part of the process control system <highlight><bold>10</bold></highlight> and that allows the configuration information to be changed from any location within a process control system <highlight><bold>10</bold></highlight>. In a first case, one of the configuration databases, such as the configuration database <highlight><bold>30</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, is designated as a master configuration database that stores the master copy of all configuration items or components therein. The other configuration database <highlight><bold>54</bold></highlight> is what is referred to herein as a briefcase database which accesses some or all of the information within the master configuration database <highlight><bold>30</bold></highlight> on an as needed basis, downloads this data via the communication link <highlight><bold>16</bold></highlight> and enables user interfaces or other devices at the remote site <highlight><bold>14</bold></highlight> to view and change that data. Changed data can be uploaded to the master configuration database <highlight><bold>30</bold></highlight> via the communication link <highlight><bold>16</bold></highlight> to assure that other users have access to the changed data via the master configuration database <highlight><bold>30</bold></highlight>. In this case, calls by individual user interfaces to the master configuration database <highlight><bold>30</bold></highlight> via the slow or low bandwidth communication link <highlight><bold>16</bold></highlight> are reduced because all of the needed configuration data can be downloaded to the briefcase database <highlight><bold>54</bold></highlight> and accessed from this database <highlight><bold>54</bold></highlight> at the remote site <highlight><bold>14</bold></highlight>. Furthermore, the process of downloading a large number of configuration components to the briefcase database <highlight><bold>52</bold></highlight> at one time is more efficient in terms of usage of the communication link <highlight><bold>16</bold></highlight> than trying to download this information piecemeal. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In another case, the configuration database <highlight><bold>54</bold></highlight> may be a mirror database that mirrors the state of the master configuration database <highlight><bold>30</bold></highlight>. When created, the mirror database <highlight><bold>54</bold></highlight> copies all of the data from the master configuration database <highlight><bold>30</bold></highlight> to mirror the state of the database <highlight><bold>30</bold></highlight>. According to this strategy, a routine within, for example, the mirror database <highlight><bold>54</bold></highlight>, periodically accesses the master configuration database <highlight><bold>30</bold></highlight> via the slow communication link <highlight><bold>16</bold></highlight> and synchronizes with the master configuration database <highlight><bold>30</bold></highlight> by providing changes made in the mirror configuration database <highlight><bold>54</bold></highlight> to the master configuration database <highlight><bold>30</bold></highlight> and by copying changes made to the master configuration database <highlight><bold>30</bold></highlight> to the mirror configuration database <highlight><bold>54</bold></highlight>. Here, the users at the main site <highlight><bold>12</bold></highlight> access the master configuration database <highlight><bold>30</bold></highlight> while the users at the remote site <highlight><bold>14</bold></highlight> access the mirror configuration database <highlight><bold>54</bold></highlight> which reduces or eliminates the number of data calls made by individual users over the slow link <highlight><bold>16</bold></highlight>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> In still another case, different portions of the configuration data are stored in the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> to create a distributed configuration database. A configuration application executed in a user interface or other device will access the configuration components which the user wishes to view or to manipulate from the database in which this data is originally stored and will subscribe to changes to these components. In one embodiment, subscription links or threads are established between each user or client and each of the databases that the user or client is accessing to retrieve configuration data. For configuration data that is stored in the configuration database <highlight><bold>54</bold></highlight> and subscribed to by the user interface <highlight><bold>53</bold></highlight> (both at the remote site <highlight><bold>14</bold></highlight>), the thread does not require communications via the communication link <highlight><bold>16</bold></highlight>. However, for data that is stored in the configuration database <highlight><bold>30</bold></highlight> and that is subscribed to by the user interface <highlight><bold>53</bold></highlight> (which are at different sites), the thread requires communication via the communication link <highlight><bold>16</bold></highlight>. As a result, it is desirable to store each piece of configuration data in a configuration database located at the site or other location from which this data is most likely to be accessed. The particulars of this scheme will be described in more detail later. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The techniques described herein provide a way for a user to make configuration changes to a remote system over a slow or remote communication link in the presence of a lot of noise, which may cause a lot of retries. These techniques also provide a mechanism for users to configure parts of a process control system that are disconnected from the main network or to configure multiple process control systems from the same configuration machine. These techniques also enable multiple users to work on the configuration of different parts of a system remotely, which can improve the overall concurrency of development of a process control system. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The concept of a briefcase database for use in a process control system will now be described with respect to FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight>. Generally speaking, the process control system using this structure is designed to have a master configuration database that stores all of the configuration data for all the sites of a process control system, including a main site and different remote sites. The main site and the remote sites may be communicatively connected via a slow or low bandwidth communication link like a satellite or cellular link, may be intermittently connected via a modem or telephone line link or may not be connected at all but rely on a portable computer or other portable memory to transfer configuration data from one site to another. Typically, the main site includes the master configuration database while each remote site, or the laptop or other computer that connects the main site to the remote site, includes a briefcase database that stores a copy of some or all of the configuration data within the master configuration database to be used at the remote site. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> The briefcase configuration database is initialized from the master configuration database by a user through download and reserve operations. In a download operation, the briefcase database copies or receives a download of the portions of the configuration data within the master configuration database that are needed to work on, restructure, change, tune, debug, etc. a remote site. The download operation can automatically download all of the configuration information needed by a user to perform a desired operation at the remote site, to view the state of the remote site, etc. A list of all of the configuration components needed for any operation may be created, stored and used to perform the download. Alternatively, a user may be allowed to select the important configuration objects needed for the activities at the remote site and some or all of the children and/or parents of these selected components may be automatically downloaded to the briefcase database. If desired, however, the user may select the specific components to be downloaded. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> A reserve operation is used to prevent configuration data from being changed within the master configuration database while this data is being used by the briefcase database. Only items that have been reserved within the master configuration database by a briefcase database can be changed at the remote site. To reserve an item, a configuration application may send a reserve message to the master configuration database, which then marks this item in the master configuration database as reserved and prevents other users from making changes to the item within the master configuration database. The item may optionally be locked when reserved to prevent reads of this item. Such a locked states prevents others from editing or reserving this item. Of course, the download and reserve operations may be performed via a slow, low bandwidth, or intermittent link as desired. However, because all of the configuration data is downloaded together or at the same time, such a download is more efficient than obtaining copies of the data from the master configuration database via a slow or low bandwidth link on an individual basis, as needed. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> After downloading and reserving configuration items, the briefcase database is taken to the remote site (if the briefcase database is not already at the remote site) and is used by a configuration application at the remote site to perform configuration activities. Because all of the configuration information needed to perform a particular operation has been provided to the briefcase database, the briefcase database can be used directly at the remote site or can be used to create a local database at the remote site and this local database can be used by any configuration application executed at the remote site. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Typically, configuration applications that use the briefcase database can only edit items that have been reserved from the master configuration database by that briefcase database. For example, if a user has reserved a module with a linked composite, the master configuration database will transfer the module plus all of the dependencies or children of that module into the briefcase database and only reserve the module. Of course, the linked composites can be reserved in the same manner as the module. If a user needs download capability, then the system will also allow the users to reserve download rights on specific nodes and exchange configuration information, including download records and status information for those nodes, with the briefcase database. If desired, the configuration application that uses the briefcase database may display configuration data stored in the briefcase database in a manner that clearly indicates the items which the user can edit. For example, editable items may be identified on the configuration hierarchy tree in solid type and all items that the user cannot change can be displayed as being greyed out. Of course, other manners of illustrating which items or components have been reserved can be used as well. As noted above, master configuration database items that have been reserved are locked in the master configuration database so that no changes may be made thereto other than by a promote operation (described below) generated by the briefcase database that reserved those items. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> After the user has made changes to the reserved items within the briefcase database, the briefcase database can then be synchronized with the master configuration database through a promote operation, wherein changes made to reserved configuration components are released back to the master configuration database. In particular, a promote operation promotes configuration items that have been reserved from the master configuration database back to the master configuration database where these changes are reflected or are stored in the master configuration database. Such an operation can, if desired, un-reserve the item within the master configuration database. A configuration application may send a promote message to the master configuration database along with the values or changes to the items being promoted all at once, to reduce the load on the slow communication link. Of course, the operations of reserving and promoting can be carried out on single items of configuration data such as, for example, library items, modules, nodes, cards, etc., or can be carried out on whole sections of a tree, such as on a parent and all of its children and sub-children. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> If desired, a configuration application may synchronize an entire briefcase database to the master configuration database by, for example, exporting the reserved items from the briefcase database, zipping the export file and transferring the zipped export file to the node with the master database thereon (i.e., via the slow or low bandwidth communication link). At the master database, an application may unzip the export file, import this file into the master database in any known or desired manner, extract the current structure for the master database into the textual or data format used in the master database, zip the export file, and transfer the zipped export file back to the node having the briefcase database. The application at the briefcase database then unzips the export file and imports this unzipped file back into the briefcase database. This process will assure that all of the items within the master configuration database and the briefcase configuration database are the same. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> process control system <highlight><bold>100</bold></highlight> which uses a briefcase database as described above for configuration activities is illustrated. The process control system <highlight><bold>100</bold></highlight> includes a main site <highlight><bold>101</bold></highlight> having user interfaces <highlight><bold>102</bold></highlight> and <highlight><bold>104</bold></highlight> connected to a controller <highlight><bold>106</bold></highlight> which performs control activities. The user interfaces <highlight><bold>102</bold></highlight> and <highlight><bold>104</bold></highlight> are also connected to a runtime data server <highlight><bold>108</bold></highlight> and to a configuration database server <highlight><bold>110</bold></highlight> which communicate with a remote site <highlight><bold>111</bold></highlight> via a slow communication link, such as a satellite link, a modem link, a cellular link, etc. The main site <highlight><bold>101</bold></highlight> also includes a master configuration database <highlight><bold>112</bold></highlight> that is accessible by the database server <highlight><bold>110</bold></highlight>. Similarly, the remote site <highlight><bold>111</bold></highlight> includes user interfaces <highlight><bold>114</bold></highlight> and <highlight><bold>116</bold></highlight> connected to a runtime server <highlight><bold>118</bold></highlight> and to a configuration database server <highlight><bold>120</bold></highlight> which communicate with the main site <highlight><bold>101</bold></highlight> via the slow link. The remote site <highlight><bold>111</bold></highlight> also includes a briefcase configuration database <highlight><bold>122</bold></highlight>. The briefcase configuration database <highlight><bold>112</bold></highlight> can be used as a local database for remote site <highlight><bold>111</bold></highlight> and may obtain configuration information over the slow link from the master configuration database <highlight><bold>112</bold></highlight> at the main site <highlight><bold>101</bold></highlight>. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Using a configuration application that provides remote browsing, reserve, and synchronize operations from one of the user interfaces <highlight><bold>114</bold></highlight> and <highlight><bold>116</bold></highlight>, an engineer can download configuration information from the master configuration database <highlight><bold>112</bold></highlight> to the briefcase database <highlight><bold>122</bold></highlight>. As part of this procedure, the user can be given the opportunity to copy the master database <highlight><bold>112</bold></highlight>, copy the tree structure for the master database <highlight><bold>112</bold></highlight>, or create the local or briefcase database without copying any structure from the master database <highlight><bold>112</bold></highlight>. At this time, the user at the remote site <highlight><bold>111</bold></highlight> can also reserve, within the master configuration database <highlight><bold>112</bold></highlight>, some or all of the downloaded information to be able to make changes to that information and to prevent others from trying to change that information within the master database <highlight><bold>112</bold></highlight>. Preferably, the download operation provides all of the needed configuration information at once over the slow communication link, which is more efficient than obtaining this data piecemeal over the slow link. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Thereafter, the user can configure the remote site <highlight><bold>111</bold></highlight> or elements thereof using a configuration application and the briefcase database <highlight><bold>122</bold></highlight> at the remote site. If desired, the user could also or instead configure portions of the main site <highlight><bold>101</bold></highlight> from the remote site <highlight><bold>111</bold></highlight>. At this time, the configuration application executed in, for example, the user interface <highlight><bold>116</bold></highlight>, may access the briefcase database <highlight><bold>122</bold></highlight> and display or otherwise use the portions of the configuration hierarchy or tree stored within the briefcase database <highlight><bold>122</bold></highlight>. If the user wishes to see the structure in the master database <highlight><bold>112</bold></highlight>, the user can run a synchronization operation which queries the master database <highlight><bold>112</bold></highlight> via the slow link for all of the information therein, for the tree structure, or for any other desired portion of the configuration information within the master database <highlight><bold>112</bold></highlight> and updates the briefcase database <highlight><bold>122</bold></highlight> with this information. When finished with the configuration activities for reserved item(s), the user may promote the changes made to the reserved item(s) back to the master database <highlight><bold>112</bold></highlight> via the slow link to cause the changes to be stored in the master configuration database <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, one or more briefcase databases may be used to perform configuration activities from disconnected workstations. In particular, <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a process control system <highlight><bold>130</bold></highlight> that includes a main site <highlight><bold>131</bold></highlight> having a master configuration database <highlight><bold>132</bold></highlight>, a configuration database server <highlight><bold>133</bold></highlight> and a user interface <highlight><bold>134</bold></highlight> associated therewith. Remote sites <highlight><bold>135</bold></highlight> and <highlight><bold>136</bold></highlight> similarly each include a database server <highlight><bold>138</bold></highlight>, one or more user interfaces or workstations <highlight><bold>140</bold></highlight> that may execute configuration applications and one or more briefcase configuration databases <highlight><bold>142</bold></highlight> that may be used to perform configuration activities on any of the items in the master configuration database <highlight><bold>132</bold></highlight>. If desired, the briefcase database <highlight><bold>142</bold></highlight> may be within one of the user interface devices <highlight><bold>140</bold></highlight>. Similar to the system of <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, users at the workstations <highlight><bold>140</bold></highlight> may use a configuration application executed in, for example, one of the interfaces <highlight><bold>140</bold></highlight>, to connect to the master database <highlight><bold>132</bold></highlight>, download configuration information therefrom, and reserve within the master configuration database <highlight><bold>132</bold></highlight> all of the items that are to be changed. Such a download can be performed over a slow link or via an intermittent connection, such as a dial up connection, or via a portable removable physical connection, such as a laptop computer. In any event, the different sites <highlight><bold>135</bold></highlight> and <highlight><bold>136</bold></highlight> download some or all of the same configuration information from the master configuration database <highlight><bold>132</bold></highlight> to the briefcase databases <highlight><bold>142</bold></highlight>. However, the users at the different remote sites <highlight><bold>135</bold></highlight> and <highlight><bold>136</bold></highlight> may reserve separate items to be changed. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> After a download procedure has been performed, configuration applications may be executed on the workstations <highlight><bold>140</bold></highlight> to change or modify the items that have been reserved within each briefcase database <highlight><bold>142</bold></highlight> and, at some point, changes to these reserved items may be uploaded back into the master configuration database <highlight><bold>132</bold></highlight> using a promote procedure. In this manner, the briefcase databases <highlight><bold>142</bold></highlight> may be used on workstations <highlight><bold>140</bold></highlight> which are totally disconnected from the main network <highlight><bold>131</bold></highlight> or that are connected via a slow communication link so that, for example, an engineer can pull items into the workstation <highlight><bold>140</bold></highlight> to work on elsewhere, change these items and promote the newer versions of these items back into the master database <highlight><bold>132</bold></highlight> at a later date. By enabling a number of different briefcase databases <highlight><bold>142</bold></highlight> to be created at the same time, concurrent engineering can be enhanced. In particular, each briefcase database <highlight><bold>142</bold></highlight> may contain a subset of the configuration within the master configuration database <highlight><bold>132</bold></highlight> so that the configuration operations can be logically divided, assigned to and completed by different engineers. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> If desired, new configuration data can be periodically promoted back to the master database <highlight><bold>132</bold></highlight> to enable data to flow between the different briefcase databases <highlight><bold>142</bold></highlight>. For example, in practice, one engineer may work on a piece of equipment and another may work on the control module operating on that equipment. The latter will need the final version of the equipment configuration component before completing the control module configuration component. However, the final equipment definition can be pulled from the master database <highlight><bold>132</bold></highlight> after the first engineer has completed work on the equipment definition and has promoted the contents of this definition back into the master database <highlight><bold>132</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> illustrates another example process control system <highlight><bold>145</bold></highlight> in which briefcase databases may be used advantageously. The process control system <highlight><bold>145</bold></highlight> includes a control room having a master configuration database <highlight><bold>147</bold></highlight> connected to a database server <highlight><bold>148</bold></highlight>, a user workstation <highlight><bold>149</bold></highlight> and a runtime server <highlight><bold>150</bold></highlight>. The system <highlight><bold>145</bold></highlight> also includes a plant floor having a database server <highlight><bold>152</bold></highlight> and a runtime server <highlight><bold>154</bold></highlight> connected to the control room via a LAN connection, which may be any type of LAN connection including a shared LAN. The plant floor also includes a briefcase database <highlight><bold>156</bold></highlight> that may be connected to or disposed within, for example, a laptop <highlight><bold>158</bold></highlight> or other computer, user interface or workstation used by, for example, a plant technician or an engineer to make changes on the plant floor. The user at the plant floor can run a configuration application from the computer <highlight><bold>158</bold></highlight> to obtain items of the configuration data stored in the master database <highlight><bold>147</bold></highlight> via the LAN and to reserve at least some of these items. Thereafter, once the reserved items as well as any other items needed by a configuration application to make configuration changes on the plant floor are downloaded to the briefcase database <highlight><bold>156</bold></highlight>, the user at the plant floor can run the configuration application using the local or briefcase database <highlight><bold>156</bold></highlight> to make changes to the reserved items and can then promote these changes back to the master database <highlight><bold>147</bold></highlight> via the LAN. This process eliminates the need to make numerous calls over the shared LAN to the master database <highlight><bold>147</bold></highlight>, which is inefficient. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Simultaneously, a user at a home may have a computer <highlight><bold>160</bold></highlight> and a briefcase database <highlight><bold>162</bold></highlight> connected to the master database <highlight><bold>147</bold></highlight> via a database server <highlight><bold>164</bold></highlight>, which may be, for example, a dial-up modem. This user can obtain configuration data from the master database <highlight><bold>147</bold></highlight> via the modem <highlight><bold>164</bold></highlight> and store this information in the briefcase database <highlight><bold>162</bold></highlight>, reserving the items this user may want to change. The user at the home can then execute a configuration application that operates on the configuration information within the briefcase database <highlight><bold>162</bold></highlight> at his or her leisure and promote changes back to the master database <highlight><bold>147</bold></highlight> via the dial-up modem when complete. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> If desired, a user can download or place information pertaining to different process control systems, sites, etc. in the same briefcase database if, for example, the user wishes to make changes to two different process control systems. In such a situation, multiple briefcase databases may be stored in one computer and this one computer can be used to configure different sites of the same process or to configure different sites associated with different processes. Typically, such a computer will be a laptop or other portable computer that stores and executes configuration applications and that includes a configuration database and associated database loading and access applications. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> If desired, the master database of any of the systems of <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>-<highlight><bold>5</bold></highlight> may automatically store a revision history of configuration items therein to provide source control for changes to configuration items. Similarly, items in the briefcase database that have been modified may be displayed as having a visual tick attached thereto to indicate the briefcase version has been modified and that a promote activity needs to be performed. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Instead of providing a briefcase database, a mirror database may be kept at remote sites of a process control system. The mirror database extends the briefcase model by keeping two databases, i.e., the remote database and the master database synchronized, which may be desirable in, for example, onshore/offshore process control configuration where editing a database over a slow link is not feasible. The mirror database may also be used to support redundancy. In the mirror database, all the configuration items including, for example, library, setup and control data, are subscribed to by the mirror database from the master database. Such a subscription may be implemented in the manner described in connection with FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>15</bold></highlight> herein if desired. Furthermore, a configuration item is automatically reserved from the master database when this configuration item is edited in the mirror database. Thus, an edit in the mirror database automatically sends a message over the slow communication link to the master configuration database to reserve that item. If the reserve operation fails due to a lock of that item within the master configuration database, then the edit in the mirror database is prevented. At some point later in time, after a change is made in the mirror database, the configuration item is promoted from the mirror database back into the master configuration database. Such a promote activity may be accomplished automatically when a change is made, periodically on a timed basis, such as every 10 minutes, or manually in response to a user command to perform a promote activity. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Conversely, due to the subscription by the mirror database to the master database, changes to the master configuration database are immediately pushed or sent to the mirror database over the slow communication link. With a mirror database, both databases can operate independently when the communication link is down. However, modifications to the databases must be manually merged when the communication link is restored. In general, multiple mirror databases can exist as subscribers to the same master database. Due to the subscription nature of the connection between the mirror database and master database, once the mirror database is established, only changes to data within the mirror database and the master database need to be sent over the slow or low bandwidth communication link, which is more efficient than trying to download configuration data piecemeal as needed by each of the users of the mirror databases. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Instead of having a single master configuration database and one or more briefcase or mirror databases that may be periodically synchronized to the master configuration database, or in addition to this setup, a configuration database may be distributed throughout different portions of a process control system so that different components of the configuration data are stored in different physical databases located at different physical sites of the process control system. This distributed configuration database may be used to enable the configuration information associated with two or more geographically separated sites or locations to be integrated together and to provide a seamless view of the entire process control system, wherein this seamless view may include any or all of the process control configuration components in the each of the different sites or locations. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates a process control system <highlight><bold>170</bold></highlight> as having a hierarchy of configuration databases associated with different logical and/or physical locations. The process control system <highlight><bold>170</bold></highlight> includes three zones named Zone_A <highlight><bold>172</bold></highlight>, Zone_B <highlight><bold>174</bold></highlight> and Zone_C <highlight><bold>176</bold></highlight>, two sites named Site<highlight><subscript>&mdash;</subscript></highlight>1 <highlight><bold>180</bold></highlight> and Site<highlight><subscript>&mdash;</subscript></highlight>2 <highlight><bold>182</bold></highlight> and an enterprise network <highlight><bold>184</bold></highlight>. The zones <highlight><bold>172</bold></highlight> and <highlight><bold>174</bold></highlight> include configuration databases <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>174</bold></highlight><highlight><italic>a</italic></highlight>, respectively, and these zones are communicatively connected via, for example, a satellite, a modem or other slow, low bandwidth or intermittent communication link, to the site <highlight><bold>180</bold></highlight> (as indicated by the lines between the zones <highlight><bold>172</bold></highlight> and <highlight><bold>174</bold></highlight> and the site <highlight><bold>180</bold></highlight>). Likewise, the zone <highlight><bold>176</bold></highlight> includes a configuration database <highlight><bold>176</bold></highlight><highlight><italic>a </italic></highlight>and is communicatively connected via any desired communication link to the site <highlight><bold>182</bold></highlight>. Still further, the sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight> include configuration databases <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>182</bold></highlight><highlight><italic>a</italic></highlight>, respectively and are connected to the enterprise system <highlight><bold>184</bold></highlight> via any desired communication link. The enterprise system <highlight><bold>184</bold></highlight> also includes a configuration database <highlight><bold>184</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> A zone, such as any of the zones <highlight><bold>172</bold></highlight>, <highlight><bold>174</bold></highlight> and <highlight><bold>176</bold></highlight>, is typically a logical and, in many cases, may be a physical division of a large control system. Thus, a zone generally can function with no connection to the outside world. A zone may, for example be any traditional process control system having interconnected devices at a particular geographic location. A site, such as either of the sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight>, is a logical definition of an area, region, etc. and may have any number of zones associated therewith. The enterprise system <highlight><bold>184</bold></highlight> is the highest level system in the configuration database hierarchy within the process control system <highlight><bold>170</bold></highlight> and is communicatively connected to each of the sites and, thereby, to each of the zones within the process control system <highlight><bold>170</bold></highlight>. Of course, other sites, zones and areas, or other logical units could be interconnected into the hierarchy of the process control system <highlight><bold>170</bold></highlight> via slow or other communication links and the different geographical locations of a process control system may be interconnected in other manners so long as the configuration database of any zone, site, area, etc. is accessible from any other zone, site, area, etc. via one or a series of two or more communication links. Still further, while the distributed configuration database hierarchy of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> includes three levels (zones, sites and the enterprise), two levels or four or more levels could be used instead. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> As illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, each portion of the process control system <highlight><bold>170</bold></highlight> has a configuration database associated therewith and the configuration information for the entire process control system <highlight><bold>170</bold></highlight> or the different elements thereof is distributed throughout the databases <highlight><bold>172</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>174</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>176</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>180</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>182</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>184</bold></highlight><highlight><italic>a</italic></highlight>. In a preferred embodiment, the configuration data or configuration components are stored in the configuration database for the lowest level in the hierarchy made up by the enterprise, sites and zones for which that data is uniquely named. Thus, for example, library data, which may store templates of devices and software elements that can be used anywhere in the process control system <highlight><bold>170</bold></highlight>, will typically be stored in and accessible from the highest level in the hierarchy, i.e., in the configuration database <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>of the enterprise system <highlight><bold>184</bold></highlight>. Similarly, information pertaining to the library components and the system configuration of a site may be stored in the configuration database of the site while configuration information pertaining to particular devices, control modules, etc. in a zone will be stored in the configuration database of that zone. Furthermore, control configuration information will typically be stored in a zone configuration database because this configuration information relates directly to physical devices within that zone. Generally speaking, the goal is to store any particular piece of configuration data in the configuration database of the hierarchy of databases where this configuration data is most likely to be accessed or in a manner that any particular piece of configuration data can be found easily by users at other locations of the process control system <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> According to the distributed configuration database strategy depicted in <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> configuration application run within any one of the zones, sites, areas, etc. of the process control system <highlight><bold>170</bold></highlight> will access configuration data from one or more configuration databases that may be located at the same site, zone, etc. and/or at other sites, zones, etc. and will access that data as necessary to illustrate the current state of the process control system <highlight><bold>170</bold></highlight> or to perform some other configuration operation. As will be understood, a configuration application executed from any of the zones, sites or the enterprise system of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is able to access the configuration data stored in any of the different configuration databases to produce a view of the current configuration of any part of or of all of the process control system <highlight><bold>170</bold></highlight> and may be able to reconfigure any of the elements within any of the sites, zones, etc. of the process control system <highlight><bold>170</bold></highlight>. A distributed configuration database, such as the one illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, tends to decrease the amount of communication that needs to occur over the slow communication links because, typically speaking, users at a site or zone are more likely to view, use and change the configuration data of that site or zone rather than of a different site or zone, which means that most of the reads from and writes to the configuration database within a site or a zone will come from user interfaces within that site or zone while fewer such reads and writes will come from other zones or sites via one or more slow communication links. However, all the configuration information for any part of the process control system <highlight><bold>170</bold></highlight> is still available to user interfaces or other devices in any other part of the process control system <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> To enable communication between different zones, sites, etc., each database within the system may store information pertaining to the general set up of the configuration hierarchy. For example, each database may store some object roots that are common to the configuration in all locations, and store pointers that indicate the specific database that has further configuration information about these roots or that indicate the next database to ask for this information. Thus, a user in Zone_A <highlight><bold>172</bold></highlight> may try to access a root object and request children of that root. In response, the configuration database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>may find the database that stores the children by looking at a pointer for the selected root, and this pointer may indicate that the data for that root must be accessed from the enterprise database <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>or that the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>should be accessed for further pointers to that data. The database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>can the cause a read of the database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>over a slow link, which may cause the database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>to perform a read of the enterprise database <highlight><bold>184</bold></highlight><highlight><italic>a</italic></highlight>. Of course, it is possible that the enterprise database <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>will need to access the Site<highlight><subscript>&mdash;</subscript></highlight>2 database <highlight><bold>182</bold></highlight><highlight><italic>a </italic></highlight>which may need to access the Zone_C database <highlight><bold>176</bold></highlight><highlight><italic>a </italic></highlight>for the data. Alternatively, browser or sniffing applications may be provided at each database to enable, for example, the Zone_A database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>to browse the Site<highlight><subscript>&mdash;</subscript></highlight>1 database or other databases to find the location of any particular piece of configuration data within the distributed configuration system <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> If desired, each database within the system <highlight><bold>170</bold></highlight> may store a local copy of data that is stored originally at a different site, zone, etc. In particular, when a request for data that is not stored in a particular database is received, the database may retrieve that data from a different database and, upon retrieving this data, may store it locally to be used by users connected directly to the database (such as users in the same site or zone) or to be sent to in response to requests by other databases within the database hierarchy. Thus, in the example above, each of the databases <highlight><bold>180</bold></highlight><highlight><italic>a</italic></highlight>, <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>and <highlight><bold>182</bold></highlight><highlight><italic>a </italic></highlight>may store a local copy of configuration data originally stored in the Zone_C database <highlight><bold>176</bold></highlight><highlight><italic>a </italic></highlight>because that data was requested by the Zone_A database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>or a user in Zone_A. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Because some or all of the configuration data for a particular configuration view displayed on any user interface may have to be accessed via one or more slow communication links, it is possible to run into a situation in which configuration data displayed on a particular user interface becomes stale or out of date based on changes made to the configuration information by another user, either in the same site or zone or in a different one. While each configuration application could periodically access the appropriate configuration database to refresh the configuration information being presented on a screen, this periodic refreshing would substantially increase the amount of communications that must occur over the slow communication links and would also increase the reads from the configuration databases, which slows communications within the process control system <highlight><bold>170</bold></highlight> and adds to the load of each of the configuration databases therein. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> To overcome this problem, each configuration application that is accessing configuration data may subscribe to the appropriate configuration database for each configuration component being displayed on the screen (or otherwise being used) and the configuration database that stores this data automatically notifies each subscribing configuration application (client) of any changes made to the information within the configuration database. These changes may then be automatically sent to the client to be, for example, displayed on a user screen, or the changes may be requested by the user. In this manner, the configuration information being used by each configuration application, e.g., each piece of information being illustrated on each screen, is up to date no matter where the client application that uses this information is located within the process control system <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> Of course, when a client application no longer needs a particular piece of configuration information, such as when a user no longer wishes to view a particular piece of configuration information in a configuration hierarchy, the configuration application de-subscribes from the configuration database that stores that piece of information so that change notifications and updates are no longer sent back to the subscribing configuration application. In this manner, the configuration application finds the configuration database that stores each piece of configuration information within, for example, the tree <highlight><bold>65</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, retrieves that information through one or more slow communication links if necessary, subscribes to each piece of information therein to receive updates made to that information within the configuration database in which that information is stored and, upon receiving updates to the displayed information (which may be caused by another user making a change to the configuration of the system being viewed), displays the new or updated information. If a user or operator drills down into a section of the configuration tree being displayed, the configuration application accesses the new information, subscribes to this information and displays this information in the same manner. If some of the displayed information is dropped from the user screen, the configuration application de-subscribes from the data that was dropped. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> If desired, all of the configuration information obtained (e.g. viewed on the screen of a particular user interface) may be stored in a local cache or memory associated with a configuration application being run or may be stored in the configuration database within the zone, site, etc. in which the application is being run so that, if a connection to the appropriate database is lost, the user or users at that site, zone, etc. may still pull this configuration information up from the local cache. However, this information may be displayed in a manner that indicates that this information comes from the local cache (such as being displayed in a greyed-out state) so that the user knows that this information may not be current. Using such a local cache to store configuration data already obtained via one or more slow links enables a user to view any configuration information that was already viewed or accessed by that user if a communication line or link goes down. Also, if the user wishes to view information that was dropped from his or her screen, this information may be pulled from the local cache to make it appear more quickly while the connection to the appropriate configuration database for that information may be reestablished to update that information. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> While <cross-reference target="DRAWINGS">FIG. 6</cross-reference> illustrates each of the sites and zones as being interconnected by a slow link, such a set up is not necessary. For example, the configuration database for a site may be located in a zone and may be directly accessible from that zone while being accessible via a slow communication link to other zones associated with that site. For example, to establish a distributed configuration database, such as that illustrated in <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> user in Zone_A <highlight><bold>172</bold></highlight> may create a site database (i.e., the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a</italic></highlight>) on the same machine as the Zone_A database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>or on a different machine connected to the Zone_A database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>via a direct high speed connection. Alternatively, the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>may be connected to the Zone_A database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>via a slow link. The user publishes some or all of the libraries and setup data in Zone_A to the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>and/or to the enterprise system database <highlight><bold>184</bold></highlight><highlight><italic>a</italic></highlight>. Thereafter, the database <highlight><bold>172</bold></highlight><highlight><italic>a </italic></highlight>in Zone_A <highlight><bold>172</bold></highlight> may automatically subscribe to one or more of the configuration items within the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a</italic></highlight>, the enterprise database <highlight><bold>184</bold></highlight><highlight><italic>a</italic></highlight>, etc. when a user or a configuration application within Zone_A <highlight><bold>172</bold></highlight> needs or wants to access those items. If desired, any configuration database of the system <highlight><bold>170</bold></highlight> could always subscribe to some or all of the configuration information within one or more of the other configuration databases of that system. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Next, a user in Zone_B <highlight><bold>174</bold></highlight> may select the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>created by the user in Zone_A as the site database for Zone_B <highlight><bold>174</bold></highlight>. The user in Zone_B <highlight><bold>174</bold></highlight> then subscribes to some or all of the libraries and setup data in the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>which may result in conflicts where an item with the same name exists in the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>and the Zone_B database <highlight><bold>174</bold></highlight><highlight><italic>a</italic></highlight>. A configuration application may notify the user in Zone_B <highlight><bold>174</bold></highlight> of this problem and the user in Zone_B <highlight><bold>174</bold></highlight> may be given the option of renaming a local item before subscribing to items in the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>or of overwriting the local item. Additionally the user in Zone_B <highlight><bold>174</bold></highlight> may publish items to the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>and, thereafter, Zone_A <highlight><bold>172</bold></highlight> is notified of the additions to the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight><highlight><italic>a </italic></highlight>to which Zone_A subscribes and may then subscribe to these additional configuration items. Of course, the enterprise/site hierarchy is configured in a similar manner to thereby enable communication between the sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight> and between the zones <highlight><bold>172</bold></highlight>, <highlight><bold>174</bold></highlight> and <highlight><bold>176</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> To establish a connection between Zone_A <highlight><bold>172</bold></highlight> and Zone_C <highlight><bold>176</bold></highlight> when, for example, a user in Zone_A <highlight><bold>172</bold></highlight> wishes to view configuration components stored in the database <highlight><bold>176</bold></highlight><highlight><italic>a </italic></highlight>of Zone_C <highlight><bold>176</bold></highlight>, the Zone_C database <highlight><bold>176</bold></highlight><highlight><italic>a </italic></highlight>will publish this data to the Site<highlight><subscript>&mdash;</subscript></highlight>2 database <highlight><bold>182</bold></highlight> which subscribes to this information and which publishes this information to the enterprise system database <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>which subscribes to this information from Site<highlight><subscript>&mdash;</subscript></highlight>2 <highlight><bold>182</bold></highlight>. Site<highlight><subscript>&mdash;</subscript></highlight>1 <highlight><bold>180</bold></highlight> subscribes to this information from the enterprise database <highlight><bold>184</bold></highlight><highlight><italic>a </italic></highlight>while Zone_A <highlight><bold>172</bold></highlight> subscribes to this information from the Site<highlight><subscript>&mdash;</subscript></highlight>1 database <highlight><bold>180</bold></highlight>. The established subscriber relationships may then be used to notify a client or user in Zone_A <highlight><bold>172</bold></highlight> of changes to configuration components stored in the Zone_C database <highlight><bold>176</bold></highlight><highlight><italic>a</italic></highlight>. As indicated above, a zone, a site, etc. can subscribe to items individually or to a whole sub-tree of objects including parents and all of the associated children. Subscription may also entail taking a copy of the items, adding these items to the local zone configuration database and establishing an ongoing communication relationship between the published items and the local copies. The publisher database may keep track of the subscribers while the subscribing databases keep track of where the original information is stored. This source/destination information can be used to direct reservation of items within a configuration database and to make changes from remote locations. Likewise, this information may be used to re-establish the publish/subscribe relationship if a database has to be restored from backup. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Of course, because communication between zones cannot always be guaranteed due to the presence of the slow communication links between zones, the zones will continue to function independently when communication links are down. However, when communication is re-established any conflicts must be resolved manually. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> It will be understood that communications between zones, sites and the enterprise may be performed on a publish or subscribe basis wherein the configuration database that has a master copy of the configuration item publishes that item when one or more subscribers subscribe to the item. The subscribers may be, for example, configuration applications being executed in user interfaces (e.g., workstations or other computers) within different sites or zones, may be databases within these sites or zones, which databases are used by configuration applications executed in those zones, or may be any other device or application which uses the configuration data. The items within a database that can be subscribed to by other sites or zones are called shared objects. Of course, different kinds of operations may be performed on shared objects, such as 1) browse, in which a subscriber configuration application views the list of shared objects available from the publisher, 2) subscribe, in which a subscriber configuration application requests a local copy of the shared object for use in configuration activities at the subscriber location, 3) copy to local object, in which a subscriber configuration application copies an item to a non-shared local object or database, 4) delete, in which a subscriber configuration application deletes the shared instance in the publisher, 5) un-subscribe, in which a subscriber configuration application breaks the subscription link between the local copy of the configuration item at the subscriber and the publisher copy, 6) pull changes, in which the subscriber configuration application retrieves the latest version of the shared item from the publisher, 7) reserve, in which the subscriber configuration application locks a shared object in the publisher database to prevent this object from being changed by another user, and 8) promote in which the subscriber configuration application pushes changes made to a reserved item back to the publisher database. These operations may be performed by sending messages between the subscriber and publisher and executing software in the subscriber location and the publisher location to deal with the messages and to take appropriate actions as defined above. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> From a configuration perspective, there are several inter-zones activities that may be performed, including sharing setup and library data between zones, browsing or viewing setup, library and configuration data from another zone, configuring inter-zone references and namespace co-ordination between zones. In one embodiment, configuration objects or items are shared from the immediate parent within the hierarchy. For example, zones <highlight><bold>172</bold></highlight> and <highlight><bold>174</bold></highlight> share a composite definition from the site <highlight><bold>180</bold></highlight> and all zones share a common enumeration set from the enterprise system <highlight><bold>184</bold></highlight>. Zones <highlight><bold>172</bold></highlight> and <highlight><bold>174</bold></highlight> subscribe to the definitions in the site <highlight><bold>180</bold></highlight> while the zone <highlight><bold>176</bold></highlight> subscribes to the definitions in the site <highlight><bold>182</bold></highlight>. Likewise, both sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight> subscribe to common definitions in the enterprise system <highlight><bold>184</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Browsing services are provided within a configuration application to find a server in the enterprise/site/zone hierarchy and to browse the configuration database associated with one of those locations. Browsing services are used to set up subscription to shared objects and to configure inter-zone references. In particular, browse information is queried from a remote server upon user request and is cached locally. Browse roots may be detected by sniffing the network or may detected using any other desired or known browsing technique. The knowledge of detected or configured browse roots may be persistent and, thus, will remain cached through a power cycle. The existence of these configuration object roots enables a user to browse down to other information associated with the roots to find the location of or the path to this information within the distributed configuration hierarchy. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Inter-zone references may be configured by entering the reference directly or by browsing to an attribute in a remote database. References may take the form of, for example, &ldquo;//ZoneName/TaggedItem/ . . . /AttributeName&rdquo; or any other desired form. It will be understood that zone names must be unique within an enterprise hierarchy to resolve inter-zone references. Within each zone, there is a namespace for tagged items and the configuration system may enforce uniqueness of tags within a zone. Thus, each configuration application may have a tool that determines whether a tag is unique within a site or the enterprise at a given moment in time to enforce uniqueness in naming within the distributed configuration database. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> If desired, security between zones may be provided in any desired manner and a zone administrator may grant privileges to access shared objects for a user, group, etc. Such privileges may include the ability to browse and subscribe to shared objects, the ability to pull changes from a publisher for objects or configuration items and the ability to reserve, modify and promote changes. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Still further, if desired, different zones may use different languages which may be beneficial in, for example, Europe, where companies span regions using many different languages. In this case, enumerated values may be passed between zones as numeric values or as a local data string (such as a word) which may be displayed along with a numeric value that is common throughout the process control system for the same word or phrase in different languages. In this manner, a user may identify the enumerated value, command, etc. by its corresponding number, which enables ease of conversion from one language to another. In any event, to browse a database that uses a different language requires that the relevant font be installed on the browsing machine or zone. In one embodiment, inter-zone references are configured in the language of the remote zone and Unicode strings are used throughout the system exclusively to enable detection or conversion of any character in any language supported by Unicode. In this case, a single database may handle storing strings of multiple languages and database export files are exchanged in Unicode format. In other words, files from different locales are imported into each database using the Unicode format. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> To assure that modifications can be performed without interference, modifications to shared data may be subject to a reserve/promote procedure described above. In this case, before an item can be revised, the modifying user must reserve this item into the zone of the modifying user. Only one user or zone can reserve an item at any particular time. After an item has been reserved, changes are made to the item in the local database which has reserved this item, such changes being made as a result of new configuration activity by the user who reserved the item. Thereafter, the item or group of items that have been reserved and modified are promoted back to the configuration database where this data is stored as the master set of data. Such a reserve/promote procedure assures that two users cannot try to change the same item at the same time. Instead, the second user to try to reserve the item is prevented from making any modifications until the first user to reserve the item has promoted the changes to the item back to the configuration database which stores the master version of that item. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Generally, two modes of subscription may be used. In the first mode, referred to herein as a safe subscription mode, new shared items are automatically pulled into a subscribing zone or site while modifications to and deletions of items that already exist are pulled manually, i.e., a direct command from the user is required to perform the pull of the changed or deleted information. In this case, the user may be notified of a change to or deletion of a configuration to which the user system is subscribing and may be asked whether the configuration application is to pull that change to the local database. Alternatively, all modifications can be pulled automatically so that any changes to the shared database are imported into the subscribing databases without user intervention. It should be noted that, in the safe subscription mode, a change notification is not transitive through the entire hierarchy. Thus, for example, if an enterprise item is revised, the dependent sites are notified. However, it is not until the changes are actually pulled down to a site that the zones associated with that site are notified of the changes. As a result, the publisher, i.e., the database that stores the master copy of that configuration item, may keep track of whether a subscriber has taken the latest revision of an item and this information may be used to resynchronize the publisher/subscriber relationship if either database has to be restored from backup. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Furthermore, it will be understood that the failure of a subscriber to pull changes can lead to differences in the configuration hierarchy at lower levels in the configuration database hierarchy. For example, if the enterprise system <highlight><bold>184</bold></highlight> notifies the sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference> of a change and if the Site<highlight><subscript>&mdash;</subscript></highlight>2 <highlight><bold>182</bold></highlight> pulls this change while the Site<highlight><subscript>&mdash;</subscript></highlight>1 <highlight><bold>180</bold></highlight> does not, then the configuration hierarchy viewed at the sites <highlight><bold>180</bold></highlight> and <highlight><bold>182</bold></highlight> will be different. Furthermore, upon the Site<highlight><subscript>&mdash;</subscript></highlight>2 <highlight><bold>182</bold></highlight> pulling the change, a change notification will be sent to subscribers in the Zone_C <highlight><bold>176</bold></highlight> which can pull this change or at least know that a change has occurred. However the subscribers in the Zone_A <highlight><bold>172</bold></highlight> and Zone_B <highlight><bold>174</bold></highlight> will not know of the change because Site<highlight><subscript>&mdash;</subscript></highlight>1 <highlight><bold>180</bold></highlight> has not pulled the change and, therefore, Zone_A <highlight><bold>172</bold></highlight> and Zone_B cannot pull the change. In this case, the configuration hierarchy available at the zones <highlight><bold>172</bold></highlight> and <highlight><bold>174</bold></highlight> is different than that available at the zone <highlight><bold>176</bold></highlight>. If desired, a configuration application may be provided that displays the list of upstream and downstream dependencies to help the user see what is happening with respect to changes. When the user attempts to pull an item, the configuration application can detect any upstream revision mismatches and ask the user if these items should also be pulled. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Referring now to FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>15</bold></highlight>, a system for efficiently accessing and distributing data from a database within a process control system will be described herein. Generally speaking, the database access system uses a shared cache to publish data stored in the database to one or more subscribers (also called clients) of that data and to provide update or change notifications to the subscribers or clients when changes to the data occur within the database. It will be understood that the database access system described herein may be used in any of the databases within a process control system, such as any of the configuration databases <highlight><bold>30</bold></highlight> and <highlight><bold>54</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, any of the master configuration databases of FIGS. <highlight><bold>3</bold></highlight>-<highlight><bold>5</bold></highlight> or any of the configuration databases of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>. Likewise, the subscriber or client of the data within a database being accessed can be any other configuration database, any configuration application executed in any user interface within the system or any other application that uses the configuration data, and these clients may be communicatively connected to the database being accessed using, for example, a direct or high speed communication link, a slow or low bandwidth communication link or an intermittent communication link. Thus, for example, the clients described in FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>15</bold></highlight> can be located in any of the zones or sites of <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>-<highlight><bold>6</bold></highlight>. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Generally speaking, each client communicates with a database server associated with a configuration database that stores the configuration components to which the client subscribes. At the start of the subscribing process, a client thread is established within the database server for each different client that connects to the configuration database and this thread provides access to one or more particular components within the configuration database. Thereafter, changes to the components within the configuration database are recognized and notifications of these changes and, if desired, the changes themselves, are sent back to each client that is subscribing to that configuration component. If a client un-subscribes from a configuration component, no change notifications are provided back to the client for that component. A client may also use a client thread to lock, reserve, promote to or otherwise make changes to the component. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> It will be understood that the use the term &ldquo;thread&rdquo; refers to a processing path or a processing procedure performed by a processor within the database server and is a known technique of performing parallel processing. Generally speaking, a processor may execute multiple threads simultaneously by interleaving tasks associated with the different threads being executed. For example, the processor may perform, in order, the first step associated with a first thread, the first step associated with a second thread, the first step associated with a third thread, and then the second step associated with the first thread, the second step associated with the second thread, the second step associated with the third thread, and so on. Threads may be added or deleted without effecting other threads being executed. Threads may communicate with each other threads using inter-thread notices or messages. Also, data stored and used by different threads may be thread local, i.e., only known or capable of being accessed by the thread which created or stored the data. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> block diagram of a configuration database communication system <highlight><bold>200</bold></highlight> which implements subscriber relationships between multiple clients and a configuration database includes a database server <highlight><bold>202</bold></highlight> communicatively coupled between a configuration database <highlight><bold>203</bold></highlight> and multiple clients <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight>. The configuration database <highlight><bold>203</bold></highlight> is illustrated as including two data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight>, each of which stores a configuration component being subscribed to by one or more of the clients <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight>. While the database <highlight><bold>203</bold></highlight> is illustrated as having two data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight>, it will be understood that the database <highlight><bold>203</bold></highlight> can have more or other data stores therein, with only two being shown for the clarity of illustration. Furthermore, it will be understood that any number of clients may access the database <highlight><bold>203</bold></highlight> using the server <highlight><bold>202</bold></highlight>. Also, each data store <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight> can be associated with a different physical database such that one server can be used to provide access to more than one different database. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> The clients <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight> communicate with the server <highlight><bold>202</bold></highlight> via communication links <highlight><bold>213</bold></highlight> which may be direct, high speed links such as an Ethernet connection or which may be slow, low bandwidth or intermittent links, such as satellite links, cellular links, modem links, etc. Each initial request for a configuration component by a client <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight> creates a client thread within the server <highlight><bold>202</bold></highlight> and this client thread is used to provide the client <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight> the requested component(s) from the appropriate data store(s) <highlight><bold>210</bold></highlight> and/or <highlight><bold>212</bold></highlight> using a shared cache <highlight><bold>214</bold></highlight> within the server <highlight><bold>202</bold></highlight>, as will be described in more detail. A client thread can also be used to write changes to the data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight>, to add component data to or delete component data from the database <highlight><bold>203</bold></highlight>, and to perform locking of component data within the data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Generally speaking, the shared cache <highlight><bold>214</bold></highlight> sets up a data memory object, called a lightweight, for each of the different data items within the database <highlight><bold>203</bold></highlight> being subscribed to at any particular time by any of the clients <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight>. Only one lightweight needs to be established for any configuration component within the database <highlight><bold>203</bold></highlight> and the client threads for all clients subscribing to that configuration component access the same lightweight. Thus, for the system of <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> lightweight will be established within the shared cache <highlight><bold>214</bold></highlight> for each of the configuration components within the data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight> when at least one of the clients <highlight><bold>206208</bold></highlight> subscribes to the component in the data store <highlight><bold>210</bold></highlight> and at least one of the clients <highlight><bold>206</bold></highlight>-<highlight><bold>208</bold></highlight> subscribes to the component in the data store <highlight><bold>212</bold></highlight>. If each of the clients <highlight><bold>206208</bold></highlight> subscribe to different configuration components, the threads for each client will include different lightweights tied to different data stores within the configuration database <highlight><bold>203</bold></highlight>. However, when more than one client subscribes to the same component within the database <highlight><bold>203</bold></highlight>, the threads for these clients will use the same lightweights within the shared cache <highlight><bold>214</bold></highlight>. For this reason, the lightweights within the shared cache are not thread local. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Generally, whenever a first client first subscribes to a component within the database <highlight><bold>203</bold></highlight>, a lightweight is established for that configuration component within the shared cache <highlight><bold>214</bold></highlight> and this lightweight reads and stores a copy of the configuration component from the database <highlight><bold>203</bold></highlight>. Thereafter, every other client that subscribes to the same configuration component will have its client thread connected to the same lightweight, which means that the second, third, etc. client that subscribes to this configuration component can read the component from the lightweight instead of from the configuration database <highlight><bold>203</bold></highlight>, which reduces the number of reads from the configuration database <highlight><bold>203</bold></highlight>. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> The database server <highlight><bold>202</bold></highlight> illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> includes three client threads <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight> and <highlight><bold>218</bold></highlight> which perform different read/write activities for the clients <highlight><bold>206</bold></highlight>, <highlight><bold>207</bold></highlight> and <highlight><bold>208</bold></highlight>, respectively, and two notify threads <highlight><bold>220</bold></highlight> and <highlight><bold>222</bold></highlight> which perform notification activities with respect to the client threads <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight> and <highlight><bold>218</bold></highlight>. Generally speaking, each client thread <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight> and <highlight><bold>218</bold></highlight> uses server component objects <highlight><bold>226</bold></highlight>, <highlight><bold>227</bold></highlight> and <highlight><bold>228</bold></highlight>, respectively, to communicate with the clients through the communication links <highlight><bold>230</bold></highlight>. The server component objects within a particular client thread communicate with different lightweights within the shared cache <highlight><bold>214</bold></highlight> for each of the different components being accessed by the client and perform this communication using a component data wrapper associated with each such lightweight. Each component data wrapper controls access to an associated lightweight and can be accessed by more than one client thread. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> In the system of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the client <highlight><bold>206</bold></highlight> is subscribing to the components within the data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight>, the client <highlight><bold>207</bold></highlight> is subscribing to the component within the data store <highlight><bold>210</bold></highlight> and the client <highlight><bold>208</bold></highlight> is subscribing to the component within the data store <highlight><bold>212</bold></highlight>. As illustrated in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the client thread <highlight><bold>216</bold></highlight> for the client <highlight><bold>206</bold></highlight> uses one of the server component objects <highlight><bold>226</bold></highlight> to communicate with a first component data wrapper <highlight><bold>232</bold></highlight> which, in turn, is connected to a lightweight <highlight><bold>234</bold></highlight> that communicates with the data store <highlight><bold>210</bold></highlight>. When established, the lightweight <highlight><bold>234</bold></highlight> copies the data within the data store <highlight><bold>210</bold></highlight> and makes this data accessible to each client subscribing to this data. One of the server component objects <highlight><bold>226</bold></highlight> of the client thread <highlight><bold>216</bold></highlight> also communicates with a component data wrapper <highlight><bold>240</bold></highlight> which, in turn, is connected to a lightweight <highlight><bold>242</bold></highlight> that communicates with the data store <highlight><bold>212</bold></highlight>. Similarly, when established, the lightweight <highlight><bold>242</bold></highlight> copies the data from the data store <highlight><bold>212</bold></highlight> and makes this data accessible to each client subscribing to this data. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> The client thread <highlight><bold>217</bold></highlight> for the client <highlight><bold>207</bold></highlight> uses the server component object <highlight><bold>227</bold></highlight> to communicate with the component data wrapper <highlight><bold>232</bold></highlight> and, thus, with the lightweight <highlight><bold>234</bold></highlight> to thereby access the data within the lightweight <highlight><bold>234</bold></highlight>, i.e., the data within the data store <highlight><bold>210</bold></highlight>. On the other hand, the client thread <highlight><bold>218</bold></highlight> for the client <highlight><bold>208</bold></highlight> uses the server component <highlight><bold>228</bold></highlight> to communicate with the component data wrapper <highlight><bold>240</bold></highlight> to access the data within the lightweight <highlight><bold>242</bold></highlight> associated with the data store <highlight><bold>212</bold></highlight>. Thus, in this configuration, the clients <highlight><bold>206</bold></highlight> and <highlight><bold>207</bold></highlight> subscribe to the same configuration component and, as a result, both of the clients <highlight><bold>206</bold></highlight> and <highlight><bold>207</bold></highlight> have access to the lightweight <highlight><bold>234</bold></highlight> for this component. Likewise, the clients <highlight><bold>206</bold></highlight> and <highlight><bold>208</bold></highlight> subscribe to the same configuration component and both have access to the lightweight <highlight><bold>242</bold></highlight> for this component. As a result, the lightweights <highlight><bold>234</bold></highlight> and <highlight><bold>242</bold></highlight> are each shared by two client threads, and enable sharing of the data within the shared cache <highlight><bold>214</bold></highlight> by different clients. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> As will be discussed in more detail, the server <highlight><bold>202</bold></highlight> establishes the server component objects, the component data wrapper objects and the lightweights to create or expand a client thread when a client subscribes to a configuration component within the database <highlight><bold>203</bold></highlight>. When created, the client threads <highlight><bold>216</bold></highlight>, <highlight><bold>217</bold></highlight> and <highlight><bold>218</bold></highlight> are used by the clients to make reads from and writes to the server component objects <highlight><bold>226</bold></highlight>, <highlight><bold>227</bold></highlight> and <highlight><bold>228</bold></highlight> which, in turn, make reads into and out of the shared cache <highlight><bold>214</bold></highlight> via the component data wrappers and the lightweights created therein. The shared cache <highlight><bold>214</bold></highlight> makes reads out of and writes into the configuration database <highlight><bold>203</bold></highlight> as necessary. While a different client thread is created for each client, each client thread may handle one or more subscriptions of component data for a client. Generally, a different server component object is created for each subscription of a component by a client. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> The notify thread <highlight><bold>220</bold></highlight> detects changes made in the database <highlight><bold>203</bold></highlight> and, in particular, detects changes made to the data stores <highlight><bold>210</bold></highlight> and <highlight><bold>212</bold></highlight> for which lightweights have been created by checking the status of a change list <highlight><bold>244</bold></highlight> kept within the database <highlight><bold>203</bold></highlight>. When a change has been made, the notify thread <highlight><bold>220</bold></highlight> causes a message to be sent back to each of the client threads subscribing to the changed component that a change has occurred. Each such client thread may then notify a client using the appropriate server component object for that client thread. The notify message sent to the client may include the new component data or may simply notify the client that new data exists and that the client must make a manual pull or read of this data via the client thread established for the changed configuration component. Similarly, the runtime thread <highlight><bold>222</bold></highlight> detects particular changes made to the process control system performed by any runtime service <highlight><bold>246</bold></highlight> and notifies client threads which are subscribing to components associated with the changed data of the change. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> Generally speaking, access to data within the configuration database <highlight><bold>203</bold></highlight> is performed on a component by component basis. Each component may be a single item within a configuration database such as an area, a controller, a device, a control module, etc. or, if desired, may be a tree of items. Furthermore, it will be understood that any component may be a parent component in that it may have one or more children components associated therewith and/or any component may be a child component of a parent component. Thus an area may be a parent component with a number of children components that indicate particular areas. Each particular area may be a parent component with children components that indicate the controllers, user interfaces, control modules, etc. within a particular area. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, an object map for the objects used to implement the shared cache communication system of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is illustrated. In particular, a client <highlight><bold>300</bold></highlight>, which may be any client, has a client component object <highlight><bold>301</bold></highlight> which may be, for example, any piece of configuration data which is accessed by or subscribed to by the client for any purpose, such as for display to a user in a configuration hierarchy like that of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The client component <highlight><bold>301</bold></highlight> may be a parent object having one or more children components associated therewith, as indicated by the feedback path on the client component <highlight><bold>301</bold></highlight> having a dot on the child side and the absence of a dot on the parent side. In <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, the use of a dot indicates a one to one or more (i.e., a one to many) relationship while the absence of a dot indicates a one to exactly one relationship. Thus, as illustrated for the client component object <highlight><bold>301</bold></highlight>, each parent client component may have one or more children client components while each child client component can have only one direct parent component. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Each client component <highlight><bold>301</bold></highlight> is coupled to a smart proxy <highlight><bold>302</bold></highlight> associated with that client component at the client <highlight><bold>300</bold></highlight>. The smart proxy <highlight><bold>302</bold></highlight> is responsible for handling communications on behalf of the client component <highlight><bold>301</bold></highlight> over a communication link <highlight><bold>304</bold></highlight>. In particular, the smart proxy is a distribution object that receives client requests pertaining to a component, calls across the communication link <highlight><bold>304</bold></highlight> to a server <highlight><bold>306</bold></highlight> to communicate those requests to the server <highlight><bold>306</bold></highlight>, receives update events, stores cached data and messages sent from the server <highlight><bold>306</bold></highlight> and passes this data to the client component object <highlight><bold>301</bold></highlight>. Of course, the smart proxy <highlight><bold>302</bold></highlight> performs the operations needed to communicate over the communication link <highlight><bold>304</bold></highlight> in any desired manner or using any desired communication technique, such as using the deferred acknowledgment routine described in U.S. Patent Application entitled, &ldquo;Deferred Acknowledgment Communications and Alarm Management&rdquo; referred to previously. The communication link <highlight><bold>304</bold></highlight> may be any desired communication link including, for example, a slow or low bandwidth link, such as a satellite, cellular, Internet or other shared wide area network link, or could be an intermittent link, such as a modem link, or could be a direct link or high speed link, such as a dedicated Ethernet link, if so desired. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> The server <highlight><bold>306</bold></highlight> includes server component objects <highlight><bold>308</bold></highlight> which are responsible for communicating with the smart proxy <highlight><bold>302</bold></highlight> of a client over the communication link <highlight><bold>304</bold></highlight>. Each server component <highlight><bold>308</bold></highlight> is responsible for recording or holding at least a portion of the configuration hierarchy being accessed by or subscribed to by a specific client, for providing an interface to access properties of a configuration component within a configuration database and for receiving update events and forwarding these events to the smart proxy <highlight><bold>302</bold></highlight> for a client. As illustrated in <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> server component <highlight><bold>308</bold></highlight> may be associated with other server components through a parent-child relationship and this parent-child relationship reflects the parent child relationship established for the associated client components <highlight><bold>301</bold></highlight>. In particular, this relationship reflects the client hierarchy, i.e., the configuration hierarchy being subscribed to by the client. Each server component <highlight><bold>308</bold></highlight> can be interested in and can be communicatively coupled to exactly one component data wrapper <highlight><bold>310</bold></highlight> which is an object that is set up within the shared cache portion of the server <highlight><bold>306</bold></highlight>. However, as indicated by <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> component data wrapper <highlight><bold>310</bold></highlight> may be connected to many server components for different clients or client threads. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> The component data wrapper <highlight><bold>310</bold></highlight> is an interface to shared data, i.e., data that is shared within the shared cache <highlight><bold>214</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> by multiple clients or client threads. The component data wrappers <highlight><bold>310</bold></highlight> may record hierarchy relationships (and are a superset of all client hierarchies being viewed by all subscribing clients), may register referencing server components, may notify server components when change events are detected, may record the last modified date (which may be used to accept or reject events from the configuration database) and may effect locking of shared data. Similar to the server component <highlight><bold>308</bold></highlight>, the component data wrapper <highlight><bold>310</bold></highlight> can be associated with or related to other component data wrappers in a parent-child relationship, with this relationship reflecting the relationship established for all of the server components <highlight><bold>308</bold></highlight> and all of the client components <highlight><bold>301</bold></highlight>. It will be understood that each component data wrapper <highlight><bold>310</bold></highlight> can be connected to numerous server components <highlight><bold>308</bold></highlight> because all client threads accessing a particular configuration component will go through the same component data wrapper <highlight><bold>310</bold></highlight>. The component data wrapper <highlight><bold>310</bold></highlight>, which is created by a component data wrapper factory <highlight><bold>312</bold></highlight> when a first client first subscribes to an item within the configuration database, generally keeps track of which server components <highlight><bold>308</bold></highlight> are subscribing to particular components within the configuration database and operates to notify each of the subscribing server components <highlight><bold>308</bold></highlight> of changes to this data. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Each component data wrapper <highlight><bold>310</bold></highlight> is connected to or contains one and only one lightweight object <highlight><bold>314</bold></highlight> which stores a copy of the component data within the configuration database to which one or more server components <highlight><bold>308</bold></highlight> are subscribing. In other words, a component data wrapper <highlight><bold>310</bold></highlight> is inserted between one or more server components <highlight><bold>308</bold></highlight> and a single lightweight <highlight><bold>314</bold></highlight> to handle access of the lightweight <highlight><bold>314</bold></highlight> by each of the multiple server components <highlight><bold>308</bold></highlight>. Generally speaking, the lightweight <highlight><bold>314</bold></highlight> is a repository for data shared between server components <highlight><bold>308</bold></highlight> and is used to register with the notify thread <highlight><bold>220</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> for update notifications pertaining to changes made to the configuration database <highlight><bold>203</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> The component data wrapper factory <highlight><bold>312</bold></highlight> is responsible for getting/creating component data wrappers <highlight><bold>310</bold></highlight> and lightweights <highlight><bold>314</bold></highlight>. When a client indicates that it wants to subscribe to a component within the configuration database <highlight><bold>203</bold></highlight>, the component data wrapper factory <highlight><bold>312</bold></highlight> first checks to determine if a component data wrapper <highlight><bold>310</bold></highlight> for this component has already been created. If so, the component data wrapper factory <highlight><bold>312</bold></highlight> connects the client thread to the component data wrapper <highlight><bold>310</bold></highlight> for this component. If not, the component data wrapper factory <highlight><bold>312</bold></highlight> creates a new component data wrapper <highlight><bold>310</bold></highlight> and lightweight <highlight><bold>314</bold></highlight>, which causes the requested information from the configuration database <highlight><bold>203</bold></highlight> to be loaded into the lightweight <highlight><bold>314</bold></highlight> and creates or expands the thread for the client using this new component data wrapper <highlight><bold>310</bold></highlight> and associated lightweight <highlight><bold>314</bold></highlight>. When the component data wrapper factory <highlight><bold>312</bold></highlight> creates a new wrapper <highlight><bold>310</bold></highlight>, the component data wrapper factory <highlight><bold>312</bold></highlight> assigns the wrapper <highlight><bold>310</bold></highlight> a unique immutable identifier. This identifier is passed onto the referencing server components <highlight><bold>308</bold></highlight> and their corresponding client components <highlight><bold>301</bold></highlight> which allows a group of or individual components to be uniquely identified which, in turn, avoids many tricky rename problems and provides more efficient marshaling of a list of IDs over a slow communication link, such as when an entire tree or branch of a tree is requested by a client. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> A lock manager <highlight><bold>316</bold></highlight> enables each component data wrapper <highlight><bold>310</bold></highlight> to control access to its associated lightweight <highlight><bold>314</bold></highlight> by different clients. The locking of a lightweight <highlight><bold>314</bold></highlight> may cause the locking of one or more other lightweights, so that, for example, locking of a lightweight that stores parent component data may automatically cause locking of the lightweights which hold children components for that parent component. Similarly, each lightweight <highlight><bold>314</bold></highlight> may be automatically locked upon the locking of another lightweight, so that a lightweight which holds a child component may be locked when the lightweight that holds the parent component for that child component is locked. In this manner, the lock manager <highlight><bold>316</bold></highlight> may cause a component data wrapper <highlight><bold>310</bold></highlight> to lock its associated lightweight <highlight><bold>314</bold></highlight> when a read from or a write to that lightweight is performed within any particular client thread and locking of this lightweight may automatically cause locking of other lightweights, such as lightweights which hold children components associated with the lightweight being locked. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Still further, each lightweight <highlight><bold>314</bold></highlight> uses one or more transactional memory objects (XMs) <highlight><bold>318</bold></highlight> to read or write component properties from or to the configuration database <highlight><bold>203</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> using a context memory. An XM <highlight><bold>318</bold></highlight> is fired up each time a lightweight <highlight><bold>314</bold></highlight> needs to make a read of or a write to the configuration database <highlight><bold>203</bold></highlight>. The XM <highlight><bold>318</bold></highlight> provides a pointer into the context memory (which is client thread local) to be used to make this read or write and the XM <highlight><bold>318</bold></highlight> causes the read into or the write from the configuration database <highlight><bold>203</bold></highlight> using the context memory. The XM <highlight><bold>318</bold></highlight> can also be used to create/delete database objects within the database <highlight><bold>203</bold></highlight> and to un-register notification interest with the configuration database <highlight><bold>203</bold></highlight>. Once the appropriate read or write has been performed for a lightweight <highlight><bold>314</bold></highlight>, the XM <highlight><bold>318</bold></highlight> is released. However the data stored in the context memory still exists and the pointer to this memory is stored in thread local storage to be used later if needed. The use of XMs is standard in object database managers and, so, will not be described further herein. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> A notify engine <highlight><bold>320</bold></highlight> registers with each XM <highlight><bold>318</bold></highlight> and detects changes to any of the data values within the data storage locations within the configuration database <highlight><bold>203</bold></highlight> pointed to by the XMs <highlight><bold>318</bold></highlight>. Such changes may be caused by, for example, a client causing a write to the configuration database <highlight><bold>203</bold></highlight>, a runtime process or some other external process. When the notify engine <highlight><bold>320</bold></highlight> detects a change to the database items pointed to by any of the XMs <highlight><bold>318</bold></highlight>, the notify engine <highlight><bold>320</bold></highlight> notifies the component data wrapper <highlight><bold>310</bold></highlight> that has the lightweight <highlight><bold>314</bold></highlight> associated with this XM <highlight><bold>318</bold></highlight> which, in turn, notifies all of the clients subscribing to the component that a change has been made and that new values for the component are available. To perform this operation, the notify engine <highlight><bold>320</bold></highlight> uses a component data register (also referred to as a wrapper map) <highlight><bold>322</bold></highlight> which is a map that maps each component data wrapper <highlight><bold>310</bold></highlight> with a database location pointed to by an XM <highlight><bold>318</bold></highlight>. More particularly, the component data register <highlight><bold>322</bold></highlight> is a lookup table that relates component data wrappers <highlight><bold>310</bold></highlight> with notification cookies or IDs created as a result of the operation of the XMs <highlight><bold>318</bold></highlight> accessing the database <highlight><bold>203</bold></highlight>. Sometimes these IDs are also referred to as the &ldquo;magic numbers&rdquo; and, generally speaking, these IDs identify a location or identify of a component stored within the database <highlight><bold>203</bold></highlight>. The notify engine <highlight><bold>320</bold></highlight> obtains a list of update events related to each of the database locations associated with the magic numbers and uses the component data register <highlight><bold>322</bold></highlight> to find the component data wrappers <highlight><bold>310</bold></highlight> associated with each component for which a change has occurred. As a result, the notify engine <highlight><bold>320</bold></highlight> is an event generator that periodically gets a change list from the configuration database <highlight><bold>203</bold></highlight> and fires change events to the component data wrappers <highlight><bold>310</bold></highlight> for which changes have occurred. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Generally speaking, each component data wrapper <highlight><bold>310</bold></highlight> registers all of the XMs associated with its lightweight with the component data register <highlight><bold>322</bold></highlight> as client threads are created to thereby obtain change notifications. In return, the data component wrappers <highlight><bold>310</bold></highlight> receive a unique cookie for each registration and these cookies are stored in the component data register or wrapper map <highlight><bold>322</bold></highlight>. In response to a change notification, a component data wrapper <highlight><bold>310</bold></highlight> forces its associated lightweight <highlight><bold>314</bold></highlight> to reload from the database, if required, and to update the configuration hierarchy. Furthermore, the component data wrapper <highlight><bold>310</bold></highlight> sends update messages back to each of the server components <highlight><bold>308</bold></highlight> which are related to or which are accessing the component data wrapper <highlight><bold>310</bold></highlight>, and the server components <highlight><bold>308</bold></highlight> then resynchronize with the shared cache, i.e., the lightweights <highlight><bold>314</bold></highlight>. Finally the server components <highlight><bold>308</bold></highlight> send an update message to the client components <highlight><bold>301</bold></highlight>, which resynchronize with the server components <highlight><bold>308</bold></highlight>. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, the state of the database server <highlight><bold>306</bold></highlight> (which may be the server <highlight><bold>202</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> or any of the database servers of FIGS. <highlight><bold>1</bold></highlight>, <highlight><bold>3</bold></highlight>-<highlight><bold>6</bold></highlight>) is illustrated at startup, i.e., before any client has subscribed to any of the data within the configuration database <highlight><bold>325</bold></highlight> (which may be for example, the database <highlight><bold>203</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 7</cross-reference> or any of the configuration databases of <cross-reference target="DRAWINGS">FIGS. 1 and 3</cross-reference>-<highlight><bold>6</bold></highlight>). The server <highlight><bold>306</bold></highlight> includes a pre-start client thread <highlight><bold>326</bold></highlight> having no server component objects therein, a shared cache <highlight><bold>327</bold></highlight> which has no component data wrappers or lightweights and an empty database context memory portion <highlight><bold>328</bold></highlight>. The shared cache <highlight><bold>327</bold></highlight> of the server <highlight><bold>306</bold></highlight> includes a component data wrapper factory <highlight><bold>312</bold></highlight> and a lock manager <highlight><bold>316</bold></highlight> which coordinates locking of components being read from the database <highlight><bold>325</bold></highlight>. As illustrated in <cross-reference target="DRAWINGS">FIG. 9, a</cross-reference> notify thread includes a notify engine <highlight><bold>320</bold></highlight> which detects changes made to data within the database <highlight><bold>325</bold></highlight> as describe above, and a component data register or wrapper map <highlight><bold>322</bold></highlight> which maps data component wrappers within the shared cache <highlight><bold>327</bold></highlight> with locations within the configuration database <highlight><bold>325</bold></highlight>. Of course, because no data wrappers exist within the shared cache <highlight><bold>327</bold></highlight>, the wrapper map <highlight><bold>322</bold></highlight> is empty. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Similarly, a runtime thread includes a notify engine <highlight><bold>336</bold></highlight> that detects changes made to certain parts of the configuration data by runtime services <highlight><bold>338</bold></highlight> which may be any services, such as auto-sensing services, or other applications run during runtime or configuration activities, and a map <highlight><bold>340</bold></highlight> which enables the runtime notify engine <highlight><bold>336</bold></highlight> to send change messages to appropriate component data wrappers within the client threads being run in the server <highlight><bold>306</bold></highlight>. At startup, the runtime notify engine <highlight><bold>336</bold></highlight> creates an instance of an object that runs sensing to detect specific changes within the configuration of the process control network, such as the addition of a new node or the addition of new devices (like decommissioned controllers) within the system. In one embodiment, the notify engine <highlight><bold>336</bold></highlight> polls the runtime services <highlight><bold>338</bold></highlight> (which can be any runtime services or applications) for lists of decommissioned controllers and Fieldbus devices. The map <highlight><bold>340</bold></highlight> generally points to a memory location or area where appropriate data wrappers (when created) will register to receive information pertaining to the creation of a new node, device, etc. within the process control system. Of course, not all data wrappers need to register with the runtime thread, but only those wrappers associated with components that relate to the newly added devices, such as the decommissioned controllers component illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. At startup, the map <highlight><bold>340</bold></highlight> points to a memory location at which no wrappers have registered. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the operations of the server <highlight><bold>306</bold></highlight> are illustrated when a first client <highlight><bold>342</bold></highlight> connects and subscribes to a component within the configuration database <highlight><bold>325</bold></highlight>. In particular, the client application starts up, connects to the server <highlight><bold>306</bold></highlight> via a communication link <highlight><bold>344</bold></highlight> using a smart proxy <highlight><bold>346</bold></highlight> to request a component <highlight><bold>348</bold></highlight> within the configuration hierarchy. At this time, the server <highlight><bold>306</bold></highlight> assigns the prestart client thread <highlight><bold>326</bold></highlight> to the client <highlight><bold>342</bold></highlight> and creates a new prestart client thread (not shown) to be used by the next client that connects to the server <highlight><bold>306</bold></highlight>. Typically, the client <highlight><bold>342</bold></highlight> begins by requesting a root object, such as the Areas component. At this point, an Areas server component <highlight><bold>350</bold></highlight> is created in the server <highlight><bold>306</bold></highlight> and the Areas server component <highlight><bold>350</bold></highlight> requests the Areas component from the wrapper factory <highlight><bold>312</bold></highlight>. The wrapper factory <highlight><bold>312</bold></highlight> recognizes that no component data wrapper (hereinafter &ldquo;wrapper&rdquo;) has been created for the Areas component within the shared cache <highlight><bold>327</bold></highlight> and creates such a wrapper <highlight><bold>354</bold></highlight> (an Areas wrapper), associating the wrapper <highlight><bold>354</bold></highlight> with the Areas server component <highlight><bold>350</bold></highlight> within the client thread <highlight><bold>326</bold></highlight>. The wrapper factory <highlight><bold>312</bold></highlight> creates a lightweight <highlight><bold>360</bold></highlight> that is uniquely associated with the newly created wrapper <highlight><bold>354</bold></highlight> and that is tied to the database &ldquo;site&rdquo; context <highlight><bold>362</bold></highlight> for the client thread. The site context is used because the root Areas component was requested and this component is associated with a site object within the database <highlight><bold>325</bold></highlight>. At this time, the lightweight <highlight><bold>360</bold></highlight> makes a call to the database <highlight><bold>325</bold></highlight> for the Areas component by creating an XM (not shown). The XM points to a memory location within the context memory <highlight><bold>328</bold></highlight> to be used by the client thread <highlight><bold>326</bold></highlight> and causes the database manager to read the Areas component and store the component data in the site context memory <highlight><bold>362</bold></highlight>. Next, this data is loaded into the lightweight <highlight><bold>360</bold></highlight> and the XM is released. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> During this process, the wrapper factory <highlight><bold>312</bold></highlight> or the XM registers the newly created Areas wrapper <highlight><bold>354</bold></highlight> with the wrapper map <highlight><bold>322</bold></highlight> for change notifications when changes occur to its database counterpart, in this case within the Areas component of the database <highlight><bold>325</bold></highlight>. This registration is illustrated by the line <highlight><bold>363</bold></highlight>. To perform this registration, a unique identifier (ID) is created for the wrapper/database site combination and this ID is posted in a registration message sent to the notify thread. Upon processing the registration message, the notify thread adds an entry to the wrapper map <highlight><bold>322</bold></highlight> for the Areas wrapper <highlight><bold>354</bold></highlight> keyed by the ID. This entry relates the magic number associated with the XM, which points to an object or location within the database <highlight><bold>325</bold></highlight>, with the wrapper <highlight><bold>354</bold></highlight>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Next, the Areas component is sent from the wrapper <highlight><bold>354</bold></highlight> to the server component <highlight><bold>350</bold></highlight> which is updated with the Areas component data. The server component <highlight><bold>350</bold></highlight> then sends the Areas component data to the smart proxy <highlight><bold>346</bold></highlight> of the client <highlight><bold>342</bold></highlight> where the component data is provided to the client component <highlight><bold>348</bold></highlight>. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Thereafter, the notify thread monitors changes to the Areas component within the database <highlight><bold>325</bold></highlight> and, if changes are made, looks up the ID for the wrapper associated with this component within the database <highlight><bold>325</bold></highlight> as defined by the wrapper map <highlight><bold>322</bold></highlight>. The notify thread then notifies the wrapper, in this case the wrapper <highlight><bold>354</bold></highlight>, of the change. If necessary, the wrapper <highlight><bold>354</bold></highlight> will update the lightweight <highlight><bold>360</bold></highlight> to reflect the change by causing a read of the database <highlight><bold>325</bold></highlight>. Thereafter, the wrapper <highlight><bold>354</bold></highlight> will instruct the server component <highlight><bold>350</bold></highlight> of the change and the server component <highlight><bold>350</bold></highlight> can request the new data for the Areas component, which new data can be read from the lightweight <highlight><bold>360</bold></highlight>. Next, the server component <highlight><bold>350</bold></highlight> notifies the client <highlight><bold>342</bold></highlight> of the change and the client <highlight><bold>342</bold></highlight> can request the new data for the Areas component from the server component <highlight><bold>350</bold></highlight> so that the change in the Areas component is reflected back to the client component <highlight><bold>348</bold></highlight> either automatically or by notifying the client of the change and waiting for the client to request the new component data. While the client <highlight><bold>342</bold></highlight> could perform a manual pull of the new component data from the server component <highlight><bold>350</bold></highlight>, it will be assumed hereinafter, for the sake of discussion, that new data or changed data is automatically sent to a client when a change is detected. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Similarly the runtime notify thread uses the notify engine <highlight><bold>336</bold></highlight> to detect particular changes made in the configuration of the process control system based on the operation of the runtime services <highlight><bold>338</bold></highlight>. If a particular change has occurred, such as a node or a device has been added, the notify engine <highlight><bold>336</bold></highlight> looks to the memory location specified for that change by the map <highlight><bold>340</bold></highlight> to see if any wrappers have registered to receive an indication of the detected change. If so, the notify engine <highlight><bold>336</bold></highlight> sends an event message to the registered wrapper(s) which can process that message similarly to the way in which event messages generated by the notify engine <highlight><bold>320</bold></highlight> are processed. It will be understood that a data wrapper which wants to receive notifications of changes detected by the runtime notify thread will register at the memory location specified for that change by the map <highlight><bold>340</bold></highlight> by, for example, storing the ID of the wrapper to receive the change notification at that memory location when the data wrapper is created. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the client <highlight><bold>342</bold></highlight> may next want to load children for the Areas client component <highlight><bold>348</bold></highlight>. In this case, the client <highlight><bold>342</bold></highlight> calls a load children command and on the Areas root component and this command is passed through the proxy <highlight><bold>346</bold></highlight> to the server component <highlight><bold>350</bold></highlight> and, from there, to the Areas lightweight <highlight><bold>360</bold></highlight>. The Areas lightweight <highlight><bold>360</bold></highlight> queries the configuration database <highlight><bold>325</bold></highlight> using the context memory <highlight><bold>362</bold></highlight> for the client thread <highlight><bold>326</bold></highlight> to obtain information about the areas children components. This data is returned and a lightweight and associated data wrapper are then created for each child component associated with the Areas component. In <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the Areas component is illustrated as including only one child component named Area_A with a description of &ldquo;Fred&rdquo; and this new child component data is stored in a new lightweight <highlight><bold>370</bold></highlight>. However, other Area child components could also be associated with the Areas component and, in that case, a new lightweight would be created for each of these children along with the other objects described below. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Upon the creation of the new lightweight <highlight><bold>370</bold></highlight>, the Areas wrapper <highlight><bold>354</bold></highlight> (or the wrapper factory <highlight><bold>312</bold></highlight>) wraps the new area lightweight <highlight><bold>370</bold></highlight> within a separate wrapper <highlight><bold>372</bold></highlight> associated with the Areas wrapper <highlight><bold>354</bold></highlight> as a child wrapper. The Areas wrapper <highlight><bold>354</bold></highlight> also returns the new Area component to the server component <highlight><bold>350</bold></highlight>. The new lightweight <highlight><bold>370</bold></highlight> creates an XM to register with the database <highlight><bold>325</bold></highlight> via the context memory <highlight><bold>376</bold></highlight> to obtain specific data pertaining to the Area child component. The wrapper <highlight><bold>372</bold></highlight> or the lightweight <highlight><bold>370</bold></highlight> also sends a registration message to the notify thread with the list of new wrapper IDs (in this case, one wrapper ID) and database magic numbers (in this case, one new magic number) associated therewith. The new ID is stored in the wrapper map to indicate the new wrapper <highlight><bold>372</bold></highlight>, as indicated by the line <highlight><bold>378</bold></highlight>. The magic number indicating the location of the new child Area component in the database <highlight><bold>325</bold></highlight> is also provided to wrapper map <highlight><bold>322</bold></highlight> and is stored for this ID. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Meanwhile, the Areas server component <highlight><bold>350</bold></highlight> manufactures a child Area server component <highlight><bold>380</bold></highlight> for the new child Area component and, in doing so, embeds a pointer within the new child Area server component <highlight><bold>380</bold></highlight> to the wrapper <highlight><bold>372</bold></highlight> created for the child server component <highlight><bold>380</bold></highlight>. The server component <highlight><bold>350</bold></highlight> also sends a list of child components (in this case a list of one) to the client Areas component <highlight><bold>348</bold></highlight> via the communication link and the proxy <highlight><bold>346</bold></highlight> and the Areas client component <highlight><bold>348</bold></highlight> manufactures a child Area client component and embeds a server component reference (to the server component <highlight><bold>380</bold></highlight>) in the child Area client component <highlight><bold>382</bold></highlight> to enable communication between the new child client component <highlight><bold>382</bold></highlight> and the new child server component <highlight><bold>380</bold></highlight>. A smart proxy <highlight><bold>384</bold></highlight> for the client component <highlight><bold>382</bold></highlight> is then created which completes the process of extending the client thread <highlight><bold>326</bold></highlight> to include a subscription for a new child component within the database <highlight><bold>325</bold></highlight>. Of course, the same procedures would take place for other children components of a particular component and the client thread <highlight><bold>326</bold></highlight> can be extended to subscribe to more than one child component if more than one child exists. Likewise, the client thread <highlight><bold>326</bold></highlight> can be further extended by obtaining child components associated with newly subscribed child component <highlight><bold>382</bold></highlight> or by requesting another root component. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, the process in which a second client <highlight><bold>386</bold></highlight> subscribes to the same components that were subscribed to by the first client <highlight><bold>342</bold></highlight> is described in detail. Here, the notify threads of the server <highlight><bold>306</bold></highlight> are not shown for the sake of clarity. In particular, the second client <highlight><bold>386</bold></highlight> connects to the server <highlight><bold>306</bold></highlight> in a similar manner as the first client and subscribes to the Areas component. Upon connecting to the server <highlight><bold>306</bold></highlight>, the second client <highlight><bold>386</bold></highlight> is assigned to a second prestart thread <highlight><bold>387</bold></highlight>. In this example, the client <highlight><bold>386</bold></highlight> asks for the Areas root component which creates an Areas server component <highlight><bold>388</bold></highlight> in the second client thread. The server component <highlight><bold>388</bold></highlight> asks the wrapper factory <highlight><bold>312</bold></highlight> for a wrapper for the Areas root component and, because the wrapper <highlight><bold>354</bold></highlight> already exists within the shared cache <highlight><bold>327</bold></highlight> for the Areas root component, the wrapper factory <highlight><bold>312</bold></highlight> returns a pointer to the wrapper <highlight><bold>354</bold></highlight>. At this point, the Areas server component <highlight><bold>388</bold></highlight> queries the wrapper <highlight><bold>354</bold></highlight> for the Areas root component data which is read from the lightweight <highlight><bold>360</bold></highlight> that has already been established for the first client <highlight><bold>342</bold></highlight>. The Areas root component data stored in the lightweight <highlight><bold>360</bold></highlight> is returned to the Areas root server component <highlight><bold>388</bold></highlight> and, from there, to the client Areas component <highlight><bold>389</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Upon a request by the second client <highlight><bold>386</bold></highlight> for the children of the Areas root component <highlight><bold>389</bold></highlight>, the Areas root server component <highlight><bold>388</bold></highlight> asks the wrapper factory <highlight><bold>312</bold></highlight> for the children wrappers and, because these wrappers (in this case, one wrapper) already exist, the pointer to the wrapper <highlight><bold>372</bold></highlight> is provided by the wrapper factory <highlight><bold>312</bold></highlight> to the Areas root server component <highlight><bold>388</bold></highlight>. The server component <highlight><bold>388</bold></highlight> then creates an child Area server component <highlight><bold>390</bold></highlight> having a pointer to the wrapper <highlight><bold>372</bold></highlight>. The Areas root server component <highlight><bold>388</bold></highlight> sends the child information to the second client <highlight><bold>386</bold></highlight> which creates the appropriate client component <highlight><bold>392</bold></highlight> and smart proxy <highlight><bold>393</bold></highlight> which communicates with the server component <highlight><bold>390</bold></highlight>. The child Area server component <highlight><bold>390</bold></highlight> also reads the lightweight <highlight><bold>370</bold></highlight> via the wrapper <highlight><bold>372</bold></highlight> and sends this data to the client component <highlight><bold>392</bold></highlight> via the proxy <highlight><bold>393</bold></highlight>. Because no calls to the database <highlight><bold>325</bold></highlight> were made in this process, the second client&apos;s database context is empty, as all information came through the lightweights <highlight><bold>360</bold></highlight> and <highlight><bold>370</bold></highlight> which used the database context of the first client thread <highlight><bold>326</bold></highlight> to obtain that data. However, if the second client <highlight><bold>386</bold></highlight> requests data for which no lightweight has been created, the wrapper factory <highlight><bold>312</bold></highlight> would create a wrapper and lightweight for that component and connect to the database <highlight><bold>325</bold></highlight> through the database context for the second client thread <highlight><bold>387</bold></highlight> to obtain that data from the database <highlight><bold>325</bold></highlight>. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> It will be understood that any other client which now subscribes to the Area root or the child Area components will be able to access this data from the shared cache <highlight><bold>327</bold></highlight> without making any calls to the database <highlight><bold>325</bold></highlight>, which reduces the load on the database <highlight><bold>325</bold></highlight>. Likewise, upon receiving an event notification from a notify thread, the data wrapper <highlight><bold>354</bold></highlight> will notify the server component <highlight><bold>388</bold></highlight> for the second client <highlight><bold>386</bold></highlight> as well as the server component <highlight><bold>350</bold></highlight> for the first client <highlight><bold>342</bold></highlight> to notify both of the clients of the change. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, the activities associated with the notify thread in detecting a change in a configuration data item and the manner in which this change notification is automatically returned to each subscribing client is described. In this case, the second client <highlight><bold>386</bold></highlight> changes the name of Area_A from &ldquo;Fred&rdquo; to &ldquo;Wilma&rdquo; and posts a write or a promote message with this change to the server <highlight><bold>306</bold></highlight>. The server component <highlight><bold>390</bold></highlight> loads the new name and provides this name to the wrapper <highlight><bold>372</bold></highlight> which loads the new name in the lightweight <highlight><bold>370</bold></highlight>. The lightweight <highlight><bold>370</bold></highlight> automatically loads the new name into the database context <highlight><bold>394</bold></highlight> for the second client <highlight><bold>386</bold></highlight>. From here, the new name is stored in the database <highlight><bold>325</bold></highlight>. However, nothing has happened to the first client&apos;s version of the Area_A component. In the past, the first client <highlight><bold>342</bold></highlight> would have had to periodically poll the database <highlight><bold>325</bold></highlight> for changes, resulting in a lot of reads from the database <highlight><bold>325</bold></highlight> and a lot of downloads over the slow communication link. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In this case, however, the notify engine <highlight><bold>320</bold></highlight> periodically polls the database <highlight><bold>325</bold></highlight> for a list of update events for each of the database items associated with the magic numbers in the wrapper map <highlight><bold>322</bold></highlight>. Each event includes information indicating which object changed and some information about the change, such as the type of change (rename, deletion, property change, child addition/deletion, etc.) and maybe some hints, such as the new and old name in the case of a rename operation. The notify engine <highlight><bold>320</bold></highlight> uses the wrapper map <highlight><bold>322</bold></highlight> to match the magic number of the changed object with a wrapper ID and asks the associated wrapper (in this case, the wrapper <highlight><bold>372</bold></highlight>) to process the update event. This processing may include reloading the lightweight <highlight><bold>370</bold></highlight> from the database <highlight><bold>325</bold></highlight> to get the new value or changed value of this object. Such a reload may be necessary when the lightweight <highlight><bold>370</bold></highlight> was not involved in making the change to the database <highlight><bold>325</bold></highlight>. The wrapper <highlight><bold>372</bold></highlight> may refuse to reload the lightweight <highlight><bold>370</bold></highlight> if, for example, a detected change is an old or out of date change, or for any other desired reason. The wrapper <highlight><bold>372</bold></highlight> also notifies each of the server components <highlight><bold>380</bold></highlight> and <highlight><bold>390</bold></highlight> of the change which, in turn, send messages, such as a windows message, to each of the clients <highlight><bold>342</bold></highlight> and <highlight><bold>386</bold></highlight> (which subscribe to this component) to indicate the change. When processing an event message from the wrapper <highlight><bold>372</bold></highlight>, the server components <highlight><bold>380</bold></highlight> and <highlight><bold>390</bold></highlight> forward the event and any new data to the smart proxies of the respective clients <highlight><bold>342</bold></highlight> and <highlight><bold>386</bold></highlight>. The proxy <highlight><bold>384</bold></highlight> of the first client <highlight><bold>342</bold></highlight> posts a refresh message to the client component <highlight><bold>382</bold></highlight> which may cause a refresh on a user interface at the first client <highlight><bold>342</bold></highlight>. In this case, when the user interface refreshes, the proxy <highlight><bold>384</bold></highlight> gives up the new data to the client component <highlight><bold>382</bold></highlight> and the update is complete. The second client <highlight><bold>386</bold></highlight> may ignore the message because the second client <highlight><bold>386</bold></highlight> already has the change. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> With this subscription system, the first client <highlight><bold>342</bold></highlight> did not have to make any database calls and only one call was made (over for example, a slow communication link) from the server <highlight><bold>306</bold></highlight> to the first client <highlight><bold>342</bold></highlight> to precipitate a complete refresh of the changed item at the first client <highlight><bold>342</bold></highlight>. Of course, this process occurs for every lightweight and for every client subscribing to any lightweight so that any change to the database <highlight><bold>325</bold></highlight> can be automatically sent back to each client subscribing to that item with minimal database reads and minimal communications over the slow communication link. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the operation of the lock manager <highlight><bold>316</bold></highlight> in arbitrating concurrent access to the cache <highlight><bold>327</bold></highlight> will be described in more detail. As will be understood by the foregoing description, each of the lightweights in the shared cache <highlight><bold>327</bold></highlight> can be shared by one or more client threads. As a result, many clients can be reading the same lightweight at the same time. No locking is typically required for these reads. However, it is possible to run into a situation in which two clients are simultaneously trying to write to a lightweight and thus, to the database <highlight><bold>325</bold></highlight>, which may cause problems such as deadlock. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> To prevent these problems, the lock manager <highlight><bold>316</bold></highlight> manages access to each of the lightweights by handing out locks and maintaining a lock table. Generally speaking, the lock manager <highlight><bold>316</bold></highlight> operates by granting lock requests on wrappers. When a client thread wants to access a lightweight, the thread must first acquire a read or a write lock on the wrapper. If the lock is unavailable because, for example, another client thread is in the process of accessing that lightweight, the lock manager <highlight><bold>316</bold></highlight> will hold the requesting thread at bay until the lock becomes free. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> In the example of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, the first and second clients <highlight><bold>342</bold></highlight> and <highlight><bold>386</bold></highlight> attempt to write to the description of Area_A. Here the second client <highlight><bold>386</bold></highlight> attempts to perform a write to the lightweight <highlight><bold>370</bold></highlight> and, in this process, requests and is granted a lock on the wrapper <highlight><bold>372</bold></highlight> from the lock manager <highlight><bold>316</bold></highlight>. If the first client <highlight><bold>342</bold></highlight> then tries to read from or write to the properties of the lightweight <highlight><bold>370</bold></highlight>, the lock manager <highlight><bold>316</bold></highlight> holds the execution of the first client thread <highlight><bold>326</bold></highlight> when this thread attempts to acquire a read lock or a write lock on the data wrapper <highlight><bold>372</bold></highlight>. In the meantime, the second client thread <highlight><bold>387</bold></highlight> writes to the lightweight <highlight><bold>370</bold></highlight> through its own database context <highlight><bold>394</bold></highlight> to change the name of the Area_A to &ldquo;Wilma&rdquo;. When this write operation is complete, the lock manager <highlight><bold>316</bold></highlight> allows the first client thread <highlight><bold>326</bold></highlight> to proceed to read from or write to the lightweight <highlight><bold>370</bold></highlight> and, thereby, to the database <highlight><bold>325</bold></highlight>. It should be noted that a write lock can be denied or held at bay until a read lock is released. However, there is usually no reason to hold a read request at bay if only a read lock has been granted to another client thread. Still further, it should be noted that the lock manager <highlight><bold>316</bold></highlight> can be used to establish reserve operations described above. In particular, a reserve lock may be requested by and granted to a client on, for example, the lightweight <highlight><bold>370</bold></highlight>. After that time, any client may read the lightweight <highlight><bold>370</bold></highlight> but not write to the lightweight. If a reserve lock has been granted, the lock manager <highlight><bold>316</bold></highlight> may cause the wrapper <highlight><bold>372</bold></highlight> to send a message to the client requesting a write lock that no writes are allowed on this data as it has been reserved by a different client. Of course, the lock manager <highlight><bold>316</bold></highlight> may also provide or store an identification of the client that was granted the reserve lock and enable this client to write to the lightweight <highlight><bold>370</bold></highlight> during a promote operation. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Anywhere there is locking, there is the potential for deadlock. For example, a first client could take out a lock on component A and, at the same time, a second client could take out a lock on component B. Next, the first client could attempt to take out a lock on component B and be stalled until the lock on component B is released by the second client. However, if the second client attempts to take out a lock on component A before releasing the lock on component B, the locks on both component A and component B will never be released, resulting in deadlock. To avoid deadlock in the shared cache <highlight><bold>327</bold></highlight>, the lock manager <highlight><bold>316</bold></highlight> may be under a restriction that any particular client must take out a lock and release it sequentially, i.e., before taking out another lock. However, in this case, two clients may overwrite changes made by the other with the result that the last write wins. For example, the first client modifies component A, and the second client modifies component B. The first client then modifies component B, and the second client modifies component A. While deadlock has been avoided, component A has the second client&apos;s changes, and component B has the first client&apos;s changes. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Although the lightweights do not have a hierarchy, some inter-lightweight references may exist. If so, this fact is a potential source of deadlock, if, for example, an update operation requires both lightweights to be locked at the same time. To avoid this problem the lock manager <highlight><bold>316</bold></highlight> can implement a locking order on related lightweights. If, for example, a first lightweight is associated with a second lightweight, the first lightweight is added to the second lightweight&apos;s locking list. If a client wants to lock the second lightweight, the client must lock the first lightweight first. The lock manager <highlight><bold>316</bold></highlight> may keep a list of this order and enforce the order in the locking procedures. To enforce this dependent locking, the lock manager <highlight><bold>316</bold></highlight> may only allow one lock per client at a time, unless the objects involved form a dependency tree. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Where modifying a series of components in the database <highlight><bold>325</bold></highlight> happens in one database transaction, it is possible for the transaction to fail and, thus, rollback to the state of the database before the changes were made in the database <highlight><bold>325</bold></highlight>, which results in the cached components (i.e., the lightweights) being inconsistent with the components as stored in the database <highlight><bold>325</bold></highlight>. To provide a rollback mechanism, a client thread may keep a list of modified components to which it adds the components while the database modify transaction is active. If the multi-step database transaction is aborted or the commit fails, the list is traversed and each component is reloaded, which means reloading a component&apos;s properties and checking for new/deleted children. If such a list of modified components is kept in a known order (e.g. ordered by wrapper ID), it is possible to produce a lock table and to take out multiple locks per client operation. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> To reduce the amount of time that a lightweight is locked, a lightweight, when writing properties back to the database <highlight><bold>325</bold></highlight>, may first clone the component data object stored in the lightweight. The clone is supplied with the new property values and is used to save the values to the database <highlight><bold>325</bold></highlight>. Once this operation is complete, the original component data object is mutated into or is replaced in favor of the clone. Using such a cloning technique reduces the time the cache <highlight><bold>327</bold></highlight> or the lightweight is locked because the lightweight can be unlocked after the clone is made, which improves concurrency of access to the cache. However, in this situation, a race condition may exist where two clients are trying to write to the same lightweight at the same time. In particular, the cache becomes inconsistent with the database if the first client saves its version of the component to the database <highlight><bold>325</bold></highlight> before the second client but mutates the cache (i.e. the lightweight) after the second client. Here, the database has the second client&apos;s changes but the lightweight has the first client&apos;s changes. This situation can be avoided either by coordinated locking or by allowing only one clone for any lightweight at any time. All of these procedures can be arbitrated by the lock manager <highlight><bold>316</bold></highlight>. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> As indicated above, new children lightweights come into existence either by loading these children from the database <highlight><bold>325</bold></highlight> in response to a client request or when a client adds a new child. If desired, clients can be allowed to manipulate the cache <highlight><bold>327</bold></highlight> to the point of creating/loading new child component data objects before locking the parent so that the parent lightweight needs to be locked only when a child is actually connected to the hierarchy or associated with the parent. In other words, all of the objects associated with children components being created may be created in non-shared manner or in a local memory until all the children are completed. Then, the parent may be locked and modified to include pointers to these children to thereby migrate these children objects to the shared memory. As a result, the parent lightweight is only locked when it is being altered to be associated with the new children components, and not during the creation of the children objects. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 15</cross-reference>, the operation of the runtime notify thread which operates to notify clients of changes to the configuration of a process control system caused by runtime operations is illustrated. In this case, it is assumed that a client <highlight><bold>400</bold></highlight> is subscribing to a decommissioned device component and that the client component <highlight><bold>402</bold></highlight>, the proxy <highlight><bold>404</bold></highlight>, the decommissioned devices server component <highlight><bold>406</bold></highlight>, the wrapper <highlight><bold>408</bold></highlight> and the lightweight <highlight><bold>410</bold></highlight> are already set up within the client <highlight><bold>400</bold></highlight> and the server <highlight><bold>306</bold></highlight>. It is also assumed that the wrapper <highlight><bold>408</bold></highlight> registered with the map <highlight><bold>340</bold></highlight> to receive indications of the addition of new controllers to the system when the wrapper <highlight><bold>408</bold></highlight> was created. In this example, the notify engine <highlight><bold>336</bold></highlight> of the runtime notify thread detects the addition of the new controller (named &ldquo;CTLR001&rdquo;) added via runtime services (such as an auto-sensing application) and sends an update event to the decommissioned devices wrapper <highlight><bold>408</bold></highlight> indicating the presence of this new controller. The decommissioned devices wrapper <highlight><bold>408</bold></highlight> responds to the update event by creating a child wrapper <highlight><bold>412</bold></highlight> for the detected controller, creating a lightweight <highlight><bold>414</bold></highlight> for the new controller and, if possible, storing the controller data as delivered by the runtime services into the lightweight <highlight><bold>414</bold></highlight>. The lightweight <highlight><bold>414</bold></highlight> may also store this data in the database <highlight><bold>325</bold></highlight> if desired and register the ID for the data wrapper <highlight><bold>412</bold></highlight> and the magic number of the database location where the new controller information is stored with the wrapper map <highlight><bold>322</bold></highlight> for the notify thread. The wrapper <highlight><bold>412</bold></highlight> may also register for updates with the map <highlight><bold>340</bold></highlight>. Upon loading the new controller as a new child in the shared cache <highlight><bold>327</bold></highlight>, an event is posted to the decommissioned devices server component <highlight><bold>406</bold></highlight> which responds by creating a new child controller server component <highlight><bold>416</bold></highlight> embedding a pointer to the new child data wrapper <highlight><bold>412</bold></highlight> and pushing the new controller data to the client <highlight><bold>400</bold></highlight>. The client proxy <highlight><bold>404</bold></highlight> receives the new child event, stores the new child information and posts a refresh message to the user interface at the client <highlight><bold>400</bold></highlight>. When the decommissioned devices client component <highlight><bold>402</bold></highlight> loads new children, the decommissioned devices client component <highlight><bold>402</bold></highlight> constructs a new child controller component <highlight><bold>418</bold></highlight> and establishes a connection back to the server component <highlight><bold>416</bold></highlight> for the controller component <highlight><bold>418</bold></highlight> using server component identification information sent to the client <highlight><bold>400</bold></highlight> by the decommissioned devices server component <highlight><bold>406</bold></highlight>. A proxy <highlight><bold>420</bold></highlight> for the controller client component <highlight><bold>418</bold></highlight> is created and assumes communication with the server component <highlight><bold>416</bold></highlight> on behalf of the controller client component <highlight><bold>418</bold></highlight>. Thus, the addition of the controller is detected by the notify engine <highlight><bold>336</bold></highlight> and that change is sent to the associated data wrapper <highlight><bold>408</bold></highlight> which may change the data stored in a lightweight or which may cause the creation or deletion of a lightweight and associated wrapper. The creation of a new wrapper and lightweight results in the expansion of each client thread subscribing to the parent object. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> Besides the operations described above, other activities or operations may be implemented by the server <highlight><bold>306</bold></highlight>. For example, a client may perform a create operation in which the client creates a component to be stored in the database <highlight><bold>325</bold></highlight>. The operations associated with this create activity are very similar to loading of a child, with the extra step of creating the underlying database object in the database <highlight><bold>325</bold></highlight>, instead of loading this object from the database <highlight><bold>325</bold></highlight>. Here, the client will create a component and send this component to the server component associated with the parent of the created component. This action will cause the wrapper factory <highlight><bold>312</bold></highlight> to create a wrapper and a lightweight as a child of the associated parent wrapper and lightweight, and the new lightweight will be loaded with the new component. The lightweight will then write the new component to the database <highlight><bold>325</bold></highlight>, as well as registering the database location and wrapper with the wrapper map <highlight><bold>322</bold></highlight> in the notify thread. A new server component is then created for the wrapper and assumes communication with the client for this new component. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> To delete a component from the database <highlight><bold>325</bold></highlight>, a client first deletes and then releases the associated server component. The deletion of the server component puts the associated data wrapper and the lightweight into a deleted state, which then deletes the component from the database <highlight><bold>325</bold></highlight>. The wrapper sends a deletion message to each of the other referencing server components (i.e., within other client threads) which, in turn, notify the subscribing clients of the deletion activity. When in the delete state, the wrapper is removed from the configuration hierarchy and cannot perform any further database operations. However, the wrapper may remain until all referencing server components have released it. Of course, the referencing server components will not release until the associated clients have released which occurs after the server components have notified the clients of the deletion activity. Of course, the database event mechanism may eventually produce a delete message that will get funneled back to the wrapper by the notify engine of the notify thread. Because the wrapper is in a deleted state, it ignores this message. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Mutation of a configuration component may occur because some operations on a component cause the type of that component to be changed. This mutation requires that the component and sub-tree be reloaded from the database <highlight><bold>325</bold></highlight>. To effect this operation, the entire lightweight parent/child hierarchy for the mutated component is reloaded from the database <highlight><bold>325</bold></highlight> into the existing lightweights. Thereafter, the server components are re-established and the new values within these server components are then synchronized with the client components. Such a synchronization involves iterating through the children components and removing those whose type has changed and those that no longer exist. New children are loaded and added as required. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> Of course, a client may simply release or un-subscribe with a component within the database <highlight><bold>325</bold></highlight>. In this case, the client releases the associated server component, which causes the associated wrapper to decrement a wrapper reference count. When the wrapper reference count for a wrapper goes to zero, no server components are referencing this wrapper and thus, no clients are subscribing to this wrapper. In this case, the wrapper unloads. If desired, the wrapper may wait for a timeout period before unloading in case the wrapper needs to be reload immediately. When unloading, the wrapper destroys its associated lightweight, de-registers the update notification in the database <highlight><bold>325</bold></highlight> and de-registers from the wrapper map. Furthermore, when a component is released, it releases its lightweight and all the children lightweights/wrappers, nulling the back pointers of the children lightweight/wrappers. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> While the operation of the server <highlight><bold>306</bold></highlight> has been described herein for two clients accessing one or two components, it will be understood that the same technique can be extended and used for any number of clients and client threads reading from and writing to any number of configuration objects within a database. Furthermore, while the technique for using a shared cache to establish subscriber relationships for multiple clients has been described herein for use in accessing configuration data within a process control system, it will be understood that this technique may be used in any other database access system, including those which are not related to configuration databases and those which are not related to process control system databases. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> Also, while the database access technique described herein assumes that clients communicate with a server on a per component basis, configuration tree marshaling may be used to provide more optimal communications between a client and a server. In particular, when a client knows it must retrieve a whole tree or sub-tree, it is more efficient to make one server call to obtain the whole tree, rather than recursively calling a load children routine at each level of the tree. The converse is also true so that, when the client wants to write a whole tree back to the server, the whole tree may be sent in a signal message. Of course, these messages may be intercepted by the client and server and the objects necessary to establish subscription relationships (as described above) may be created at once to thereby create all of the objects within the client or the server necessary for the client to subscribe to the entire tree or sub-tree or to write an entire tree or sub-tree. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> Still further, it will be understood that the objects and other elements and steps described herein to be created in or performed by the server and the clients may be implemented using any desired programming technique or language and that these programs may be stored in memories and executed on processors in any manner within the clients, the servers and the databases described herein. Moreover, although the data access technique described herein is preferably implemented in software, it may be implemented in hardware, firmware, etc., and may be implemented by any processor associated with the process control system <highlight><bold>10</bold></highlight>. Thus, this technique may be implemented in a standard multi-purpose CPU or on specifically designed hardware or firmware as desired. When implemented in software, the software routines may be stored in any computer readable memory such as on a magnetic disk, a laser disk, an optical disk, or other storage medium, in a RAM or ROM of a computer or processor, etc. Likewise, this software may be delivered to a user or a process control system via any known or desired delivery method including, for example, on a computer readable disk or other transportable computer storage mechanism or over a communication channel such as a telephone line, the Internet, etc. (which are viewed as being the same as or interchangeable with providing such software via a transportable storage medium). </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> Thus, while the present invention has been described with reference to specific examples, which are intended to be illustrative only and not to be limiting of the invention, it will be apparent to those of ordinary skill in the art that changes, additions or deletions may be made to the disclosed embodiments without departing from the spirit and scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A configuration database system for use in storing configuration data pertaining to a process control system having a plurality of geographically distributed physical locations, the configuration database system comprising: 
<claim-text>a configuration database located at each of the plurality of physical locations, wherein each of the configuration databases is adapted to originally store a different portion of the configuration data; </claim-text>
<claim-text>a communication network that communicatively couples the plurality of geographically distributed physical locations together; and </claim-text>
<claim-text>a configuration application adapted to communicate with each of the databases via the communication network and to use data from two or more of the configuration databases to perform a configuration activity. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the configuration application is adapted to subscribe to a subset of the configuration data within a first one of the configuration databases and the first one of the configuration databases includes a database server having a first routine that automatically recognizes a change to the subset of the configuration data stored in the first configuration database to which the configuration application subscribes and a second routine that automatically notifies the configuration application of the change to the subset of the configuration data. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the second routine automatically communicates the change made to the subset of the configuration data stored in the first configuration database to the configuration application when the first routine detects the change to the subset of the configuration data. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, wherein the configuration application includes a locking portion that sends a lock command to lock an item of configuration data within the first configuration database and wherein the database server further includes a locking routine that locks the item of configuration data within the first configuration database to prevent the item of configuration data from being changed by any configuration application other than the configuration application that sent the locking command. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further including a second configuration application and wherein the database server includes a second routine that provides concurrent access to a particular item of configuration data within the first configuration database to the first and second configuration applications and wherein the database server further includes a locking routine that locks the particular item of configuration data within the first configuration database when the first configuration application writes to the particular item of configuration data to thereby prevent the second configuration application from the changing the particular item of configuration data when the first configuration application is writing to the particular item of configuration data. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the configuration databases are established in a hierarchy having at least two configuration databases in a lower level and at least one configuration database in an upper level, and wherein the each of the configuration databases in the lower level are communicatively coupled to the configuration database within the upper level. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, wherein the lower level includes zones pertaining to different ones of the physical locations and wherein configuration data that pertains to a first zone is stored in the configuration database at the first zone and the configuration data that pertains to first and second zones is stored in the configuration database at the upper level in the hierarchy communicatively coupled to the first and second zones. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00006">claim 6</dependent-claim-reference>, further including software that detects the use of the same name in the one of the configuration databases within the lower level and the configuration database in the upper level. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the configuration application includes a browser adapted to browse a first one of the configuration databases and to browse a second one of the configuration databases. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein one of the configuration databases stores a local copy of an item stored originally within a different one of the configuration databases. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The configuration database system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the communication network includes a slow communication link between two of the configuration databases. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A distributed configuration database system adapted to be used in a process control system having multiple physical locations: 
<claim-text>a first configuration database located at a first one of the physical locations that stores a first portion of configuration data for the process control system; </claim-text>
<claim-text>a second configuration database located at a second one of the physical locations that stores a second portion of the configuration data for the process control system, wherein the first portion of the configuration data is different than the second portion of the configuration data; and </claim-text>
<claim-text>a communication network that interconnects the first physical location and the second physical location using a slow communication link; </claim-text>
<claim-text>wherein the first and the second configuration databases are adapted to communicate with users at the first and the second physical locations. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the second configuration database is adapted to subscribe to configuration data within the first configuration database and wherein the first configuration database includes a database server having a first routine that automatically detects a change to the configuration data stored in the first configuration database to which the second configuration database subscribes and a second routine that automatically notifies the second configuration database of the change to the configuration data stored in the first configuration database to which the second configuration database subscribes. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the second routine automatically communicates the change made to the configuration data stored in the first configuration database to the second configuration database when the first routine detects the change to the configuration data stored in the first configuration database to which the second configuration database subscribes. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further including first and second configuration applications and a database server associated with the first configuration database, wherein the database server includes a shared cache that provides concurrent access to any particular item of configuration data within the first configuration database to the first and second configuration applications and includes a locking routine that locks the particular item of configuration data within the first configuration database when the first configuration application writes to the particular item of configuration data to thereby prevent the second configuration application from changing the particular item of configuration data when the first configuration application is writing to the particular item of configuration data. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, further including a third configuration database located at a third physical location and wherein the first, second and third configuration databases are established in a hierarchy in which the first and the second configuration databases are in a lower level and the third configuration database is in an upper level, and wherein the each of first and second configuration databases in the lower level are communicatively coupled to the third configuration database within the upper level via the communication network. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, wherein the lower level includes first and second zones and wherein configuration data that pertains to a first zone is stored in the first configuration database, configuration data that pertains to the second zone is stored in the second configuration database and configuration data that pertains to both the first and second zones is stored in the third configuration database. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The distributed configuration database system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, further including a routine that detects the use of the same name within the first and the third configuration databases or within the second and third configuration databases. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A method of storing and using configuration data related to a process control system when the process control system has two or more physical locations which are geographically separated, the method comprising the steps of: 
<claim-text>storing a different portion of the configuration data within each of a plurality of configuration databases, wherein two of the configuration databases are located at different physical locations; </claim-text>
<claim-text>providing a communication link between each of the configuration databases, and </claim-text>
<claim-text>accessing different configuration data from two or more of the configuration databases at the same time to perform a configuration activity. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The method of storing and using configuration data of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, wherein the step of accessing different configuration data includes the step of using an application to subscribe to the accessed configuration data from the two or more of the configuration databases and automatically sending any changes made to the accessed configuration data from the two or more configuration databases to the application. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. The method of storing and using configuration data of <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference>, further including the step of establishing a hierarchy among the configuration databases, wherein the hierarchy includes two configuration databases within a lower level and one configuration database within an upper level, and establishing communications between each of the two configuration databases within the lower level and the one configuration database within the upper level. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of storing and using configuration data of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further including the step of using unique names for configuration data within the one configuration database within the upper level of the hierarchy and either of the configuration databases within the lower level of the hierarchy, wherein the same name can be used in the two configuration databases at the lower level of the hierarchy. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A database server adapted to provide multiple clients concurrent access to a database component stored in a database, the database server comprising: 
<claim-text>a shared cache including a memory store communicatively coupled to the database, wherein the memory store holds a copy of the database component; </claim-text>
<claim-text>a memory store gate associated with the memory store, wherein the memory store gate controls access to the memory store; and </claim-text>
<claim-text>a client thread for each of the multiple of clients, wherein each of the client threads includes a server component that communicates with the memory store gate to gain access to the memory store and that communicates with one of the multiple clients with respect to the database component stored in the memory store; </claim-text>
<claim-text>wherein the memory store gate communicates with a single server component when only one of the multiple clients is accessing the database component and the memory store gate communicates with two or more server components when two or more clients are accessing the database component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further including a notify thread having a notify engine that detects a change made to the database component within the database and that notifies the memory store gate of the detected change. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the memory store gate notifies the server components that communicate with the memory store gate of the detected change and wherein the notified server components notify the clients with which the notified server components communicate of the detected change. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, wherein the notify thread further includes a map which maps the database component stored in the database to the memory store gate and wherein the notify engine uses the map to notify the memory store gate of the detected change. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 26</dependent-claim-reference>, wherein the memory store gate includes a unique identifier and registers the unique identifier with the map and wherein the memory store uses a transactional object to read the database component from or to write the database component to the database and wherein the transactional object registers a database component location for the database component with the map to be associated with the unique identifier. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further including a runtime thread including a runtime notify engine that detects changes made with respect to the database component made by applications executed outside of the database and that notifies the memory store gate of the detected change to the database component. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the server component of each of the client threads is capable of reading from and writing to the memory store. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein one of the server components communicates with one of the multiple clients via a slow communication link. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the slow communication link is a satellite communication link. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, further including a lock manager which causes the memory store gate to prevent writes to the memory store. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the lock manager causes the memory store gate to prevent writes to the memory store by each of the clients except one of the clients when the one of the clients is writing to the memory store. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein the database is a configuration database and the database component is a configuration component related to the configuration of a process control network. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. A database server adapted to provide multiple clients concurrent access to a plurality of database components stored in a database, the database server comprising: 
<claim-text>a shared cache including a plurality of memory stores communicatively coupled to the database, wherein each of the memory stores holds a copy of a different one of the database components; </claim-text>
<claim-text>a memory store gate associated with each of the memory stores, wherein each of the memory store gates controls access to the associated memory store; and </claim-text>
<claim-text>a client thread for each of the multiple of clients, wherein each of the client threads includes a server component that communicates with one of the memory store gates to gain access to the memory store associated with the one of the memory store gates and that communicates with one of the multiple clients with respect to the database component stored in the memory store associated with the one of the memory store gates; </claim-text>
<claim-text>wherein each of the memory store gates communicates with a single server component when only one of the multiple clients is accessing the database component stored in the memory store associated with the memory store gate and wherein each of the memory store gates communicates with two or more server components when two or more of the multiple clients are accessing the database component stored in the memory store associated with the memory store gate. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, further including a notify thread having a notify engine that detects a change made to one of the database components and that notifies one of the memory store gates of the detected change. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, wherein the one of the memory store gates notifies the server components that communicate with the one of the memory store gates of the detected change and wherein the notified server components notify the clients with which the notified server components communicate of the detected change. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the notified server components provide the detected change to the clients with which the notified server component communicate. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, further including a lock manager which causes each of the memory store gates to prevent writes to the associated memory store. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00033">claim 39</dependent-claim-reference>, wherein the two of the memory store gates have a parent/child relationship so that one of the two memory store gates is a parent memory store gate and the other of the two memory store gates is a child memory store gate and wherein the lock manager causes a lock of the child memory store gate when the lock manager causes a lock of the parent memory store gate. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A database server adapted to be used in a process control system to provide multiple clients concurrent access to a database component stored in a database, the database server comprising: 
<claim-text>a shared cache; </claim-text>
<claim-text>a first element that establishes, within the shared cache, a memory store for the database component when the database component is being accessed by one or more of the multiple clients; and </claim-text>
<claim-text>a client thread routine that establishes a client thread for each of the multiple clients, wherein each of the client threads includes a server component that communicates with one of the clients and that communicates with the memory store to thereby provide access to the database component stored in the memory store by the one of the clients; </claim-text>
<claim-text>wherein the memory store is adapted to communicate with a single server component when only one of the multiple clients is accessing the database component and wherein the memory store is adapted to communicate with two or more server components when two or more of the multiple clients are accessing the database component. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the first element further establishes a memory store gate associated with the memory store and wherein the memory store gate is adapted to communicate with the server components in two or more of the client threads to provide access to the associated memory store by each of the server components in the two or more client threads when two or more clients are accessing the database component. </claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, wherein the memory store uses a transactional object to access the database component within the database. </claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 42</dependent-claim-reference>, further including a notify thread having a notify engine and a map, wherein the notify engine detects a change to the database component within the database and uses the map to notify the memory store gate of the detected change. </claim-text>
</claim>
<claim id="CLM-00045">
<claim-text><highlight><bold>45</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, wherein the memory store gate notifies all of the server components to which the memory store gate communicates of the detected change to the database component and wherein the notified server components notify the clients with which the notified server components communicate of the detected change. </claim-text>
</claim>
<claim id="CLM-00046">
<claim-text><highlight><bold>46</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, wherein the memory store gate causes the memory store to read the database component from the database when the notify engine notifies the memory store gate of the detected change to the database component within the database. </claim-text>
</claim>
<claim id="CLM-00047">
<claim-text><highlight><bold>47</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, wherein the notify thread uses a change list generated by the database to detect the change to the database component within the database. </claim-text>
</claim>
<claim id="CLM-00048">
<claim-text><highlight><bold>48</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 44</dependent-claim-reference>, further including a runtime services notify thread that detects a change to the database component based on the operation of runtime applications executed within the process control system and that notifies the memory store gate of the detected change. </claim-text>
</claim>
<claim id="CLM-00049">
<claim-text><highlight><bold>49</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein at least one of the server components is adapted to communicate with one of the multiple clients via a satellite communication link. </claim-text>
</claim>
<claim id="CLM-00050">
<claim-text><highlight><bold>50</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein at least one of the server components is adapted to communicate with one of the multiple clients via a cellular communication link. </claim-text>
</claim>
<claim id="CLM-00051">
<claim-text><highlight><bold>51</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein at least one of the server components is adapted to communicate with one of the multiple clients via a wireless communication link. </claim-text>
</claim>
<claim id="CLM-00052">
<claim-text><highlight><bold>52</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein at least one of the server components is adapted to communicate with one of the multiple clients via a telephone communication link. </claim-text>
</claim>
<claim id="CLM-00053">
<claim-text><highlight><bold>53</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, further including a locking manager that locks the memory store when one of the multiple clients is accessing the memory store to prevent access to the memory store by the others of the multiple clients. </claim-text>
</claim>
<claim id="CLM-00054">
<claim-text><highlight><bold>54</bold></highlight>. The database server of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, further including a context memory and wherein the memory store uses a first portion of the context memory when communicating with the database on behalf of a first one of the clients and uses a second and different portion of the context memory when communicating with the configuration database on behalf of a second one of the clients. </claim-text>
</claim>
<claim id="CLM-00055">
<claim-text><highlight><bold>55</bold></highlight>. A method of providing multiple clients access to a database component stored in a database, the method comprising the steps of: 
<claim-text>creating a storage object within a shared cache, wherein the storage object communicates with the database to read to or to write from the database with respect to the database component; </claim-text>
<claim-text>using a first client thread to provide communication between a first one of the clients and the database component, wherein the step of using the first client thread includes the steps of; 
<claim-text>creating a first communication component that communicates with the first client with respect to the database component; and </claim-text>
<claim-text>providing a link between the first communication component and the storage object; and </claim-text>
</claim-text>
<claim-text>using a second client thread to provide communication between a second one of the clients and the database component, wherein the step of using the second client thread includes the steps of; 
<claim-text>creating a second communication component that communicates with the second client with respect to the database component; and </claim-text>
<claim-text>providing a link between the second communication component and the storage object. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00056">
<claim-text><highlight><bold>56</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 55</dependent-claim-reference>, wherein the step of creating the storage object includes the step of creating a storage object gate associated with the storage object, wherein the storage object gate is adapted to communicate with the server components in the first and second client threads to provide access to the storage object by each of the server components in the first and second client threads. </claim-text>
</claim>
<claim id="CLM-00057">
<claim-text><highlight><bold>57</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 56</dependent-claim-reference>, including the step of using a transactional object to access the database component within the database and to provide communications between the storage object and the database. </claim-text>
</claim>
<claim id="CLM-00058">
<claim-text><highlight><bold>58</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 56</dependent-claim-reference>, further including the step of detecting a change to the database component within the database and notifying the storage object gate of the change. </claim-text>
</claim>
<claim id="CLM-00059">
<claim-text><highlight><bold>59</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 58</dependent-claim-reference>, further including the step of using the storage object gate to notify all of the server components to which the storage object gate communicates of the detected change to the database component and including the step of communicating the detected change to the database component from the notified server components to the clients with which the notified server components communicate. </claim-text>
</claim>
<claim id="CLM-00060">
<claim-text><highlight><bold>60</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference>, further including the step of causing the storage object to read the database component from the database when the change to the database component is detected. </claim-text>
</claim>
<claim id="CLM-00061">
<claim-text><highlight><bold>61</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference>, wherein the step of communicating the detected change from the notified server components to the clients includes the step of using a satellite communication link to communicate between one of the server components and one of the clients. </claim-text>
</claim>
<claim id="CLM-00062">
<claim-text><highlight><bold>62</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference>, wherein the step of communicating the detected change from the notified server components to the clients includes the step of using a wireless communication link to communicate between one of the server components and one of the clients. </claim-text>
</claim>
<claim id="CLM-00063">
<claim-text><highlight><bold>63</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference>, wherein the step of communicating the detected change to the database component from the notified server components to the clients includes the step of using a telephone line communication link to communicate between one of the server components and one of the clients. </claim-text>
</claim>
<claim id="CLM-00064">
<claim-text><highlight><bold>64</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00055">claim 59</dependent-claim-reference>, further including the step of locking the storage object when one of the multiple clients is accessing the storage object to prevent access to the storage object by the others of the multiple clients. </claim-text>
</claim>
<claim id="CLM-00065">
<claim-text><highlight><bold>65</bold></highlight>. A method of using a database server to provide a multiplicity of clients concurrent access to components stored in a database having a shared cache, the method including the steps of: 
<claim-text>performing the following three steps when a client requests access to a component within the database; 
<claim-text>(1) creating a communication component object within a database server that communicates with the client with respect to the component; </claim-text>
<claim-text>(2) determining if a shared memory object has been established within the shared cache for the component and creating the shared memory object for the component within the shared cache if the shared memory object has not been established within the shared cache; and </claim-text>
<claim-text>(3) providing a communication link between the shared memory object and the communication component; and </claim-text>
</claim-text>
<claim-text>using the shared memory object to read from and to write to database to thereby read the component from the database and to write to the component within the database; </claim-text>
<claim-text>wherein, when two or more clients access the same component, two or more communication component objects are communicatively coupled to the same shared memory object. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00066">
<claim-text><highlight><bold>66</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00066">claim 65</dependent-claim-reference>, further including the step of detecting a change to one of the components and notifying each of the clients that is accessing the one of the components of the detected change. </claim-text>
</claim>
<claim id="CLM-00067">
<claim-text><highlight><bold>67</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, further including the step of causing the shared memory object for the one of the components to read the changed component from the database. </claim-text>
</claim>
<claim id="CLM-00068">
<claim-text><highlight><bold>68</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00066">claim 66</dependent-claim-reference>, further including the step of locking one of the shared memory objects when one of the communication components accesses the one of the shared memory objects to thereby prevent other ones of the communication objects from accessing the shared memory component when the one of the communication objects accesses the shared memory object. </claim-text>
</claim>
<claim id="CLM-00069">
<claim-text><highlight><bold>69</bold></highlight>. A process control system comprising: 
<claim-text>a database located at a first physical location, wherein the database stores database components; </claim-text>
<claim-text>a multiplicity of client applications, wherein one of the client applications is located at a second physical location substantially geographically separated from the first physical location; </claim-text>
<claim-text>a communication link between the first physical location and the second physical location; and </claim-text>
<claim-text>a database server the provides access to the database components within the database by the multiplicity of client applications, the database server including; 
<claim-text>a shared cache having a plurality of memory objects, wherein each of the memory objects communicates with the database and stores a copy of one of the database components being accessed by at least one of the multiplicity of clients; and </claim-text>
<claim-text>one or more communication objects associated with each of the client applications, wherein each of the communication objects communicates with an associated one of the client applications and with one of the memory objects; </claim-text>
<claim-text>wherein a memory object that is being accessed by two or more client applications is communicatively coupled to two or more communication objects. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00070">
<claim-text><highlight><bold>70</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the database server further includes a notify routine that detects changes to one of the database components and that automatically notifies each of the clients accessing the one of the database components of the existence of the change to the one of the database components. </claim-text>
</claim>
<claim id="CLM-00071">
<claim-text><highlight><bold>71</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00077">claim 70</dependent-claim-reference>, wherein the notify routine notifies each of the clients accessing the one of the database components of the state of the one of the database components after the change. </claim-text>
</claim>
<claim id="CLM-00072">
<claim-text><highlight><bold>72</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00077">claim 70</dependent-claim-reference>, wherein the database is a configuration database and wherein the database components are configuration components. </claim-text>
</claim>
<claim id="CLM-00073">
<claim-text><highlight><bold>73</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00077">claim 70</dependent-claim-reference>, wherein each of the communication objects is adapted to read from and to write to the associated one of the memory objects. </claim-text>
</claim>
<claim id="CLM-00074">
<claim-text><highlight><bold>74</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00077">claim 70</dependent-claim-reference>, wherein the database server further includes a lock manager which prevents a first one of the communication components from accessing one of the memory objects when a second one of the communication components is accessing the one of the memory objects. </claim-text>
</claim>
<claim id="CLM-00075">
<claim-text><highlight><bold>75</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the communication link is a satellite communication link. </claim-text>
</claim>
<claim id="CLM-00076">
<claim-text><highlight><bold>76</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the communication link is a cellular communication link. </claim-text>
</claim>
<claim id="CLM-00077">
<claim-text><highlight><bold>77</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the communication link is a telephone line communication link. </claim-text>
</claim>
<claim id="CLM-00078">
<claim-text><highlight><bold>78</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the communication link is a wireless communication link. </claim-text>
</claim>
<claim id="CLM-00079">
<claim-text><highlight><bold>79</bold></highlight>. The process control system of <dependent-claim-reference depends_on="CLM-00066">claim 69</dependent-claim-reference>, wherein the communication link is a wide area network link.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004952A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004952A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004952A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004952A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004952A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004952A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004952A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004952A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004952A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004952A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004952A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004952A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004952A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004952A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004952A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
