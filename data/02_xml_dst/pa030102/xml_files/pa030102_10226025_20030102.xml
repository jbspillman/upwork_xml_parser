<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005194A1-20030102-D00000.TIF SYSTEM "US20030005194A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00001.TIF SYSTEM "US20030005194A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00002.TIF SYSTEM "US20030005194A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00003.TIF SYSTEM "US20030005194A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00004.TIF SYSTEM "US20030005194A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00005.TIF SYSTEM "US20030005194A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00006.TIF SYSTEM "US20030005194A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00007.TIF SYSTEM "US20030005194A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005194A1-20030102-D00008.TIF SYSTEM "US20030005194A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005194</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10226025</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020822</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F013/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>107000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>710</class>
<subclass>240000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for effectively performing isochronous data transfers</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10226025</doc-number>
<kind-code>A1</kind-code>
<document-date>20020822</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09383490</doc-number>
<document-date>19990826</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6463489</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Glen</given-name>
<middle-name>D.</middle-name>
<family-name>Stone</family-name>
</name>
<residence>
<residence-us>
<city>Campbell</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Bruce</given-name>
<middle-name>A.</middle-name>
<family-name>Fairman</family-name>
</name>
<residence>
<residence-us>
<city>Woodside</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Scott</given-name>
<middle-name>D.</middle-name>
<family-name>Smyers</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>Simon &amp; Koerner LLP</name-1>
<name-2>Attn: Gregory J. Koerner</name-2>
<address>
<address-1>Suite B</address-1>
<address-2>10052 Pasadena Avenue</address-2>
<city>Cupertino</city>
<state>CA</state>
<postalcode>95014</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method for effectively performing isochronous data transfers comprises a network device including an input/output (I/O) bus that is coupled to an input/output (I/O) node and an isochronous-capable network interface. The network interface and the I/O node may send requests to an arbiter for control of the I/O bus to perform a data transfer operation. In accordance with the present invention, an arbiter filter is interposed between the arbiter and both the network interface and the I/O node to filter respective requests for control of the I/O bus. The network interface advantageously provides an isochronous request to the arbiter filter to thereby de-assert conflicting requests so that the network interface may effectively perform a time-sensitive isochronous data transfer. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This Application is a Continuation Application of, and claims the benefit of, U.S. Non-Provisional Application No. 09/383,490, entitled &ldquo;System And Method For Effectively Performing Isochronous Data Transfers,&rdquo; which was filed on Aug. 26, 1999. The related Applications are commonly assigned.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> 1. Field of the Invention </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> This invention relates generally to techniques for performing data transfer operations, and relates more particularly to a system and method for effectively performing isochronous data transfers. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> 2. Description of the Background Art </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Implementing effective methods for transferring data between electronic devices is a significant consideration for designers and manufacturers of contemporary electronic devices. An electronic device in an electronic network may advantageously communicate with other electronic devices in the network to share data to thereby substantially increase the capabilities and versatility of individual devices in the electronic network. For example, an electronic network may be implemented in a home environment to enable flexible and beneficial sharing of data and device resources between various consumer electronic devices, such as personal computers, digital video disc (DVD) devices, digital set-top boxes for digital broadcasting, enhanced television sets, and audio reproduction systems. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Effectively managing data transfer operations in a network of electronic devices may create substantial challenges for designers of electronic networks. For example, enhanced demands for increased device functionality and performance during data transfer operations may require more system processing power and require additional hardware resources across the network. An increase in processing or hardware requirements may also result in a corresponding detrimental economic impact due to increased production costs and operational inefficiencies. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Network size is also a factor that affects the management of data transfer operations in an electronic network. Communications in an electronic network typically become more complex as the number of individual devices or nodes increases. Assume that a particular device on an electronic network is defined as a local device with local software elements, and other devices on the electronic network are defined as remote devices with remote software elements. Accordingly, a local software module on the local device may need to transfer data to and from various remote devices across the electronic network. However, successfully managing a substantial number of electronic devices across a single network may provide significant benefits to a system user. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Furthermore, enhanced device capability to perform various advanced memory transfer operations may provide additional benefits to a system user, but may also place increased demands on the control and management of the various devices in the electronic network. For example, an enhanced electronic network that effectively accesses, processes, and displays digital television programming may benefit from efficient network communication techniques because of the large amount and complexity of the digital data involved. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> One type of data transfer that may occur in an electronic network is an isochronous data transfer. Isochronous data transfers include the guaranteed handling of data that arrives in a time-based stream at regular intervals called cycles. Isochronous data transfers are typically used for time-sensitive applications. For example, video or audio data being transmitted across a network typically needs to arrive at a display device in an uninterrupted flow with appropriate timing. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Due to growing demands on system resources and substantially increasing data magnitudes, it is apparent that developing new and effective methods for transferring data is a matter of significant concern for the related electronic technologies. Therefore, for all the foregoing reasons, implementing effective methods for transferring data between electronic devices remains a significant consideration for designers, manufacturers, and users of contemporary electronic devices. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In accordance with the present invention, a system and method are disclosed for effectively performing isochronous data transfers. In one embodiment, the invention preferably comprises a computer device that includes a network interface that is preferably coupled to both an input/output (I/O) bus and a network bus to serve as an interface for transferring isochronous data and asynchronous data between the computer device and an electronic network. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In addition, at least one input/output (I/O) node is also coupled to the I/O bus. In certain embodiments, the I/O bus may only be accessed by a single given I/O device (such as the network interface or the I/O node) at any particular time to transfer information between a device memory and the given I/O device. Therefore, in order to gain control of the I/O bus for a data transfer operation, the network interface or the I/O node may request control of the I/O bus from an arbiter in an I/O bus bridge within the computer device. In accordance with an arbitration algorithm, the arbiter may then responsively grant control of the I/O bus to the appropriate requesting I/O device. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In one embodiment, the I/O node may transmit a Request A In to an arbiter filter. The arbiter filter responsively filters the Request A In and then propagates a corresponding Request A Out to the arbiter. The I/O node preferably utilizes the Request A In to request control of the I/O bus for a non-isochronous data transfer. Similarly, a network interface may transmit a Request B In to the arbiter filter. The arbiter filter responsively filters the Request B In, and then propagates a Request B Out to the arbiter. The network interface preferably utilizes the Request B In to request control of the I/O bus for a non-isochronous data transfer. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In accordance with the present invention, the network interface (or any other isochronous-capable I/O device) may also advantageously transmit an isochronous transfer request (iso request) to arbiter filter. The network interface advantageously utilizes the iso request and the arbiter filter to establish priority over the Request A In and/or the Request B In when seeking access to the I/O bus for performing a time-sensitive isochronous data transfer. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In accordance with the present invention, the operation of the arbiter filter and the iso request are transparent to the arbiter and the I/O node. In addition, the arbiter filter may readily be added to the circuitry of the computer device with no changes, or only minimal changes to the basic system design. In certain embodiments, standard components and devices may therefore be utilized to economically and effectively implement the computer device. The present invention thus efficiently implements a system and method for effectively performing isochronous data transfers. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram for one embodiment of an electronic network, in accordance with the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a timing diagram for one embodiment of exemplary isochronous data transfers, in accordance with the present invention; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram for one embodiment of the computer shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is a block diagram for one embodiment of the computer of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, in accordance with the present invention; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram for one embodiment of the arbiter filter of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, in accordance with the present invention; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a block diagram for an alternate embodiment of the arbiter filter of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, in accordance with the present invention; </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a timing diagram for an exemplary isochronous request sequence, in accordance with one embodiment of the present invention; and </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flowchart of method steps for performing an isochronous data transfer, in accordance with one embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> The present invention relates to an improvement in data transfer operations. The following description is presented to enable one of ordinary skill in the art to make and use the invention and is provided in the context of a patent application and its requirements. Various modifications to the preferred embodiment will be readily apparent to those skilled in the art and the generic principles herein may be applied to other embodiments. Thus, the present invention is not intended to be limited to the embodiment shown, but is to be accorded the widest scope consistent with the principles and features described herein. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The present invention comprises a system and method for effectively performing isochronous data transfers, and includes a network device having an input/output (I/O) bus that is coupled to an input/output (I/O) node and an isochronous-capable network interface. The network interface and the I/O node may send requests to an arbiter for control of the I/O bus to perform a data transfer operation. In accordance with the present invention, an arbiter filter is interposed between the arbiter and both the network interface and the I/O node to filter respective requests for control of the I/O bus. The network interface advantageously provides an isochronous request to the arbiter filter to thereby de-assert conflicting requests so that the network interface may effectively perform a time-sensitive isochronous data transfer. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> block diagram for one embodiment of an electronic network <highlight><bold>110</bold></highlight> is shown, according to the present invention. In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, network <highlight><bold>110</bold></highlight> preferably comprises, but is not limited to, a number of electronic devices (device A <highlight><bold>112</bold></highlight>(<highlight><italic>a</italic></highlight>), device B <highlight><bold>112</bold></highlight>(<highlight><italic>b</italic></highlight>), device C <highlight><bold>112</bold></highlight>(<highlight><italic>c</italic></highlight>), device D <highlight><bold>112</bold></highlight>(<highlight><italic>d</italic></highlight>); and device E <highlight><bold>112</bold></highlight>(<highlight><italic>e</italic></highlight>)), and computer <highlight><bold>116</bold></highlight>. In alternate embodiments, electronic network <highlight><bold>110</bold></highlight> may readily be configured to include various other devices or components in addition to, or instead of, those discussed in conjunction with the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment. In alternate embodiments, network <highlight><bold>110</bold></highlight> may readily be connected and configured in any other appropriate and suitable manner. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, devices <highlight><bold>112</bold></highlight> and computer <highlight><bold>116</bold></highlight> of network <highlight><bold>110</bold></highlight> may alternately be implemented as any type of electronic device, including, but not limited to, personal computers, printers, digital video disc devices, television sets, audio systems, video cassette recorders, and set-top boxes for digital broadcasting. In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, devices <highlight><bold>112</bold></highlight> and computer <highlight><bold>116</bold></highlight> preferably communicate with one another using a network bus <highlight><bold>132</bold></highlight>. Network bus <highlight><bold>132</bold></highlight> preferably includes path <highlight><bold>132</bold></highlight>(<highlight><italic>a</italic></highlight>), path <highlight><bold>132</bold></highlight>(<highlight><italic>b</italic></highlight>), path <highlight><bold>132</bold></highlight>(<highlight><italic>c</italic></highlight>), path <highlight><bold>132</bold></highlight>(<highlight><italic>d</italic></highlight>), and path <highlight><bold>132</bold></highlight>(<highlight><italic>e</italic></highlight>). For example, device B <highlight><bold>112</bold></highlight>(<highlight><italic>b</italic></highlight>)is coupled to device A <highlight><bold>112</bold></highlight>(<highlight><italic>a</italic></highlight>)via path <highlight><bold>132</bold></highlight>(<highlight><italic>a</italic></highlight>), and to root device <highlight><bold>114</bold></highlight> via path <highlight><bold>132</bold></highlight>(<highlight><italic>b</italic></highlight>). Similarly, device E (<highlight><bold>112</bold></highlight>(<highlight><italic>e</italic></highlight>)is coupled to device C <highlight><bold>112</bold></highlight>(<highlight><italic>c</italic></highlight>)via path <highlight><bold>132</bold></highlight>(<highlight><italic>c</italic></highlight>), and to device D <highlight><bold>112</bold></highlight>(<highlight><italic>d</italic></highlight>)via path <highlight><bold>132</bold></highlight>(<highlight><italic>d</italic></highlight>). In addition, device D <highlight><bold>112</bold></highlight>(<highlight><italic>d</italic></highlight>)is coupled to computer <highlight><bold>116</bold></highlight> via path <highlight><bold>132</bold></highlight>(<highlight><italic>e</italic></highlight>). In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, network bus <highlight><bold>132</bold></highlight> is preferably implemented using a P1394 Standard for a High Performance Serial Bus, IEEE, 1995, which is hereby incorporated by reference. However, in alternate embodiments, network <highlight><bold>110</bold></highlight> may readily communicate and function using various other network interconnectivity methodologies which are equally within the scope of the present invention. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> embodiment, certain devices <highlight><bold>112</bold></highlight> and/or computer <highlight><bold>116</bold></highlight> in electronic network <highlight><bold>110</bold></highlight> may communicate with other devices <highlight><bold>112</bold></highlight> and/or computer <highlight><bold>116</bold></highlight> within network <highlight><bold>110</bold></highlight>. For example, computer <highlight><bold>116</bold></highlight> may communicate with device B <highlight><bold>112</bold></highlight>(<highlight><italic>b</italic></highlight>)by transmitting transfer data via cable. <highlight><bold>132</bold></highlight>(<highlight><italic>e</italic></highlight>)to device D <highlight><bold>112</bold></highlight>(<highlight><italic>d</italic></highlight>), which may then transmit the transfer data via cable <highlight><bold>132</bold></highlight>(<highlight><italic>d</italic></highlight>)to device E (<highlight><bold>112</bold></highlight>(<highlight><italic>e</italic></highlight>). In response, device E <highlight><bold>112</bold></highlight>(<highlight><italic>e</italic></highlight>)then may transmit the transfer data to device B <highlight><bold>112</bold></highlight>(<highlight><italic>b</italic></highlight>)via cable <highlight><bold>132</bold></highlight>(<highlight><italic>b</italic></highlight>). </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2, a</cross-reference> timing diagram for one embodiment of exemplary isochronous data transfers is shown, in accordance with one embodiment of the present invention. The <cross-reference target="DRAWINGS">FIG. 2</cross-reference> timing diagram includes a system clock <highlight><bold>212</bold></highlight>, an isochronous cycle start signal <highlight><bold>214</bold></highlight>, and an isochronous data transfer signal <highlight><bold>216</bold></highlight>. In <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, at time <highlight><bold>218</bold></highlight>, a first isochronous cycle start pulse changes state in synchronization with system clock <highlight><bold>212</bold></highlight>. At time <highlight><bold>220</bold></highlight>, the isochronous cycle start pulse changes state again, and isochronous data transfer <highlight><bold>216</bold></highlight>(<highlight><italic>a</italic></highlight>)responsively occurs in a deterministic manner. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Similarly, at time <highlight><bold>222</bold></highlight>, a second isochronous cycle start pulse changes state in synchronization with system clock <highlight><bold>212</bold></highlight>. At time <highlight><bold>224</bold></highlight>, the second isochronous cycle start pulse once more changes state, and isochronous data transfer <highlight><bold>216</bold></highlight>(<highlight><italic>b</italic></highlight>)again occurs in a deterministic manner. Therefore, as illustrated in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, isochronous data transfers <highlight><bold>216</bold></highlight>(<highlight><italic>a</italic></highlight>)and <highlight><bold>216</bold></highlight>(<highlight><italic>b</italic></highlight>)typically occur at a pre-determined time and frequency in network <highlight><bold>110</bold></highlight>. Furthermore, network <highlight><bold>110</bold></highlight> may cause isochronous data transfers <highlight><bold>216</bold></highlight>(<highlight><italic>a</italic></highlight>)and <highlight><bold>216</bold></highlight>(<highlight><italic>b</italic></highlight>)to occur before any asynchronous data transfers because of the time-sensitive nature of isochronous data. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 3, a</cross-reference> block diagram for one embodiment of the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> computer <highlight><bold>116</bold></highlight> is shown. In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, computer <highlight><bold>116</bold></highlight> preferably includes an input/output (I/O) bus <highlight><bold>314</bold></highlight> for transferring various types of information and data to or from computer <highlight><bold>116</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, I/O bus <highlight><bold>314</bold></highlight> is preferably implemented according to a peripheral component interconnect (PCI) bus specification that is further, described in &ldquo;PCI Local Bus Specification,&rdquo; Revision 2.1s, 1995, PCI Special Interest Group, which is hereby incorporated by reference. However, in alternate embodiments, I/O bus <highlight><bold>314</bold></highlight> may be implemented according to any appropriate and compatible specification or standard. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, a network interface <highlight><bold>312</bold></highlight> is preferably coupled to both I/O bus <highlight><bold>314</bold></highlight> and network bus <highlight><bold>132</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>) to serve as an interface for transferring isochronous data and asynchronous data between computer <highlight><bold>116</bold></highlight> and network <highlight><bold>110</bold></highlight>. In addition, an input/output (I/O) node <highlight><bold>326</bold></highlight> is also coupled to I/O bus <highlight><bold>314</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, I/O node <highlight><bold>326</bold></highlight> may be integral with computer <highlight><bold>116</bold></highlight>, or, alternately, I/O node <highlight><bold>326</bold></highlight> may be external to computer <highlight><bold>116</bold></highlight>. For purposes of illustration and clarity, the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> computer <highlight><bold>116</bold></highlight> shows a single input/output (I/O) node <highlight><bold>326</bold></highlight>, however, in alternate embodiments, computer <highlight><bold>116</bold></highlight> typically includes a plurality of input/output (I/O) nodes. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Input/output (I/O) node <highlight><bold>326</bold></highlight> preferably may include any desired type of interface, device, circuit, process, or node, including, for example, an ethernet interface, a printer device, a modem, or a graphics device. Furthermore, computer <highlight><bold>116</bold></highlight> may alternately be implemented as various other types of electronic devices including, for example, a set-top box or a digital television interface. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> Computer <highlight><bold>116</bold></highlight> also includes a central processing unit (CPU) <highlight><bold>320</bold></highlight>, a memory <highlight><bold>322</bold></highlight>, and a CPU bus <highlight><bold>318</bold></highlight> that is isolated from I/O bus <highlight><bold>314</bold></highlight> by an I/O bus bridge <highlight><bold>316</bold></highlight>. In practice, various types of information and data are preferably transferred by computer <highlight><bold>116</bold></highlight> between memory <highlight><bold>322</bold></highlight> and I/O bus <highlight><bold>314</bold></highlight> via CPU bus <highlight><bold>318</bold></highlight> and I/O bus bridge <highlight><bold>316</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment, I/O bus <highlight><bold>314</bold></highlight> may only be accessed by a single given I/O device (network interface <highlight><bold>312</bold></highlight> or I/O node <highlight><bold>326</bold></highlight>) at any particular time to transfer information between memory <highlight><bold>322</bold></highlight> and the given I/O device. Therefore, in order to gain control of I/O bus <highlight><bold>314</bold></highlight> for a data transfer operation, network interface <highlight><bold>312</bold></highlight> or I/O node <highlight><bold>326</bold></highlight> may request control of I/O bus <highlight><bold>314</bold></highlight> from an arbiter <highlight><bold>324</bold></highlight> in I/O bus bridge <highlight><bold>316</bold></highlight>. In accordance with an arbitration algorithm, arbiter <highlight><bold>324</bold></highlight> responsively may grant control of I/O bus <highlight><bold>314</bold></highlight> to the requesting I/O device. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> For example, I/O node <highlight><bold>326</bold></highlight> may send Request A (<highlight><bold>331</bold></highlight>) to arbiter <highlight><bold>324</bold></highlight> which responsively may issue Grant A (<highlight><bold>328</bold></highlight>) to I/O node <highlight><bold>326</bold></highlight>. Alternately, network interface <highlight><bold>312</bold></highlight> may send Request B (<highlight><bold>339</bold></highlight>) to arbiter <highlight><bold>324</bold></highlight> which may responsively issue grant B (<highlight><bold>344</bold></highlight>) to network interface <highlight><bold>312</bold></highlight>. Arbiter <highlight><bold>324</bold></highlight> preferably arbitrates conflicting requests from the I/O devices for control of I/O bus <highlight><bold>314</bold></highlight> with the use of any appropriate arbitration algorithm. For example, several possible arbitration algorithms may include a first come-first serve approach, an alternating round-robin technique, or a request prioritization method based on the importance or size of the data transfer. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> Utilizing network interface <highlight><bold>312</bold></highlight> (or any other isochronous-capable I/O node) to transfer isochronous data over I/O bus <highlight><bold>314</bold></highlight> may create special requirements and consideration for obtaining timely control of I/O bus <highlight><bold>314</bold></highlight>. Isochronous data typically is time-sensitive data which deterministically arrives at pre-determined timing intervals. Because of the time-sensitive nature of isochronous data, re-transmission of an isochronous data transfer may not be appropriate or possible. Obtaining timely access to I/O bus <highlight><bold>314</bold></highlight> thus becomes of heightened importance when network interface <highlight><bold>312</bold></highlight> requests control of I/O bus <highlight><bold>314</bold></highlight> to perform an isochronous data transfer. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> For example, if a frame of video data does not reach a display device on network <highlight><bold>110</bold></highlight> until after the appropriate moment for display of that frame, then re-transmitting the delayed frame is not productive. Sources of isochronous data therefore typically do not repeat unsuccessful isochronous data transmissions. Loss of the foregoing frame of video data may likely cause unwanted jitter or breakup of the corresponding video programming. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> If network interface <highlight><bold>312</bold></highlight> is unable to gain timely access to I/O bus <highlight><bold>314</bold></highlight> due to conflicting bus traffic, then significant buffer memory resources (not shown) may be required to prevent loss of the isochronous data. However, providing additional buffer memory resources may have a negative economic impact on production costs of computer <highlight><bold>116</bold></highlight>, and controlling the buffering operations may also consume valuable processing resources in computer <highlight><bold>116</bold></highlight>. An effective method for ensuring successful and timely completion of isochronous data transfers without requiring excess buffer memory resources is further discussed below in conjunction with <cross-reference target="DRAWINGS">FIGS. 5 through 8</cross-reference>, in accordance with the present invention. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 4, a</cross-reference> block diagram for one embodiment of the <cross-reference target="DRAWINGS">FIG. 1</cross-reference> computer is shown, in accordance with the present invention. In the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment, computer <highlight><bold>116</bold></highlight> includes various components that correspond to identically-numbered and identically-named components from the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment of computer <highlight><bold>116</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> and <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiments, components with identical reference numbers and names preferably operate in the same or similar manner, as described above in conjunction with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> However, in certain other embodiments, the components of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> may alternately function in a manner different than that described in the discussion of the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment of computer <highlight><bold>116</bold></highlight>. Furthermore, alternate embodiments of computer <highlight><bold>116</bold></highlight> may readily utilize various other configurations and architectures that those disclosed and discussed in conjunction with either <cross-reference target="DRAWINGS">FIG. 3</cross-reference> or <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment includes several architectural design changes that are not present in the <cross-reference target="DRAWINGS">FIG. 3</cross-reference> embodiment. For example, the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment does not include a Request A (<highlight><bold>331</bold></highlight>) or a Request B (<highlight><bold>339</bold></highlight>). Instead, a Request A In <highlight><bold>330</bold></highlight> travels from I/O node <highlight><bold>326</bold></highlight> to an arbiter filter <highlight><bold>332</bold></highlight>, and a Request A Out <highlight><bold>334</bold></highlight> then continues from arbiter filter <highlight><bold>332</bold></highlight> to arbiter <highlight><bold>324</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment, I/O node <highlight><bold>326</bold></highlight> preferably utilizes Request A In <highlight><bold>330</bold></highlight> to request control of I/O bus <highlight><bold>314</bold></highlight> for a non-isochronous data transfer. Similarly, a Request B In <highlight><bold>340</bold></highlight> travels from network interface <highlight><bold>312</bold></highlight> to arbiter filter <highlight><bold>332</bold></highlight>, and a Request B Out <highlight><bold>342</bold></highlight> then continues from arbiter filter <highlight><bold>332</bold></highlight> to arbiter <highlight><bold>324</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment, network interface <highlight><bold>312</bold></highlight> preferably utilizes Request B In <highlight><bold>340</bold></highlight> to request control of I/O bus <highlight><bold>314</bold></highlight> for a non-isochronous data transfer. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> In accordance with the present invention, the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> embodiment also includes an isochronous transfer request (iso request B) <highlight><bold>336</bold></highlight> that travels from network interface <highlight><bold>312</bold></highlight> (or any other isochronous-capable I/O device) to arbiter filter <highlight><bold>332</bold></highlight>. Network interface <highlight><bold>312</bold></highlight> may thus advantageously utilize iso request B <highlight><bold>336</bold></highlight> and arbiter filter <highlight><bold>332</bold></highlight> to establish priority over Request A In <highlight><bold>330</bold></highlight> and/or Request B In <highlight><bold>340</bold></highlight> when seeking access to I/O bus <highlight><bold>314</bold></highlight> for an isochronous data transfer. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> In accordance with the present invention, the operation of arbiter filter <highlight><bold>332</bold></highlight> and iso request B <highlight><bold>336</bold></highlight> are transparent to arbiter <highlight><bold>324</bold></highlight> and I/O node <highlight><bold>326</bold></highlight>. In addition, arbiter filter <highlight><bold>332</bold></highlight> may readily be added to the circuitry of computer <highlight><bold>116</bold></highlight> with only minimal changes to the basic system design. In certain embodiments, standard components and devices may therefore be utilized to economically and effectively implement computer <highlight><bold>116</bold></highlight>. The operation and functionality of arbiter filter <highlight><bold>332</bold></highlight> and iso request B <highlight><bold>336</bold></highlight> are further discussed below in conjunction with <cross-reference target="DRAWINGS">FIGS. 5 through 8</cross-reference>. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 5, a</cross-reference> block diagram for one embodiment of the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> arbiter filter <highlight><bold>332</bold></highlight> is shown, in accordance with the present invention. In the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment, Request A Out <highlight><bold>334</bold></highlight> and Request B Out <highlight><bold>342</bold></highlight> are shown as active-high digital signals. However, in alternate embodiments, Request A Out <highlight><bold>334</bold></highlight> and Request B Out <highlight><bold>342</bold></highlight> may readily function as active-low signals of any type, with corresponding alterations in the logic of arbiter filter <highlight><bold>332</bold></highlight>. Furthermore, the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment is presented for purposes of illustration only, and arbiter filter <highlight><bold>332</bold></highlight> may alternately be configured using any appropriate and compatible implementation. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 5</cross-reference> embodiment, when network interface <highlight><bold>312</bold></highlight> transmits iso request B <highlight><bold>336</bold></highlight> to OR gate <highlight><bold>516</bold></highlight> to request control of I/O bus <highlight><bold>314</bold></highlight>, then the select line <highlight><bold>518</bold></highlight> of multiplexer <highlight><bold>512</bold></highlight> preferably interrupts Request A In <highlight><bold>330</bold></highlight> to permit the de-asserted digital low value from grounded line <highlight><bold>514</bold></highlight> to pass through to arbiter <highlight><bold>324</bold></highlight> on Request A Out <highlight><bold>334</bold></highlight>. Request A In <highlight><bold>330</bold></highlight> is therefore disabled by iso request B <highlight><bold>336</bold></highlight>. Concurrent to the disabling of Request A In <highlight><bold>330</bold></highlight> by iso request B <highlight><bold>336</bold></highlight>, whenever network interface <highlight><bold>312</bold></highlight> transmits the foregoing iso request B <highlight><bold>336</bold></highlight> to OR gate <highlight><bold>516</bold></highlight>, then a corresponding Request B Out <highlight><bold>342</bold></highlight> responsively requests arbiter <highlight><bold>324</bold></highlight> to grant control of I/O bus <highlight><bold>314</bold></highlight> to network interface <highlight><bold>312</bold></highlight> for the isochronous data transfer. The arbiter <highlight><bold>324</bold></highlight> may then grant I/O bus <highlight><bold>314</bold></highlight> to network interface <highlight><bold>312</bold></highlight> since Request A In <highlight><bold>330</bold></highlight> has been disabled. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The arbiter <highlight><bold>324</bold></highlight> preferably returns a grant B <highlight><bold>344</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>) to network interface <highlight><bold>312</bold></highlight> which preferably includes electronic circuitry that indicates whether grant B <highlight><bold>344</bold></highlight> corresponds to an iso request B <highlight><bold>336</bold></highlight> or a Request B In <highlight><bold>340</bold></highlight>. In various alternate embodiments, I/O bus bridge <highlight><bold>316</bold></highlight> may potentially interrupt a lower-priority data transfer (currently being performed by I/O node <highlight><bold>326</bold></highlight>) if the protocols of I/O bus <highlight><bold>314</bold></highlight> allow (for example, the &ldquo;master&rdquo; and &ldquo;target&rdquo; termination protocols in PCI). Network interface <highlight><bold>312</bold></highlight> may then immediately obtain control of I/O bus <highlight><bold>314</bold></highlight> to perform the higher-priority isochronous data transfer. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 6, a</cross-reference> block diagram for an alternate embodiment of the <cross-reference target="DRAWINGS">FIG. 4</cross-reference> arbiter filter is shown, in accordance with the present invention. In the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment, Request A Out <highlight><bold>334</bold></highlight> and Request B Out <highlight><bold>342</bold></highlight> are shown as active-high digital signals. However, in alternate embodiments, Request A Out <highlight><bold>334</bold></highlight> and Request B Out <highlight><bold>342</bold></highlight> may function as active-low signals of any type, with corresponding alterations in the logic of arbiter filter <highlight><bold>332</bold></highlight>. The <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment is presented for purposes of illustration, and arbiter filter <highlight><bold>332</bold></highlight> may therefore be alternately configured using any appropriate and compatible implementation. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment of computer <highlight><bold>116</bold></highlight>, the system protocol preferably does not permit immediate interruption of a request for control of I/O bus <highlight><bold>314</bold></highlight> until after a corresponding grant is issued by arbiter <highlight><bold>324</bold></highlight> to the requesting I/O device. In practice, when network interface <highlight><bold>312</bold></highlight> transmits iso request B <highlight><bold>336</bold></highlight> to OR gate <highlight><bold>614</bold></highlight> in order to request control of I/O bus <highlight><bold>314</bold></highlight>, then iso line <highlight><bold>616</bold></highlight> provides the iso request B <highlight><bold>336</bold></highlight> to state logic <highlight><bold>612</bold></highlight>. State logic <highlight><bold>612</bold></highlight> also receives Request A In <highlight><bold>330</bold></highlight> from I/O node <highlight><bold>326</bold></highlight>. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> If a previously-existing Request A In <highlight><bold>330</bold></highlight> is asserted when a given iso request B <highlight><bold>336</bold></highlight> is asserted, then state logic <highlight><bold>612</bold></highlight> preferably continues to assert the pre-existing Request A Out <highlight><bold>334</bold></highlight> until arbiter <highlight><bold>324</bold></highlight> returns a Grant A <highlight><bold>328</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>) to I/O node <highlight><bold>326</bold></highlight> for control of I/O bus <highlight><bold>314</bold></highlight>. Request A In <highlight><bold>330</bold></highlight> then preferably toggles to a de-asserted digital low value, and, in response to the previously-received iso request B <highlight><bold>336</bold></highlight>, state logic <highlight><bold>612</bold></highlight> preferably holds Request A In <highlight><bold>330</bold></highlight> to a de-asserted value until the current iso request B <highlight><bold>336</bold></highlight> is deasserted. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Concurrent to the filtering of Request A In <highlight><bold>330</bold></highlight> by state logic <highlight><bold>612</bold></highlight>, whenever network interface <highlight><bold>312</bold></highlight> transmits the foregoing iso request B <highlight><bold>336</bold></highlight> to OR gate <highlight><bold>614</bold></highlight> to request control of I/O bus <highlight><bold>314</bold></highlight>, then a corresponding Request B Out <highlight><bold>342</bold></highlight> is responsively asserted to request that arbiter <highlight><bold>324</bold></highlight> grant control of I/O bus <highlight><bold>314</bold></highlight> to network interface <highlight><bold>312</bold></highlight> for the isochronous data transfer. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 7, a</cross-reference> timing diagram for an exemplary isochronous request sequence is shown, in accordance with the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment of computer <highlight><bold>116</bold></highlight>. The <cross-reference target="DRAWINGS">FIG. 7</cross-reference> timing diagram includes an I/O bus clock <highlight><bold>712</bold></highlight>, a Request A In <highlight><bold>330</bold></highlight>, an iso request B <highlight><bold>336</bold></highlight>, and a Request A Out <highlight><bold>334</bold></highlight>. The <cross-reference target="DRAWINGS">FIG. 7</cross-reference> timing diagram illustrates one exemplary sequence for state logic <highlight><bold>612</bold></highlight>. In alternate embodiments, state logic <highlight><bold>612</bold></highlight> may readily function with various other waveforms and waveform timing in addition to, or instead of, those shown in the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> embodiment. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 7</cross-reference> embodiment, at time <highlight><bold>714</bold></highlight>, I/O node <highlight><bold>326</bold></highlight> asserts Request A In <highlight><bold>330</bold></highlight> to request control of I/O bus <highlight><bold>314</bold></highlight>. Since iso request B <highlight><bold>336</bold></highlight> is currently de-asserted, state logic <highlight><bold>612</bold></highlight> responsively asserts Request A Out <highlight><bold>334</bold></highlight>. At time <highlight><bold>716</bold></highlight>, network interface <highlight><bold>312</bold></highlight> asserts iso request B <highlight><bold>336</bold></highlight>. However, according to the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> system protocol of arbiter filter <highlight><bold>332</bold></highlight>, state logic <highlight><bold>612</bold></highlight> maintains Request A In <highlight><bold>330</bold></highlight> in an asserted state. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> At time <highlight><bold>718</bold></highlight>, preferably after receiving Grant A <highlight><bold>328</bold></highlight> from arbiter <highlight><bold>324</bold></highlight>, I/O node <highlight><bold>326</bold></highlight> de-asserts Request A In <highlight><bold>330</bold></highlight>, and state logic <highlight><bold>612</bold></highlight> responsively de-asserts Request A Out <highlight><bold>334</bold></highlight>. At time <highlight><bold>720</bold></highlight>, I/O node <highlight><bold>326</bold></highlight> again asserts Request A In <highlight><bold>330</bold></highlight>. However, in accordance with the present invention, since iso request B <highlight><bold>336</bold></highlight> is asserted at time <highlight><bold>720</bold></highlight>, state logic <highlight><bold>612</bold></highlight> maintains Request A Out <highlight><bold>334</bold></highlight> in a de-asserted state. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> Finally, at time <highlight><bold>722</bold></highlight>, preferably after receiving grant B <highlight><bold>344</bold></highlight> from arbiter <highlight><bold>324</bold></highlight>, network interface <highlight><bold>312</bold></highlight> de-asserts iso request B <highlight><bold>336</bold></highlight>, and state logic <highlight><bold>612</bold></highlight> asserts Request B Out <highlight><bold>342</bold></highlight> in response to the previously-asserted state of Request A In <highlight><bold>330</bold></highlight>. In the <cross-reference target="DRAWINGS">FIG. 6</cross-reference> embodiment, state logic <highlight><bold>612</bold></highlight> of arbiter filter <highlight><bold>332</bold></highlight> therefore does not permit immediate interruption of a request for control of I/O bus <highlight><bold>314</bold></highlight> until after a corresponding grant is issued by arbiter <highlight><bold>324</bold></highlight> to the requesting I/O device. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 8, a</cross-reference> flowchart of method steps for performing an isochronous data transfer is shown, in accordance with one embodiment of the present invention. The <cross-reference target="DRAWINGS">FIG. 8</cross-reference> embodiment is discussed in the context of an isochronous data transfer performed with network interface <highlight><bold>312</bold></highlight>. However, in alternate embodiments, the present invention is contemplated for use with any isochronous-capable device coupled to I/O bus <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> embodiment, initially, network interface <highlight><bold>312</bold></highlight> determines whether an isochronous data transfer is required by computer <highlight><bold>116</bold></highlight>. If an isochronous data transfer is required, then network interface <highlight><bold>312</bold></highlight> responsively sends an iso request B <highlight><bold>336</bold></highlight> to arbiter filter <highlight><bold>332</bold></highlight> to gain control of I/O bus <highlight><bold>314</bold></highlight>. In step <highlight><bold>816</bold></highlight>, arbiter filter <highlight><bold>332</bold></highlight> determines whether I/O bus <highlight><bold>314</bold></highlight> is presently in use by analyzing whether any conflicting request lines (for example, Request A In <highlight><bold>330</bold></highlight>) are currently asserted to gain control of I/O bus <highlight><bold>314</bold></highlight>. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> If no conflicting requests are currently asserted, then the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process advances to step <highlight><bold>819</bold></highlight>. However, if one or more conflicting requests are currently asserted to gain control of I/O bus <highlight><bold>314</bold></highlight>, then, in step <highlight><bold>818</bold></highlight>, arbiter filter <highlight><bold>324</bold></highlight> preferably filters the other conflicting requests to thereby gain priority for control of I/O bus <highlight><bold>314</bold></highlight>. The present invention may utilize any suitable techniques for obtaining priority over competing requests for control of I/O bus <highlight><bold>314</bold></highlight>, including those methods discussed above in conjunction with <cross-reference target="DRAWINGS">FIGS. 4 through 7</cross-reference>. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> In step <highlight><bold>819</bold></highlight>, in response to the foregoing iso request B <highlight><bold>336</bold></highlight>, arbiter filter <highlight><bold>332</bold></highlight> sends a Request B Out <highlight><bold>342</bold></highlight> to arbiter <highlight><bold>324</bold></highlight>. Then, in step <highlight><bold>820</bold></highlight>, arbiter <highlight><bold>324</bold></highlight> preferably returns a grant (grant B <highlight><bold>344</bold></highlight>) for control of I/O bus <highlight><bold>314</bold></highlight> to network interface <highlight><bold>312</bold></highlight>. Then, in step <highlight><bold>822</bold></highlight>, computer <highlight><bold>116</bold></highlight> performs the requested isochronous data transfer. Finally, in step <highlight><bold>824</bold></highlight>, arbiter filter <highlight><bold>332</bold></highlight> resumes passing all requests for control of I/O bus <highlight><bold>314</bold></highlight> to arbiter <highlight><bold>324</bold></highlight>, and the <cross-reference target="DRAWINGS">FIG. 8</cross-reference> process terminates. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> The invention has been explained above with reference to a preferred embodiment. Other embodiments will be apparent to those skilled in the art in light of this disclosure. For example, the present invention may readily be implemented using configurations and techniques other than those described in the preferred embodiment above. Additionally, the present invention may effectively be used in conjunction with systems other than the one described above as the preferred embodiment. Therefore, these and other variations upon the preferred embodiments are intended to be covered by the present invention, which is limited only by the appended claims. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A system for effectively performing a high-priority data transfer operation, comprising: 
<claim-text>a device bus configured to transfer data according to a device bus protocol; </claim-text>
<claim-text>a first bus node coupled to said device bus for performing a low-priority data transfer operation; </claim-text>
<claim-text>a second bus node coupled to said device bus, said second bus node generating a special request to obtain a priority control over said device bus for performing said high-priority data transfer operation; and </claim-text>
<claim-text>an arbiter configured to immediately interrupt said low-priority data transfer operation after receiving said special request, said arbiter granting said priority control over said device bus to guarantee a timely completion of said high-priority data transfer operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said arbiter immediately interrupts said low-priority data transfer operation after receiving said special request from said second bus node, said low-priority data transfer operation being in an incomplete transfer state when interrupted by said arbiter, said high-priority data transfer operation beginning immediately after said low-priority data transfer operation is interrupted. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein said device bus protocol supports said arbiter immediately interrupting said low-priority data transfer operation to perform said high-priority data transfer operation in a guaranteed and deterministic manner after said second bus node generates said special request to perform said high-priority data transfer operation. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said high-priority data transfer operation includes a time-critical isochronous data transfer operation. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said device bus, said first bus node, and said second bus node are coupled to one of a computer device, a set-top box, a digital television device, and a consumer electronic device. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said device bus is an input/output bus that is implemented according to a Peripheral Component Interconnect (PCI) standard. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said first bus node includes an input/output device that may be implemented as one of a printer device, an ethernet interface, a graphics device, or a modem. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said second bus node includes a network interface that is coupled to a network bus which is implemented according to an IEEE 1394 serial bus interconnectivity standard. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said special request includes an isochronous request to immediately gain said priority control over a conflicting request from said first bus node to access said device bus. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein said conflicting request is disabled by an arbiter filter in response to said isochronous request to thereby immediately cause said arbiter to grant said priority control of said device bus to said second bus node for performing said high-priority data transfer operation. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said first bus node issues a Request A In to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter responsively filters said Request A In to generate a Request A Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference> wherein said second bus node issues said isochronous request to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter responsively filters said Request A In to immediately disable a Request A Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said second bus node issues said isochronous request to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter immediately transmits a Request B Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said isochronous request controls a select line of a multiplexer in said arbiter filter to thereby immediately disable a Request A In from said first bus node. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said isochronous request and a Request B In from said second bus node are provided to an OR gate in said arbiter filter to generate a Request B Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said isochronous request controls state logic in said arbiter filter-to thereby immediately disable a Request A In from said first bus node. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference> wherein said arbiter follows said device bus protocol for immediately interrupting said low-priority data transfer operation of said first bus node to grant said priority control to said second bus node in response to said isochronous request. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein functions of said arbiter filter and said isochronous request are transparent to said first bus node and said arbiter. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising a plurality of input/output nodes that are coupled to said device bus. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> wherein said arbiter filter and said isochronous request are added to a computer device that is implemented with standardized electronic components without altering a basic system architecture of said computer device. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A method for effectively performing a high-priority data transfer operation, comprising the steps of: 
<claim-text>providing a device bus configured to transfer data according to a device bus protocol; </claim-text>
<claim-text>connecting a first bus node to said device bus for performing a low-priority data transfer operation; </claim-text>
<claim-text>generating a special request with a second bus node to obtain a priority control over said device bus for performing said high-priority data transfer operation; and </claim-text>
<claim-text>interrupting said low-priority data transfer operation with an arbiter immediately after receiving said special request, said arbiter granting said priority control over said device bus to guarantee a timely completion of said high-priority data transfer operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said arbiter immediately interrupts said low-priority data transfer operation after receiving said special request from said second bus node, said low-priority data transfer operation being in an incomplete transfer state when interrupted by said arbiter, said high-priority data transfer operation beginning immediately after said low-priority data transfer operation is interrupted. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference> wherein said device bus protocol supports said arbiter immediately interrupting said low-priority data transfer operation to perform said high-priority data transfer operation in a guaranteed and deterministic manner after said second bus node generates said special request to perform said high-priority data transfer operation. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said high-priority data transfer operation includes a time-critical isochronous data transfer operation. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said device bus, said first bus node, and said second bus node are coupled to one of a computer device, a set-top box, a digital television device, and a consumer electronic device. </claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said device bus is an input/output bus that is implemented according to a Peripheral Component Interconnect (PCI) standard. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said first bus node includes an input/output device that may be implemented as one of a printer device, an ethernet interface, a graphics device, or a modem. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said second bus node includes a network interface that is coupled to a network bus which is implemented according to an IEEE 1394 serial bus interconnectivity standard. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> wherein said special request includes an isochronous request to immediately gain said priority control over a conflicting request from said first bus node to access said device bus. </claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 29</dependent-claim-reference> wherein said conflicting request is disabled by an arbiter filter in response to said isochronous request to thereby immediately cause said arbiter to grant said priority control of said device bus to said second bus node for performing said high-priority data transfer operation. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said first bus node issues a Request A In to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter responsively filters said Request A In to generate a Request A Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 31</dependent-claim-reference> wherein said second bus node issues said isochronous request to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter responsively filters said Request A In to immediately disable a Request A Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said second bus node issues said isochronous request to said arbiter filter for requesting control of said device bus, and wherein said arbiter filter immediately transmits a Request B Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said isochronous request controls a select line of a multiplexer in said arbiter filter to thereby immediately disable a Request A In from said first bus node. </claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said isochronous request and a Request B In from said second bus node are provided to an OR gate in said arbiter filter to generate a Request B Out to said arbiter. </claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said isochronous request controls state logic in said arbiter filter to thereby immediately disable a Request A In from said first bus node. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference> wherein said arbiter follows said device bus protocol for immediately interrupting said low-priority data transfer operation of said first bus node to grant said priority control to said second bus node in response to said isochronous request. </claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein functions of said arbiter filter and said isochronous request are transparent to said first bus node and said arbiter. </claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> further comprising a plurality of input/output nodes that are coupled to said device bus. </claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 30</dependent-claim-reference> wherein said arbiter filter and said isochronous request are added to a computer device that is implemented with standardized electronic components without altering a basic system architecture of said computer device. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A system for effectively performing a high-priority data transfer operation, comprising: 
<claim-text>means for transferring data according to a device bus protocol; </claim-text>
<claim-text>means for performing a low-priority data transfer operation; </claim-text>
<claim-text>means for generating a special request to obtain a priority control over said means for transferring to perform said high-priority data transfer operation; and </claim-text>
<claim-text>means for interrupting said low-priority data transfer operation immediately after receiving said special request, said means for interrupting then granting said priority control over said means for transferring to guarantee a timely completion of said high-priority data transfer operation.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>4</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005194A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005194A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005194A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005194A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005194A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005194A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005194A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005194A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005194A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
