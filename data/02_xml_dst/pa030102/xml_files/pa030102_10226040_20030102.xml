<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001050A1-20030102-P00001.TIF SYSTEM "US20030001050A1-20030102-P00001.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00002.TIF SYSTEM "US20030001050A1-20030102-P00002.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00003.TIF SYSTEM "US20030001050A1-20030102-P00003.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00004.TIF SYSTEM "US20030001050A1-20030102-P00004.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00005.TIF SYSTEM "US20030001050A1-20030102-P00005.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00006.TIF SYSTEM "US20030001050A1-20030102-P00006.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00007.TIF SYSTEM "US20030001050A1-20030102-P00007.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00008.TIF SYSTEM "US20030001050A1-20030102-P00008.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00009.TIF SYSTEM "US20030001050A1-20030102-P00009.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00010.TIF SYSTEM "US20030001050A1-20030102-P00010.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00011.TIF SYSTEM "US20030001050A1-20030102-P00011.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00012.TIF SYSTEM "US20030001050A1-20030102-P00012.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00013.TIF SYSTEM "US20030001050A1-20030102-P00013.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00014.TIF SYSTEM "US20030001050A1-20030102-P00014.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00015.TIF SYSTEM "US20030001050A1-20030102-P00015.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00016.TIF SYSTEM "US20030001050A1-20030102-P00016.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00017.TIF SYSTEM "US20030001050A1-20030102-P00017.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00018.TIF SYSTEM "US20030001050A1-20030102-P00018.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00019.TIF SYSTEM "US20030001050A1-20030102-P00019.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00020.TIF SYSTEM "US20030001050A1-20030102-P00020.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00021.TIF SYSTEM "US20030001050A1-20030102-P00021.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00022.TIF SYSTEM "US20030001050A1-20030102-P00022.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00023.TIF SYSTEM "US20030001050A1-20030102-P00023.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00024.TIF SYSTEM "US20030001050A1-20030102-P00024.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00025.TIF SYSTEM "US20030001050A1-20030102-P00025.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00026.TIF SYSTEM "US20030001050A1-20030102-P00026.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00027.TIF SYSTEM "US20030001050A1-20030102-P00027.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00028.TIF SYSTEM "US20030001050A1-20030102-P00028.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00029.TIF SYSTEM "US20030001050A1-20030102-P00029.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00030.TIF SYSTEM "US20030001050A1-20030102-P00030.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00031.TIF SYSTEM "US20030001050A1-20030102-P00031.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00032.TIF SYSTEM "US20030001050A1-20030102-P00032.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00033.TIF SYSTEM "US20030001050A1-20030102-P00033.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00034.TIF SYSTEM "US20030001050A1-20030102-P00034.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00035.TIF SYSTEM "US20030001050A1-20030102-P00035.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00036.TIF SYSTEM "US20030001050A1-20030102-P00036.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00037.TIF SYSTEM "US20030001050A1-20030102-P00037.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00038.TIF SYSTEM "US20030001050A1-20030102-P00038.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00039.TIF SYSTEM "US20030001050A1-20030102-P00039.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00040.TIF SYSTEM "US20030001050A1-20030102-P00040.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00041.TIF SYSTEM "US20030001050A1-20030102-P00041.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00042.TIF SYSTEM "US20030001050A1-20030102-P00042.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00043.TIF SYSTEM "US20030001050A1-20030102-P00043.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00044.TIF SYSTEM "US20030001050A1-20030102-P00044.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00045.TIF SYSTEM "US20030001050A1-20030102-P00045.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00046.TIF SYSTEM "US20030001050A1-20030102-P00046.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00047.TIF SYSTEM "US20030001050A1-20030102-P00047.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00048.TIF SYSTEM "US20030001050A1-20030102-P00048.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-P00049.TIF SYSTEM "US20030001050A1-20030102-P00049.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00000.TIF SYSTEM "US20030001050A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00001.TIF SYSTEM "US20030001050A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00002.TIF SYSTEM "US20030001050A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00003.TIF SYSTEM "US20030001050A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00004.TIF SYSTEM "US20030001050A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00005.TIF SYSTEM "US20030001050A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00006.TIF SYSTEM "US20030001050A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00007.TIF SYSTEM "US20030001050A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00008.TIF SYSTEM "US20030001050A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00009.TIF SYSTEM "US20030001050A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00010.TIF SYSTEM "US20030001050A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00011.TIF SYSTEM "US20030001050A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00012.TIF SYSTEM "US20030001050A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030001050A1-20030102-D00013.TIF SYSTEM "US20030001050A1-20030102-D00013.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001050</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10226040</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020821</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>B61L001/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>246</class>
<subclass>00100R</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Model train control system</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10226040</doc-number>
<kind-code>A1</kind-code>
<document-date>20020821</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09585297</doc-number>
<document-date>20000601</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6202215</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10226040</doc-number>
<kind-code>A1</kind-code>
<document-date>20020821</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09541926</doc-number>
<document-date>20000403</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6270040</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Matthew</given-name>
<middle-name>A.</middle-name>
<family-name>Katzer</family-name>
</name>
<residence>
<residence-us>
<city>Portland</city>
<state>OR</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>Kevin L. Russell</name-1>
<name-2></name-2>
<address>
<address-1>601 SW Second Ave., Suite 1600</address-1>
<city>Portland</city>
<state>OR</state>
<postalcode>97204-3157</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system which operates a digitally controlled model railroad transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands, respectively, to a digital command station for execution on the digitally controlled model railroad. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to a system for controlling a model railroad. </paragraph>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> Model railroads have traditionally been constructed with of a set of interconnected sections of train track, electric switches between different sections of the train track, and other electrically operated devices, such as train engines and draw bridges. Train engines receive their power to travel on the train track by electricity provided by a controller through the track itself. The speed and direction of the train engine is controlled by the level and polarity, respectively, of the electrical power supplied to the train track. The operator manually pushes buttons or pulls levers to cause the switches or other electrically operated devices to function, as desired. Such model railroad sets are suitable for a single operator, but unfortunately they lack the capability of adequately controlling multiple trains independently. In addition, such model railroad sets are not suitable for being controlled by multiple operators, especially if the operators are located at different locations distant from the model railroad, such as different cities. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> A digital command control (DDC) system has been developed to provide additional controllability of individual train engines and other electrical devices. Each device the operator desires to control, such as a train engine, includes an individually addressable digital decoder. A digital command station (DCS) is electrically connected to the train track to provide a command in the form of a set of encoded digital bits to a particular device that includes a digital decoder. The digital command station is typically controlled by a personal computer. A suitable standard for the digital command control system is the NMRA DCC Standards, issued March 1997, and is incorporated herein by reference. While providing the ability to individually control different devices of the railroad set, the DCC system still fails to provide the capability for multiple operators to control the railroad devices, especially if the operators are remotely located from the railroad set and each other. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> DigiToys Systems of Lawrenceville, Ga. has developed a software program for controlling a model railroad set from a remote location. The software includes an interface which allows the operator to select desired changes to devices of the railroad set that include a digital decoder, such as increasing the speed of a train or switching a switch. The software issues a command locally or through a network, such as the internet, to a digital command station at the railroad set which executes the command. The protocol used by the software is based on Cobra from Open Management Group where the software issues a command to a communication interface and awaits confirmation that the command was executed by the digital command station. When the software receives confirmation that the command executed, the software program sends the next command through the communication interface to the digital command station. In other words, the technique used by the software to control the model railroad is analogous to an inexpensive printer where commands are sequentially issued to the printer after the previous command has been executed. Unfortunately, it has been observed that the response of the model railroad to the operator appears slow, especially over a distributed network such as the internet. One technique to decrease the response time is to use high-speed network connections but unfortunately such connections are expensive. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> What is desired, therefore, is a system for controlling a model railroad that effectively provides a high-speed connection without the additional expense associated therewith. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The foregoing and other objectives, features, and advantages of the invention will be more readily understood upon consideration of the following detailed description of the invention, taken in conjunction with the accompanying drawings. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE PRESENT INVENTION </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The present invention overcomes the aforementioned drawbacks of the prior art, in a first aspect, by providing a system for operating a digitally controlled model railroad that includes transmitting a first command from a first client program to a resident external controlling interface through a first communications transport. A second command is transmitted from a second client program to the resident external controlling interface through a second communications transport. The first command and the second command are received by the resident external controlling interface which queues the first and second commands. The resident external controlling interface sends third and fourth commands representative of the first and second commands, respectively, to a digital command station for execution on the digitally controlled model railroad. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Incorporating a communications transport between the multiple client program and the resident external controlling interface permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout, which preferably includes multiple trains operating thereon, the operators each provide commands to the resistant external controlling interface, and hence the model railroad. In addition by queuing by commands at a single resident external controlling interface permits controlled execution of the commands by the digitally controlled model railroad, would may otherwise conflict with one another. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In another aspect of the present invention the first command is selectively processed and sent to one of a plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. Preferably, the second command is also selectively processed and sent to one of the plurality of digital command stations for execution on the digitally controlled model railroad based upon information contained therein. The resident external controlling interface also preferably includes a command queue to maintain the order of the commands. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> The command queue also allows the sharing of multiple devices, multiple clients to communicate with the same device (locally or remote) in a controlled manner, and multiple clients to communicate with different devices. In other words, the command queue permits the proper execution in the cases of: (1) one client to many devices, (2) many clients to one device, and (3) many clients to many devices. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In yet another aspect of the present invention the first command is transmitted from a first client program to a first processor through a first communications transport. The first command is received at the first processor. The first processor provides an acknowledgement to the first client program through the first communications transport indicating that the first command has properly executed prior to execution of commands related to the first command by the digitally controlled model railroad. The communications transport is preferably a COM or DCOM interface. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The model railroad application involves the use of extremely slow real-time interfaces between the digital command stations and the devices of the model railroad. In order to increase the apparent speed of execution to the client, other than using high-speed communication interfaces, the resident external controller interface receives the command and provides an acknowledgement to the client program in a timely manner before the execution of the command by the digital command stations. Accordingly, the execution of commands provided by the resident external controlling interface to the digital command stations occur in a synchronous manner, such as a first-in-first-out manner. The COM and DCOM communications transport between the client program and the resident external controlling interface is operated in an asynchronous manner, namely providing an acknowledgement thereby releasing the communications transport to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations, all without additional high-speed communication networks. Moreover, for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words, the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of an exemplary embodiment of a model train control system. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a more detailed block diagram of the model train control system of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> including external device control logic. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram of the external device control logic of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> is an illustration of a track and signaling arrangement. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is an illustration of a manual block signaling arrangement. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is an illustration of a track circuit. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A and 7B</cross-reference> are illustrations of block signaling and track capacity. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is an illustration of different types of signals. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> are illustrations of speed signaling in approach to a junction. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a further embodiment of the system including a dispatcher. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is an exemplary embodiment of a command queue.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1, a</cross-reference> model train control system <highlight><bold>10</bold></highlight> includes a communications transport <highlight><bold>12</bold></highlight> interconnecting a client program <highlight><bold>14</bold></highlight> and a resident external controlling interface <highlight><bold>16</bold></highlight>. The client program <highlight><bold>14</bold></highlight> executes on the model railroad operator&apos;s computer and may include any suitable system to permit the operator to provide desired commands to the resident external controlling interface <highlight><bold>16</bold></highlight>. For example, the client program <highlight><bold>14</bold></highlight> may include a graphical interface representative of the model railroad layout where the operator issues commands to the model railroad by making changes to the graphical interface. The client program <highlight><bold>14</bold></highlight> also defines a set of Application Programming Interfaces (API&apos;s), described in detail later, which the operator accesses using the graphical interface or other programs such as Visual Basic, C&plus;&plus;, Java, or browser based applications. There may be multiple client programs interconnected with the resident external controlling interface <highlight><bold>16</bold></highlight> so that multiple remote operators may simultaneously provide control commands to the model railroad. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The communications transport <highlight><bold>12</bold></highlight> provides an interface between the client program <highlight><bold>14</bold></highlight> and the resident external controlling interface <highlight><bold>16</bold></highlight>. The communications transport <highlight><bold>12</bold></highlight> may be any suitable communications medium for the transmission of data, such as the internet, local area network, satellite links, or multiple processes operating on a single computer. The preferred interface to the communications transport <highlight><bold>12</bold></highlight> is a COM or DCOM interface, as developed for the Windows operating system available from Microsoft Corporation. The communications transport <highlight><bold>12</bold></highlight> also determines if the resident external controlling interface <highlight><bold>16</bold></highlight> is system resident or remotely located on an external system. The communications transport <highlight><bold>12</bold></highlight> may also use private or public communications protocol as a medium for communications. The client program <highlight><bold>14</bold></highlight> provides commands and the resident external controlling interface <highlight><bold>16</bold></highlight> responds to the communications transport <highlight><bold>12</bold></highlight> to exchange information. A description of COM (common object model) and DCOM (distributed common object model) is provided by Chappel in a book entitled Understanding ActiveX and OLE, Microsoft Press, and is incorporated by reference herein. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Incorporating a communications transport <highlight><bold>12</bold></highlight> between the client program(s) <highlight><bold>14</bold></highlight> and the resident external controlling interface <highlight><bold>16</bold></highlight> permits multiple operators of the model railroad at locations distant from the physical model railroad and each other. In the environment of a model railroad club where the members want to simultaneously control devices of the same model railroad layout, which preferably includes multiple trains operating thereon, the operators each provide commands to the resistant external controlling interface, and hence the model railroad. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The manner in which commands are executed for the model railroad under COM and DCOM may be as follows. The client program <highlight><bold>14</bold></highlight> makes requests in a synchronous manner using COM/DCOM to the resident external interface controller <highlight><bold>16</bold></highlight>. The synchronous manner of the request is the technique used by COM and DCOM to execute commands. The communications transport <highlight><bold>12</bold></highlight> packages the command for the transport mechanism to the resident external controlling interface <highlight><bold>16</bold></highlight>. The resident external controlling interface <highlight><bold>16</bold></highlight> then passes the command to the digital command stations <highlight><bold>18</bold></highlight> which in turn executes the command. After the digital command station <highlight><bold>18</bold></highlight> executes the command an acknowledgement is passed back to the resident external controlling interface <highlight><bold>16</bold></highlight> which in turn passes an acknowledgement to the client program <highlight><bold>14</bold></highlight>. Upon receipt of the acknowledgement by the client program <highlight><bold>14</bold></highlight>, the communications transport <highlight><bold>12</bold></highlight> is again available to accept another command. The train control system <highlight><bold>10</bold></highlight>, without more, permits execution of commands by the digital command stations <highlight><bold>18</bold></highlight> from multiple operators, but like the DigiToys Systems&apos; software the execution of commands is slow. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The present inventor came to the realization that unlike traditional distributed systems where the commands passed through a communications transport are executed nearly instantaneously by the server and then an acknowledgement is returned to the client, the model railroad application involves the use of extremely slow real-time interfaces between the digital command stations and the devices of the model railroad. The present inventor came to the further realization that in order to increase the apparent speed of execution to the client, other than using high-speed communication interfaces, the resident external controller interface <highlight><bold>16</bold></highlight> should receive the command and provide an acknowledgement to the client program <highlight><bold>12</bold></highlight> in a timely manner before the execution of the command by the digital command stations <highlight><bold>18</bold></highlight>. Accordingly, the execution of commands provided by the resident external controlling interface <highlight><bold>16</bold></highlight> to the digital command stations <highlight><bold>18</bold></highlight> occur in a synchronous manner, such as a first-in-first-out manner. The COM and DCOM communications transport <highlight><bold>12</bold></highlight> between the client program <highlight><bold>14</bold></highlight> and the resident external controlling interface <highlight><bold>16</bold></highlight> is operated in an asynchronous manner, namely providing an acknowledgement thereby releasing the communications transport <highlight><bold>12</bold></highlight> to accept further communications prior to the actual execution of the command. The combination of the synchronous and the asynchronous data communication for the commands provides the benefit that the operator considers the commands to occur nearly instantaneously while permitting the resident external controlling interface <highlight><bold>16</bold></highlight> to verify that the command is proper and cause the commands to execute in a controlled manner by the digital command stations <highlight><bold>18</bold></highlight>, all without additional high-speed communication networks. Moreover, for traditional distributed software execution there is no motivation to provide an acknowledgment prior to the execution of the command because the command executes quickly and most commands are sequential in nature. In other words, the execution of the next command is dependent upon proper execution of the prior command so there would be no motivation to provide an acknowledgment prior to its actual execution. It is to be understood that other devices, such as digital devices, may be controlled in a manner as described for model railroads. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the client program <highlight><bold>14</bold></highlight> sends a command over the communications transport <highlight><bold>12</bold></highlight> that is received by an asynchronous command processor <highlight><bold>100</bold></highlight>. The asynchronous command processor <highlight><bold>100</bold></highlight> queries a local database storage <highlight><bold>102</bold></highlight> to determine if it is necessary to package a command to be transmitted to a command queue <highlight><bold>104</bold></highlight>. The local database storage <highlight><bold>102</bold></highlight> primarily contains the state of the devices of the model railroad, such as for example, the speed of a train, the direction of a train, whether a draw bridge is up or down, whether a light is turned on or off, and the configuration of the model railroad layout. If the command received by the asynchronous command processor <highlight><bold>100</bold></highlight> is a query of the state of a device, then the asynchronous command processor <highlight><bold>100</bold></highlight> retrieves such information from the local database storage <highlight><bold>102</bold></highlight> and provides the information to an asynchronous response processor <highlight><bold>106</bold></highlight>. The asynchronous response processor <highlight><bold>106</bold></highlight> then provides a response to the client program <highlight><bold>14</bold></highlight> indicating the state of the device and releases the communications transport <highlight><bold>12</bold></highlight> for the next command. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The asynchronous command processor <highlight><bold>100</bold></highlight> also verifies, using the configuration information in the local database storage <highlight><bold>102</bold></highlight>, that the command received is a potentially valid operation. If the command is invalid, the asynchronous command processor <highlight><bold>100</bold></highlight> provides such information to the asynchronous response processor <highlight><bold>106</bold></highlight>, which in turn returns an error indication to the client program <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> The asynchronous command processor <highlight><bold>100</bold></highlight> may determine that the necessary information is not contained in the local database storage <highlight><bold>102</bold></highlight> to provide a response to the client program <highlight><bold>14</bold></highlight> of the device state or that the command is a valid action. Actions may include, for example, an increase in the train&apos;s speed, or turning on/off of a device. In either case, the valid unknown state or action command is packaged and forwarded to the command queue <highlight><bold>104</bold></highlight>. The packaging of the command may also include additional information from the local database storage <highlight><bold>102</bold></highlight> to complete the client program <highlight><bold>14</bold></highlight> request, if necessary. Together with packaging the command for the command queue <highlight><bold>104</bold></highlight>, the asynchronous command processor <highlight><bold>100</bold></highlight> provides a command to the asynchronous request processor <highlight><bold>106</bold></highlight> to provide a response to the client program <highlight><bold>14</bold></highlight> indicating that the event has occurred, even though such an event has yet to occur on the physical railroad layout. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> As such, it can be observed that whether or not the command is valid, whether or not the information requested by the command is available to the asynchronous command processor <highlight><bold>100</bold></highlight>, and whether or not the command has executed, the combination of the asynchronous command processor <highlight><bold>100</bold></highlight> and the asynchronous response processor <highlight><bold>106</bold></highlight> both verifies the validity of the command and provides a response to the client program <highlight><bold>14</bold></highlight> thereby freeing up the communications transport <highlight><bold>12</bold></highlight> for additional commands. Without the asynchronous nature of the resident external controlling interface <highlight><bold>16</bold></highlight>, the response to the client program <highlight><bold>14</bold></highlight> would be, in many circumstances, delayed thereby resulting in frustration to the operator that the model railroad is performing in a slow and painstaking manner. In this manner, the railroad operation using the asynchronous interface appears to the operator as nearly instantaneously responsive. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Each command in the command queue <highlight><bold>104</bold></highlight> is fetched by a synchronous command processor <highlight><bold>110</bold></highlight> and processed. The synchronous command processor <highlight><bold>110</bold></highlight> queries a controller database storage <highlight><bold>112</bold></highlight> for additional information, as necessary, and determines if the command has already been executed based on the state of the devices in the controller database storage <highlight><bold>112</bold></highlight>. In the event that the command has already been executed, as indicated by the controller database storage <highlight><bold>112</bold></highlight>, then the synchronous command processor <highlight><bold>110</bold></highlight> passes information to the command queue <highlight><bold>104</bold></highlight> that the command has been executed or the state of the device. The asynchronous response processor <highlight><bold>106</bold></highlight> fetches the information from the command cue <highlight><bold>104</bold></highlight> and provides a suitable response to the client program <highlight><bold>14</bold></highlight>, if necessary, and updates the local database storage <highlight><bold>102</bold></highlight> to reflect the updated status of the railroad layout devices. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> If the command fetched by the synchronous command processor <highlight><bold>110</bold></highlight> from the command queue <highlight><bold>104</bold></highlight> requires execution by external devices, such as the train engine, then the command is posted to one of several external device control logic <highlight><bold>114</bold></highlight> blocks. The external device control logic <highlight><bold>114</bold></highlight> processes the command from the synchronous command processor <highlight><bold>110</bold></highlight> and issues appropriate control commands to the interface of the particular external device <highlight><bold>116</bold></highlight> to execute the command on the device and ensure that an appropriate response was received in response. The external device is preferably a digital command control device that transmits digital commands to decoders using the train track. There are several different manufacturers of digital command stations, each of which has a different set of input commands, so each external device is designed for a particular digital command station. In this manner, the system is compatible with different digital command stations. The digital command stations <highlight><bold>18</bold></highlight> of the external devices <highlight><bold>116</bold></highlight> provide a response to the external device control logic <highlight><bold>114</bold></highlight> which is checked for validity and identified as to which prior command it corresponds to so that the controller database storage <highlight><bold>112</bold></highlight> may be updated properly. The process of transmitting commands to and receiving responses from the external devices <highlight><bold>116</bold></highlight> is slow. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> The synchronous command processor <highlight><bold>110</bold></highlight> is notified of the results from the external control logic <highlight><bold>114</bold></highlight> and, if appropriate, forwards the results to the command queue <highlight><bold>104</bold></highlight>. The asynchronous response processor <highlight><bold>100</bold></highlight> clears the results from the command queue <highlight><bold>104</bold></highlight> and updates the local database storage <highlight><bold>102</bold></highlight> and sends an asynchronous response to the client program <highlight><bold>14</bold></highlight>, if needed. The response updates the client program <highlight><bold>14</bold></highlight> of the actual state of the railroad track devices, if changed, and provides an error message to the client program <highlight><bold>14</bold></highlight> if the devices actual state was previously improperly reported or a command did not execute properly. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The use of two separate database storages, each of which is substantially a mirror image of the other, provides a performance enhancement by a fast acknowledgement to the client program <highlight><bold>14</bold></highlight> using the local database storage <highlight><bold>102</bold></highlight> and thereby freeing up the communications transport <highlight><bold>12</bold></highlight> for additional commands. In addition, the number of commands forwarded to the external device control logic <highlight><bold>114</bold></highlight> and the external devices <highlight><bold>116</bold></highlight>, which are relatively slow to respond, is minimized by maintaining information concerning the state and configuration of the model railroad. Also, the use of two separate database tables <highlight><bold>102</bold></highlight> and <highlight><bold>112</bold></highlight> allows more efficient multi-threading on multi-processor computers. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> In order to achieve the separation of the asynchronous and synchronous portions of the system the command queue <highlight><bold>104</bold></highlight> is implemented as a named pipe, as developed by Microsoft for Windows. The queue <highlight><bold>104</bold></highlight> allows both portions to be separate from each other, where each considers the other to be the destination device. In addition, the command queue maintains the order of operation which is important to proper operation of the system. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> The use of a single command queue <highlight><bold>104</bold></highlight> allows multiple instantrations of the asynchronous functionality, with one for each different client. The single command queue <highlight><bold>104</bold></highlight> also allows the sharing of multiple devices, multiple clients to communicate with the same device (locally or remote) in a controlled manner, and multiple clients to communicate with different devices. In other words, the command queue <highlight><bold>104</bold></highlight> permits the proper execution in the cases of: (1) one client to many devices, (2) many clients to one device, and (3) many clients to many devices. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The present inventor came to the realization that the digital command stations provided by the different vendors have at least three different techniques for communicating with the digital decoders of the model railroad set. The first technique, generally referred to as a transaction (one or more operations), is a synchronous communication where a command is transmitted, executed, and a response is received therefrom prior to the transmission of the next sequentially received command. The DCS may execute multiple commands in this transaction. The second technique is a cache with out of order execution where a command is executed and a response received therefrom prior to the execution of the next command, but the order of execution is not necessarily the same as the order that the commands were provided to the command station. The third technique is a local-area-network model where the commands are transmitted and received simultaneously. In the LAN model there is no requirement to wait until a response is received for a particular command prior to sending the next command. Accordingly, the LAN model may result in many commands being transmitted by the command station that have yet to be executed. In addition, some digital command stations use two or more of these techniques. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> With all these different techniques used to communicate with the model railroad set and the system <highlight><bold>10</bold></highlight> providing an interface for each different type of command station, there exists a need for the capability of matching up the responses from each of the different types of command stations with the particular command issued for record keeping purposes. Without matching up the responses from the command stations, the databases can not be updated properly. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Validation functionality is included within the external device control logic <highlight><bold>114</bold></highlight> to accommodate all of the different types of command stations. Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, an external command processor <highlight><bold>200</bold></highlight> receives the validated command from the synchronous command processor <highlight><bold>110</bold></highlight>. The external command processor <highlight><bold>200</bold></highlight> determines which device the command should be directed to, the particular type of command it is, and builds state information for the command. The state information includes, for example, the address, type, port, variables, and type of commands to be sent out. In other words, the state information includes a command set for a particular device on a particular port device. In addition, a copy of the original command is maintained for verification purposes. The constructed command is forwarded to the command sender <highlight><bold>202</bold></highlight> which is another queue, and preferably a circular queue. The command sender <highlight><bold>202</bold></highlight> receives the command and transmits commands within its queue in a repetitive nature until the command is removed from its queue. A command response processor <highlight><bold>204</bold></highlight> receives all the commands from the command stations and passes the commands to the validation function <highlight><bold>206</bold></highlight>. The validation function <highlight><bold>206</bold></highlight> compares the received command against potential commands that are in the queue of the command sender <highlight><bold>202</bold></highlight> that could potentially provide such a result. The validation function <highlight><bold>206</bold></highlight> determines one of four potential results from the comparison. First, the results could be simply bad data that is discarded. Second, the results could be partially executed commands which are likewise normally discarded. Third, the results could be valid responses but not relevant to any command sent. Such a case could result from the operator manually changing the state of devices on the model railroad or from another external device, assuming a shared interface to the DCS. Accordingly, the results are validated and passed to the result processor <highlight><bold>210</bold></highlight>. Fourth, the results could be valid responses relevant to a command sent. The corresponding command is removed from the command sender <highlight><bold>202</bold></highlight> and the results passed to the result processor <highlight><bold>210</bold></highlight>. The commands in the queue of the command sender <highlight><bold>202</bold></highlight>, as a result of the validation process <highlight><bold>206</bold></highlight>, are retransmitted a predetermined number of times, then if error still occurs the digital command station is reset, which if the error still persists then the command is removed and the operator is notified of the error. 
<image file="US20030001050A1-20030102-P00001.TIF" id="EMI-00001"></image>
<image file="US20030001050A1-20030102-P00002.TIF" id="EMI-00002"></image>
<image file="US20030001050A1-20030102-P00003.TIF" id="EMI-00003"></image>
<image file="US20030001050A1-20030102-P00004.TIF" id="EMI-00004"></image>
<image file="US20030001050A1-20030102-P00005.TIF" id="EMI-00005"></image>
<image file="US20030001050A1-20030102-P00006.TIF" id="EMI-00006"></image>
<image file="US20030001050A1-20030102-P00007.TIF" id="EMI-00007"></image>
<image file="US20030001050A1-20030102-P00008.TIF" id="EMI-00008"></image>
<image file="US20030001050A1-20030102-P00009.TIF" id="EMI-00009"></image>
<image file="US20030001050A1-20030102-P00010.TIF" id="EMI-00010"></image>
<image file="US20030001050A1-20030102-P00011.TIF" id="EMI-00011"></image>
<image file="US20030001050A1-20030102-P00012.TIF" id="EMI-00012"></image>
<image file="US20030001050A1-20030102-P00013.TIF" id="EMI-00013"></image>
<image file="US20030001050A1-20030102-P00014.TIF" id="EMI-00014"></image>
<image file="US20030001050A1-20030102-P00015.TIF" id="EMI-00015"></image>
<image file="US20030001050A1-20030102-P00016.TIF" id="EMI-00016"></image>
<image file="US20030001050A1-20030102-P00017.TIF" id="EMI-00017"></image>
<image file="US20030001050A1-20030102-P00018.TIF" id="EMI-00018"></image>
<image file="US20030001050A1-20030102-P00019.TIF" id="EMI-00019"></image>
<image file="US20030001050A1-20030102-P00020.TIF" id="EMI-00020"></image>
<image file="US20030001050A1-20030102-P00021.TIF" id="EMI-00021"></image>
<image file="US20030001050A1-20030102-P00022.TIF" id="EMI-00022"></image>
<image file="US20030001050A1-20030102-P00023.TIF" id="EMI-00023"></image>
<image file="US20030001050A1-20030102-P00024.TIF" id="EMI-00024"></image>
<image file="US20030001050A1-20030102-P00025.TIF" id="EMI-00025"></image>
<image file="US20030001050A1-20030102-P00026.TIF" id="EMI-00026"></image>
<image file="US20030001050A1-20030102-P00027.TIF" id="EMI-00027"></image>
<image file="US20030001050A1-20030102-P00028.TIF" id="EMI-00028"></image>
<image file="US20030001050A1-20030102-P00029.TIF" id="EMI-00029"></image>
<image file="US20030001050A1-20030102-P00030.TIF" id="EMI-00030"></image>
<image file="US20030001050A1-20030102-P00031.TIF" id="EMI-00031"></image>
<image file="US20030001050A1-20030102-P00032.TIF" id="EMI-00032"></image>
<image file="US20030001050A1-20030102-P00033.TIF" id="EMI-00033"></image>
<image file="US20030001050A1-20030102-P00034.TIF" id="EMI-00034"></image>
<image file="US20030001050A1-20030102-P00035.TIF" id="EMI-00035"></image>
<image file="US20030001050A1-20030102-P00036.TIF" id="EMI-00036"></image>
<image file="US20030001050A1-20030102-P00037.TIF" id="EMI-00037"></image>
<image file="US20030001050A1-20030102-P00038.TIF" id="EMI-00038"></image>
<image file="US20030001050A1-20030102-P00039.TIF" id="EMI-00039"></image>
<image file="US20030001050A1-20030102-P00040.TIF" id="EMI-00040"></image>
<image file="US20030001050A1-20030102-P00041.TIF" id="EMI-00041"></image>
<image file="US20030001050A1-20030102-P00042.TIF" id="EMI-00042"></image>
<image file="US20030001050A1-20030102-P00043.TIF" id="EMI-00043"></image>
<image file="US20030001050A1-20030102-P00044.TIF" id="EMI-00044"></image>
<image file="US20030001050A1-20030102-P00045.TIF" id="EMI-00045"></image>
<image file="US20030001050A1-20030102-P00046.TIF" id="EMI-00046"></image>
<image file="US20030001050A1-20030102-P00047.TIF" id="EMI-00047"></image>
<image file="US20030001050A1-20030102-P00048.TIF" id="EMI-00048"></image>
<image file="US20030001050A1-20030102-P00049.TIF" id="EMI-00049"></image>
</paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> The digital command stations <highlight><bold>18</bold></highlight> program the digital devices, such as a locomotive and switches, of the railroad layout. For example, a locomotive may include several different registers that control the horn, how the light blinks, speed curves for operation, etc. In many such locomotives there are 106 or more programable values. Unfortunately, it may take 1-10 seconds per byte wide word if a valid register or control variable (generally referred to collectively as registers) and two to four minutes to error out if an invalid register to program such a locomotive or device, either of which may contain a decoder. With a large number of byte wide words in a locomotive its takes considerable time to fully program the locomotive. Further, with a railroad layout including many such locomotives and other programmable devices, it takes a substantial amount of time to completely program all the devices of the model railroad layout. During the programming of the railroad layout, the operator is sitting there not enjoying the operation of the railroad layout, is frustrated, loses operating enjoyment, and will not desire to use digital programmable devices. In addition, to reprogram the railroad layout the operator must reprogram all of the devices of the entire railroad layout which takes substantial time. Similarly, to determine the state of all the devices of the railroad layout the operator must read the registers of each device likewise taking substantial time. Moreover, to reprogram merely a few bytes of a particular device requires the operator to previously know the state of the registers of the device which is obtainable by reading the registers of the device taking substantial time, thereby still frustrating the operator. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> The present inventor came to the realization that for the operation of a model railroad the anticipated state of the individual devices of the railroad, as programmed, should be maintained during the use of the model railroad and between different uses of the model railroad. By maintaining data representative of the current state of the device registers of the model railroad determinations may be made to efficiently program the devices. When the user designates a command to be executed by one or more of the digital command stations <highlight><bold>18</bold></highlight>, the software may determine which commands need to be sent to one or more of the digital command stations <highlight><bold>18</bold></highlight> of the model railroad. By only updating those registers of particular devices that are necessary to implement the commands of a particular user, the time necessary to program the railroad layout is substantially reduced. For example, if the command would duplicate the current state of the device then no command needs to be forwarded to the digital command stations <highlight><bold>18</bold></highlight>. This prevents redundantly programming the devices of the model railroad, thereby freeing up the operation of the model railroad for other activities. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> Unlike a single-user single-railroad environment, the system of the present invention may encounter &ldquo;conflicting&rdquo; commands that attempt to write to and read from the devices of the model railroad. For example, the &ldquo;conflicting&rdquo; commands may inadvertently program the same device in an inappropriate manner, such as the locomotive to speed up to maximum and the locomotive to stop. In addition, a user that desires to read the status of the entire model railroad layout will monopolize the digital decoders and command stations for a substantial time, such as up to two hours, thereby preventing the enjoyment of the model railroad for the other users. Also, a user that programs an extensive number of devices will likewise monopolize the digital decoders and command stations for a substantial time thereby preventing the enjoyment of the model railroad for other users. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> In order to implement a networked selective updating technique the present inventor determined that it is desirable to implement both a write cache and a read cache. The write cache contains those commands yet to be programmed by the digital command stations <highlight><bold>18</bold></highlight>. Valid commands from each user are passed to a queue in the write cache. In the event of multiple commands from multiple users (depending on user permissions and security) or the same user for the same event or action, the write cache will concatenate the two commands into a single command to be programmed by the digital command stations <highlight><bold>18</bold></highlight>. In the event of multiple commands from multiple users or the same user for different events or actions, the write cache will concatenate the two commands into a single command to be programmed by the digital command stations <highlight><bold>18</bold></highlight>. The write cache may forward either of the commands, such as the last received command, to the digital command station. The users are updated with the actual command programmed by the digital command station, as necessary. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> The read cache contains the state of the different devices of the model railroad. After a command has been written to a digital device and properly acknowledged, if necessary, the read cache is updated with the current state of the model railroad. In addition, the read cache is updated with the state of the model railroad when the registers of the devices of the model railroad are read. Prior to sending the commands to be executed by the digital command stations <highlight><bold>18</bold></highlight> the data in the write cache is compared against the data in the read cache. In the event that the data in the read cache indicates that the data in the write cache does not need to be programmed, the command is discarded. In contrast, if the data in the read cache indicates that the data in the write cache needs to be programmed, then the command is programmed by the digital command station. After programming the command by the digital command station the read cache is updated to reflect the change in the model railroad. As becomes apparent, the use of a write cache and a read cache permits a decrease in the number of registers that need to be programmed, thus speeding up the apparent operation of the model railroad to the operator. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> The present inventor further determined that errors in the processing of the commands by the railroad and the initial unknown state of the model railroad should be taken into account for a robust system. In the event that an error is received in response to an attempt to program (or read) a device, then the state of the relevant data of the read cache is marked as unknown. The unknown state merely indicates that the state of the register has some ambiguity associated therewith. The unknown state may be removed by reading the current state of the relevant device or the data rewritten to the model railroad without an error occurring. In addition, if an error is received in response to an attempt to program (or read) a device, then the command may be retransmitted to the digital command station in an attempt to program the device properly. If desirable, multiple commands may be automatically provided to the digital command stations to increase the likelihood of programming the appropriate registers. In addition, the initial state of a register is likewise marked with an unknown state until data becomes available regarding its state. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> When sending the commands to be executed by the digital command stations <highlight><bold>18</bold></highlight> they are preferably first checked against the read cache, as previously mentioned. In the event that the read cache indicates that the state is unknown, such as upon initialization or an error, then the command should be sent to the digital command station because the state is not known. In this manner the state will at least become known, even if the data in the registers is not actually changed. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> The present inventor further determined a particular set of data that is useful for a complete representation of the state of the registers of the devices of the model railroad. </paragraph>
<paragraph id="P-0050" lvl="2"><number>&lsqb;0050&rsqb;</number> An invalid representation of a register indicates that the particular register is not valid for both a read and a write operation. This permits the system to avoid attempting to read from and write to particular registers of the model railroad. This avoids the exceptionally long error out when attempting to access invalid registers. </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> An in use representation of a register indicates that the particular register is valid for both a read and a write operation. This permits the system to read from and write to particular registers of the model railroad. This assists in accessing valid registers where the response time is relatively fast. </paragraph>
<paragraph id="P-0052" lvl="2"><number>&lsqb;0052&rsqb;</number> A read error (unknown state) representation of a register indicates that each time an attempt to read a particular register results in an error. </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> A read dirty representation of a register indicates that the data in the read cache has not been validated by reading its valid from the decoder. If both the read error and the read dirty representations are clear then a valid read from the read cache may be performed. A read dirty representation may be cleared by a successful write operation, if desired. </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> A read only representation indicates that the register may not be written to. If this flag is set then a write error may not occur. </paragraph>
<paragraph id="P-0055" lvl="2"><number>&lsqb;0055&rsqb;</number> A write error (unknown state) representation of a register indicates that each time an attempt to write to a particular register results in an error. </paragraph>
<paragraph id="P-0056" lvl="2"><number>&lsqb;0056&rsqb;</number> A write dirty representation of a register indicates that the data in the write cache has not been written to the decoder yet. For example, when programming the decoders the system programs the data indicated by the write dirty. If both the write error and the write dirty representations are clear then the state is represented by the write cache. This assists in keeping track of the programming without excess overhead. </paragraph>
<paragraph id="P-0057" lvl="2"><number>&lsqb;0057&rsqb;</number> A write only representation indicates that the register may not be read from. If this flag is set then a read error may not occur. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> Over time the system constructs a set of representations of the model railroad devices and the model railroad itself indicating the invalid registers, read errors, and write errors which may increases the efficiently of programing and changing the states of the model railroad. This permits the system to avoid accessing particular registers where the result will likely be an error. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> The present inventor came to the realization that the valid registers of particular devices is the same for the same device of the same or different model railroads. Further, the present inventor came to the realization that a template may be developed for each particular device that may be applied to the representations of the data to predetermine the valid registers. In addition, the template may also be used to set the read error and write error, if desired. The template may include any one or more of the following representations, such as invalid, in use, read error, write only, read dirty, read only, write error, and write dirty for the possible registers of the device. The predetermination of the state of each register of a particular device avoids the time consuming activity of receiving a significant number of errors and thus constructing the caches. It is to be noted that the actual read and write cache may be any suitable type of data structure. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Many model railroad systems include computer interfaces to attempt to mimic or otherwise emulate the operation of actual full-scale railroads. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates the organization of train dispatching by &ldquo;timetable and train order&rdquo; (T&amp;TO) techniques. Many of the rules governing T&amp;TO operation are related to the superiority of trains which principally is which train will take siding at the meeting point. Any misinterpretation of these rules can be the source of either hazard or delay. For example, misinterpreting the rules may result in one train colliding with another train. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> For trains following each other, T&amp;TO operation must rely upon time spacing and flag protection to keep each train a sufficient distance apart. For example, a train may not leave a station less than five minutes after the preceding train has departed. Unfortunately, there is no assurance that such spacing will be retained as the trains move along the line, so the flagman (rear brakeman) of a train slowing down or stopping will light and throw off a five-minute red flare which may not be passed by the next train while lit. If a train has to stop, a flagman trots back along the line with a red flag or lantern a sufficient distance to protect the train, and remains there until the train is ready to move at which time he is called back to the train. A flare and two track torpedoes provide protection as the flagman scrambles back and the train resumes speed. While this type of system works, it depends upon a series of human activities. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> It is perfectly possible to operate a railroad safely without signals. The purpose of signal systems is not so much to increase safety as it is to step up the efficiency and capacity of the line in handling traffic. Nevertheless, it&apos;s convenient to discuss signal system principals in terms of three types of collisions that signals are designed to prevent, namely, rear-end, side-on, and head-on. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> Block signal systems prevent a train from ramming the train ahead of it by dividing the main line into segments, otherwise known as blocks, and allowing only one train in a block at a time, with block signals indicating whether or not the block ahead is occupied. In many blocks, the signals are set by a human operator. Before clearing the signal, he must verify that any train which has previously entered the block is now clear of it, a written record is kept of the status of each block, and a prescribed procedure is used in communicating with the next operator. The degree to which a block frees up operation depends on whether distant signals (as shown in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>) are provided and on the spacing of open stations, those in which an operator is on duty. If as is usually the case it is many miles to the next block station and thus trains must be equally spaced. Nevertheless, manual block does afford a high degree of safety. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> The block signaling which does the most for increasing line capacity is automatic block signals (ABS), in which the signals are controlled by the trains themselves. The presence or absence of a train is determined by a track circuit. Invented by Dr. William Robinson in 1872, the track circuit&apos;s key feature is that it is fail-safe. As can be seen in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, if the battery or any wire connection fails, or a rail is broken, the relay can&apos;t pick up, and a clear signal will not be displayed. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> The track circuit is also an example of what is designated in railway signaling practice as a vital circuit, one which can give an unsafe indication if some of its components malfunction in certain ways. The track circuit is fail-safe, but it could still give a false clear indication should its relay stick in the closed or picked-up position. Vital circuit relays, therefore, are built to very stringent standards: they are large devices; rely on gravity (no springs) to drop their armature; and use special non-loading contacts which will not stick together if hit by a large surge of current (such as nearby lightning). </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> Getting a track circuit to be absolutely reliable is not a simple matter. The electrical leakage between the rails is considerable, and varies greatly with the seasons of the year and the weather. The joints and bolted-rail track are by-passed with bond wire to assure low resistance at all times, but the total resistance still varies. It is lower, for example, when cold weather shrinks the rails and they pull tightly on the track bolts or when hot weather expands to force the ends tightly together. Battery voltage is typically limited to one or two volts, requiring a fairly sensitive relay. Despite this, the direct current track circuit can be adjusted to do an excellent job and false-clears are extremely rare. The principal improvement in the basic circuit has been to use slowly-pulsed DC so that the relay drops out and must be picked up again continually when a block is unoccupied. This allows the use of a more sensitive relay which will detect a train, but additionally work in track circuits twice as long before leakage between the rails begins to threaten reliable relay operation. Referring to <cross-reference target="DRAWINGS">FIGS. 7A and 7B</cross-reference>, the situations determining the minimum block length for the standard two-block, three-indication ABS system. Since the train may stop with its rear car just inside the rear boundary of a block, a following train will first receive warning just one block-length away. No allowance may be made for how far the signal indication may be seen by the engineer. Swivel block must be as long as the longest stopping distance for any train on the route, traveling at its maximum authorized speed. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> From this standpoint, it is important to allow trains to move along without receiving any approach indications which will force them to slow down. This requires a train spacing of two block lengths, twice the stopping distance, since the signal can&apos;t clear until the train ahead is completely out of the second block. When fully loaded trains running at high speeds, with their stopping distances, block lengths must be long, and it is not possible to get enough trains over the line to produce appropriate revenue. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> The three-block, four-indication signaling shown in <cross-reference target="DRAWINGS">FIG. 7</cross-reference> reduces the excess train spacing by 50% with warning two blocks to the rear and signal spacing need be only &frac12; the braking distance. In particularly congested areas such as downgrades where stopping distances are long and trains are likely to bunch up, four-block, four-indication signaling may be provided and advanced approach, approach medium, approach and stop indications give a minimum of three-block warning, allowing further block-shortening and keeps things moving. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> uses aspects of upper quadrant semaphores to illustrate block signaling. These signals use the blade rising 90 degrees to give the clear indication. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> Some of the systems that are currently developed by different railroads are shown in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>. With the general rules discussed below, a railroad is free to establish the simplest and most easily maintained system of aspects and indications that will keep traffic moving safely and meet any special requirements due to geography, traffic pattern, or equipment. Aspects such as flashing yellow for approach medium, for example, may be used to provide an extra indication without an extra signal head. This is safe because a stuck flasher will result in either a steady yellow approach or a more restrictive light-out aspect. In addition, there are provisions for interlocking so the trains may branch from one track to another. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> To take care of junctions where trains are diverted from one route to another, the signals must control train speed. The train traveling straight through must be able to travel at full speed Diverging routes will require some limit, depending on the turnout members and the track curvature, and the signals must control train speed to match. One approach is to have signals indicate which route has been set up and cleared for the train. In the American approach of speed signaling, in which the signal indicates not where the train is going but rather what speed is allowed through the interlocking. If this is less than normal speed, distant signals must also give warning so the train can be brought down to the speed in time. <cross-reference target="DRAWINGS">FIGS. 9A and 9B</cross-reference> show typical signal aspects and indications as they would appear to an engineer. Once a route is established and the signal cleared, route locking is used to insure that nothing can be changed to reduce the route&apos;s speed capability from the time the train approaching it is admitted to enter until it has cleared the last switch. Additional refinements to the basic system to speed up handling trains in rapid sequence include sectional route locking which unlocks portions of the route as soon as the train has cleared so that other routes can be set up promptly. Interlocking signals also function as block signals to provide rear-end protection. In addition, at isolated crossings at grade, an automatic interlocking can respond to the approach of a train by clearing the route if there are no opposing movements cleared or in progress. Automatic interlocking returns everything to stop after the train has passed. As can be observed, the movement of multiple trains among the track potentially involves a series of interconnected activities and decisions which must be performed by a controller, such as a dispatcher. In essence, for a railroad the dispatcher controls the operation of the trains and permissions may be set by computer control, thereby controlling the railroad. Unfortunately, if the dispatcher fails to obey the rules as put in place, traffic collisions may occur. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> In the context of a model railroad the controller is operating a model railroad layout including an extensive amount of track, several locomotives (trains), and additional functionality such as switches. The movement of different objects, such as locomotives and entire trains, may be monitored by a set of sensors. The operator issues control commands from his computer console, such as in the form of permissions and class warrants for the time and track used. In the existing monolithic computer systems for model railroads a single operator from a single terminal may control the system effectively. Unfortunately, the present inventor has observed that in a multi-user environment where several clients are attempting to simultaneously control the same model railroad layout using their terminals, collisions periodically nevertheless occur. In addition, significant delay is observed between the issuance of a command and its eventual execution. The present inventor has determined that unlike full scale railroads where the track is controlled by a single dispatcher, the use of multiple dispatchers each having a different dispatcher console may result in conflicting information being sent to the railroad layout. In essence, the system is designed as a computer control system to implement commands but in no manner can the dispatcher consoles control the actions of users. For example, a user input may command that an event occur resulting in a crash. In addition, a user may override the block permissions or class warrants for the time and track used thereby causing a collision. In addition, two users may inadvertently send conflicting commands to the same or different trains thereby causing a collision. In such a system, each user is not aware of the intent and actions of other users aside from any feedback that may be displayed on their terminal. Unfortunately, the feedback to their dispatcher console may be delayed as the execution of commands issued by one or more users may take several seconds to several minutes to be executed. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> One potential solution to the dilemma of managing several users&apos;attempt to simultaneously control a single model railroad layout is to develop a software program that is operating on the server which observes what is occurring. In the event that the software program determines that a collision is imminent, a stop command is issued to the train overriding all other commands to avoid such a collision. However, once the collision is avoided the user may, if desired, override such a command thereby restarting the train and causing a collision. Accordingly, a software program that merely oversees the operation of track apart from the validation of commands to avoid imminent collisions is not a suitable solution for operating a model railroad in a multi-user distributed environment. The present inventor determined that prior validation is important because of the delay in executing commands on the model railroad and the potential for conflicting commands. In addition, a hardware throttle directly connected to the model railroad layout may override all such computer based commands thereby resulting in the collision. Also, this implementation provides a suitable security model to use for validation of user actions. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, the client program <highlight><bold>14</bold></highlight> preferably includes a control panel <highlight><bold>300</bold></highlight> which provides a graphical interface (such as a personal computer with software thereon or a dedicated hardware source) for computerized control of the model railroad <highlight><bold>302</bold></highlight>. The graphical interface may take the form of those illustrated in FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>9</bold></highlight>, or any other suitable command interface to provide control commands to the model railroad <highlight><bold>302</bold></highlight>. Commands are issued by the client program <highlight><bold>14</bold></highlight> to the controlling interface using the control panel <highlight><bold>300</bold></highlight>. The commands are received from the different client programs <highlight><bold>14</bold></highlight> by the controlling interface <highlight><bold>16</bold></highlight>. The commands control the operation of the model railroad <highlight><bold>302</bold></highlight>, such as switches, direction, and locomotive throttle. Of particular importance is the throttle which is a state which persists for an indefinite period of time, potentially resulting in collisions if not accurately monitored. The controlling interface <highlight><bold>16</bold></highlight> accepts all of the commands and provides an acknowledgment to free up the communications transport for subsequent commands. The acknowledgment may take the form of a response indicating that the command was executed thereby updating the control panel <highlight><bold>300</bold></highlight>. The response may be subject to updating if more data becomes available indicating the previous response is incorrect. In fact, the command may have yet to be executed or verified by the controlling interface <highlight><bold>16</bold></highlight>. After a command is received by the controlling interface <highlight><bold>16</bold></highlight>, the controlling interface <highlight><bold>16</bold></highlight> passes the command (in a modified manner, if desired) to a dispatcher controller <highlight><bold>310</bold></highlight>. The dispatcher controller <highlight><bold>310</bold></highlight> includes a rule-based processor together with the layout of the railroad <highlight><bold>302</bold></highlight> and the status of objects thereon. The objects may include properties such as speed, location, direction, length of the train, etc. The dispatcher controller <highlight><bold>310</bold></highlight> processes each received command to determine if the execution of such a command would violate any of the rules together with the layout and status of objects thereon. If the command received is within the rules, then the command may be passed to the model railroad <highlight><bold>302</bold></highlight> for execution. If the received command violates the rules, then the command may be rejected and an appropriate response is provided to update the clients display. If desired, the invalid command may be modified in a suitable manner and still be provided to the model railroad <highlight><bold>302</bold></highlight>. In addition, if the dispatcher controller <highlight><bold>310</bold></highlight> determines that an event should occur, such as stopping a model locomotive, it may issue the command and update the control panels <highlight><bold>300</bold></highlight> accordingly. If necessary, an update command is provided to the client program <highlight><bold>14</bold></highlight> to show the update that occurred. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The &ldquo;asynchronous&rdquo; receipt of commands together with a &ldquo;synchronous&rdquo; manner of validation and execution of commands from the multiple control panels <highlight><bold>300</bold></highlight> permits a simplified dispatcher controller <highlight><bold>310</bold></highlight> to be used together with a minimization of computer resources, such as com ports. In essence, commands are managed independently from the client program <highlight><bold>14</bold></highlight>. Likewise, a centralized dispatcher controller <highlight><bold>310</bold></highlight> working in an &ldquo;off-line&rdquo; mode increases the likelihood that a series of commands that are executed will not be conflicting resulting in an error. This permits multiple model railroad enthusiasts to control the same model railroad in a safe and efficient manner. Such concerns regarding the interrelationships between multiple dispatchers does not occur in a dedicated non-distributed environment. When the command is received or validated all of the control panels <highlight><bold>300</bold></highlight> of the client programs <highlight><bold>14</bold></highlight> may likewise be updated to reflect the change. Alternatively, the controlling interface <highlight><bold>16</bold></highlight> may accept the command, validate it quickly by the dispatcher controller, and provide an acknowledgment to the client program <highlight><bold>14</bold></highlight>. In this manner, the client program <highlight><bold>14</bold></highlight> will not require updating if the command is not valid. In a likewise manner, when a command is valid the control panel <highlight><bold>300</bold></highlight> of all client programs <highlight><bold>14</bold></highlight> should be updated to show the status of the model railroad <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> A manual throttle <highlight><bold>320</bold></highlight> may likewise provide control over devices, such as the locomotive, on the model railroad <highlight><bold>302</bold></highlight>. The commands issued by the manual throttle <highlight><bold>320</bold></highlight> may be passed first to the dispatcher controller <highlight><bold>310</bold></highlight> for validation in a similar manner to that of the client programs <highlight><bold>14</bold></highlight>. Alternatively, commands from the manual throttle <highlight><bold>320</bold></highlight> may be directly passed to the model railroad <highlight><bold>302</bold></highlight> without first being validated by the dispatcher controller <highlight><bold>302</bold></highlight>. After execution of commands by the external devices <highlight><bold>18</bold></highlight>, a response will be provided to the controlling interface <highlight><bold>16</bold></highlight> which in response may check the suitability of the command, if desired. If the command violates the layout rules then a suitable correctional command is issued to the model railroad <highlight><bold>302</bold></highlight>. If the command is valid then no correctional command is necessary. In either case, the status of the model railroad <highlight><bold>302</bold></highlight> is passed to the client programs <highlight><bold>14</bold></highlight> (control panels <highlight><bold>300</bold></highlight>). </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> As it can be observed, the event driven dispatcher controller <highlight><bold>310</bold></highlight> maintains the current status of the model railroad <highlight><bold>302</bold></highlight> so that accurate validation may be performed to minimize conflicting and potentially damaging commands. Depending on the particular implementation, the control panel <highlight><bold>300</bold></highlight> is updated in a suitable manner, but in most cases, the communication transport <highlight><bold>12</bold></highlight> is freed up prior to execution of the command by the model railroad <highlight><bold>302</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The computer dispatcher may also be distributed across the network, if desired. In addition, the computer architecture described herein supports different computer interfaces at the client program <highlight><bold>14</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The present inventor has observed that periodically the commands in the queue to the digital command stations or the buffer of the digital command station overflow resulting in a system crash or loss of data. In some cases, the queue fills up with commands and then no additional commands may be accepted. After further consideration of the slow real-time manner of operation of digital command stations, the apparent solution is to incorporate a buffer model in the interface <highlight><bold>16</bold></highlight> to provide commands to the digital command station at a rate no faster than the ability of the digital command station to execute the commands together with an exceptionally large computer buffer. For example, the command may take 5 ms to be transmitted from the interface <highlight><bold>16</bold></highlight> to the command station, 100 ms for processing by the command station, 3 ms to transfer to the digital device, such as a model train. The digital device may take 10 ms to execute the command, for example, and another 20 ms to transmit back to the digital command station which may again take 100 ms to process, and 5 ms to send the processed result to interface <highlight><bold>16</bold></highlight>. In total, the delay may be on the order of 243 ms which is extremely long in comparison to the ability of the interface <highlight><bold>16</bold></highlight> to receive commands and transmit commands to the digital command station. After consideration of the timing issues and the potential solution of simply slowing down the transmission of commands to the digital command station and incorporating a large buffer, the present inventor came to the realization that a queue management system should be incorporated within the interface <highlight><bold>16</bold></highlight> to facilitate apparent increased responsiveness of the digital command station to the user. The particular implementation of a command queue is based on a further realization that many of the commands to operate a model railroad are &ldquo;lossy&rdquo; in nature which is highly unusual for a computer based queue system. In other words, if some of the commands in the command queue are never actually executed, are deleted from the command queue, or otherwise simply changed, the operation of the model railroad still functions properly. Normally a queuing system inherently requires that all commands are executed in some manner at some point in time, even if somewhat delayed. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Initially the present inventor came to the realization that when multiple users are attempting to control the same model railroad, each of them may provide the same command to the model railroad. In this event, the digital command station would receive both commands from the interface <highlight><bold>16</bold></highlight>, process both commands, transmit both commands to the model railroad, receive both responses therefrom (typically), and provide two acknowledgments to the interface <highlight><bold>16</bold></highlight>. In a system where the execution of commands occurs nearly instantaneously the re-execution of commands does not pose a significant problem and may be beneficial for ensuring that each user has the appropriate commands executed in the order requested. However, in the real-time environment of a model railroad all of this activity requires substantial time to complete thereby slowing down the responsiveness of the system. Commands tend to build up waiting for execution which decreases the user perceived responsiveness of control of the model railroad. The user perceiving no response continues to request commands be placed in the queue thereby exacerbating the perceived responsiveness problem. The responsiveness problem is more apparent as processor speeds of the client computer increase. Since there is but a single model railroad, the apparent speed with which commands are executed is important for user satisfaction. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Initially, the present inventor determined that duplicate commands residing in the command queue of the interface <highlight><bold>16</bold></highlight> should be removed. Accordingly, if different users issue the same command to the model railroad then the duplicate commands are not executed (execute one copy of the command). In addition, this alleviates the effects of a single user requesting that the same command is executed multiple times. The removal of duplicate commands will increase the apparent responsiveness of the model railroad because the time required to re-execute a command already executed will be avoided. In this manner, other commands that will change the state of the model railroad may be executed in a more timely manner thereby increasing user satisfaction. Also, the necessary size of the command queue on the computer is reduced. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> After further consideration of the particular environment of a model railroad the present inventor also determined that many command sequences in the command queue result in no net state change to the model railroad, and thus should likewise be removed from the command queue. For example, a command in the command queue to increase the speed of the locomotive, followed by a command in the command queue to reduce the speed of the locomotive to the initial speed results in no net state change to the model railroad. Any perceived increase and decrease of the locomotive would merely be the result of the time differential. It is to be understood that the comparison may be between any two or more commands. Another example may include a command to open a switch followed by a command to close a switch, which likewise results in no net state change to the model railroad. Accordingly, it is desirable to eliminate commands from the command queue resulting in a net total state change of zero. This results in a reduction in the depth of the queue by removing elements from the queue thereby potentially avoiding overflow conditions increasing user satisfaction and decreasing the probability that the user will resend the command. This results in better overall system response. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> In addition to simply removing redundant commands from the command queue, the present inventor further determined that particular sequences of commands in the command queue result in a net state change to the model railroad which may be provided to the digital command station as a single command. For example, if a command in the command queue increases the speed of the locomotive by 5 units, another command in the command queue decreases the speed of the locomotive by 3 units, the two commands may be replaced by a single command that increases the speed of the locomotive by 2 units. In this manner a reduction in the number of commands in the command queue is accomplished while at the same time effectuating the net result of the commands. This results in a reduction in the depth of the queue by removing elements from the queue thereby potentially avoiding overflow conditions. In addition, this decreases the time required to actually program the device to the net state thereby increasing user satisfaction. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> With the potential of a large number of commands in the command queue taking several minutes or more to execute, the present inventor further determined that a priority based queue system should be implemented. Referring to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, the command queue structure may include a stack of commands to be executed. Each of the commands may include a type indicator and control information as to what general type of command they are. For example, an A command may be speed commands, a B command may be switches, a C command may be lights, a D command may be query status, etc. As such, the commands may be sorted based on their type indicator for assisting the determination as to whether or not any redundancies may be eliminated or otherwise reduced. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Normally a first-in-first-out command queue provides a fair technique for the allocation of resources, such as execution of commands by the digital command station, but the present inventor determined that for slow-real-time model railroad devices such a command structure is not the most desirable. In addition, the present inventor realized that model railroads execute commands that are (1) not time sensitive, (2) only somewhat time sensitive, and (3) truly time sensitive. Non-time sensitive commands are merely query commands that inquire as to the status of certain devices. Somewhat time sensitive commands are generally related to the appearance of devices and do not directly impact other devices, such as turning on a light. Truly time sensitive commands need to be executed in a timely fashion, such as the speed of the locomotive or moving switches. These truly time sensitive commands directly impact the perceived performance of the model railroad and therefore should be done in an out-of-order fashion. In particular, commands with a type indicative of a level of time sensitiveness may be placed into the queue in a location ahead of those that have less time sensitiveness. In this manner, the time sensitive commands may be executed by the digital command station prior to those that are less time sensitive. This provides the appearance to the user that the model railroad is operating more efficiently and responsively. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> Another technique that may be used to prioritize the commands in the command queue is to assign a priority to each command. As an example, a priority of 0 would be indicative of &ldquo;don&apos;t care&rdquo; with a priority of 255 &ldquo;do immediately,&rdquo; with the intermediate numbers in between being of numerical-related importance. The command queue would then place new commands in the command queue in the order of priority or otherwise provide the next command to the command station that has the highest priority within the command queue. In addition, if a particular number such as 255 is used only for emergency commands that must be executed next, then the computer may assign that value to the command so that it is next to be executed by the digital command station. Such emergency commands may include, for example, emergency stop and power off. In the event that the command queue still fills, then the system may remove commands from the command queue based on its order of priority, thereby alleviating an overflow condition in a manner less destructive to the model railroad. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> In addition for multiple commands of the same type a different priority number may be assigned to each, so therefore when removing or deciding which to execute next, the priority number of each may be used to further classify commands within a given type. This provides a convenient technique of prioritizing commands. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> An additional technique suitable for model railroads in combination with relatively slow real time devices is that when the system knows that there is an outstanding valid request made to the digital command station, then there is no point in making another request to the digital command station nor adding another such command to the command queue. This further removes a particular category of commands from the command queue. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> It is to be understood that this queue system may be used in any system, such as, for example, one local machine without a network, COM, DCOM, COBRA, internet protocol, sockets, etc. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> The terms and expressions which have been employed in the foregoing specification are used therein as terms of description and not of limitation, and there is no intention, in the use of such terms and expressions, of excluding equivalents of the features shown and described or portions thereof, it being recognized that the scope of the invention is defined and limited only by the claims which follow. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of operating a digitally controlled model railroad comprising the steps of: 
<claim-text>(a) transmitting a first command from a first client program to a an interface; </claim-text>
<claim-text>(b) transmitting a second command from a second client program to said interface; </claim-text>
<claim-text>(c) receiving said first command and said second command at said interface; </claim-text>
<claim-text>(d) said interface queuing said first and second commands and deleting one of said first and second commands if they are the same; and </claim-text>
<claim-text>(e) said interface sending a third command representative of said one of said first and second commands not deleted to a digital command station for execution on said digitally controlled model railroad. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the steps of: 
<claim-text>(a) providing an acknowledgment to said first client program in response to receiving said first command by said interface that said first command was successfully validated against permissible actions regarding the interaction between a plurality of objects of said model railroad prior to validating said first command; and </claim-text>
<claim-text>(b) providing an acknowledgment to said second client program in response to receiving said second command by said interface that said second command was successfully validated against permissible actions regarding the interaction between a plurality of objects of said model railroad prior to validating said second command. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the steps of selectively sending said third command to one of a plurality of digital command stations. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the step of receiving command station responses representative of the state of said digitally controlled model railroad from said digital command station and validating said responses regarding said interaction. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein said first and second commands relate to the speed of locomotives. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00002">claim 2</dependent-claim-reference>, further comprising the step of updating said successful validation to at least one of said first and second client programs of at least one of said first and second commands with an indication that at least one of said first and second commands was unsuccessfully validated. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, further comprising the step of updating a database of the state of said digitally controlled model railroad based upon said receiving command station responses representative of said state of said digitally controlled model railroad. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said validation is performed by an event driven dispatcher. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein said one of said first and second command, and said third command are the same command. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A method of operating a digitally controlled model railroad comprising the steps of: 
<claim-text>(a) transmitting a first command from a first client program to an interface; </claim-text>
<claim-text>(b) receiving said first command at said interface; </claim-text>
<claim-text>(c) queuing said first command in a command queue if said first command is different than all other commands in said command queue; and </claim-text>
<claim-text>(d) said interface selectively sending a second command representative of said first command to one of a plurality of digital command stations based upon information contained within at least one of said first and second commands. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference>, further comprising the steps of: 
<claim-text>(a) transmitting a third command from a second client program to said interface through a second communications transport; </claim-text>
<claim-text>(b) receiving said third command at said interface; </claim-text>
<claim-text>(c) queuing said third command in a command queue if said third command is different than all other commands in said command queue; and </claim-text>
<claim-text>(d) said interface selectively sending a fourth command representative of said third command to one of said plurality of digital command stations based upon information contained within at least one of said third and fourth commands.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001050A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001050A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001050A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001050A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001050A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001050A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001050A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001050A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001050A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030001050A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030001050A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030001050A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030001050A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030001050A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
