<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004962A1-20030102-D00000.TIF SYSTEM "US20030004962A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00001.TIF SYSTEM "US20030004962A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00002.TIF SYSTEM "US20030004962A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00003.TIF SYSTEM "US20030004962A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00004.TIF SYSTEM "US20030004962A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00005.TIF SYSTEM "US20030004962A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00006.TIF SYSTEM "US20030004962A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00007.TIF SYSTEM "US20030004962A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00008.TIF SYSTEM "US20030004962A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00009.TIF SYSTEM "US20030004962A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004962A1-20030102-D00010.TIF SYSTEM "US20030004962A1-20030102-D00010.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004962</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10226583</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020823</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F007/00</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F017/00</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>707</class>
<subclass>100000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Database server designed to read operating system memory without switching context</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10226583</doc-number>
<kind-code>A1</kind-code>
<document-date>20020823</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09240229</doc-number>
<document-date>19990129</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Lawrence</given-name>
<middle-name>J.</middle-name>
<family-name>Ellison</family-name>
</name>
<residence>
<residence-us>
<city>Atherton</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>C.</given-name>
<middle-name>Gregory</middle-name>
<family-name>Doherty</family-name>
</name>
<residence>
<residence-us>
<city>San Francisco</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Jay</given-name>
<family-name>Rossiter</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>David</given-name>
<family-name>Stowell</family-name>
</name>
<residence>
<residence-us>
<city>Cupertino</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Dimitris</given-name>
<family-name>Nakos</family-name>
</name>
<residence>
<residence-us>
<city>Palo Alto</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Pari</given-name>
<family-name>Bhaduri</family-name>
</name>
<residence>
<residence-us>
<city>Foster City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Venkat</given-name>
<family-name>Malla</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Jane</given-name>
<family-name>Chen</family-name>
</name>
<residence>
<residence-us>
<city>Millbrae</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Bala</given-name>
<family-name>Kumaresan</family-name>
</name>
<residence>
<residence-us>
<city>Belmont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>John</given-name>
<middle-name>John</middle-name>
<family-name>E. SO</family-name>
</name>
<residence>
<residence-us>
<city>Redwood City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Niloy</given-name>
<family-name>Banerjee</family-name>
</name>
<residence>
<residence-us>
<city>Mountain View</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Srinivas</given-name>
<family-name>Maturi</family-name>
</name>
<residence>
<residence-us>
<city>Santa Clara</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Lalitha</given-name>
<family-name>Ganti</family-name>
</name>
<residence>
<residence-us>
<city>Belmont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Ramkumar</given-name>
<family-name>Venkataraman</family-name>
</name>
<residence>
<residence-us>
<city>Foster City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Balasubramanyam</given-name>
<family-name>Sthanikam</family-name>
</name>
<residence>
<residence-us>
<city>Redwood City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Yuanjiang</given-name>
<family-name>Ou</family-name>
</name>
<residence>
<residence-us>
<city>Redwood City</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Joseph</given-name>
<middle-name>Therrattil</middle-name>
<family-name>Koonen</family-name>
</name>
<residence>
<residence-us>
<city>Bangalore</city>
<state>IN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Harish</given-name>
<family-name>Rawat</family-name>
</name>
<residence>
<residence-us>
<city>Bangalore</city>
<state>IN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Muthu</given-name>
<family-name>Olagappan</family-name>
</name>
<residence>
<residence-us>
<city>Chennai</city>
<state>IN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
<inventor>
<name>
<given-name>Thivakaram</given-name>
<middle-name>Prakash</middle-name>
<family-name>Sivakumar</family-name>
</name>
<residence>
<residence-us>
<city>Bangalore</city>
<state>IN</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>HICKMAN PALERMO TRUONG &amp; BECKER, LLP</name-1>
<name-2></name-2>
<address>
<address-1>1600 WILLOW STREET</address-1>
<city>SAN JOSE</city>
<state>CA</state>
<postalcode>95125</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A database system that incorporates numerous features that reduce the total cost of maintaining the database system is provided. That database system includes a database appliance that executes a database server on a platform that includes a special purpose operating system specifically tailored to the services required by the database server. The database appliance configures itself by detecting the environment in which it resides and setting operational parameters based on the detected environment. The configuration metadata of all components of the system are stored in a centralized repository which itself may reside external to the system. Both the database server configuration and the operating system configuration are managed by a remotely located integrated management console, which interacts with and configures the system at the database system level, the operating system level and, optionally, at the hardware subsystem level. Backup management may also be performed remotely. The remote components, such as the integrated management console, the backup server, and the configuration repository, may communicate with the system through a wide area network, such as the Internet, or directly through a dial-up connection. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This patent application is a divisional of and claims priority from U.S. patent application Ser. No. 09/240,229, entitled &ldquo;Database Appliance Comprising Hardware and Software Bundle Configured for Specific Database Applications&rdquo;, filed on Jan. 29, 1999, the contents of which are herein incorporated by reference in its entirety, and is related to co-pending U.S. application Ser. No. 09/945,135, entitled &ldquo;Techniques for Managing Configuration for a System of Devices Arranged in a Network&rdquo;, filed on Aug. 31, 2001; co-pending U.S. application Ser. No. 09/945,438, entitled &ldquo;Techniques for Managing a Database System Including One or More Database Servers&rdquo;, filed on Aug. 31, 1999; co-pending U.S. application Ser. No. ______, entitled &ldquo;Special Purpose Operating System for Executing a Database Server&rdquo;, filed on ______; and co-pending U.S. application Ser. No. ______, entitled &ldquo;Database Server with Enhanced Management and Self-Configuration Features&rdquo;, filed on _______.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to database systems and, more particularly, to reducing the total cost associated with maintaining one or more database systems. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Inevitably, companies that invest in computer systems discover that the cost of owning a computer system is far greater than the price of the initial hardware and software purchases. Even relatively small computer systems, consisting of a handful of workstations networked together, frequently encounter problems that can consume an exorbitant amount of time and money. To prevent such problems, and to address such problems when they occur, many companies hire full time information service (IS) professionals. Frequently, the size of a company&apos;s in-house IS department grows until it consumes a disproportionate amount of the company&apos;s resources and profits. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The magnitude of the expenses associated with maintaining a computer system is due in part to the fact that most computer systems are composed of numerous layers of general purpose components, even though the actual use of all layers is directed to a single specific application. For example, a company may purchase a computer system for the sole purpose of handling the company&apos;s accounting. However, the actual workstations purchased for this purpose will typically be general purpose machines that provide all of the hardware services required to be able to handle any application. Many of these services are completely irrelevant for the actual use to which the machine will be directed. For example, the machines may come equipped with built-in &ldquo;three-dimensional&rdquo; sound capabilities that will never be utilized while the machines are used for accounting. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> The general purpose machines that are to implement the accounting system will typically come installed with a general purpose operating system. Similar to general purpose hardware, general purpose operating systems attempt to provide services to address all possible needs of all possible types of software. For example, general purpose operating systems employ complex I/O techniques for handling I/O intensive applications, complex techniques to support computation intensive applications, and complex communication techniques to support communication intensive applications. Many of those services may not be required by the specific context, such as accounting, in which the operating system may actually be used. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Typically, the hardware and operating system would not be the only &ldquo;general purpose&rdquo; components that would be used to implement an accounting system. For example, the accounting system may be configured to interact with a database system. Typically, the database system would provide services to address all possible uses of the database system, and not just those required by the accounting program. Given the diverse environments in which database systems may be used, the services actually required by any given application may be a small fraction of all the services provided by the database system. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In the accounting example given above, each of the general purpose components tends to be complex and, consequentially, difficult to manage. When many of such components are thrown together in a single system, the complexity increases exponentially, thus necessitating the significant after-the-purchase computer system maintenance expenses that most companies have encountered. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In the context of database systems, the complexity of the general purpose database system combined with the complexity of the general purpose operating system with which the database system interacts is typically sufficient to require employment of a full-time database administrator (DBA). It is the responsibility of the DBA to grapple with the complexity of the database system, the operating system, and the interactions between them, so that the other database users can take advantage of the database system without being exposed to underlying complexity. Unfortunately, employing a full-time DBA makes ownership of a useful database system an expensive option. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Based on the foregoing, it is clearly desirable to provide a computer system that employs features that reduce the cost of maintaining the database system without having a negative impact on the ability of the computer system to perform its intended purpose. It is further desirable to decrease the complexity of computer systems, and to provide management techniques that allow companies to reduce the size and cost of their in-house IS departments. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> A database system that incorporates numerous features that reduce the total cost of maintaining the database system is provided. That database system includes a database appliance that executes a database server on a platform that includes a special purpose operating system specifically tailored to the services required by the database server. According to certain aspects, the hardware may also be specially tailored to the services required by the database server. According to one aspect of the invention, the database appliance configures itself by detecting the environment in which it resides and setting operational parameters based on the detected environment. The configuration metadata of all components of the system are stored in a centralized repository which itself may reside external to the system. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> According to another aspect, both the database server configuration and the operating system configuration are managed by a remotely located integrated management console, which interacts with and configures the system at the database system level, the operating system level and, according to one embodiment, at the hardware subsystem level. Backup management may also be performed remotely. The remote components, such as the integrated management console, the backup server, and the configuration repository, may communicate with the system through a local area network or wide area network (e.g. the Internet), including through a dial-up connection. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Using the features described herein, numerous benefits are achieved. Specifically, the ease of using a database system is increased by making the database system easier to set up, manage, and service. The total cost of ownership is reduced by avoiding the costs associated with operating systems and middleware (e.g. web server), by providing remote management, by reducing down time, and by protecting the user&apos;s investment. Better performance is achieved through the use of a slim lined operating system, by tuning the database system for a dedicated application, and through the use of custom hardware. The availability of the database system is increased by avoiding problems associated with direct user access to the operating system, and through the use of RAID and/or network attached storage. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which: </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a block diagram that shows a system that implements an embodiment of the present invention; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> is a block diagram that shows alternative configuration for a system that implements an embodiment of the present invention; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1C</cross-reference> is a block diagram that shows alternative configuration for a system that implements an embodiment of the present invention; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1D</cross-reference> is a block diagram that shows alternative configuration for a system that implements an embodiment of the present invention; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of a machine that may be used to implement a database appliance according to an embodiment of the invention; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart that illustrates the steps for recovering a database appliance according to an embodiment of the invention; and </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 4A, 4B</cross-reference>, <highlight><bold>4</bold></highlight>C, and <highlight><bold>4</bold></highlight>D collectively depict a flowchart that illustrates the steps for installing a database appliance software bundle on a machine to create a database appliance according to an embodiment of the invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> Techniques are described herein for providing a database system with reduced exposed complexity, reduced maintenance costs, and simplified management are described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention. </paragraph>
</section>
<section>
<heading lvl="1">FUNCTIONAL OVERVIEW </heading>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A system that incorporates numerous features that reduce the total cost of maintaining the database system is provided. The system includes, among other things, one or more &ldquo;database appliances&rdquo;. A database appliance is a machine that includes database server software and non-database server software, where the non-database software is specially tailored to the needs of the database server. Such non-database software may include, for example, operating system software from which have been removed services that are typically used in general purpose computers but are not required to support the needs of the database server. According to one embodiment, even the hardware of the machine deviates from a general purpose computer in order to more efficiently support specific characteristics and requirements of the database server. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The total cost of database system maintenance is further reduced by providing an integrated management console which, according to one embodiment, is located outside the local network in which the database system resides. The integrated management console manages all functional components (including hardware and software) of the database appliances. The maintenance costs of the database system are further reduced by having a single &ldquo;outside consultant&rdquo; administrator use the integrated management console to manage the database appliances of numerous companies, thus avoiding the need for those companies to each employ their own expert database administrator. </paragraph>
</section>
<section>
<heading lvl="1">EXEMPLARY SYSTEM </heading>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Referring to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, it is a block diagram of a system <highlight><bold>100</bold></highlight> configured according to an embodiment of the present invention. System <highlight><bold>100</bold></highlight> includes local area network <highlight><bold>102</bold></highlight> that is connected to a wide area network <highlight><bold>150</bold></highlight> through a firewall <highlight><bold>106</bold></highlight>. In a typical configuration, local area network <highlight><bold>102</bold></highlight> is a network installed at and owned by a particular company, and wide area network <highlight><bold>150</bold></highlight> is the Internet. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Within local area network <highlight><bold>102</bold></highlight>, a database appliance <highlight><bold>110</bold></highlight> is connected to a set of storage devices <highlight><bold>122</bold></highlight> and to one or more database clients. Storage devices <highlight><bold>122</bold></highlight> are shown external to database appliance <highlight><bold>110</bold></highlight>, but may alternatively be integrated in database appliance <highlight><bold>110</bold></highlight> itself. As used herein, the term &ldquo;client&rdquo; refers to a system or component that may reside either outside of appliance <highlight><bold>110</bold></highlight> (e.g. on workstation <highlight><bold>108</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1A</cross-reference>) or within the appliance <highlight><bold>110</bold></highlight>. In the context of database systems, the client of a database server is typically referred to as a database application. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The local network <highlight><bold>102</bold></highlight> includes a router <highlight><bold>104</bold></highlight> that routes messages between remote devices on the wide area network <highlight><bold>150</bold></highlight> and the various components on the local network <highlight><bold>102</bold></highlight>. In particular, system <highlight><bold>100</bold></highlight> includes an integrated management console <highlight><bold>130</bold></highlight>, a directory server <highlight><bold>134</bold></highlight> and a backup server <highlight><bold>132</bold></highlight>, all of which can communicate with each other and with the components of local network <highlight><bold>102</bold></highlight> through wide area network <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> System <highlight><bold>100</bold></highlight> incorporates numerous features that reduce the cost of maintaining local network <highlight><bold>102</bold></highlight> for the company that owns local network <highlight><bold>102</bold></highlight>. Each of the features shall now be described in greater detail. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The arrangement and content of system <highlight><bold>100</bold></highlight> is merely exemplary. The specific arrangement and content of a system that implements the features of the present invention will vary from implementation to implementation, depending on the specific needs of the user. FIGS. <highlight><bold>1</bold></highlight>B-<highlight><bold>1</bold></highlight>D, for example, illustrate alternative configurations. The system <highlight><bold>140</bold></highlight> shown in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> has the backup server <highlight><bold>132</bold></highlight>, directory server <highlight><bold>134</bold></highlight>, and integrated management console <highlight><bold>130</bold></highlight> all within the local network. The system <highlight><bold>142</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1C</cross-reference> includes numerous database appliances. The system <highlight><bold>144</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1D</cross-reference> includes numerous local networks <highlight><bold>170</bold></highlight> and <highlight><bold>172</bold></highlight> that can be managed through the same integrated management console <highlight><bold>130</bold></highlight> as is used to manage local network <highlight><bold>102</bold></highlight>. </paragraph>
</section>
<section>
<heading lvl="1">DATABASE APPLIANCE </heading>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Database appliance <highlight><bold>110</bold></highlight> is a machine configured to execute a database server <highlight><bold>112</bold></highlight>. Similar to conventional database implementations, database appliance <highlight><bold>110</bold></highlight> includes a database server <highlight><bold>112</bold></highlight> and operating system <highlight><bold>114</bold></highlight> executing on hardware <highlight><bold>116</bold></highlight>. However, unlike conventional database implementations, the operating system <highlight><bold>114</bold></highlight> executing on database appliance <highlight><bold>110</bold></highlight> is a special purpose operating system tailored specifically for executing database server <highlight><bold>112</bold></highlight>. As a special purpose operating system, operating system <highlight><bold>114</bold></highlight> does not possess the high number and complexity of services that general purpose operating systems employ. The nature and techniques for generating operating system <highlight><bold>114</bold></highlight> shall be discussed in greater detail hereafter. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to one embodiment of the invention, hardware <highlight><bold>116</bold></highlight> is also specifically tailored for executing database server <highlight><bold>112</bold></highlight>. The cache hit ratio experienced by the database appliance <highlight><bold>110</bold></highlight> may be improved by a special configuration of the hardware. Specifically, at the hardware level, the operating system level, the database server level, and possibly at the database application level, data is moved between the levels by copying the data from one place in memory to another. In a general purpose computer system, each layer will typically use different buffers for storing and copying the data, and different algorithms for determining which data should be stored in its buffers. In contrast, according to one embodiment of the invention, from the database server level to the level of the microchips in hardware <highlight><bold>116</bold></highlight>, the same algorithm is used for determining which data is to be cached. </paragraph>
</section>
<section>
<heading lvl="1">GENERATING A SPECIAL PURPOSE OPERATING SYSTEM </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Various techniques may be employed to generate an operating system <highlight><bold>114</bold></highlight> specifically tailored to execute database server <highlight><bold>112</bold></highlight>. In general, the generation of operating system <highlight><bold>114</bold></highlight> may involve initially writing a special purpose operating system based on the needs of database server <highlight><bold>112</bold></highlight>, or modifying an existing general purpose operating system to create operating system <highlight><bold>114</bold></highlight>. In either case, a first step in the generation of operating system <highlight><bold>114</bold></highlight> is determining the services needed by database server <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> According to one embodiment, the source code of database server <highlight><bold>112</bold></highlight> is examined to identify calls made to operating system functions. The operating system calls thus identified are considered calls to &ldquo;required services&rdquo;. After the required services are identified, operating system <highlight><bold>114</bold></highlight> is generated to provide specific support of those required services. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> In an embodiment that generates operating system <highlight><bold>114</bold></highlight> by modifying an existing general purpose operating system, operating system <highlight><bold>114</bold></highlight> may be generated by (1) removing operating system code that corresponds to services that are not required services, (2) tuning the parameters and configuration of required services to achieve better performance, and (3) modifying the code that implements required services to enhance their efficiency relative to their use by database server <highlight><bold>112</bold></highlight>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> According to one embodiment of the invention, operating system <highlight><bold>114</bold></highlight> does not provide services directly to end users. For example, in an embodiment where operating system <highlight><bold>114</bold></highlight> is generated by modifying an existing general purpose operating system, one of the modifications made to generate operating system <highlight><bold>114</bold></highlight> involves removing from the general purpose operating system all routines that provide an interface through which an end user can directly access the operating system. Thus, an end user may cause changes to be made to the file system on disks <highlight><bold>122</bold></highlight> in response to interaction with database server <highlight><bold>112</bold></highlight>, but not through direct calls to the file system services of operating system <highlight><bold>114</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> In many operating systems, operating system services are provided by both service modules and by an operating system &ldquo;kernel&rdquo;, where the service modules execute in their own address space separate from the kernel. The kernel of operating systems that rely heavily on user-space modules to provide services is commonly referred to as a microkernel. Special purpose operating system <highlight><bold>114</bold></highlight> may be generated by modifying a general purpose operating system that employs a single monolithic kernel, or by modifying a general purpose operating system that employs a microkernel and associated service module. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The following techniques apply to both operating systems that do and do not employ a microkernel. Modifying the general purpose operating system may involve performing the above-listed steps of removing extraneous code, tuning parameters, and enhancing code at both the service module level and at the kernel level. In some cases, entire service modules may be removed when the services they provide are not required by the database server <highlight><bold>112</bold></highlight>. For example, a general purpose UNIX operating system may have the following service modules: </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> NFS Daemon&mdash;Network File System I/O Server. </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> Printer Daemon&mdash;Print spooling service provider. </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> FTP Daemon&mdash;File Transfer Protocol Server, provider of file transfer protocol services. </paragraph>
<paragraph id="P-0040" lvl="2"><number>&lsqb;0040&rsqb;</number> INET Daemon&mdash;A listener listening in specific Internet sockets for connections. Based on requests, the INET Daemon starts services to service the requests. For example, the INET Daemon listens for &ldquo;bootp&rdquo; requests and starts a &ldquo;bootp daemon&rdquo; upon receiving a bootp request. </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Time Daemon&mdash;Time keeper to synchronize host&apos;s time with other machines in the network. </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> HTTP Daemon&mdash;A web server. </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> PPP Daemon&mdash;Dial up daemon that provides dial-up support. </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> Mount Daemon&mdash;The Network File System Mount Request Server. </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> Swapper Daemon&mdash;A system process that is invoked when free memory falls below a minimum. The swapper daemon scans an &ldquo;inactive_pagelist&rdquo; and marks pages to be swapped out, based on some replacement technique. </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> Flush Daemon&mdash;A system process that flushes the dirty buffers of a buffer cache back to the file system. </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> Telnet Daemon&mdash;A service that provides an interactive session with the host to external clients. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> Many of these service modules provide services that are not required by database server <highlight><bold>112</bold></highlight>. Operating system <highlight><bold>114</bold></highlight> is generated, in part, by removing from the general purpose operating system those unused service modules. In the context of database appliance <highlight><bold>110</bold></highlight>, the modules that are removed from the general purpose operating system to generate operating system <highlight><bold>114</bold></highlight> may include, for example: the NFS Daemon, the FTP Daemon, the Mount Daemon, and the Telnet Daemon. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> In embodiments that generate operating system <highlight><bold>114</bold></highlight> by modifying an existing general purpose operating system, the identification of the services to be optimized may alternatively or additionally be performed using a kernel trace. While database server <highlight><bold>112</bold></highlight> is being used, a code trace is performed by tracking the thread of execution. When database server <highlight><bold>112</bold></highlight> requires services from the operating system, the database server code will call portions of operating system <highlight><bold>114</bold></highlight>, causing those portions to be identified in the thread of execution. After the trace is performed, the services provided by those portions of the operating system that are identified in the trace are considered good candidates for optimization. For example, if the trace shows that a particular operating system routine was invoke one hundred times more than other operating system routines that were invoked during the same time period, the frequently invoked routine may be selected as a candidate for optimization. The kernel trace may even provide hints with respect to how those portions should be optimized. </paragraph>
</section>
<section>
<heading lvl="1">ENHANCING AND TUNING REQUIRED SERVICES </heading>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> In addition to discarding operating services that are not required by a particular application, generating an application-tailored operating system may also involve enhancing those operating system services that are required. For example, assume that an operating system is to be generated for an appliance that is to operate as an Internet file server. Further assume that the file server is to store articles about the daily news. Due to the nature of the application, the appliance may be accessed through thousands of concurrent connections. Further, most of those connections will involve requests for the same material. A high number of buffers is required to support that number of connections, but once the heavily-accessed material is loaded into the buffers, very little disk access will be required. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Under these conditions, if the operating system is not specially tailored for such access, the operating system may allocate fewer buffers than are required to store the entire amount of heavily accessed material. Consequently, the buffers may be overwritten with such frequency that it becomes difficult for any user to interact efficiently with the appliance. A specially tailored Internet file server application, on the other hand, may include a database that dedicates relatively fewer resources to efficiently retrieve the material, and relatively more resources for storing the heavily accessed material once it has been retrieved. Consequently, buffered portions of the heavily accessed material will not have to be overwritten to load in other portions of the heavily accessed material, since enough buffers have been allocated to store the entire set of heavily access material. Because portions of the heavily accessed material are not being overwritten, those portions do not have to be retrieved again from disk when subsequently requested. Ironically, by reducing the resources used for disk retrieval, the efficiency of disk retrieval can actually be improved because fewer disk accesses will be required. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The shifting of resources from disk retrieval to cache storage is an example of an enhancement that may be performed by tuning the configuration and parameters of the services involved, as opposed to actually modifying the code of the underlying services. Such tuning techniques may be used instead of, or in addition to, actual code optimizations of critical required services. Actual code modifications may involve, for example, causing operating system <highlight><bold>114</bold></highlight> to store resource information in a way that allows it to be directly read by database server <highlight><bold>112</bold></highlight> without causing a context switch to the operating system kernel address space, and causing database server <highlight><bold>112</bold></highlight> to read the resource information directly rather than by performing system calls through the system call interface of the operating system. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> In the context of OLTP database applications, much of the workload of database appliance <highlight><bold>110</bold></highlight> will involve I/O. Specifically, the workload of database appliance <highlight><bold>110</bold></highlight> is largely retrieving information from tables stored on non-volatile storage devices <highlight><bold>122</bold></highlight>, caching the information that is used frequently, and supplying that information to database application workstations <highlight><bold>118</bold></highlight> over the local network <highlight><bold>102</bold></highlight>. In general, the actual computational demands on database appliance <highlight><bold>110</bold></highlight> will be minimal, such as calculating the balance of a bank account. Therefore, when the anticipated application of database appliance <highlight><bold>110</bold></highlight> is as a server to OLTP applications, the process of enhancing certain required services would typically involve enhancing or dedicating relatively more resources to the operating system services responsible for disk and network I/O. In many commercially available operating systems, the services that handle disk I/O are referred to as Async I/O, Direct I/O, raw device access, and striping. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> One technique for optimizing required services involves, for selected operations, bypassing certain layers that would normally be involved in those operations in a general purpose machine. Typically, such layers are provided in general purpose operating systems, for example, to give a virtual common interface. Though convenient, the overhead required to provide a virtual common interface negatively impacts performance. The database appliance may be optimized to bypass unwanted layers, thereby reducing overhead. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> In trying to solve all problems for all situations, general purpose components frequently do not provide the optimal solution for a particular problem. For example, in a general purpose operating system, the allocation of resources (e.g. the CPU and memory) is performed so that all consumers are given a fair share of the resource. However, within a database appliance designed according to an embodiment of the invention, the processes that will be executing are generally known. Therefore, one technique for optimizing required services involves designing the operating system to allocate resources to the known processes in a manner that best improves performance of the appliance. The conditions and demands of various processes do not remain the same throughout the life of the processes. Therefore, according to one embodiment, an adaptive resource manager is provided to get the appliance to perform optimally, even when the load conditions and demands change. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Allocating a certain percentage of CPU time to a process is different than allocating to the process CPU time when the process needs it. According to one embodiment, the scheduling techniques of the special purpose operating system are based on shares of CPU time, as allotted by the adaptive resource manager. The adaptive resource manager allots CPU shares and process priority based on the changing resource demands of the process. The parameters used by the adaptive resource manager can be set by an administrator, or be automatically determined based on historical information maintained about the processes. </paragraph>
</section>
<section>
<heading lvl="1">DATABASE APPLICATION SPECIFIC DATABASE APPLIANCES </heading>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> In addition to tailoring the operating system <highlight><bold>114</bold></highlight> and the hardware <highlight><bold>116</bold></highlight> of a database appliance <highlight><bold>110</bold></highlight> to a particular database server <highlight><bold>112</bold></highlight>, database server <highlight><bold>112</bold></highlight> itself along with the operating system <highlight><bold>114</bold></highlight> and the hardware <highlight><bold>116</bold></highlight> may be more particularly tailored to a particular database application. For example, one type of database application, referred to as an online transaction processing (OLTP) application, is relatively I/O intensive, while another type of database application, referred to as an online analytical processing (OLAP) application, is relatively computationally intensive. Consequently, at each level, the database appliance configured for use with an OLTP application is adapted to enhance I/O performance of database server <highlight><bold>112</bold></highlight>, while the database appliance configured for use with an OLAP application is adapted to enhance computation performance. </paragraph>
</section>
<section>
<heading lvl="1">SELF-CONFIGURING DATABASE SYSTEM </heading>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> When a company purchases a new system, such as local network <highlight><bold>102</bold></highlight>, the company typically pays a third party to &ldquo;install&rdquo; the system. The process of installing even smaller systems may involve a significant expenditure of time and money, in part because each of the complex general purpose of the components need to be configured to interact accurately with each of the other complex general purpose components on the system. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> According to an embodiment of the invention, database appliance <highlight><bold>110</bold></highlight> includes self-configuration software that avoids the need to hire installation experts. When executed, the self-configuration software detects the environment in which database appliance <highlight><bold>110</bold></highlight> is being used, and configures database appliance <highlight><bold>110</bold></highlight> according to the detected environment. For example, the same bundle of database appliance software is sold to a first company that will have a database cache of 200 megabytes and have a 10 gigabyte database, and to a second company that will have a database cache of 32 megabytes and a 500 megabyte database. The first company executes the database appliance software in a system that includes significantly more resources than the second company. In response to detecting the resources available in the first company&apos;s system, the database appliance configures itself to support a 200 megabyte database cache and a 10 gigabyte database. Similarly, upon detecting the resources available at the second company, the database appliance configures itself to support a 32 megabyte database cache and a 500 megabyte database. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> According to one embodiment, the self-configuration includes adjusting parameters that affect both the configuration and operation of database server <highlight><bold>112</bold></highlight>, and the configuration and operation of operating system <highlight><bold>114</bold></highlight>. Optionally, the self-configuration software further adjust parameters that affect the operation of the hardware <highlight><bold>116</bold></highlight> used by the database appliance <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>D collectively depict a flowchart illustrating steps for installing the bundle of appliance software on a machine to create a database appliance. According to one embodiment, the installation process is a &ldquo;1-button&rdquo; process in that it completes all operations without needing any human intervention during the process. Further, the appliance software bundle does not simply install on the machine, but rather it configures the system in such a way that when booted up, the system starts up all needed services, and is ready to be used to run database applications. Additionally, the installation process detects what hardware is present, and auto configures to allow it to be entirely dedicated to run the database and related programs only. If the system has to be upgraded or recovered from a system disk failure, the same 1-button process is used to upgrade or recover the appliance. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> Referring to FIGS. <highlight><bold>4</bold></highlight>A-<highlight><bold>4</bold></highlight>D, in step <highlight><bold>400</bold></highlight> the appliance is booted from a removable storage medium, such as a CD ROM or floppy disk, the CD ROM is mounted and a memory file system (MFS) is created. The MFS is a file system created in the volatile memory of the machine. It is used as a temporary work area until the non-volatile disks are formatted. In step <highlight><bold>402</bold></highlight>, a search is performed for the devices that are required by the software being installed. In step <highlight><bold>404</bold></highlight>, it is determined whether any required device is absent. If any required device is absent, control flows from step <highlight><bold>404</bold></highlight> to step <highlight><bold>406</bold></highlight> and the installation operation is terminated. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> If all of the required devices are present, control passes from step <highlight><bold>404</bold></highlight> to step <highlight><bold>408</bold></highlight>. At step <highlight><bold>408</bold></highlight>, it is determined whether the Dynamic Host Control Protocol Daemon (DHCPD) specifies any site specific information. In particular, a DHCP client broadcasts packets for a DHCP daemon on the same subnet. The DHCPD then responds with network parameters, as well as other site-specific parameters. If site specific information exists, control passes from step <highlight><bold>408</bold></highlight> to step <highlight><bold>12</bold></highlight>. Otherwise, control passes from step <highlight><bold>408</bold></highlight> to step <highlight><bold>410</bold></highlight>. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> At step <highlight><bold>410</bold></highlight>, it is determined whether there is any site specific information specified on the installation floppy disk. If the installation floppy disk does contain site specific information, control passes to step <highlight><bold>412</bold></highlight>. Otherwise, control passes to step <highlight><bold>416</bold></highlight>. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> At step <highlight><bold>412</bold></highlight>, a SITE-SPECIFIC flag is marked as &ldquo;done&rdquo;. Control flows from step <highlight><bold>412</bold></highlight> to step <highlight><bold>414</bold></highlight>, where the site specific information is parsed. Control passes from step <highlight><bold>414</bold></highlight> to step <highlight><bold>416</bold></highlight>. </paragraph>
<paragraph id="P-0066" lvl="0"><number>&lsqb;0066&rsqb;</number> At step <highlight><bold>416</bold></highlight>, it is determined whether an installation already exists on the appliance. If an installation already exists, control passes to step <highlight><bold>424</bold></highlight>. Otherwise, control passes to step <highlight><bold>418</bold></highlight>. At step <highlight><bold>424</bold></highlight>, the setup procedures for an upgrade operation are performed, and control passes to step <highlight><bold>428</bold></highlight>. If there is no existing installation, at step <highlight><bold>418</bold></highlight>, it is determined whether recovery is being performed from a CD ROM. If recovery is being performed, control passes to step <highlight><bold>420</bold></highlight>. Otherwise, control passes to step <highlight><bold>426</bold></highlight>. </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> At step <highlight><bold>420</bold></highlight>, recovery of distribution is performed from the recovery CD ROM. Specifically, when the system disk fails, the appliance cannot boot up unless a new disk is substituted for the failed disk, and the distribution and data on the failed disk are reconstructed. Database data on the system disk is backed up to its pair disk. However, the distribution is obtained from the install CD ROM. The system boots from the CD ROM, automatically determines that it is involved in a recovery from the CD, formats the new disk, recovers the distribution from the CD, and recovers data from backup. Control passes from step <highlight><bold>420</bold></highlight> to step <highlight><bold>422</bold></highlight> where the installation process is terminated. </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> At step <highlight><bold>426</bold></highlight>, the storage devices of the appliance are partitioned and labeled, and file systems are created thereon. At this point, the installation software ceases to use the MFS for temporary storage, and begins to use portions of the appliance&apos;s persistent storage or temporary storage. Control passes from step <highlight><bold>426</bold></highlight> to step <highlight><bold>428</bold></highlight>. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> At step <highlight><bold>428</bold></highlight>, a windows manager (e.g. X) is started. If no display device is present on the appliance, then the windows manager is started in &ldquo;quiet mode&rdquo; using a virtual frame buffer. Control passes from step <highlight><bold>428</bold></highlight> to step <highlight><bold>430</bold></highlight>. In step <highlight><bold>430</bold></highlight>, the environment for the installation software is set, and the installation software is started. Control then flows from step <highlight><bold>430</bold></highlight> to step <highlight><bold>432</bold></highlight>. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> At step <highlight><bold>432</bold></highlight>, it is determined whether the SITE-SPECIFIC flag is set to &ldquo;done&rdquo;. If the flag is set to done, then control passes to step <highlight><bold>436</bold></highlight>. Otherwise control passes to step <highlight><bold>434</bold></highlight>. At step <highlight><bold>434</bold></highlight>, install scripts that are related to the site-specific parameters are copied to the persistent storage of the appliance. These install scripts are preferable run when the appliance is rebooted when the site-specific parameters are available. Control then passes to step <highlight><bold>436</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> At step <highlight><bold>436</bold></highlight>, the install software installs the operating system and site specific configuration parameters for the operating system. Control then passes to step <highlight><bold>438</bold></highlight> where the installation software installs the database server along with the site specific configuration parameters for the database server. Control then passes to step <highlight><bold>440</bold></highlight>. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> At step <highlight><bold>440</bold></highlight>, the installation software installs web server software along with site specific configuration parameters for the web server. Control then passes to step <highlight><bold>442</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> At step <highlight><bold>442</bold></highlight>, the install software installs web database software and site specific configuration parameters for the web database software. The web database software is a software module that translates web requests into database requests. For example, the web requests may arrive according to HTTP protocol, and be converted by the web database software to conform to the database language used by the database server employed by the appliance (e.g. SQL or PL/SQL). Control then passes to step <highlight><bold>444</bold></highlight>. At step <highlight><bold>444</bold></highlight>, backup, recovery, and scaling boot scripts are generated. These scripts enable automatic backup or recovery, as well as providing means to expand the system when additional hardware is included. Control then passes to step <highlight><bold>446</bold></highlight>, where other boot/cron/admin scripts are generated. The boot scripts dictate the steps performed on boot up to get the system up and running without manual intervention. The cron scripts run periodic jobs to do system management tasks. For example, they may be configured to automatically run processes for a remote administrator in the even of a crash. The admin scripts perform management tasks in response to events and/or commands from the remote console. Control then passes to step <highlight><bold>448</bold></highlight> where an initial backup is performed, and at step <highlight><bold>450</bold></highlight> the installation process is terminated. </paragraph>
</section>
<section>
<heading lvl="1">INTEGRATED MANAGEMENT CONSOLE </heading>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Integrated management console <highlight><bold>130</bold></highlight> is one of the many feature of system <highlight><bold>100</bold></highlight> that reduce the total cost of ownership of the database system implemented on the local network <highlight><bold>102</bold></highlight>. Integrated management console <highlight><bold>130</bold></highlight> deviates significantly from prior approaches to system management in that it integrates management of the database appliance <highlight><bold>110</bold></highlight> at numerous levels, including two or more of the database application level, the database server level, the operating system level, and the hardware level. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> According to the prior approaches, each of those levels represented a separate general-purpose product, where each of the general purpose products is typically provided by a different source. Each of the different sources would provide separate management software for its own general purpose product. Consequently, systems would typically include one console running management software from one source for managing a database server, another console running management software from another source for managing an operating system, and yet another console running management software from another source for managing the hardware. Typically, each management package would itself be complex, due to the inevitable complexity of the general purpose product that they are intended to manage. Further, because the management console for each component was provided by a different source, the consoles would not share a common user interface or management model, thereby significantly increasing the cost of management. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The integrated management console <highlight><bold>130</bold></highlight> is a console through which numerous aspects of the database system on local area network <highlight><bold>102</bold></highlight> can be remotely managed. Specifically, the company that owns local area network <highlight><bold>102</bold></highlight> need not have its own inhouse department of database and system administrators. Rather, a third party consultant is able to efficiently manage the company&apos;s database system remotely. In fact, the same third party consultant is able to manage the database systems of numerous companies in the same manner and through the same integrated management console. Consequently, the cost of the consultant&apos;s work can be shared among the many companies. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Integrated management console <highlight><bold>130</bold></highlight> allows an administrator to remotely manage database server appliances, both at the database server level and at the operating system level. In embodiments where the database application itself is also located on the database appliance <highlight><bold>110</bold></highlight>, the database application is also managed through the integrated management console <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Optionally, integrated management console <highlight><bold>130</bold></highlight> is also used to manage database appliance <highlight><bold>110</bold></highlight> at the hardware level. For example, hardware <highlight><bold>116</bold></highlight> may include a redundant array of inexpensive disks (RAID) subsystem whose operational parameters and configuration can be managed through integrated management console <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Because the numerous aspects of the database appliance <highlight><bold>110</bold></highlight> are managed through the same console that uses a consistent user interface and management model, the management chore is simplified. Further, management of the whole database appliance is significantly less burdensome than management of each of the parts of previous database systems, because each of the parts managed by integrated management console <highlight><bold>130</bold></highlight> is specifically tailored to the particular context in which the appliance will be used, and lacks the innate complexity of its general purpose counterpart. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> According to one embodiment, database appliance <highlight><bold>110</bold></highlight> includes a simple network management protocol (SNMP) compliant agent and a multi-level management agent. The integrated management console interacts with the SNMP agent using the SNMP protocol. The SNMP agent, in turn, is configured to send commands to the multi-level management agent in response to the messages received from the integrated management console. The multi-level management agent responds to the commands by performing management functions at the various levels of database appliance <highlight><bold>110</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> In the embodiment illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the integrated management console <highlight><bold>130</bold></highlight> connects to and communicates with database appliance <highlight><bold>110</bold></highlight> through a wide area network <highlight><bold>150</bold></highlight>, such as the Internet. However, according to an alternative embodiment, integrated management console <highlight><bold>130</bold></highlight> is configured to connect to database appliance <highlight><bold>110</bold></highlight> through a direct dial-up connection, thus bypassing the need for infrastructure required to connect database appliance <highlight><bold>110</bold></highlight> to the wide area network <highlight><bold>150</bold></highlight>, and the additional infrastructure required at the other end to connect integrated management console <highlight><bold>130</bold></highlight> to the wide area network <highlight><bold>150</bold></highlight>. In some embodiments, the direct dial-up connection would still pass through a company&apos;s firewall for security reasons. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> According to one embodiment of the invention, the integrated management console <highlight><bold>130</bold></highlight>, along with the agent running on the appliance, allows administrators to perform the following operations remotely: </paragraph>
<paragraph id="P-0083" lvl="2"><number>&lsqb;0083&rsqb;</number> configure and control the operating system and database services, </paragraph>
<paragraph id="P-0084" lvl="2"><number>&lsqb;0084&rsqb;</number> apply patches and upgrade to a set of appliance servers, </paragraph>
<paragraph id="P-0085" lvl="2"><number>&lsqb;0085&rsqb;</number> enable lights-out management, and </paragraph>
<paragraph id="P-0086" lvl="2"><number>&lsqb;0086&rsqb;</number> generate reports of the system resource usage and optimize performance. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> With respect to lights-out management, a remote administrator may use the integrated management console <highlight><bold>130</bold></highlight> to define a set of &ldquo;events&rdquo; that may represent some error conditions. The administrator can then associate with each event a &ldquo;fixit&rdquo; job to be invoked when the event is triggered. The administrator can also configure the system to raise an alert and send page or e-mails to the administrator on duty in response to certain types of critical alerts. For example, when the disk space containing archive logs is getting full to a definable threshold, an event can be triggered. The event may invoke a job that does a back up of the database and cleans up the archive logs. In response to other events, such as when a node or the network goes down, the system can call attention of the remote administrator by paging the administrator. </paragraph>
</section>
<section>
<heading lvl="1">BACKUP SERVER </heading>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Backup server <highlight><bold>132</bold></highlight> is a server configured to back up critical information that is stored in local network <highlight><bold>102</bold></highlight>. Backup server <highlight><bold>132</bold></highlight> includes a tape storage, or some other relatively inexpensive high capacity storage medium, for storing the data. The data from local network <highlight><bold>102</bold></highlight> to be backed up by backup server <highlight><bold>132</bold></highlight> is communicated to backup server <highlight><bold>132</bold></highlight> according to a backup schedule that will vary from implementation to implementation. Various mechanisms may be used to convey the data from the devices on which it resides within local network <highlight><bold>102</bold></highlight> to the remotely located backup server <highlight><bold>132</bold></highlight>, which does not reside on local network <highlight><bold>102</bold></highlight>. According to one embodiment, the data is communicated through the firewall <highlight><bold>106</bold></highlight> over the wide area network <highlight><bold>150</bold></highlight> to be backed up on backup server <highlight><bold>132</bold></highlight>. Alternatively, backup server <highlight><bold>132</bold></highlight> can connect to local network <highlight><bold>102</bold></highlight> through a non-dedicated connection. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> Backup service commands that dictate operational parameters for backup server <highlight><bold>132</bold></highlight> are, according to one embodiment, issued and controlled through the integrated management console <highlight><bold>120</bold></highlight>. Such commands determine the schedule by which backup server <highlight><bold>132</bold></highlight> backs up the data of local network <highlight><bold>102</bold></highlight>. For example, integrated management console <highlight><bold>130</bold></highlight> may program backup server <highlight><bold>132</bold></highlight> to perform incremental backups nightly, and full backups on a weekly basis. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Because the backup of local network <highlight><bold>102</bold></highlight> is performed remotely, the company that owns local network <highlight><bold>102</bold></highlight> does not have to employ an on-site operator to perform the backups. Further, the operator that does perform the backups at the remote site may be a third party that performs such backups for numerous companies, thus spreading the cost among the numerous companies to reduce the cost required by each of the individual companies. </paragraph>
</section>
<section>
<heading lvl="1">DIRECTORY SERVER </heading>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> A directory service is a repository for information (metadata) about a system. Communication with the directory service is performed through a protocol supported by the directory service, such as the Lightweight Directory Access Protocol (LDAP). To find out information about a device, a search is performed on the directory service for the system. For example, a device outside of the system may wish to communicate with a device within the system. The device outside the system may only have the name of the device with which it desires to communicate. Using the name, the directory service searches the metadata to determine the address of the named device. The address is returned to the outside device, which is then able to communicate with the inside device using the address. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> According to one embodiment of the invention, all of the metadata about local network <highlight><bold>102</bold></highlight> is stored in a repository within directory server <highlight><bold>134</bold></highlight>, which resides outside of local network <highlight><bold>102</bold></highlight>. The metadata includes, for example, information about how the system within local network <highlight><bold>102</bold></highlight> is configured, including the configuration of database appliance <highlight><bold>110</bold></highlight>. In systems that include numerous database appliances, the metadata includes one set of configuration parameters that are common to all database appliances, and sets of configuration parameters that are specific to the configuration of each of the individual database appliances. According to one embodiment, a copy of the configuration data from the repository is also stored in a cache on a device within local network <highlight><bold>102</bold></highlight> to improve the speed at which it may be accessed by devices within local network <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> Storing the configuration metadata for the components that reside within network <highlight><bold>102</bold></highlight> in a centralized repository, and locating that repository outside the system itself, provides numerous benefits. One such benefit involves having a centralized point of control for tuning operations. For example, an operator of integrated management console <highlight><bold>130</bold></highlight> is able to change any of the configuration parameters of network <highlight><bold>102</bold></highlight> to &ldquo;tune&rdquo; the system for better performance by modifying the metadata contained in directory server <highlight><bold>134</bold></highlight>. Such configuration modifications are then propagated from the directory server <highlight><bold>134</bold></highlight> to the local network <highlight><bold>102</bold></highlight> to effect the changes. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> Another benefit of the centralized repository involves replicating a tuned system. For example, assume that a company has hundreds of retail stores with similar computing needs. One of the stores may have implemented a database system prior to the other stores. Over time the store has customized and tuned its configuration to perform optimally for its intended use. At some point in time, the company may desire to automate all of its stores. Because the one automated store has a central repository that stores its configuration information, that configuration information can be easily inspected and copied to implement identically configured &ldquo;pre-optimized&rdquo; systems at the various other stores. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Another benefit involves the recovery from catastrophic failures, which shall be described in greater detail hereafter. </paragraph>
</section>
<section>
<heading lvl="1">FAILURE RECOVERY </heading>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Subsystems within company&apos;s computer system typically provide their own mechanisms to facilitate recovery from a single point of failure, such as the failure of a disk or a network card. For example, RAID subsystems are designed to automatically correct single disk failures. When a subsystem fails, recovery is slightly more complicated. For example, if an entire RAID subsystem fails, the data stored thereon typically must be recovered from backups. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> When a more catastrophic failure occurs, the entire computer system of a company ceases to function. Typically, such failures would also result in the loss of metadata that describes how the system was configured, such as the identity of the devices that belonged to the system, the network parameters that were in effect, the IP addresses that were being used, etc. In conventional computer systems, this information is not gathered in any particular location, but rather disbursed unsystematically among the components to which the configuration information applied. Consequently, recovering after such a failure was extremely difficult and expensive. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> For example, if a system similar to the company&apos;s system exists, the company&apos;s system can be reconfigured based on the similar system, and the data can then be reloaded from backup. However, such a &ldquo;similar system&rdquo; may not exist if the company&apos;s system has been customized, or may exist but not be know to or controlled by those responsible for recovering the company&apos;s system. Further, some configuration information, such as the IP addresses used by the system, may be unique to the system. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In the case of a system failure, significant benefit results from having a centralized repository for the configuration metadata of local network <highlight><bold>102</bold></highlight>, and even further benefit results from having that centralized repository located outside of the system to which it corresponds. Specifically, by maintaining a configuration repository for a computer system, such as local network <highlight><bold>102</bold></highlight>, at a single location within the system, recovery from a catastrophic failure may be accomplished in two relatively inexpensive phases: (1) restore the configuration repository from backup to recover the configuration of the system, and (2) restore the data from backup onto the configured system. If the configuration repository is maintained outside the system itself, as in the embodiment illustrated in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the first phase is even simpler because the repository itself would typically not have to be recovered from backup because it would not be lost in the catastrophic failure. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a flowchart of a process for recovering a database appliance from a crash according to an embodiment of the invention. Referring to <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, at step <highlight><bold>302</bold></highlight> the integrated management console is used to search the metadata repository maintained by Directory Server <highlight><bold>134</bold></highlight> for the entry associated with the crashed appliance. According to one embodiment, the directory entry for the crashed appliance includes a unique appliance identifier for the appliance, data that identifies the class of the appliance, and data that indicates the version of the application software bundle that was installed on the crashed appliance. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> At step <highlight><bold>304</bold></highlight>, the same version of the appliance software that was installed on the crashed appliance is installed on a new appliance that is of the same class as the crashed appliance. The installation is performed using the appliance identifier of the crashed appliance, thus creating an association between the new appliance and the directory entry of the crashed appliance. At this point, the metadata repository has a valid directory entry associated with the appliance identifier of the crashed appliance, and the new appliance is set up to point to the crashed appliances entry in the metadata repository, even though the configuration of the new appliance is still the default configuration, not that of the crashed appliance. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> At step <highlight><bold>306</bold></highlight>, the integrated management console is used to set a flag, referred to herein as the &ldquo;cache not in sync&rdquo; flag, in the directory entry of the crashed appliance. At step <highlight><bold>308</bold></highlight>, the new appliance is rebooted. At step <highlight><bold>310</bold></highlight>, the new appliance checks its associated directory entry, which was the directory entry of the crashed appliance, and detects that the cache not in sync flag is set. In response to detecting this flag, at step <highlight><bold>312</bold></highlight> the new appliance performs auto-configuration by configuring itself to reflect the configuration information in its directory entry. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> At this point, the integrated management console may be used to identify the backup solution used by the crashed appliance, and to initiate a restore operation to restore to the new appliance the information that was backed up from the crashed appliance (step <highlight><bold>314</bold></highlight>). At step <highlight><bold>316</bold></highlight>, any additional components or patches that had been installed on the crashed appliance are installed on the new appliance. The console administrator could initiate the applying of patches and install of additional components by browsing the crashed appliance&apos;s software component list in the metadata repository. </paragraph>
</section>
<section>
<heading lvl="1">HARDWARE OVERVIEW </heading>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram that illustrates a computer system <highlight><bold>200</bold></highlight> upon which an embodiment of the invention may be implemented. Computer system <highlight><bold>200</bold></highlight> includes a CPU <highlight><bold>204</bold></highlight> for processing information. Computer system <highlight><bold>200</bold></highlight> also includes a memory <highlight><bold>206</bold></highlight>, such as a random access memory (RAM) or other dynamic storage device, and a storage system <highlight><bold>210</bold></highlight>, such as a magnetic disk or optical disk. Alternatively, storage system <highlight><bold>210</bold></highlight> may be located outside of computer system <highlight><bold>200</bold></highlight>, and may be accessed by computer system <highlight><bold>200</bold></highlight> over the network via a standard network protocol, such as NFS. Additionally, EEPROM modules or variants, such as NVRAM, store instructions and data used to help bring the system up. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> Other embodiments of the invention may use a computer system with built in controllers on the motherboard to enable tighter integration of the hardware components to achieve better performance. In such an embodiment, the system is scaled by clustering multiple integrated units. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> The computer system can be expanded or scaled up with the addition of processors, memory modules, or storage units. When this occurs, the software adaptively configures itself to enable use of added components by the appliance. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> may be coupled to a display <highlight><bold>212</bold></highlight> for displaying information to a computer user. Display <highlight><bold>212</bold></highlight> may be, for example, a conventional computer monitor or merely a simple array of LEDs configured to convey status information. An input device <highlight><bold>214</bold></highlight> may be provided to allow direct input into computer system <highlight><bold>200</bold></highlight>, in addition to input communicated through the network. Input device <highlight><bold>214</bold></highlight> may be a simple keypad, and/or may involve more sophisticated input mechanisms, such as a keyboard or mouse. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> The invention is related to the use of computer system <highlight><bold>200</bold></highlight> as or in conjunction with a database appliance. According to one embodiment of the invention, a database appliance is implemented on computer system <highlight><bold>200</bold></highlight> in response to CPU <highlight><bold>204</bold></highlight> executing one or more sequences of one or more instructions contained in memory <highlight><bold>206</bold></highlight>, where the instructions include a database server and a special purpose operating system adapted to specifically provide the services of the database server and not all of the services required of a general purpose operating system. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Instructions may be read into memory <highlight><bold>206</bold></highlight> from another computer-readable medium, such as storage system <highlight><bold>210</bold></highlight>. Execution of the sequences of instructions contained in memory <highlight><bold>206</bold></highlight> causes CPU <highlight><bold>204</bold></highlight> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> The term &ldquo;computer-readable medium&rdquo; as used herein refers to any medium that participates in providing instructions to CPU <highlight><bold>204</bold></highlight> for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device <highlight><bold>210</bold></highlight>. Volatile media includes dynamic memory, such as main memory <highlight><bold>206</bold></highlight>. Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <highlight><bold>202</bold></highlight>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> also includes a network card <highlight><bold>218</bold></highlight>. Network card <highlight><bold>218</bold></highlight> provides a two-way data communication coupling to a network link <highlight><bold>220</bold></highlight> that is connected to a local network <highlight><bold>222</bold></highlight>. Network card <highlight><bold>218</bold></highlight> sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Network link <highlight><bold>220</bold></highlight> typically provides data communication through one or more networks to other data devices. For example, network link <highlight><bold>220</bold></highlight> may provide a connection through local network <highlight><bold>222</bold></highlight> to a host computer <highlight><bold>224</bold></highlight> or to data equipment operated by an Internet Service Provider (ISP) <highlight><bold>226</bold></highlight>. ISP <highlight><bold>226</bold></highlight> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &ldquo;Internet&rdquo; <highlight><bold>228</bold></highlight>. Local network <highlight><bold>222</bold></highlight> and Internet <highlight><bold>228</bold></highlight> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link <highlight><bold>220</bold></highlight> and through network card <highlight><bold>218</bold></highlight>, which carry the digital data to and from computer system <highlight><bold>200</bold></highlight>, are exemplary forms of carrier waves transporting the information. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Computer system <highlight><bold>200</bold></highlight> can send messages and receive data, including program code, through the network(s), network link <highlight><bold>220</bold></highlight> and network card <highlight><bold>218</bold></highlight>. In the Internet example, a server <highlight><bold>230</bold></highlight> might transmit a requested code for an application program through Internet <highlight><bold>228</bold></highlight>, ISP <highlight><bold>226</bold></highlight>, local network <highlight><bold>222</bold></highlight> and network card <highlight><bold>218</bold></highlight>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> The received code may be executed by CPU <highlight><bold>204</bold></highlight> as it is received, and/or stored in storage device <highlight><bold>210</bold></highlight>, or other non-volatile storage for later execution. In this manner, computer system <highlight><bold>200</bold></highlight> may obtain application code in the form of a carrier wave. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> While various techniques for reducing the cost of maintaining a computer system have been described above in the context of a database system, they need not be limited to any particular context. For example, rather than have a database appliance <highlight><bold>110</bold></highlight>, a computer system may include a mail server appliance for handling electronic mail. Such a server would include, for example, e-mail server software, where the appliance levels below the server software (i.e. possibly a database system, an operating system, and hardware) are specifically tailored to the needs of the e-mail server software. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer system comprising: 
<claim-text>a database server; and </claim-text>
<claim-text>an operating system, </claim-text>
<claim-text>wherein 
<claim-text>said operating system includes a kernel loaded in a particular address space, and </claim-text>
<claim-text>said database server is configured to read at least one item of information that is maintained by said operating system by directly reading memory that is associated with said operating system without switching context to said particular address space of said kernel. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A method of obtaining data from an operating system comprising: 
<claim-text>executing a kernel of said operating system in a particular address space on a computer system, and </claim-text>
<claim-text>causing a database server executing on said computer system to read at least one item of information that is maintained by said operating system by directly reading memory that is associated with said operating system without switching context to said particular address space of said kernel. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A computer-readable medium carrying instructions for obtaining data from an operating system, the instructions including instructions for performing the step of causing a database server executing on a computer system to read at least one item of information that is maintained by an operating system, wherein a kernel of said operating system is loaded in a particular address space on said computer system, wherein the database server reads the item of information by directly reading memory that is associated with said operating system without switching context to said particular address space of said kernel.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004962A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004962A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004962A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004962A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004962A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004962A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004962A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004962A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004962A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004962A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004962A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
