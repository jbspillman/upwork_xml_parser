<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005079A1-20030102-D00000.TIF SYSTEM "US20030005079A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005079A1-20030102-D00001.TIF SYSTEM "US20030005079A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005079A1-20030102-D00002.TIF SYSTEM "US20030005079A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005079A1-20030102-D00003.TIF SYSTEM "US20030005079A1-20030102-D00003.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005079</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10228494</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020826</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F015/16</ipc>
</classification-ipc-primary>
<classification-ipc-secondary>
<ipc>G06F017/60</ipc>
</classification-ipc-secondary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>709</class>
<subclass>217000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>709</class>
<subclass>203000</subclass>
</uspc>
</classification-us-secondary>
<classification-us-secondary>
<uspc>
<class>705</class>
<subclass>026000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Method and apparatus for remote interaction with and configuration of a WAN-based knowledge base</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10228494</doc-number>
<kind-code>A1</kind-code>
<document-date>20020826</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09791287</doc-number>
<document-date>20010222</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6460077</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>09791287</doc-number>
<document-date>20010222</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09199136</doc-number>
<document-date>19981124</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6233609</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</division-of>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>09199136</doc-number>
<document-date>19981124</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08962594</doc-number>
<document-date>19971031</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6049822</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-in-part-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Sanjay</given-name>
<family-name>Mittal</family-name>
</name>
<residence>
<residence-us>
<city>Fremont</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<correspondence-address>
<name-1>CENTRAL COAST PATENT AGENCY</name-1>
<name-2></name-2>
<address>
<address-1>PO BOX 187</address-1>
<city>AROMAS</city>
<state>CA</state>
<postalcode>95004</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system for selling products and services over the Internet, or other wide area network, comprises a knowledge base and a knowledge base configurator both executing on a network-connected server hosted by the enterprise offering products and/or services. A GUI user interface application is downloaded from the server to any platform used by a client wishing to purchase products or services. Having downloaded the user interface, the client can manipulate the configurator over a data link between the client&apos;s station and the server to configure the knowledge base to define products and/or services to be orders, and can complete orders. A preferred implementation is with the server as an enterprise-hosted server connected to the Internet, and clients as users connected typically through Internet Service Providers to the Internet. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CROSS-REFERENCE TO RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention is a divisional of co-pending application Ser. No. 09/199,136, filed Nov. 24, 1998, which is a continuation in part (CIP) of co-pending application Ser. No. 08/962,594 filed Oct. 31, 1997, entitled Method for Generating and Updating Knowledge-Based Configurators that are Multi Platform and Multi Language Capable, which is incorporated herein in it&apos;s entirety by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention is in the field of computer-aided sales and advertising and has particular application to software applications for interacting with and configuring knowledge bases presented on a wide area network (WAN) via a remote computer or shared network connection. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Computer-aided sales presentations wherein rules-based configurators are employed have long been a valuable tool for allowing a customer or client to configure his or her own order of a product or products. This technique is employed in a network environment whereby a client configures his or her order and sends it over the Internet, or another type of network, to a seller which can fill the order. For example, a complex computer system has many different features, accessories, options, etc. With the appropriate software program, a client can configure his or her own custom order for a particular brand or type of system. By employing an interactive method a client can apply certain desired features in his product-order configuration that were chosen from options provided by a seller. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> More recently, it is known to the inventor that object-oriented, constraint-based configurators have begun to replace rules-based configurators by virtue of their more flexible organization. For example, rules-based configurators rely on set rules that are programmed in a procedural computer language. Partly for this reason, every change in the merchandise offered may require substantial changes in the software, which can be quite a lot of work, considering the fast pace of trade today. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Rules-based configurators are not physically separated from the actual knowledge data and the application for manipulating the knowledge data. Knowledge base configurators known to the inventor have such separation (an applet) therefore, the knowledge base can be changed easily via an editing process. The knowledge base applies the changes via linking to other elements of the process such as the object model. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Generally speaking, an object model representing a product, such as a new automobile, is created using a programming language within a model building application at the sellers end. This object model contains all of the descriptive elements and various features including cost information about the object it represents. A model writer procedure then writes a binary file, which is readable only to applications written in the same environment. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> These object models can then be presented to a client having the appropriate software application on the correct platform and using the required language. The client can then enter his desired choices or options via interactive software. A configurator commonly known as a run-time engine insures that the client&apos;s choices are applied correctly. The configurator is also adapted to negate any conflict or impossibility that may arise from the client&apos;s directives. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> A difficulty with the current state of the art, which has hampered fast deployment of knowledge bases severely, is that although a knowledge base is superior to a rules base as described above, the knowledge base is language-dependent and not easily transferred across different platforms (i.e. IBM to Macintosh, or even Win 3.1 vs. Win 95). For example, a client would be required to operate in the same computer platform and language to be able to interactively configure his desired purchase. This is a serious problem because it severely limits the targeted on-line community that a seller may reach. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> A knowledge base configuration process known to the inventor and described with reference to the priority application to this CIP application as listed under the Cross-Reference to related documents section above, effectively solves the above described problem related to language and platform dependency. However, clients interacting with model-presenting companies must download both the knowledge base and the knowledge base configuration software in order to configure a product to hopefully reflect the desired specifications and features which are offered. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> A unique interaction topology for the network application described above is taught later in this specification with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. The advantage of this technique is that configuration is comparatively swift because it is done locally (client side). A drawback is the requirement for downloading the knowledge base and any updates that may be required including updates to the applet that configures the knowledge base. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> It is desired by many clients who buy interactively over a WAN via the use of knowledge bases, that software downloading be kept to a minimum, as it is time consuming and uses otherwise available computer memory. Moreover, since the first application communication speed for WAN systems like the Internet has improved dramatically. What is clearly needed is an executable interface that would allow a client to configure a knowledge base and transact an order with the company without being required to download the knowledge base or software to configure the knowledge base. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In a preferred embodiment of the present invention a method for configuring a knowledge-based object model located at a server platform from a client platform via a data network is provided, comprising steps of (a) providing the object model and a configurator at the server platform; (b) transporting, from the server platform to the client platform, a GUI user-interface application capable of manipulating the configurator over the data network; and (c) invoking the GUI user-interface application at the client platform by a client, and using the GUI user-interface application to configure the object model at the server from the client platform. In some embodiments the GUI user-interface application is a Java-based applet. Also, the server platform may be a first Internet-connected computer and the client platform is a second Internet-connected computer. The GUI user-interface application may also be a WEB-browser plug-in in some embodiments. In many cases the client platform connects to the Internet through an Internet Service Provider (ISP), the server platform is hosted by an enterprise, and the client uses the downloaded GUI user-interface application to configure the object model to select and order a product or service offered by the enterprise. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> In another aspect of the invention a system for selling products and services from a computerized server in a wide area network is provided, comprising a knowledge base stored at or accessible to the server; a configurator executable at the server platform to configure the knowledge base; and a GUI user-interface application capable of manipulating the configurator over the data network, executable on a client platform connected to the server platform by a data link. In this embodiment a client uses the GUI user-interface application over the data link to manipulate the configurator to configure the knowledge base. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Also in this embodiment of a system, the GUI user-interface application may be a Java-based applet. The server platform can be a first Internet-connected computer and the client platform a second Internet-connected computer, in which case the GUI user-interface application may be a WEB browser plug-in. Preferably the client platform connects to the Internet through an Internet Service Provider (ISP). Typically server platform is hosted by an enterprise, and the client uses the downloaded GUI user-interface application to configure the object model to select and order a product or service offered by the enterprise.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWING FIGURES </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flow chart illustrating a procedure for a knowledge base application according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating system architecture and client interaction with a WEB-based knowledge base according to an embodiment of the invention described in priority document Ser. No. 08/962,594. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating client interaction with a WEB-based knowledge base according to an embodiment of the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a flow chart illustrating a knowledge base work flow application according to an embodiment of the present invention wherein both knowledge base objects and GUI objects are generated and presented to a client by an advertiser or seller of a product. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> A knowledge base generator or model builder <highlight><bold>101</bold></highlight> is used at the sellers end to create a desired object model <highlight><bold>102</bold></highlight>. As described briefly with reference to the background section, object model <highlight><bold>102</bold></highlight> contains all of the information related to the represented object or product such as dimensions, colors, styles, pricing and the like. Model builder <highlight><bold>101</bold></highlight> is a software tool known to the inventor in the art of generating knowledge bases. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In a preferred embodiment of the present invention a programming language such as Java or C&plus; is used in the building of object model <highlight><bold>102</bold></highlight>. The reason for this is because these languages are relatively universal and usable among different platforms. It will be apparent to one with skill in the art that many different programming languages could be used in creating object model <highlight><bold>102</bold></highlight> without departing from the spirit and scope of the present invention such as Perl or Visual Basic. The languages mentioned above are used in a preferred embodiment for reasons described above. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> A unique and innovative method according to an embodiment of the present invention is initiated by using a model-converting writer <highlight><bold>103</bold></highlight> to write object model <highlight><bold>102</bold></highlight> into the form of a collection of human readable files. ASCII files. Such files are commonly referred to by those with skill in the art as flat files, and are typically human readable and sensical. A flat file <highlight><bold>104</bold></highlight> which is an ASCII file containing knowledge base objects that have been converted and written by model-converting writer <highlight><bold>103</bold></highlight> can be transported to the client over the Internet or another type of network. Flat file <highlight><bold>104</bold></highlight> is an external media type file that can be read by a computer program or by a person. Therefore the recreation or modification of the object models can be automated or manual. Also, communications across different platforms is sometimes &ldquo;intransparent&rdquo;, meaning only human readable files can be transferred. Other file types, such as binary files, can contain characters that would be interpreted by either entity (sending or receiving computer) as commands, including such commands that can disrupt or terminate such communications. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Flat file <highlight><bold>104</bold></highlight> in an embodiment of the invention is used as a source for a GUI builder <highlight><bold>111</bold></highlight> in the process of building a GUI object model <highlight><bold>112</bold></highlight>. GUI-object model <highlight><bold>112</bold></highlight> insures that there are graphical or visual representations of the appropriate parts of object model <highlight><bold>102</bold></highlight>. Using a conversion-model writer <highlight><bold>113</bold></highlight>, GUI-object models are written into the form of a human-readable ASCII flat file along with some optional multimedia files for filling in the GUI that can then be sent to a client. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The incorporation of a human readable, ASCII format into the knowledge base process allows for the transporting of the associated information across different computer platforms as well as allowing for the use of differing languages. This unique method utilizes known software applications such as model-converting writers <highlight><bold>103</bold></highlight>, and <highlight><bold>113</bold></highlight> and enhances them with the capability of converting the object models into flat files as explained and taught above. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, dotted line <highlight><bold>110</bold></highlight> represents a network transmission interface, such as transmission of files to a client via an Internet connection. Those steps and processes appearing above line <highlight><bold>110</bold></highlight> are on the seller&apos;s side, and those below are on the client&apos;s side. Presumably, in the case of the Internet, the client has accessed the seller&apos;s Internet site, and is capable of downloading selected information. Whether or not the information downloaded is useful to the client is an issue addressed by the present invention. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> At the client&apos;s end, a reader application <highlight><bold>123</bold></highlight> reads the flat files downloaded from the advertiser&apos;s site and rebuilds these files into objects for a knowledge-based configurator known in the art as a run-time engine <highlight><bold>121</bold></highlight>. Run-time engine <highlight><bold>121</bold></highlight> converts flat files <highlight><bold>104</bold></highlight> and <highlight><bold>114</bold></highlight> back into knowledge base objects <highlight><bold>122</bold></highlight> and GUI objects <highlight><bold>132</bold></highlight> which are the same as object models <highlight><bold>102</bold></highlight> and <highlight><bold>104</bold></highlight>. For example, if the same programming language and environment is used in run-time engine <highlight><bold>121</bold></highlight> as in model builder <highlight><bold>101</bold></highlight>, then knowledge base <highlight><bold>122</bold></highlight> will be identical to object model <highlight><bold>102</bold></highlight> both binaurally and descriptively. The same relationship can be concluded with regards to GUI objects <highlight><bold>132</bold></highlight> and object model <highlight><bold>112</bold></highlight>. If a different language and environment is used in run-time generator <highlight><bold>121</bold></highlight> that that used in model builder <highlight><bold>101</bold></highlight>, then the files are not binaurally identical, but will accurately describe the same object. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A process of the present invention as described above could be used to up-date configurator systems such as run-time engine <highlight><bold>121</bold></highlight>. Editing or changing rules could be done from within the knowledge base instead of from within the object model via the addition of a reader that reads the flat file back into object model <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="7"><number>&lsqb;0027&rsqb;</number> Method and Apparatus for Remote Client to Knowledge Base Interaction </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> According to a preferred embodiment of the present invention, a method and apparatus is provided wherein a client may interact with and configure a knowledge base without downloading the knowledge base or software used to manipulate the knowledge base. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram illustrating client interaction with a WEB-based knowledge base according to an embodiment of the invention described and claimed in application Ser. No. 08/962,594. In order to enable an adequate explanation of the present invention, the inventor has chosen to first illustrate a network topology that is consistent with the priority application listed under the Cross-Reference to Related Documents above. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> According to the prior embodiment, a unique method was taught for client interaction with WAN-based knowledge bases that is adapted to save the client time and resources when configuring a product or service for order. The topology as illustrated herein with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference> comprises a client <highlight><bold>133</bold></highlight> that is connected to a wide area network (WAN) <highlight><bold>135</bold></highlight>, such as the Internet, via a remote network connection <highlight><bold>134</bold></highlight>, such as a typical Internet connection known in the art. The method of connection may also, in some embodiments, be that of a shared network connection such as may be the case of a smaller local area network (LAN) connected to WAN <highlight><bold>135</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> WAN <highlight><bold>135</bold></highlight> may be the Internet, an Intranet, or another type of WAN known in the art. Client <highlight><bold>133</bold></highlight> has a personal computer (PC) <highlight><bold>136</bold></highlight> having the capability and equipment to enable the above described connection to WAN <highlight><bold>135</bold></highlight> as known in the art. WAN <highlight><bold>135</bold></highlight> comprises a server <highlight><bold>137</bold></highlight> adapted to serve and receive data to and from PC <highlight><bold>136</bold></highlight> at the location of client <highlight><bold>133</bold></highlight>. File server <highlight><bold>137</bold></highlight> is typically hosted by an enterprise engaged in selling products to clients such as <highlight><bold>133</bold></highlight> over WAN <highlight><bold>135</bold></highlight>, as is consistent with the method taught with respect to the priority application. A database <highlight><bold>143</bold></highlight> is illustrated as being connected to file server <highlight><bold>137</bold></highlight> as is known in the art of server/database relationships as practiced on a WAN. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> A knowledge base <highlight><bold>139</bold></highlight> is resident in server <highlight><bold>137</bold></highlight>, or accessible from database <highlight><bold>143</bold></highlight>, along with an applet <highlight><bold>141</bold></highlight> adapted to manipulate and configure knowledge base <highlight><bold>139</bold></highlight>. The configuration of knowledge base <highlight><bold>139</bold></highlight> is defined, for the purpose of clarity, as selecting the desired options relating to color, model number, optional accessories, and the like, as may be offered as interactive options in the knowledge base representing the product. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> Knowledge base <highlight><bold>139</bold></highlight> is analogous to components <highlight><bold>104</bold></highlight> and <highlight><bold>114</bold></highlight> as listed above line <highlight><bold>110</bold></highlight> (seller&apos;s end) in <cross-reference target="DRAWINGS">FIG. 1</cross-reference> of the priority application. Knowledge base <highlight><bold>139</bold></highlight> as such is also illustrated logically as downloaded to PC <highlight><bold>136</bold></highlight> at the location of client <highlight><bold>133</bold></highlight> as indicated via directional arrow K. At PC <highlight><bold>136</bold></highlight>, knowledge base <highlight><bold>139</bold></highlight> is analogous to elements <highlight><bold>122</bold></highlight> (KB Objects) and element <highlight><bold>132</bold></highlight> (GUI Objects) as illustrated below line <highlight><bold>110</bold></highlight> (client&apos;s side) of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> It will be apparent to one with skill in the art that there may be many more than one knowledge base and associated applet available from server <highlight><bold>137</bold></highlight> without departing from the spirit and scope of the present invention. However, the inventor chooses to illustrate only one knowledge base and one applet in order to simplify explanation of the present invention. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> Applet <highlight><bold>141</bold></highlight> is analogous to Reader <highlight><bold>123</bold></highlight> and Run-Time Engine <highlight><bold>121</bold></highlight> as illustrated below line <highlight><bold>110</bold></highlight> (client&apos;s end) in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. Applet <highlight><bold>141</bold></highlight> is also illustrated as downloaded to PC <highlight><bold>136</bold></highlight> as was described above with reference to knowledge base <highlight><bold>139</bold></highlight>. The download is illustrated via directional arrow A. In this way, client <highlight><bold>133</bold></highlight> may configure his product off-line via use of the downloaded components. For example, applet <highlight><bold>141</bold></highlight> is used as a tool to configure knowledge base <highlight><bold>139</bold></highlight> as illustrated via bidirectional arrow placed between the two components. Once his product is configured, client <highlight><bold>133</bold></highlight> may go on-line (connect to WAN <highlight><bold>135</bold></highlight>) and upload a finished order to server <highlight><bold>137</bold></highlight> which may in turn communicate with database <highlight><bold>143</bold></highlight> and relay information back to client <highlight><bold>133</bold></highlight>. Database <highlight><bold>143</bold></highlight> typically contains data related to the products provided by the company presenting the knowledge bases and may also contain additional information such as shipping dates, product status, product updates, applet updates and so on. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> Working off-line allows client <highlight><bold>133</bold></highlight> to configure knowledge base <highlight><bold>139</bold></highlight> at his leisure and allows him to place an order for the configured product at any desired time. In this case, ASCII files (flat files) along with optional multimedia files as described with reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> are sent in the download of knowledge base <highlight><bold>139</bold></highlight> as represented by arrow K. This allows for differences in computer platform and languages to be utilized on the same network-interaction topology. While this unique topology and method provides distinct advantages to client <highlight><bold>133</bold></highlight>, he still must download applet <highlight><bold>141</bold></highlight> and knowledge base <highlight><bold>139</bold></highlight> in order to configure and place his order. This could be an issue if he is using someone else&apos;s computer, for example, wherein downloading components is not desired or approved by the owner. Similarly, he may be sharing a common system with several users with policy governing the system discouraging or forbidding such purchasing wherein significant downloading is required. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> According to a preferred embodiment of the present invention, a unique applet is provided and adapted to function as a controller for manipulating an applet such as applet <highlight><bold>141</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> to,configure a knowledge base such as knowledge base <highlight><bold>139</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. This innovative applet gives a client complete control over the configuration of his product and transaction of his order. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is a block diagram illustrating architecture and client interaction with a WEB-based knowledge base according to an embodiment of the present invention. In order to avoid redundancy elements of topology and components that are not new to the invention will not be reintroduced and retain their same element numbers. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> The network topology of <cross-reference target="DRAWINGS">FIG. 3</cross-reference> is essentially the same as the network topology illustrated with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. For example, client <highlight><bold>133</bold></highlight> is connected via remote connection <highlight><bold>134</bold></highlight> to server <highlight><bold>137</bold></highlight>, which in turn is connected to database <highlight><bold>143</bold></highlight> as was described with reference to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>. However, a difference exists in the way that the client interacts with knowledge base <highlight><bold>139</bold></highlight> and applet <highlight><bold>141</bold></highlight>. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> A graphical user interface (GUT) applet <highlight><bold>145</bold></highlight> is provided and adapted to communicate and exert control over applet <highlight><bold>141</bold></highlight> which in turn enables the configuration of knowledge base <highlight><bold>139</bold></highlight>. GUT <highlight><bold>145</bold></highlight> is, in this embodiment, a Java-based applet which is capable of being executed on different kinds of platforms. In alternate embodiments, GUT <highlight><bold>145</bold></highlight> may be COM model, or Active-X&trade;. As a Java GUT, applet <highlight><bold>145</bold></highlight> is adapted to send and receive data as both text and graphics. Similar to a software control panel, a client such as client <highlight><bold>133</bold></highlight> uses GUT <highlight><bold>145</bold></highlight> to instruct applet <highlight><bold>141</bold></highlight> to make the desired selections required with respect to knowledge base <highlight><bold>139</bold></highlight> in order for a successful product order to be realized. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> In this embodiment, GUT <highlight><bold>145</bold></highlight> is the only component that must be downloaded to PC <highlight><bold>136</bold></highlight> as illustrated via directional arrow G representing such download. As a control interface, GUT <highlight><bold>145</bold></highlight> contains only the appropriate control codes and display capability for required interaction. For example, commands may be sent to applet <highlight><bold>141</bold></highlight> to execute desired selections, while displayable results of such selections appear in a display window or dialog box associated with GUT <highlight><bold>145</bold></highlight>. This allows GUT <highlight><bold>145</bold></highlight> to remain very small in overall data size, therefore, largely reducing any download requirements that otherwise may be presented. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> GUT <highlight><bold>145</bold></highlight> may be in the form of a WEB-browser plug-in. As a Java enabled plug-in, GUT <highlight><bold>145</bold></highlight> may be capable of transmitting and receiving audio, audio/video, text and graphics, or any other supported media. In one embodiment, GUT <highlight><bold>145</bold></highlight> may be embedded in a WEB form downloaded by client <highlight><bold>133</bold></highlight> from the company selling the products. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> GUT <highlight><bold>145</bold></highlight> has the ability to communicate with applet <highlight><bold>141</bold></highlight> as illustrated via directional arrow C. Communication between GUT <highlight><bold>145</bold></highlight> and applet <highlight><bold>141</bold></highlight> in server <highlight><bold>137</bold></highlight> is such that knowledge base options may be viewed, and selections may be made wherein upon making a selection, viewable results of the selection are presented in a GUI-associated display or window. GUI <highlight><bold>145</bold></highlight> may contain application program interfaces (API&apos;s) adapted to invoke installed readers, viewers, players, and such as maybe required to disseminate audio or graphic content. In one embodiment, the required or selected viewing capability is supplied with GUI <highlight><bold>145</bold></highlight>. </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> The unique method of providing a GUI as an interface produces an option wherein a client need not perform any significant downloading in order to configure and present an order to a company. The complete configuration and transaction of an order takes place on-line. Updates to client software are minimized as only GUI updates are required when significant editing is done to an existing GUI. Such updates may be delivered to a client via push technology such as e-mail, or offered to the client in the form of an interactive update button. One example of a GUI update may be that a new media is supported. Code enabling the media may be sent as an executable and configure itself to the existing GUI code. </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> With the use of GUI <highlight><bold>145</bold></highlight>, a client such as client <highlight><bold>133</bold></highlight> cannot now configure his product off-line and send an order whenever he decides. However, this disadvantage is substantially off-set by the fact that downloading is at a minimum. In many cases, configuring and ordering a product on-line with GUI <highlight><bold>145</bold></highlight> will be faster than downloading components that would be required when performing the same task without GUI <highlight><bold>145</bold></highlight>. Of course, this will depend on the size and complication of the downloaded knowledge base and associated controls. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> After configuring a knowledge base such as knowledge base <highlight><bold>139</bold></highlight>, GUI <highlight><bold>145</bold></highlight> may act as an interface to database <highlight><bold>143</bold></highlight> through applet <highlight><bold>141</bold></highlight>. For example, the actual transaction of the order, confirmation of the receipt of the order and any added information such as real-time status, any conflict information such as might cause delay in shipment, and so on, may be relayed to client <highlight><bold>133</bold></highlight> via applet <highlight><bold>141</bold></highlight> and GUI <highlight><bold>145</bold></highlight>. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> It will be apparent to one with skill in the art that an applet such as GUI applet <highlight><bold>145</bold></highlight> may be created supporting varying media types as may be offered in a presentation or product promotion and that such media types may be already installed on PC <highlight><bold>136</bold></highlight> and invoked by GUI <highlight><bold>145</bold></highlight>, or be provided in their entirety as viewers within GUI <highlight><bold>145</bold></highlight>. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> It will also be apparent to one with skill in the art that the use of ASCII files as illustrated with regards to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> (P3501PA) may be practiced on the sellers side if more than one computer language or platform is evident among several systems connected to the sellers network. With the provision of GUI <highlight><bold>145</bold></highlight>, a client such as client <highlight><bold>133</bold></highlight> will not be required to work with ASCII files. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> It will be apparent to one with skill in the art that a method of the present invention such as described with reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference> could use a variety of different programming languages as known in the art without departing from the spirit and scope of the present invention. It will also be apparent to one with skill in the art that the method of the present invention may be adapted to be transported across a variety of known computer platforms without departing from the spirit and scope of the present invention. For example a client using a windows operating system may download and configure ASCII files that were generated in a UNIX environment and so on. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> The spirit and scope of the present invention is limited only by the claims that follow. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for configuring a knowledge-based object model located at a server platform from a client platform via a data network, comprising steps of: 
<claim-text>(a) providing the object model and a configurator at the server platform; </claim-text>
<claim-text>(b) transporting, from the server platform to the client platform, a GUI user-interface application capable of manipulating the configurator over the data network; and </claim-text>
<claim-text>(c) invoking the GUI user-interface application at the client platform by a client, and using the GUI user-interface application to configure the object model at the server from the client platform. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the GUI user-interface application is a Java-based applet. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the server platform is a first Internet-connected computer and the client platform is a second Internet-connected computer. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> wherein the GUI user-interface application is a WEB-browser plug-in. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference> wherein the client platform connects to the Internet through an Internet Service Provider (ISP). </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of claim I wherein the server platform is hosted by an enterprise, and the client uses the downloaded GUI user-interface application to configure the object model to select and order a product or service offered by the enterprise. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A system for selling products and services from a computerized server in a wide area network, comprising: 
<claim-text>a knowledge base stored at or accessible to the server; </claim-text>
<claim-text>a configurator executable at the server platform to configure the knowledge base; </claim-text>
<claim-text>a GUI user-interface application capable of manipulating the configurator over the data network, executable on a client platform connected to the server platform by a data link; 
<claim-text>wherein a client uses the GUI user-interface application over the data link to manipulate the configurator to configure the knowledge base. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein the GUI user-interface application is a Java-based applet. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein the server platform is a first Internet-connected computer and the client platform is a second Internet-connected computer. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the GUI user-interface application is a WEB browser plug-in. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> wherein the client platform connects to the Internet through an Internet Service Provider (ISP). </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> wherein the server platform is hosted by an enterprise, and the client uses the downloaded GUI user-interface application to configure the object model to select and order a product or service offered by the enterprise.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>3</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005079A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005079A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005079A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005079A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
