<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005287A1-20030102-D00000.TIF SYSTEM "US20030005287A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00001.TIF SYSTEM "US20030005287A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00002.TIF SYSTEM "US20030005287A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00003.TIF SYSTEM "US20030005287A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00004.TIF SYSTEM "US20030005287A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00005.TIF SYSTEM "US20030005287A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00006.TIF SYSTEM "US20030005287A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00007.TIF SYSTEM "US20030005287A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00008.TIF SYSTEM "US20030005287A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00009.TIF SYSTEM "US20030005287A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00010.TIF SYSTEM "US20030005287A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00011.TIF SYSTEM "US20030005287A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00012.TIF SYSTEM "US20030005287A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00013.TIF SYSTEM "US20030005287A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00014.TIF SYSTEM "US20030005287A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030005287A1-20030102-D00015.TIF SYSTEM "US20030005287A1-20030102-D00015.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005287</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10228786</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020826</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>155000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>168000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>System and method for extensible positive client identification</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10228786</doc-number>
<kind-code>A1</kind-code>
<document-date>20020826</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09412242</doc-number>
<document-date>19991005</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6442696</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>David</given-name>
<middle-name>Robert</middle-name>
<family-name>Wray</family-name>
</name>
<residence>
<residence-non-us>
<city>Halifax</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>David</given-name>
<middle-name>John</middle-name>
<family-name>Blanchfield</family-name>
</name>
<residence>
<residence-non-us>
<city>Bradford</city>
<country-code>GB</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Authoriszor, Inc.</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>HALE AND DORR, LLP</name-1>
<name-2></name-2>
<address>
<address-1>60 STATE STREET</address-1>
<city>BOSTON</city>
<state>MA</state>
<postalcode>02109</postalcode>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A system and method that provides electronic security over a network through an extensible positive client identifier (EPCI), working with a positive information profiling system (PIPS), pseudo uniform resource locators (PURLs) to assist in providing data integrity, a virtual page publication system (VPPS), and an active security responder, (ASR). The extensible positive client identifier (EPCI) creates a unique client identification key and continually self-evaluates the key based on unique system signature data. The positive information profiling system implements account profiles for all content and clients so that pages of information can be generated and matched to the data requested as well as the requester. The virtual page publication system VPPS of the invention does not store pages permanently in the root directory of the site but instead creates temporary web pages dynamically containing the level of information resulting from the client identification, PIPS, and PURL evaluations. The virtual page is sent, (in encrypted form if this option has been selected or if this option is required by the PIPS profile), to the requestor and exists only for the time necessary to send it. The active security responder (ASR) controls the overall operation of the present invention. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
</section>
<section>
<heading lvl="1">TECHNICAL FIELD </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates generally to the field of providing security for a location in a network and more particularly to an extensible positive client identification system and method. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The Worldwide Web (web), web browser, and email technologies have transformed the Internet public telecommunications network into a tool for everyday use. While businesses have used a variety of computer and private network technologies for several decades, often creating valuable databases and internal files in the process, web technologies have now made it possible for businesses to use such corporate data on the Internet for competitive advantage. Commercial transactions that used to be done through face to face meetings and negotiations, for example, can now be done electronically via the Internet&mdash;at least in theory. In practice, the more significant the transactions are, and the more sensitive the data involved, the more likely it is that security on the Internet (or any network) becomes a problem. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Ideally, electronic security addresses three requirements: </paragraph>
<paragraph id="P-0004" lvl="2"><number>&lsqb;0004&rsqb;</number> 1. Confidentiality&mdash;the prevention of the unauthorized disclosure of information; </paragraph>
<paragraph id="P-0005" lvl="2"><number>&lsqb;0005&rsqb;</number> 2. Integrity&mdash;the prevention of the unauthorized modification of information; and </paragraph>
<paragraph id="P-0006" lvl="2"><number>&lsqb;0006&rsqb;</number> 3. Availability&mdash;the prevention of the unauthorized withholding of information. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In practice, current methods tend to fall short of the degree of certainty or comfort needed in one or more of these areas for many commercial or higher risk transactions. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Confidentiality, for example, begins by identifying the requestor of confidential information. This, in turn, means not only identifying a valid requester, but also detecting when an imposter or thief is impersonating a valid requester to gain access to confidential information. In many cases it is also true that a valid requestor may only be authorized to have access to a particular level of information. An employee database, for example, which contains salary information may have several different levels of access. An individual employee may only be authorized to access his or her salary information, while the head of the personnel department may have access to all salary data. Non-employees may be denied access to any employee data&mdash;hence the importance of identification. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Data integrity is required to safeguard the data being requested. Computer hackers (those who seek to break through security safeguards either for amusement or theft), may try to corrupt data at the host computer by seeding computer viruses (programs that destroy files and data at the host site), corrupting data, replacing data with false information or by depositing &ldquo;trojans&rdquo;&mdash;software that appears to be useful but in fact does harm. Hackers can also try to intercept and corrupt data as it is being transmitted to a remote site. After transmission, a hacker may try to corrupt the data stored at the remote site. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> Availability means simply that information should not be withheld improperly when it is requested. Many factors can affect availability over a network, such as hardware malfunction, software malfunction, data corruption, or the failure or slowing down of communications links. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> While there are some existing measures and tools designed to address computer and network security, many of these have significant weaknesses. For example, one of the most popular methods of user identification for computers and networks is the use of a logon name and password. As seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), a computer user at a personal computer terminal <highlight><bold>00</bold></highlight> may want to connect over private network lines <highlight><bold>10</bold></highlight>, to communicate with another user at terminal <highlight><bold>02</bold></highlight> within the private network. Computer software allows the user at terminal <highlight><bold>00</bold></highlight> to log onto the computer by using a dialogue screen that requests his or her user name and password. For a hacker to &ldquo;crack&rdquo; or break this kind of system thus requires knowledge of a valid user name and password combination. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> The logon name and password approach has a number of weaknesses. First, logon names are usually very easy to discover. Many organizations select a standard format for them based on the user&apos;s real identity. Fred Smith, for example, may be given a logon name of &ldquo;fsmith&rdquo; or &ldquo;freds&rdquo;. A hacker familiar with a user&apos;s real name may find it easy to deduce this kind of logon name. Many computer systems that require logon names also have default settings that are used when the system is first configured. Many users simply keep these default account names. Thus, a hacker familiar with the NT&trade; operating system provided by Microsoft, Inc. of Redmund Wash., might try the &lsquo;Administrator&rsquo; account. Default account names and passwords greatly reduce the amount of work required for the hacker to gain illicit entry to a system. Hackers may use software attacks to obtain passwords by copying password files. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Users often reveal their passwords accidentally by writing them down or by being observed during password entry. Some may deliberately disclose their passwords to a colleague so he or she can carry out a task on the user&apos;s behalf. Others will use the names of pets, family members, birthdays, etc., in order to make them memorable. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> Unfortunately, this also makes them easier for others to guess. Most computer systems allow an administrator to define the type of passwords to be used. However, the more complex the requirements are, the more likely the user is to write it down and display it conspicuously near the terminal, simply because the user cannot remember it. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> Many organizations have relied on the logon name and password approach for their internal networks, because for most of these organizations, most potential hackers are internal employees who are not likely to do significant damage to the corporation. However, as these organizations allow access from outside the company, using the Internet <highlight><bold>25</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art)&mdash;or other networks&mdash;sole reliance on logon names and passwords can ultimately lead to a total breach of security and all its consequences. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> Some corporations have also used hardware keys (also known as &ldquo;dongles&rdquo;) connected to each computer terminal to identify users and prevent unauthorized access. While this is an improvement over the simple logon name and password approach, these can usually be circumvented fairly easily by a hacker who examines what the hardware key does and emulates it in software. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Digital Identifiers (Digital IDs), Digital Certificates and Trusted Third Party Certificate Authorities (TTPCA) are more sophisticated methods used in the industry to enhance identification and security over the Internet. There are various industry standards associated with this technology, the most notable at this time being ANSI standard X.509 version 3. For the purposes of this discussion, the terms Digital IDs and Digital Certificate are used interchangeably. A Digital Certificate is a series of characters containing an identifier and usually other verification information. The certificate or id may be stored in a computer file&mdash;as seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), at disk <highlight><bold>03</bold></highlight> connected with a computer terminal <highlight><bold>02</bold></highlight>, or on some other memory device such as a smart card. When the id is read by the appropriate software it is possible to use that id for identification purposes. Usually these ids are constructed in such a way that if they are tampered with and any of the characters are changed the reading software will confirm this and inform the requesting software. Thus, the techniques currently in use are sophisticated enough to insure that a certificate is complete and unaltered. Thus, they also provide an excellent basis for encryption of information. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> However, digital certificates can be copied from a computer terminal <highlight><bold>02</bold></highlight> such as the one shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), and used to impersonate the user. They can also be stolen remotely while the user is using the Internet. For example, a hacker at terminal <highlight><bold>13</bold></highlight> can use the Internet <highlight><bold>25</bold></highlight> and communications networks <highlight><bold>30</bold></highlight> and <highlight><bold>10</bold></highlight> to find and copy a certificate stored on a disk at personal computer terminal <highlight><bold>02</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Trusted Third Party Certificate Authorities (TITPCA) can be used to create and issue digital certificates for a company. To obtain a certificate from a certificate authority usually requires proof of identity. The certifying authority then uses its own digital certificate to generate one for the requestor. The degree of stringency and cost varies from authority to authority. At the highest levels of security, it can take several months to obtain one, and require high levels of proof of identity as well as expense. Certificates for large corporations for example, can cost as much as $10,000 USD. At the other extreme, some companies will issue them for as little as $10 and require no proof of identity. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> If a user holds a certificate and believes it may have been stolen or compromised then it informs the certificate authority which will usually revoke the user&apos;s current certificate and issue it another one. Certificates thus offer a higher degree of protection, but are still fairly vulnerable, either through copying or interception of transmissions. In theory, a check should be made with the appropriate Certificate Authority before the customer relies on the certification. The Certificate Authority might have already revoked the certificate. In practice this is a step that many application programs fail to take when certificates are used. Detection of the theft or interception may not take place until after some significant damage has occurred. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> As mentioned above, smart cards can also be used to enhance identification. Some of these are similar to magnetic strip credit cards which can be read by insertion or swiping in a card reader. Smart cards are usually used in conjunction with some other type of user input, such as name, password, or Personal Identification Number (PIN) number. The simplest cards are low cost but may be easily duplicated. More complex smart cards have-built-in data storage facilities and even data processing facilities in the form of embedded computer chips allowing additional user information to be stored, thus providing a higher level of user verification. These tend to cost more and be more difficult to duplicate. The most secure cards have very sophisticated verification techniques but include a higher cost per individual user. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> Another method of identification uses simple fixed system component serial numbers. In the example of <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), a computer manufacturer, (such as Intel) of a personal computer processor chip such as that shown as terminal <highlight><bold>05</bold></highlight>, may have embedded a serial number in the processor. This number can then be read to identify that particular personal computer terminal <highlight><bold>05</bold></highlight>. While this tends to be much more specific at identifying a terminal, it also raises privacy questions, since the terminal <highlight><bold>05</bold></highlight> can be identified by anyone using appropriate methods over the Internet. This has led to the creation of a software program that switches off the serial number facility. This approach to identification thus creates some concerns about privacy and also about the ability for the feature to be switched on and off without the user&apos;s knowledge. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> Along similar lines, Internet Protocol (IP) addresses can be used for identification with systems using the Terminal Control Protocol/Internet Control Protocol (TCP/IP) communication protocol of the Internet. To be part of such a TCP/IP network requires that each computer have a unique IP address, using a specified format. Each IP computer, in turn, is a member of a domain. Domains can be part of another network, as a subnet or can even contain subnets. These IP properties are exposed during every network access. Basic firewall systems <highlight><bold>15</bold></highlight>, as seen in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art) use these properties to allow or refuse access to a computer system. Computer users of the AMERICA ONLINE&trade; (AOL&trade;) internet service, from America Online, Inc. of Dulles, Va., for example, are all members of the AOL&trade; domain. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> Many companies and Internet Service Providers (ISP) such as AOL&trade; only allow Internet access through a proxy server. The IP address that appears when proxies are used will be that of the proxy server machine. For users of AOL, for example, AOL&trade;&apos;s proxy server IP address will be the only IP form of identification for the many millions of users. This is not conducive to discrete identification. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Proxy servers may also be used by hackers to reach a user&apos;s computer. Hackers, for example, can impersonate an IP address, until they find an IP address of the user&apos;s that works for their purposes. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> Biometric identification techniques are now becoming available, such as fingerprints, voiceprints, DNA patterns, retinal scans, face recognition, etc. While the technology exists in many cases to use this type of information, it is usually not presently available in a practical form or is too expensive for many applications. Many hackers will simply view it as a challenge to find ways to copy, intercept, or fake these forms of identification. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> In addition to the identification problems outlined above, companies seeking to use the Internet and the web for commercial purposes, also need to control the creation, modification and deletion of data that is requested or used on a website or network location. In the example shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), a corporate website <highlight><bold>35</bold></highlight> (usually composed of a computer system, operating system software, webserver software and web application software) may have valuable confidential information stored on local memory such as disk <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> Computers hold programs and data in objects usually called files or data sets. As seen in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> (Prior Art), files <highlight><bold>72</bold></highlight> and <highlight><bold>74</bold></highlight> are usually organized logically in folders <highlight><bold>70</bold></highlight> that are, in turn referenced by directories <highlight><bold>65</bold></highlight>&mdash;all of which is stored physically on local memory such as disk <highlight><bold>40</bold></highlight>. In most file structures provided by present day operating systems, folders can also be placed inside other folders or directories, allowing files to be logically grouped together on a disk <highlight><bold>40</bold></highlight>, just as they might be stored in cardboard folders in file cabinets if they were physically kept on paper. The authority to use a computer&apos;s files is based on identification of the user and the permissions and rights that have been given to that user, usually by a system administrator. For example, as seen in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> (Prior Art) an operating system might have the scope of permissions and rights outlined in table T<highlight><bold>1</bold></highlight>. For these files a user might be denied any access which would be indicated at line <highlight><bold>80</bold></highlight> of table T<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> If this same security profile typing is applied to web pages, as it is by many websites today, a requestor without the proper permissions receives messages such as those shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference> (Prior Art) at <highlight><bold>100</bold></highlight> and <highlight><bold>105</bold></highlight>. In some instances, messages such as these may alert a hacker to the kinds of information that require more rights, and provoke him or her into spending more time attempting to gain illicit access. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> One approach to data integrity is provided by Virtual Private Networks (VPNs), which were conceived as a method of providing more secure remote access to users. VPN permission levels closely resembled the same functionality and permission levels that local users of the computer or network would have had. VPNs create secure links between two (or more) computers, which identify each other and then create encrypted pathways between them using sophisticated encoding techniques. Once the links have been created, they may be regarded as nearly hacker-proof for all practical purposes. However, while VPNs can create secure links between computers and/or terminals on a network, the link may be based on client identification methods that are vulnerable to attack, such as the logon name and password approach, mentioned above. Thus VPNs can be subverted by false identifications into creating confidential sessions with a hacker. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Firewalls are another form of network security that have been developed to address data integrity. Firewalls are usually essential requirements for any computer or computer network which can be accessed remotely. A firewall is typically a computer system placed between two networks and connected to both. One of the networks is usually an internal corporate network which is reasonably secure. The other network is usually a public network, such as the Internet, which may be fraught with peril&mdash;at least from a security viewpoint. The software in the firewall computer usually provides protection from certain kinds of intrusions into the internal network by: </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> denying service, </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> closing off access to internal ports or computers, </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> denying access to certain protocols, or </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> filtering messages (examining the content of a message to determine whether or not to accept it). </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art), computer <highlight><bold>15</bold></highlight> might be a firewall computer which is placed between terminals <highlight><bold>00</bold></highlight> and <highlight><bold>02</bold></highlight> on private network <highlight><bold>10</bold></highlight> and the Internet <highlight><bold>25</bold></highlight> and public communication links <highlight><bold>30</bold></highlight>. The internal, private network is considered the &ldquo;clean&rdquo; network, and the external, public one the potentially &ldquo;dirty&rdquo; one. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> While firewalls fend off many attacks, some forms of attack can be difficult to detect, such as file deposition attacks, in which an internal computer or system is gradually filled with unwanted data which will eventually affect performance or even stop the computer or network from working. Since most current firewall technologies will detect and prevent large files being uploaded onto an internal computer or network, a knowledgeable hacker will upload a number of very small files within the size acceptable to the firewall, eventually causing the computer&apos;s disk storage space to become insufficient and the system to degrade or fail. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> A trojan is an extreme example of a file deposition attack&mdash;the file being deposited is a program that appears useful but will in fact damage or compromise data integrity and system security when it is used. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> No matter how effective a firewall or VPN connection is, it is likely that a determined intruder can find a way to access a website for nefarious purposes. In a sense, the protocol of the Internet itself abets this, particularly its HTTP (Hypertext Transfer Protocol) and related protocols. This is the method used by websites on the worldwide web to publish pages to a web browser at a user&apos;s personal computer terminal. Uniform Resource Locators (URLs) are used to implement this. As seen in <cross-reference target="DRAWINGS">FIG. 4</cross-reference> (Prior Art), block <highlight><bold>110</bold></highlight>, the URL describes where to find and how to use a resource on the Internet. In the example of <cross-reference target="DRAWINGS">FIG. 4</cross-reference> (Prior Art), the &ldquo;http://&rdquo; indicates that the resource must be accessed using http protocol. &ldquo;www.w3.org&rdquo; is the Internet name of the computer on which the page is to be found and along with its web root directory. &ldquo;Addressing&rdquo; is a directory found in the web root directory, and &ldquo;URL&rdquo; is a directory found in the directory called &ldquo;Addressing&rdquo;. The page being published is found in the directory &ldquo;URL&rdquo; and the page name is &ldquo;Overview.html&rdquo;. This general structure applies to all URLs and enables anyone with a web browser to reach information on the Internet. Thus, any website must at least have a web root directory if it is to be accessed over the Internet. This means that hackers can find any website on the Internet and access web root directories. Once a web root directory is found, hackers can usually use port scanners or other techniques to locate the vulnerable areas of a website and deploy attacks against them or copy them for illicit purposes. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> As mentioned above, file deposition attacks can be used to slow down, to subvert an application, or to completely disable a website or system. A hacker, for example, can take an initial, legitimate web page and replace it with a page of the same name that asks for improper actions or allows access to confidential data. This affects the third function of security, namely availability. While a number of technologies such as redundant computer and disk systems have been developed to maintain high availability of systems and networks, sabotage by hackers or others can bring whole systems down. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> Most current security systems and methods also embody some assumptions about would-be intruders. For example, many systems will deny access to an intruder once he or she has been detected. While the system designers know that this often does not deter an intruder, but may actually provoke one, an assumption of this approach is that the intruder who has been detected knows he or she will have to work harder and might give up to search for other prey. In present-day cryptography, for example, it is assumed that most ciphers or encryption techniques can be decoded or decrypted, given a sufficient amount of time, money, and computer &ldquo;horsepower.&rdquo; In other words, it is extremely difficult to make a security system unbreakable, but it can be made more difficult and costly to break. Implicit in these approaches is a defensive posture that tries to build computer systems and networks that are impregnable fortresses. They often fail to take into account the fact that telling an intruder it has been caught and denying access, in many cases provides valuable information to the intruder about which of its tools and attack plans are ineffective. The intruder who breaks in for amusement may actually regard these measures as a challenge. The criminal can use them for information. </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> It is an object of the present invention to provide a security system that positively identifies an authorized client. </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> It is another object of the present invention to provide a system for detecting interlopers. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY </heading>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> These and other objects are achieved by a system for providing electronic security over a network through an extensible positive client identifier (EPCI), working with a positive information profiling system (PIPS), pseudo uniform resource locators (PURLs) to assist in providing data integrity, a virtual page publication system (VPPS), and an active security responder, (ASR). The extensible positive client identifier (EPCI) system creates a unique client identification key and continually self-evaluates the key based on unique system signature data. The positive information profiling system implements account profiles for all content and clients so that pages of information can be generated and matched to the data requested as well as the requestor. The virtual page publication system VPPS of the invention does not store pages permanently in the root directory of the site but instead creates temporary web pages dynamically containing the level of information resulting from the client identification, PIPS, and PURL evaluations. The virtual page is sent, (in encrypted form if this option has been selected or if this option is required by the PIPS profile), to the requestor and exists only for the time necessary to send it. The active security responder (ASR) controls the overall operation of the present invention. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS. </heading>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a block diagram of the present invention. </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> (Prior Art) is a block diagram of prior art web page technology. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> (Prior Art) is a block diagram of typical directories and error messages of the prior art. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> (Prior Art) is a block diagram of a standard uniform resource locator (URL) of the prior art. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4B</cross-reference> is a block diagram of a Pseudo Uniform Resource Locator (PURL) of the present invention. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a block diagram of the extensible positive client identifier of the invention in operation at a client terminal. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> is a table showing the elements of a Client Identifier Key (CIK) of the present invention. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a block diagram showing sample numeric values for a client identifier key (CIK). </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a flow diagram of the extensible positive client identifier of the invention. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> is a flow diagram of the PURLs processing of the invention. </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 10 and 11</cross-reference> are flow diagrams of the Virtual Page Publication System (VPPS) processing of the invention. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a flow diagram of the setup for the invention at a network location. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 13 and 14</cross-reference> are flow diagrams of the Positive Information Profiling System (PIPS) of the present invention. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15</cross-reference> is a block diagram of an illustrative screen display used by the PIPS processing of the invention. </paragraph>
<paragraph id="P-0059" lvl="0"><number>&lsqb;0059&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> is a block diagram showing the invention configured for use by multiple different entities. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17</cross-reference> is a block diagram of typical contents of a storage mechanism at a client terminal site. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18</cross-reference> is a block diagram of illustrative Client Identification Keys (CIK) generated by the present invention. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 19</cross-reference> shows tables illustrating different types of security levels used by the present invention. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE INVENTION </heading>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, an overview of the present invention is shown. User computer terminals <highlight><bold>00</bold></highlight> and <highlight><bold>05</bold></highlight> are shown connected by public communications lines <highlight><bold>30</bold></highlight> to the Internet <highlight><bold>25</bold></highlight>. Also shown is a website <highlight><bold>35</bold></highlight>, which is accessible over the Internet <highlight><bold>25</bold></highlight>. In the embodiment shown, website <highlight><bold>35</bold></highlight> is a host computer controlled by operating system <highlight><bold>38</bold></highlight>, webserver <highlight><bold>37</bold></highlight> and the present invention&apos;s Active Security Responder (ASR) <highlight><bold>36</bold></highlight>. Disk storage <highlight><bold>40</bold></highlight> is shown connected to website <highlight><bold>35</bold></highlight> and containing only a web root <highlight><bold>42</bold></highlight> and, optionally, dummy website pages. ASR <highlight><bold>36</bold></highlight> is in communication over private network lines <highlight><bold>10</bold></highlight> with another computer <highlight><bold>39</bold></highlight>, which is running the present invention&apos;s pseudo URLs&mdash;PURLs <highlight><bold>39</bold></highlight><highlight><italic>a</italic></highlight>, its positive information profiling system PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>and its virtual page publication system VPPS <highlight><bold>39</bold></highlight><highlight><italic>c. </italic></highlight></paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, ASR <highlight><bold>36</bold></highlight> controls all the functions of web server <highlight><bold>37</bold></highlight>, including: </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> intercepting all requests for web pages and web page components; </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> examining the request for evidence of interception or impersonation; </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> validating the client and evaluating the client&apos;s profile; </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> evaluating a page profile for the requested PURL; </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> carrying out any actions associated with the client profile or page profile; </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> preparing and filing any logging or auditing information as required; </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> publishing the information selected by the above process as the requested web page using VPPS <highlight><bold>39</bold></highlight><highlight><italic>c</italic></highlight>, and </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> using VPPS to examine the web server file system on storage disk <highlight><bold>40</bold></highlight> for recently created files to be either deleted or stored in an &ldquo;isolation ward&rdquo; for further examination. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> In the embodiments shown, the operating system is Microsoft&apos;s WINDOWS NT&trade; system and the web server is Microsoft&apos;s INTERNET INFORMATION SERVER IIS&trade; server using PC compatible processors or workstations.Those skilled in the art will appreciate that other computers, storage systems, operating systems and web servers or networking techniques could be used without deviating from the spirit of the invention. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> Turning briefly to <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, it can be seen that a requesting client terminal <highlight><bold>00</bold></highlight> typically includes a personal computer or workstation controlled by an operating system <highlight><bold>01</bold></highlight>, a web browser <highlight><bold>02</bold></highlight> and the present invention&apos;s extensible positive client identifier software EPCI <highlight><bold>03</bold></highlight> communicating over public communications lines <highlight><bold>30</bold></highlight> with Internet <highlight><bold>25</bold></highlight>. Those skilled in the art will appreciate that a terminal <highlight><bold>00</bold></highlight> or even a host computer <highlight><bold>35</bold></highlight> can be any device capable of communication over a network to send and receive data&mdash;from handheld wireless devices to computer mainframes. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> Similarly, those skilled in the art appreciate that the functions provided by operating systems and web browsers can be replaced by other software, such as custom software without deviating from the spirit of the present invention. Similarly, while the embodiments shown assume the use of a public Internet network, those skilled in the art will appreciate the it the present invention can also be used in private, internal networks such as internal Wide Area Networks or Local Area Networks (WANs and LANs), or intranets or extranets. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the first request sent to it from a terminal is evaluated by ASR <highlight><bold>36</bold></highlight> as a public request and the appropriate public web page is returned to the client with an instruction for the client to send its client identifier key (CIK) with the next request for information. In the embodiments shown, every page sent by ASR <highlight><bold>36</bold></highlight> will contain the instruction to send a CIK identifier. If the client has no EPCI <highlight><bold>03</bold></highlight> software installed at its terminal <highlight><bold>00</bold></highlight>, then ASR <highlight><bold>36</bold></highlight>&apos;s request for the client to send a CIK key is ignored by the other software at terminal <highlight><bold>00</bold></highlight>, and further communication between that terminal <highlight><bold>00</bold></highlight> and ASR <highlight><bold>36</bold></highlight> is public, although as mentioned, all the pages sent by ASR <highlight><bold>36</bold></highlight> will contain a &ldquo;send your CIK&rdquo; instruction. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> If the EPCI <highlight><bold>03</bold></highlight> software has been installed at the user terminal <highlight><bold>00</bold></highlight>, ASR <highlight><bold>36</bold></highlight> of the present invention will generate a public response page for the first request from terminal <highlight><bold>00</bold></highlight>, along with instructions to terminal <highlight><bold>00</bold></highlight> to send its client identification key&mdash;CIK&mdash;with the next request. If the client at terminal <highlight><bold>00</bold></highlight> does have EPCI <highlight><bold>03</bold></highlight> software, it will examine the request to send a CIK to see if the client at terminal <highlight><bold>00</bold></highlight> has a relationship with the requesting server ASR <highlight><bold>36</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> If the EPCI <highlight><bold>03</bold></highlight> software at terminal <highlight><bold>00</bold></highlight> determines there is no relationship, then the request to send its CIK identifier is ignored by EPCI <highlight><bold>03</bold></highlight> and all further communication between ASR <highlight><bold>36</bold></highlight> and terminal <highlight><bold>00</bold></highlight> is handled on a public basis, even though in the embodiment shown, ASR <highlight><bold>36</bold></highlight> continues to send a request for terminal <highlight><bold>00</bold></highlight> to send its CIK identifier. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> If EPCI <highlight><bold>03</bold></highlight> at terminal <highlight><bold>00</bold></highlight> determines that there is a relationship (by verifying that in its own copy of the CK, then EPCI <highlight><bold>03</bold></highlight> validates itself, as described in more detail below, and provides ASR <highlight><bold>36</bold></highlight> with its CIK, thereby allowing ASR <highlight><bold>36</bold></highlight> to identify the client at terminal <highlight><bold>00</bold></highlight>. Once both have established that a relationship exists between them, the next and subsequent web pages will be sent to terminal <highlight><bold>00</bold></highlight> according to the appropriate evaluation of that client&apos;s security levels and the levels of the data requested, as will also be described in more detail below. In the embodiment shown, this also means the earlier sent public information will be refreshed with the information the security levels entitle that client to receive. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> shows the typical contents of a client identifier key (CIK) generated by EPCI software <highlight><bold>03</bold></highlight>. Each field, such as the Authorizer Personalization Key (APK) for this relationship, or the Authorizer Client Activation Key (ACAK) for this relationship, is given a numeric value by EPCI software <highlight><bold>03</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7</cross-reference> illustrates a partial hypothetical CIK <highlight><bold>120</bold></highlight> in numeric form. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, if the user terminal making the request is a valid one, its EPCI <highlight><bold>03</bold></highlight> software will self-check its client identifier key ( CIK <highlight><bold>120</bold></highlight>) as described in more detail below), and return a newly generated CIK <highlight><bold>120</bold></highlight> to ASR <highlight><bold>36</bold></highlight>. In the embodiment shown, CIK <highlight><bold>120</bold></highlight> contains several items that are unique to this particular hardware and software configuration of user terminal <highlight><bold>00</bold></highlight>. The effect of this is that the valid client terminal <highlight><bold>00</bold></highlight> will self-check itself and identify itself to ASR <highlight><bold>36</bold></highlight> as a valid client. If a hacker or interloper has stolen the EPCI <highlight><bold>03</bold></highlight> software, and installed it on terminal <highlight><bold>13</bold></highlight>, that same software will generate a new CIK for terminal <highlight><bold>13</bold></highlight> which uses fields that are unique to the hardware and software configuration of terminal <highlight><bold>13</bold></highlight>, compare it to the previous CIK created for terminal <highlight><bold>00</bold></highlight>&apos;s unique hardware and software configuration and silently identify itself to ASR <highlight><bold>36</bold></highlight> as a hacker or impersonator by setting such an indicator in the new CIK it generates. At that point, ASR <highlight><bold>36</bold></highlight> will treat requests from terminal <highlight><bold>13</bold></highlight> according to the host server&apos;s security policy for impersonators. In the embodiment shown, the security policy selected uses a dummy website containing innocuous public information to satisfy any more requests from the hacker at terminal <highlight><bold>13</bold></highlight>. In this example, it might appear to the impersonator at terminal <highlight><bold>13</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference> that he or she is in communication with a website <highlight><bold>50</bold></highlight>, which is serving webpages stored on dummy disk <highlight><bold>55</bold></highlight> or on disk <highlight><bold>40</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> This makes it appear to the hacker that he or she has been successful, when that is not in fact the case. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The embodiments shown enable an entity to implement security policies which do not reveal the detection of impersonation to the impersonator. In the embodiments shown, the present invention augments security policies that make it appear to an interloper at almost every step that he or she has been successful, when, in fact, the opposite is true. Those skilled in the art will appreciate that some of the more obvious policies, such as informing the intruder that he or she has been detected and denying access could be implemented as well at various stages without deviating from the spirit of the invention. For example, a user might wish to deny access in a manner visible to the interloper without indicating to the interloper that he or she has been detected. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> Now turning to <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> (Prior Art), a standard URL <highlight><bold>110</bold></highlight> is shown. This particular URL points to the location &ldquo;overview.html&rdquo; which is the address of a web page stored on disk <highlight><bold>40</bold></highlight> of an ordinary web server. <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, in contrast shows a pseudo-URL, PURL <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>of the present invention which appears identical to the standard URL of <cross-reference target="DRAWINGS">FIG. 4A</cross-reference> (Prior Art), but does not point to any web page at all. Instead, it comprises a list of tasks stored in a private location to be performed in response to this request and the user&apos;s and the data&apos;s profiles. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> The present invention includes a positive information profiling system PIPS, which enables the entity using the invention to create an account profile for all content and all clients so that data can be matched to requests for information. PIPS is described in more detail below. For the purposes of <cross-reference target="DRAWINGS">FIG. 4</cross-reference>B, however, PURLs evaluation PURLS <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>interacts with PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>to determine what information can be sent to a particular requesting client. If the request from the user&apos;s PC terminal is a valid request for employee salary data, from a current employee, then the client profile for that employee might indicate that he or she has read-only access to his or her own salary data. If the employee requests data about the CEO&apos;s salary data, PURL <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>may apply the corporation&apos;s profile for that employee to deny access to the CEO&apos;s salary, and instead supply the requesting employee&apos;s salary data. It would appear to the employee that the CEO and the employee have the same salary, when this is not so. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> In the same way, PURLs can be used to select innocuous public data to be returned to a detected interloper, so that the interloper may be led to believe he or she has successfully breached the site. For example, if the interloper requests the CEO&apos;s salary data and the entity owning the website is a publicly held company, the latest publicly known data about the CEO&apos;s salary might be displayed to the interloper, while the CEO requesting his or own salary might be given the most current values. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> Turning back to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, virtual page publication system VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>of the invention provides the pages or content to be served in response to the request as determined by the PURLs <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>and PIPs <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>evaluations of the request and the data. VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>of the invention generates the proper responses and stores them as temporary pages or data on disk <highlight><bold>40</bold></highlight>, which is accessible to web server <highlight><bold>37</bold></highlight>. The virtual page is sent to the requesting client as the requested URL (and in encrypted form, if appropriate) and deleted from the system <highlight><bold>35</bold></highlight> and its associated storage disk <highlight><bold>40</bold></highlight>. The source information used to generate virtual pages is stored at a location inaccessible to the web. In the embodiment shown this is computer <highlight><bold>39</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, which is connected by a private network connection <highlight><bold>10</bold></highlight> to host computer <highlight><bold>35</bold></highlight>. In another embodiment, if the server machine has sufficient Random Access Memory (RAM)&mdash;internal memory accessible directly to the central processing unit (CPU)&mdash;or &ldquo;RAM disk&rdquo; facility, the information need not be stored at all but simply sent from RAM&apos;s internal memory. Those skilled in the art will appreciate that various types of media can be used for storing information other than those mentioned here. Magnetic Tapes, for example, or RAID disk systems, writeable CD-ROM disks, or flash memory and so on could be used. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> Still in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, once the temporary page files have been deleted from disk <highlight><bold>40</bold></highlight> which is accessible to the Internet, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>keeps two security vigils. First, it checks to see if there are any files, other than the web root and the dummy security pages (if present) that are more than some specified amount of time old. If it finds such a file, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>can be directed by the security policy for that host to either delete such a file completely or move it to an &ldquo;isolation ward&rdquo; area specified by the user so it can be checked. This significantly lowers the risk of successful file deposition attacks on the web site. Files other than the ones that are supposed to be there (web root and dummy pages) are either deleted or, in effect, moved into &ldquo;quarantine&rdquo; and deleted from disk <highlight><bold>40</bold></highlight>. In the embodiment shown, the invention also checks all files on disk <highlight><bold>40</bold></highlight> to see if the valid ones have been changed in that predefined interval as well. If they have been changed, they may have been corrupted, so they, too are either deleted or moved into isolation areas and, if so specified, the last valid content substituted for them. If the modified files so detected are those belonging to the web root or dummy pages, ASR <highlight><bold>36</bold></highlight> of the invention can also be guided by the security policies for the website in the handling of them. If no time has been specified by the user for the predefined interval, a default time, such as 60 seconds is used. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> The second type of security vigil carried out by VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>is for any new folder or directory created on the relevant storage disk(s). In the embodiments shown, these are deleted or moved to quarantine immediately, as soon as they are detected, without waiting for any interval. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Still in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, while computer system <highlight><bold>35</bold></highlight> here is shown as a single website host computer, the present invention can be used to manage security for several different networks and host computers at one or more locations. This is shown more clearly in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. There it can be seen that one computer site <highlight><bold>35</bold></highlight><highlight><italic>f </italic></highlight>might be a multiple website host which provides web services to companies x, y and z, over private networks <highlight><bold>10</bold></highlight><highlight><italic>x</italic></highlight>, <highlight><bold>10</bold></highlight><highlight><italic>y </italic></highlight>and <highlight><bold>10</bold></highlight><highlight><italic>z</italic></highlight>. In this example, disk <highlight><bold>40</bold></highlight> contains web roots x, y, and z for the respective companies. Terminal <highlight><bold>00</bold></highlight> might be a terminal for an employee of company x, and terminal <highlight><bold>05</bold></highlight> might be one for an employee of company y. </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> In the embodiment shown, ASR <highlight><bold>36</bold></highlight> of the present invention establishes security for each company&apos;s website by building and managing the security relationships between the company information stored off the Internet and valid clients such as employees at terminal <highlight><bold>00</bold></highlight> making requests over the Internet. In this embodiment, each company uses its copy of ASR <highlight><bold>36</bold></highlight> (ASRx, ASRy or ASR z) to define its own security policies, access levels and procedures. While the examples discussed so far are directed to the Internet, those skilled in the art will appreciate that the present invention can also be used in private networks, such as internal corporate networks, or other forms of network systems. ASR <highlight><bold>36</bold></highlight> can also be installed on several machines at different sites for handling security for just one entity, as well. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> In addition, and still in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, the installation and use of ASR<highlight><bold>36</bold></highlight> creates no visible difference to the outside world. The websites or locations using its services will generally appear the same to external clients or requestors as they would if the invention were not installed. At the host web site(s), each entity using the invention does need to allocate security levels to information sources. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> In the embodiments shown, this allocation of security levels is done through the profiling system PIPS <highlight><bold>39</bold></highlight>. As seen in <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, each entity x, y, or z, is able to create its own secure profile information on its own systems which are not directly exposed to the Internet. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> At the outset of use, each entity using the invention installs ASR <highlight><bold>36</bold></highlight> software at the website host it is using (if the ASR <highlight><bold>36</bold></highlight> software is not already present) and the invention&apos;s EPCI <highlight><bold>03</bold></highlight> software at each client terminal <highlight><bold>00</bold></highlight> which is to be allowed access beyond the publicly available data. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> With reference now to <cross-reference target="DRAWINGS">FIG. 12, a</cross-reference> block diagram of the setup of ASR <highlight><bold>36</bold></highlight> is illustrated. At block <highlight><bold>400</bold></highlight>, the ASR <highlight><bold>36</bold></highlight> software is setup for this entity. In the embodiments shown, each entity&apos;s copy of ASR <highlight><bold>36</bold></highlight> is given an authorized server activation key (ASAK). An ASAK is a unique string of <highlight><bold>48</bold></highlight> or more characters supplied with the product license for that entity. It is used to activate the configuration of the invention for that entity. A request to enter the ASAK is made when the ASR <highlight><bold>36</bold></highlight> product is first used. A further request is made of the purchasing entity to enter <highlight><bold>30</bold></highlight> or more characters of the entity&apos;s own devising. This is called the client confidence key, or CCK. In the embodiments shown, this could be any kind of key which the corporate entity believes will assist in uniquely identifying it. In the embodiments shown, this client confidence key CCK is encrypted as it is entered and kept in encrypted form by ASR <highlight><bold>36</bold></highlight>. This means that ASR <highlight><bold>36</bold></highlight> does not &ldquo;know&rdquo; the unencrypted form of the CCK, and thus minimizes the risk of &ldquo;backdoor&rdquo; access to protected information even by the licensor of the product. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> Next, at step <highlight><bold>405</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 12</cross-reference>, ASR <highlight><bold>36</bold></highlight> will generate its own authorized personalization key (APK) for this corporate entity by combining the ASAK and the CCK. The APK is unique to each installation of ASR <highlight><bold>36</bold></highlight> of the invention and is used to: </paragraph>
<paragraph id="P-0097" lvl="2"><number>&lsqb;0097&rsqb;</number> differentiate one ASR <highlight><bold>36</bold></highlight> server from another ASR <highlight><bold>36</bold></highlight>; </paragraph>
<paragraph id="P-0098" lvl="2"><number>&lsqb;0098&rsqb;</number> provide a basis for generating unique authorized client activation keys (ACAKs) for clients of that ASR <highlight><bold>36</bold></highlight>; and </paragraph>
<paragraph id="P-0099" lvl="2"><number>&lsqb;0099&rsqb;</number> provide a unique basis for encryption for communication with clients of that ASR <highlight><bold>36</bold></highlight>, if desired. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In the embodiments shown, the user entity (here corporation x, y or z) is required to store a copy of its CCK and ASAK for use if there is ever a need to re-install the system. If the APK that is generated for an ASR <highlight><bold>36</bold></highlight> is ever changed, then none of the clients will have privileged access until they have all been issued with new ACAKs based on the changed APK. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> Also in the embodiments shown, an authorized client activation key, ACAK must be generated for each client and will contain the APK and a unique identifier for that client. A new client is issued client identification key, (CIK) generation software and is also given its unique ACAK. When the client first runs the CIK generation software at its client terminal <highlight><bold>00</bold></highlight>, it is prompted to enter its ACAK. The CIK generation software at that client terminal <highlight><bold>00</bold></highlight> then creates a unique CIK <highlight><bold>120</bold></highlight> for that client terminal and exits. No further client activation is required. </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> In the embodiments shown, this procedure may be repeated by the user for relationships with any number of different servers such as ASRy or ASRz of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. The same CIK generation software must be used but the ACAK for each different server ASR <highlight><bold>36</bold></highlight> must be different. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, some of the elements that can be used by the present invention&apos;s EPCI <highlight><bold>03</bold></highlight> software installed at terminal <highlight><bold>00</bold></highlight> to create a CIK <highlight><bold>120</bold></highlight> are shown. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In this example, it is assumed a client who is using the EPCI <highlight><bold>03</bold></highlight> software at his or her client terminal <highlight><bold>00</bold></highlight> is also using a personal computer C<highlight><bold>00</bold></highlight> as his or her terminal <highlight><bold>00</bold></highlight>. In exaggerated form, a disk D<highlight><bold>00</bold></highlight> is shown which is attached to personal computer C<highlight><bold>00</bold></highlight>. Disk D<highlight><bold>00</bold></highlight>, in turn, contains a directory Dir<highlight><bold>00</bold></highlight>, which contains information about this particular computer C<highlight><bold>00</bold></highlight> and its installed hardware and software components. For example, at line <highlight><bold>001</bold></highlight> information such as the central processor unit (CPU) serial number of computer C<highlight><bold>00</bold></highlight> is stored, along with identification about the latest Read-Only-Memory (ROM) Revision made to that CPU. In addition, this example shows at line <highlight><bold>002</bold></highlight> that computer C<highlight><bold>00</bold></highlight> has <highlight><bold>32</bold></highlight> megabytes of memory built-in and has configured its memory management to treat that as <highlight><bold>128</bold></highlight> megabytes of virtual memory. The volume serial number of disk D<highlight><bold>00</bold></highlight> is given at line <highlight><bold>003</bold></highlight>, along with an indicator of its type&mdash;HD for hard drive, as distinguished from removable media drives, such as floppy disk drives. Dir <highlight><bold>00</bold></highlight> also indicates at line <highlight><bold>004</bold></highlight> that this computer is using Operating System version 9.6 which was installed on Nov. 9, 1999. Dir <highlight><bold>00</bold></highlight> also shows, at line <highlight><bold>005</bold></highlight> that sound capability from ABC sound has been installed, with it version number and serial number. Next, at line <highlight><bold>006</bold></highlight>, the particulars of the type of video display are given. Finally, starting at lines <highlight><bold>007</bold></highlight> and <highlight><bold>008</bold></highlight>, a list of the software programs installed on that computer, possibly with their serial numbers and installation dates is stored. Those skilled in the art will appreciate that other such identifying characteristics for a client terminal or client requester can be used without deviating from the spirit of the invention, </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> From the example of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, it can be seen that a considerable amount of information about this particular computer system C<highlight><bold>00</bold></highlight> is stored on disk D<highlight><bold>00</bold></highlight>. As mentioned earlier, it is also probable that the person using this system has his or her on logon name and password which is also stored somewhere in the system, depending on the type of operating system and local security used. Additionally, most present day computer systems whether handheld or mainframe are capable of keeping track of the current date and time at that computer and making that information available to programs running in that computer. If the computer is connected to a network such as an internal TCP/IP network, it also contains IP addressing information about itself. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> Now turning back to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>, it can be seen that the CIK generation software of the present invention makes use of some or all of this kind of information and more to create a client identification key, CIK <highlight><bold>120</bold></highlight>, that is unique to this particular user&apos;s installation, as illustrated in <cross-reference target="DRAWINGS">FIG. 6</cross-reference>&apos;s Table T<highlight><bold>2</bold></highlight>. As mentioned earlier, the first access from this client terminal <highlight><bold>00</bold></highlight> is usually a public access, in which terminal <highlight><bold>00</bold></highlight> does not send a CIK. ASR <highlight><bold>36</bold></highlight> decides whether a relationship with terminal <highlight><bold>00</bold></highlight> has been established by the setup processes described above. If a relationship has been established, ASR <highlight><bold>36</bold></highlight> will automatically refresh the web page previously sent as a public page to obtain the correct CIK <highlight><bold>120</bold></highlight> from the client at terminal <highlight><bold>00</bold></highlight>. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> This is shown in more detail in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, which is a flow diagram of the processing of EPCI <highlight><bold>03</bold></highlight> at terminal <highlight><bold>00</bold></highlight>. At step <highlight><bold>200</bold></highlight>, EPCI <highlight><bold>03</bold></highlight> receives a &ldquo;send your CIK&rdquo; request from ASR <highlight><bold>36</bold></highlight> running on the host/server machine. In the embodiments shown, every request for a page component is answered within an appropriate version of that page component plus a request for the client to send its CIK <highlight><bold>120</bold></highlight>. The request also contains the APK for that particular server ASR <highlight><bold>36</bold></highlight>. At step <highlight><bold>205</bold></highlight> EPCI <highlight><bold>03</bold></highlight> checks to see if there is a relationship with that particular server ASR <highlight><bold>36</bold></highlight>. It does so by taking the APK sent with the request and comparing it with its own copy contained in the client&apos;s CIK file created by the CIK generation software. A client will have the APK from each server ASR <highlight><bold>36</bold></highlight> that provided it with an ACAK. If there is no match, and therefore, no relationship, EPCI <highlight><bold>03</bold></highlight> does nothing, at step <highlight><bold>210</bold></highlight>. However, if there is a relationship, then EPCI <highlight><bold>03</bold></highlight> proceeds to step <highlight><bold>215</bold></highlight> to carry out any instructions from the host running the requesting ASR <highlight><bold>36</bold></highlight>. It should be noted here that the instructions can be as simple as &ldquo;reply with CIK&rdquo;, to commands to run several programs or tasks and then reply with CIK. That is, the step of carrying out instructions from ASR <highlight><bold>36</bold></highlight> sent from the host server machine can be used to install new software at terminal <highlight><bold>00</bold></highlight>, run other software, delete software or data, and so on. This step is not restricted solely to security checking. This feature provides entities using ASR <highlight><bold>36</bold></highlight> with significant options for communicating with or controlling the remote terminals. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Still in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, once any instructions have been carried out, EPCI <highlight><bold>03</bold></highlight> running at terminal <highlight><bold>00</bold></highlight> prepares a new system signature at step <highlight><bold>220</bold></highlight>. In the embodiments shown, a system signature is some extensible combination of the unique information stored locally at terminal <highlight><bold>00</bold></highlight>. That is, some combination of the information described in <cross-reference target="DRAWINGS">FIG. 17</cross-reference> about the particular configuration of terminal <highlight><bold>00</bold></highlight> is used to create the system signature. For example, and referring back to <cross-reference target="DRAWINGS">FIG. 17</cross-reference>, the system signature for this kind of computer C<highlight><bold>00</bold></highlight> might include the serial number of the hard drive shown at line <highlight><bold>003</bold></highlight>, the installation date of the operating system shown at line <highlight><bold>004</bold></highlight>, the sound card serial number shown at line <highlight><bold>005</bold></highlight>, and the version number of the DRAWPGM, shown at line <highlight><bold>008</bold></highlight>. Different types of computers might have different system signatures. In the embodiments shown, EPCI <highlight><bold>03</bold></highlight> provides positive identification of the client machine being used. However, a system administrator might wish to further authenticate the person using that machine by adding a logon and password field to the system signature, for consistency with other internal procedures. In addition, other elements can be used by the present invention to form a unique system signature, such as smart card data or biometric identifiers, and so on. </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, EPCI <highlight><bold>03</bold></highlight> checks at step <highlight><bold>225</bold></highlight> to see if the new system signature is the same as the old system signature stored in its CIK file. If it is, a new client identification key CIK <highlight><bold>120</bold></highlight> is created at step <highlight><bold>230</bold></highlight>, indicating that the self-evaluation done by EPCI <highlight><bold>03</bold></highlight> on this machine passed the test and at step <highlight><bold>240</bold></highlight>, the newly created CIK <highlight><bold>120</bold></highlight> is passed to ASR <highlight><bold>36</bold></highlight>. If the system signature is not the same as the old one from a valid client, a new CIK <highlight><bold>120</bold></highlight> is created which includes a pass or fail indicator (see CIKSTATUS at Table T<highlight><bold>2</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6</cross-reference>), and new CIK <highlight><bold>120</bold></highlight> is passed to ASR <highlight><bold>36</bold></highlight> at the host. Note that this self-evaluation does not notify anyone at terminal <highlight><bold>00</bold></highlight> of the pass or fail status. In other words, the self-evaluation is done &ldquo;silently&rdquo; as it were. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> Turning momentarily to <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, examples of passing and failing CIK&apos;s <highlight><bold>120</bold></highlight> are shown. At CIK <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>, the volume serial number of the hard drive D<highlight><bold>00</bold></highlight> attached to terminal <highlight><bold>00</bold></highlight> is shown in system signature S<highlight><bold>1</bold></highlight> as 890765, which matches the one shown in <cross-reference target="DRAWINGS">FIG. 17</cross-reference>. Assuming all the other portions of the system signature S<highlight><bold>1</bold></highlight> matched the original one, a PASS indicator E<highlight><bold>1</bold></highlight> is inserted into new CIK <highlight><bold>120</bold></highlight>-<highlight><bold>1</bold></highlight>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> Still in <cross-reference target="DRAWINGS">FIG. 18</cross-reference>, if a hacker has managed to copy the EPCI <highlight><bold>03</bold></highlight> software and the data transmitted from terminal <highlight><bold>00</bold></highlight>, for creating keys, when the bootlegged copy of EPCI and its files is installed at the bootlegger&apos;s terminal, it will create a new CIK <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, which uses the serial number S<highlight><bold>2</bold></highlight> of the hard drive attached to the bootlegger&apos;s terminal. This will not match the original system signature created for terminal <highlight><bold>00</bold></highlight> and passed from the host, so EPCI <highlight><bold>03</bold></highlight> will insert a fail indicator E<highlight><bold>2</bold></highlight> in the new CIK <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight> it generates. When the stolen software returns its new CIK <highlight><bold>120</bold></highlight>-<highlight><bold>2</bold></highlight>, the intruder security policy for that server ASR <highlight><bold>36</bold></highlight> is activated. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> Back in <cross-reference target="DRAWINGS">FIG. 8</cross-reference>, once the self-checking performed by EPCI <highlight><bold>03</bold></highlight> has been completed, the new CIK <highlight><bold>120</bold></highlight> is passed to the host computer <highlight><bold>35</bold></highlight>, at the next communication with ASR <highlight><bold>36</bold></highlight> on the host <highlight><bold>35</bold></highlight>. Thus, self-evaluation is performed by EPCI <highlight><bold>03</bold></highlight> each and every time any data or object or request from terminal <highlight><bold>00</bold></highlight> is made to ASR <highlight><bold>36</bold></highlight> at host computer <highlight><bold>35</bold></highlight>. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> Turning now to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, when ASR <highlight><bold>36</bold></highlight> receives a request for a data locator&mdash;in the embodiment shown, in uniform resource locator format&mdash;and CIK <highlight><bold>120</bold></highlight> from terminal <highlight><bold>00</bold></highlight>, it passes that information to pseudo uniform resource locator processing PURLS <highlight><bold>39</bold></highlight><highlight><italic>a</italic></highlight>. The flow diagram of <cross-reference target="DRAWINGS">FIG. 9</cross-reference> illustrates the processing performed by PURLS <highlight><bold>39</bold></highlight><highlight><italic>a</italic></highlight>. At step <highlight><bold>250</bold></highlight>, PURLS <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>for this entity receives the client request from terminal <highlight><bold>00</bold></highlight>, in this example. At step <highlight><bold>255</bold></highlight>, PURLS <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>extracts the client&apos;s CIK and passes that to the present invention&apos;s PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>program. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> Referring briefly to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>at this juncture performs a number of identity checks at decision blocks <highlight><bold>450</bold></highlight>, <highlight><bold>455</bold></highlight>, <highlight><bold>460</bold></highlight>, <highlight><bold>480</bold></highlight>, and <highlight><bold>485</bold></highlight>, checking the CIKSTATUS, system signature, ACAK, Session ID, and APK information. In the embodiments shown, reliance solely on the client CIK may not be sufficient for detecting a skilled hacker who learns how to construct a CIK. Checking other items such session id as well, provides additional safeguards. If the information fails any of these checks, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>proceeds to step <highlight><bold>465</bold></highlight>. At <highlight><bold>465</bold></highlight>, since identification has failed on one or more of the checks, the security logs of the present invention are updated. At step <highlight><bold>470</bold></highlight> the site identity is set to public for this response by PIPS <highlight><bold>39</bold></highlight><highlight><italic>b</italic></highlight>. Finally, now that an identity problem has been logged, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>carries out the security policy actions which the user has specified for the particular type of error detected. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> Still in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, if all the checks have shown successful identification, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>at step <highlight><bold>490</bold></highlight> updates its audit logs, and then evaluates client group, security group and security level data at step <highlight><bold>495</bold></highlight>. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> Turning briefly to <cross-reference target="DRAWINGS">FIG. 19</cross-reference>, it can be seen that the present invention allows each page and each client to have a predefined security level. The security level of a page must be matched by that of its intended recipient in order for the page to be published. In <cross-reference target="DRAWINGS">FIG. 19</cross-reference>, some examples of access levels are shown. Inclusive access table IN<highlight><bold>00</bold></highlight> illustrates a structure in which a higher level of security automatically includes all lower levels. Thus if a client has access level <highlight><bold>2</bold></highlight>, in table IN<highlight><bold>00</bold></highlight>, it will automatically have access to levels <highlight><bold>0</bold></highlight> and <highlight><bold>1</bold></highlight> as well. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> Another option&mdash;exclusive access&mdash;is shown in table EX<highlight><bold>00</bold></highlight>. There a client may have access to only one or two levels, but not to any others. For example, a client with access level B only has access to page level B. A client with access level AD has access only to page levels A and D. These two types could also be used in various combination to provide additional security options. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> Also turning now to <cross-reference target="DRAWINGS">FIG. 15, a</cross-reference> screen display of an account profile for a client is shown. In a similar fashion, a screen display for each page or section of the website can be used to create an account profile of the data secured by the present invention. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 13</cross-reference>, after the security levels of the client requestor and the security levels of the requested data have been evaluated at step <highlight><bold>495</bold></highlight>, the results of all this checking and evaluation are passed back to PURLS <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>at step <highlight><bold>500</bold></highlight>. At this point, the identity of the requestor has been verified (or not) and an appropriate level of response has been indicated, based on the security policy for that entity for that data. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, at step <highlight><bold>265</bold></highlight>, the requested PURL sent by the client terminal <highlight><bold>00</bold></highlight> is extracted from the request and, at step <highlight><bold>270</bold></highlight>, is sent back to PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>for processing. This portion of PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>processing is diagrammed in the flow diagram of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. There, at step <highlight><bold>505</bold></highlight>, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>selects the task(s) (contained in the request) that meets the client group, security group and security level data. As mentioned earlier, a PURL in the present invention is not the address of data or pages, as ordinary URLs are, but identifies a list of tasks to be performed. At step <highlight><bold>510</bold></highlight>, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>carries out those task(s) and constructs a list of information components which will eventually be displayed in a web page or similar result and then, at step <highlight><bold>515</bold></highlight>, PIPS <highlight><bold>39</bold></highlight><highlight><italic>b </italic></highlight>passes this information back to PURLS <highlight><bold>39</bold></highlight><highlight><italic>a. </italic></highlight></paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> Returning again to <cross-reference target="DRAWINGS">FIG. 9</cross-reference>, PURLS <highlight><bold>39</bold></highlight><highlight><italic>a </italic></highlight>receives this information and finds this list of valid components at step <highlight><bold>275</bold></highlight>. At step <highlight><bold>280</bold></highlight>, this list is passed to VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>of the present invention. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> Now referring to <cross-reference target="DRAWINGS">FIG. 10</cross-reference>, virtual page publication system VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>processing is shown. At step <highlight><bold>550</bold></highlight> the list of valid components is received from PURLS <highlight><bold>39</bold></highlight><highlight><italic>a</italic></highlight>. Using that data, at step <highlight><bold>555</bold></highlight>, VPPS prepares a temporary file containing one or more web pages and sends a copy of that temporary file to the web root. (Web root <highlight><bold>42</bold></highlight> of disk <highlight><bold>40</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>). Next, at step <highlight><bold>560</bold></highlight> VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>passes the name of that temporary file to the webserver (webserver <highlight><bold>37</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>), which will cause that page(s) to be delivered to the client as the requested data. Next, at step <highlight><bold>565</bold></highlight>, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>deletes the temporary file from the web root as soon as the data has been sent on its way. Thus, the web page only exists for a few milliseconds on disk <highlight><bold>40</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, which is exposed to the Internet. Those skilled in the art will appreciate that the pseudo locators and virtual publication methods of the present invention could be applied to other network and security systems, in which protected information is only to be given to valid requestors of it. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> Turning next to <cross-reference target="DRAWINGS">FIG. 11</cross-reference>, another feature of VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>processing is shown. Here, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>waits, at step <highlight><bold>580</bold></highlight>, some predefined interval specified by the user. In the embodiments shown the interval is usually some small multiple of the &ldquo;ping time&rdquo; for an average use. Those skilled in the art are aware that the TCP/IP protocol allows a terminal to send data to a server and measure the time it takes to get to the server, usually a few milliseconds. If the ping time is 10 milliseconds, the interval specified by the user to VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>might be 20 milliseconds. Usually it is an interval that is just long enough to let a valid message go through and the temporary file stored on the web root to be deleted. Once that interval has expired, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>checks at step <highlight><bold>590</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 11</cross-reference> to see if any new file has been created on the disk containing web root <highlight><bold>42</bold></highlight>. If VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>determines that a new file has been created and stored there it is automatically assumed to be suspect. Depending on the security policy for the website, VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>will either delete the file completely at Step <highlight><bold>595</bold></highlight> or move it to a &ldquo;safe&rdquo; area, isolated from both the Internet network and the user&apos;s internal network. In this way, file deposition attacks can usually be detected and dealt with immediately. VPPS <highlight><bold>39</bold></highlight><highlight><italic>c </italic></highlight>also checks to see if any of the legitimate files on the web root have been modified. If they have, they, too can be deleted or moved, and at the discretion of the user, the original state of the file can be restored or not. Those skilled in the art will appreciate that the interval used can be varied as circumstances or risk levels (or both) change. As mentioned above, in the embodiment shown, any new folders or directories are deleted or moved as soon as they are detected. Those skilled in the art will appreciate that different actions could be taken at this point, without deviating from the scope of the invention. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> Thus it can be seen that in the embodiments shown, the present invention ensures that all users of the network or system it monitors are managed and monitored throughout the duration of their sessions with the server at the host computer and that the information provided to them is appropriate to their pre-defined status. EPCI <highlight><bold>03</bold></highlight> authenticates the CIK at every access and web page component. The system as a whole is scalable for any number of client entities or number of relationships. It also verifies its own integrity, and reports success or failure through the audit and security logs. It can be used in combination with other security measures such as VPNs, Secure Socket Layer (SSL) technology which encrypts data sent between client and server computers, and X.509 Digital Certificates or Digital Ids. The client identification key is self-checking and aware of its environs so it ensures that if the client identification key is copied and used on another terminal, it will fail, and report the type of failure. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> The client identification key responds only to a server with which the client has a known and agreed upon relationship. With the embodiments shown, clients do not need to take special actions such as using logon or passwords. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> In the embodiments shown, ASR <highlight><bold>36</bold></highlight> requires that a client must first be enrolled on the secure system by creating a client account as described above. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> In the embodiments shown, the present invention is implemented in the C&plus;&plus;, VISUAL BASIC&trade; (from Microsoft, Inc.), and POWERBASIC&trade; (from POWERBASIC&trade; Inc. in Carmel, Calif.) languages, but those skilled in the art will appreciate that it could also be implemented in other languages such as Perl, C, Java and so on. Similarly, while the embodiments shown are implemented in software, part or all of the invention could also be embodied in firmware or circuitry, if desired. Also, as mentioned earlier, while the embodiments shown are directed to use with networks and systems using the TCP/IP protocol, other network or system protocols could be used. Those skilled in the art will also appreciate that the embodiments described above are illustrative only, and that other systems in the spirit of the teachings herein fall within the scope of the invention. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for positively identifying a valid client terminal communicating with a host machine, comprising the steps of: 
<claim-text>creating a system signature for the client terminal, the system signature including configuration information likely to be unique to that client terminal; </claim-text>
<claim-text>generating a first client identification key containing the system signature and storing the first client identification key at the client terminal; </claim-text>
<claim-text>re-evaluating the system signature each time a communication is purportedly sent from the client terminal by creating a new system signature unique to the then sending terminal with the system signature stored with the first client identification key; and </claim-text>
<claim-text>generating a second client identification key containing an indicator that silently informs the host system whether the sending terminal is the same as the client terminal.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005287A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005287A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005287A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005287A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005287A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005287A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030005287A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030005287A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030005287A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030005287A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030005287A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030005287A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030005287A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030005287A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030005287A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030005287A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
