<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005292A1-20030102-D00000.TIF SYSTEM "US20030005292A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005292A1-20030102-D00001.TIF SYSTEM "US20030005292A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005292A1-20030102-D00002.TIF SYSTEM "US20030005292A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030005292A1-20030102-D00003.TIF SYSTEM "US20030005292A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030005292A1-20030102-D00004.TIF SYSTEM "US20030005292A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030005292A1-20030102-D00005.TIF SYSTEM "US20030005292A1-20030102-D00005.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005292</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10230478</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020828</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>H04L009/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>713</class>
<subclass>160000</subclass>
</uspc>
</classification-us-primary>
<classification-us-secondary>
<uspc>
<class>713</class>
<subclass>193000</subclass>
</uspc>
</classification-us-secondary>
</classification-us>
<title-of-invention>Encrypted download of SRAM-based FPGAS</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10230478</doc-number>
<kind-code>A1</kind-code>
<document-date>20020828</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09212003</doc-number>
<document-date>19981214</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>6457125</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Donald</given-name>
<middle-name>P.</middle-name>
<family-name>Matthews</family-name>
<name-suffix>JR.</name-suffix>
</name>
<residence>
<residence-us>
<city>Morgan Hill</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Ralph</given-name>
<middle-name>R.</middle-name>
<family-name>Bestock</family-name>
</name>
<residence>
<residence-us>
<city>Los Altos</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>OPPENHEIMER WOLFF &amp; DONNELLY</name-1>
<name-2></name-2>
<address>
<address-1>P. O. BOX 10356</address-1>
<city>PALO ALTO</city>
<state>CA</state>
<postalcode>94303</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Method and apparatus is provided for securely configuring a programmable hardware device from a remote source. The programmable hardware device includes a plurality of programmable logic modules. A host receives configuration information from the remote source, where the configuration information defines a function of the programmable logic modules. The host encrypts the configuration information according to a cryptographic algorithm. The encrypted information is transferred to a special download engine at the programmable hardware device, which decrypts the information according to the same cryptographic algorithm. The programmable logic modules are thus configured by the decrypted configuration information, which has been securely downloaded from the remote source. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">REFERENCE TO PRIOR APPLICATION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a Continuation of U.S. application Ser. No. 09/212,003 filed Dec. 14, 1998, entitled &ldquo;Encrypted Download of SRAM-Based FPGAS,&rdquo; which application is incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> This invention relates to programmable hardware devices and more particularly to an apparatus and method of securely configuring programmable hardware devices that are reprogrammed when powered up. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Programmable hardware devices are general-purpose, combinational or sequential digital components that can be programmed to perform a certain function. They are also referred to as programmable logic devices (PLDs) or programmable arrays, and part of their basic structure includes a matrix of programmable logic modules or switches that can be configured to implement a complex circuit that performs a certain function. The programmable logic modules can consist of nodes of fuses, antifuses, floating-gate metal oxide semiconductor (MOS) transistors, random access memory (RAM) cells, or static RAM (SRAM) cells. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Fuse and antifuse based programmable hardware devices are physically programmed by having the fuse nodes &ldquo;blown&rdquo; into a permanently on or off state. Floating gate, or flash, memory cells are nonvolatile and remain electrically programmed until erased. RAM based cells are volatile and must be electrically programmed each time the programmable hardware device is powered-up. Both flash and RAM based cells are programmed by providing to the programmable hardware device a data stream of configuration information. The configuration information defines a function that each programmable logic module will perform, or collectively defines the combinational function of the programmable hardware device. The configuration information is usually highly sensitive and proprietary information. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Programmable hardware devices can generally be classified according to one of two categories: one-time programmable; and reprogrammable. In the first category, the programmable logic modules of the device are programmed once, usually where the device is manufactured, such as with fuse and antifuse based devices. Such devices are permanently nonvolatile, meaning their configuration can not be changed once the device is programmed. In the second category, the configuration information is stored first in an external source such as a memory. The configuration information is downloaded into the device to configure the logic modules. To reprogram the device, an existing configuration of the programmable logic blocks is deliberately erased and another configuration is downloaded, such as with flash memory, or power is simply removed and another configuration is downloaded upon power-up, such as with RAM. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The present invention is directed to configuring programmable hardware devices of the second category. <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a simplified block diagram of a prior art system <highlight><bold>100</bold></highlight> for configuring a reprogrammable hardware device <highlight><bold>110</bold></highlight> from an external host <highlight><bold>130</bold></highlight> or other external memory source. The basic architecture of a programmable hardware device <highlight><bold>110</bold></highlight> includes a matrix of programmable logic modules <highlight><bold>120</bold></highlight> surrounded by an addressable interconnection network <highlight><bold>135</bold></highlight>. Each logic module <highlight><bold>120</bold></highlight> may be any one of a variety of circuits capable of being programmed to implement all logic functions having one or more inputs. Such circuits include transistor-based registers, multiplexers, or look-up tables. Often, they also contain sequential elements such as flip-flops or latches. In gate array technology, the interconnection pattern is defined by metallization layers applied over a programmable logic module pattern at the final stage of manufacture. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The interconnect network <highlight><bold>135</bold></highlight> is connected by input/output blocks (I/O) <highlight><bold>145</bold></highlight> to a configuration engine <highlight><bold>140</bold></highlight> that configures the logic modules <highlight><bold>120</bold></highlight> according to configuration information, or a program, received from the host <highlight><bold>130</bold></highlight> via a communications channel <highlight><bold>150</bold></highlight>. The configuration engine contains a memory for storing the configuration information, which memory can be flash, such as erasable programmable read only memory (EPROM) and electrically erasable programmable ROM (EEPROM), or static RAM (SRAM). Host <highlight><bold>130</bold></highlight> may be a memory, a processor linked to a memory, or connected to a memory in a data network such as the internet. An example of a programmable hardware device as described above is described in greater detail in U.S. Pat. No. 5,744,980. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> One problem that arises is that the communications channel <highlight><bold>150</bold></highlight> between the host <highlight><bold>130</bold></highlight> or external memory source and the programmable hardware device <highlight><bold>110</bold></highlight> is particularly vulnerable to monitoring by an outside &ldquo;attacker&rdquo;. By monitoring the download process of transferring configuration information from the host <highlight><bold>150</bold></highlight> to the programmable hardware device <highlight><bold>110</bold></highlight>, an undesirable entity could gain enough information to reconstruct a proprietary configuration for their own applications. Accordingly, there is need for a system and method to securely download configuration information into a programmable hardware device. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention provides a method and apparatus to securely configure a programmable hardware device to inhibit copying of configuration information which defines a programmable function of the device. Secure configuration of a programmable hardware device is achieved in one embodiment of the invention by the steps of encrypting configuration information according to a cryptographic algorithm, transferring the encrypted configuration information from a host to the programmable hardware device, decrypting the configuration information according to the same cryptographic algorithm, and configuring a plurality of programmable logic modules in the programmable hardware device according to the configuration information. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In an alternate embodiment, the host receives the configuration information from an external memory source in encrypted form. The host may then store the encrypted configuration information for later transfer to the programmable hardware device. In yet another embodiment, the host decrypts encrypted configuration information received from an external memory source. The host then again encrypts the configuration according to the same or a different cryptographic algorithm. The host transfers the again encrypted configuration information to the programmable hardware device. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In yet another embodiment, the present invention provides a novel download engine for programmable hardware devices. The download engine includes a data-in register having a communications channel for receiving encrypted configuration information from the external host, a cryptographic engine, coupled to the data-in register and configured to decrypt the encrypted configuration information according to a cryptographic algorithm, and an interface coupled to the cryptographic engine, for transferring the decrypted configuration information from the cryptographic engine to the programmable logic modules.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a simplified block diagram of a prior art system for configuring a programmable hardware device. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a simplified block diagram of a system for securely configuring a programmable hardware device according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates a download engine in a programmable hardware device according to an embodiment of the present invention. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a host processor for providing encrypted configuration information to the programmable hardware device. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart of an embodiment of the present invention for securely configuring a programmable hardware device.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DESCRIPTION OF THE SPECIFIC EMBODIMENTS </heading>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> The figures and the accompanying description below are examples of the preferred embodiment of the present invention and a few variations. A person of ordinary skill in the art will understand that many of the specific details of the embodiments shown here can be varied without departing from the novelty of the invention. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Referring now to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, there is shown a simplified block diagram of one embodiment of a system <highlight><bold>200</bold></highlight> for securely configuring a programmable hardware device <highlight><bold>110</bold></highlight> according to the present invention. Programmable hardware device <highlight><bold>110</bold></highlight> has a download engine <highlight><bold>210</bold></highlight> provided between the communications channel <highlight><bold>150</bold></highlight> and the configuration engine <highlight><bold>140</bold></highlight> of the programmable hardware device <highlight><bold>110</bold></highlight>. Programmable hardware devices presently available contain both mask programmable and field programmable logic modules. In a preferred embodiment, download engine <highlight><bold>210</bold></highlight> is implemented in a mask programmable portion of a programmable hardware device as an application specific integrated circuit (ASIC). </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a more detailed view of an embodiment of a download engine <highlight><bold>210</bold></highlight> according to the present invention. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, download engine <highlight><bold>210</bold></highlight> includes a data-in register <highlight><bold>310</bold></highlight>, a cryptographic engine <highlight><bold>330</bold></highlight>, and an interface <highlight><bold>340</bold></highlight>. The data-in register <highlight><bold>310</bold></highlight> receives encrypted data from the host via communications channel <highlight><bold>150</bold></highlight>. Data-in register can be a RAM bank of any size. As data-in register <highlight><bold>310</bold></highlight> fills up with data, the data is passed to a cryptographic engine <highlight><bold>330</bold></highlight>. Cryptographic engine <highlight><bold>330</bold></highlight> stores and executes a cryptographic algorithm such as Data Encryption Standard (DES) or 3DES, which are well known cryptographic standards in the art. It should be understood that many other cryptographic algorithms and schemes can be used in place of DES or <highlight><bold>3</bold></highlight>DES. The cryptographic engine <highlight><bold>330</bold></highlight> executes the cryptographic algorithm to decrypt encrypted data passed on from data-in register <highlight><bold>310</bold></highlight>. Coupled to the output of the cryptographic engine is an interface <highlight><bold>340</bold></highlight> to the configuration engine. Interface <highlight><bold>340</bold></highlight> stores the decrypted configuration information into a format suitable for the configuration engine <highlight><bold>140</bold></highlight> to receive and load into the programmable logic modules <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> In a preferred embodiment, the download engine <highlight><bold>210</bold></highlight> will have a key store <highlight><bold>320</bold></highlight> consisting of nonvolatile or battery-backed memory that stores a cryptographic key. A cryptographic key is a secret value and is a function of the cryptographic algorithm utilized by the cryptographic engine <highlight><bold>330</bold></highlight>. For the decryption operation to execute, the proper decryption key must be used. Therefore, the key represents the security of any cryptographic system, and for the present invention it is preferably stored in a memory separate and apart from the cryptographic engine but within the same security envelope or secured geographical area. It should also be evident to one skilled in the art that the key store <highlight><bold>320</bold></highlight> could be external to the download engine <highlight><bold>210</bold></highlight> and coupled to the download engine by another communications channel. In yet another embodiment of the present invention, the download engine <highlight><bold>210</bold></highlight> may execute a key exchange with whichever cryptographic engine encrypted the configuration information. For example, key store <highlight><bold>320</bold></highlight> may be implemented in a public key algorithm where the key is passed to key store <highlight><bold>320</bold></highlight> by a public key exchange. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In some architectures, it may be desirable to control the timing and command of the data-in register, the cryptographic engine, and the interface. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> shows a state machine controller <highlight><bold>350</bold></highlight> coupled to data-in register <highlight><bold>310</bold></highlight>, the cryptographic engine <highlight><bold>330</bold></highlight>, and the interface <highlight><bold>340</bold></highlight> to provide timing and control commands and signals. State machine controller <highlight><bold>350</bold></highlight> may also be in communication with the host via data channel <highlight><bold>155</bold></highlight> for exchanging command, timing and synchronization signals such as interrupts. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates a host according to one embodiment of the present invention. Host <highlight><bold>130</bold></highlight> receives configuration information from an external memory source, which can include a remote memory in a computer workstation, or part of a network such as the internet or a local area network (LAN). Host <highlight><bold>130</bold></highlight> includes a first memory <highlight><bold>410</bold></highlight>, a cryptographic engine <highlight><bold>420</bold></highlight> preferably coupled to a separate key store <highlight><bold>430</bold></highlight>, and a second memory <highlight><bold>440</bold></highlight> coupled between the output of cryptographic engine <highlight><bold>420</bold></highlight> and the communication channel <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The configuration information received by first memory <highlight><bold>410</bold></highlight> may be either encrypted or unencrypted. Encrypted information is known as cyphertext non-encrypted information is known as plaintext. If first memory <highlight><bold>410</bold></highlight> receives the configuration information as cyphertext, it will either pass it on to second memory <highlight><bold>440</bold></highlight> without further cryptographic processing, or pass it on to cryptographic engine <highlight><bold>420</bold></highlight> for decryption and reencryption. Decryption will be accomplished according to the cryptographic algorithm and key employed by the external memory source to encrypt the configuration information. Encryption may be accomplished using the same algorithm or a different algorithm, or using a different cryptographic key. If first memory <highlight><bold>410</bold></highlight> receives the configuration information as plaintext, memory <highlight><bold>410</bold></highlight> passes it on to cryptographic engine <highlight><bold>420</bold></highlight> for encryption. In any case, second memory <highlight><bold>440</bold></highlight> is adapted to receive, store, and transfer encrypted, or cyphertext, configuration information. It may also be desirable for the host <highlight><bold>130</bold></highlight> to include a controller <highlight><bold>450</bold></highlight> to control the command and timing of the memories and cryptographic engine. Controller <highlight><bold>450</bold></highlight> can include a communications channel <highlight><bold>455</bold></highlight> to communicate command interrupts and synchronization signals to the download engine. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> shows a flowchart <highlight><bold>500</bold></highlight> of an embodiment of the present invention. At step <highlight><bold>510</bold></highlight>, configuration information, defining a configuration for a target programmable hardware device, is transmitted to a host from an external source. The external source may be another host, a ROM, a disk, or main memory in a computer. The external source may also be a network on which the configuration information is stored in whole or parts. It should be recognized that the host may access the configuration information from the external source, or the external source may provide the configuration information to the host. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> Upon being transmitted to the host, the host will determine if the configuration information received is encrypted, at step <highlight><bold>515</bold></highlight>. If it is not, at step <highlight><bold>520</bold></highlight> the host will encrypt the configuration information according to any industry standard or accepted cryptographic algorithm, such as DES, 3DES, or RC4, for example. If the configuration information is encrypted, at step <highlight><bold>525</bold></highlight> the host will either decrypt it or store it at step <highlight><bold>535</bold></highlight> for passing on to the programmable hardware device. The host may decrypt the configuration information if it receives the configuration information encrypted according to one encryption algorithm, perhaps as part of a network transfer protocol such as IPSEC, and it is instructed to transfer the configuration information to the programmable hardware device according to a second algorithm, such as any other industry standard algorithm. After decryption, the host will again encrypt the configuration information at step <highlight><bold>530</bold></highlight> and then store it at step <highlight><bold>535</bold></highlight>. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> A person of ordinary skill in the art would recognize that steps <highlight><bold>510</bold></highlight>-<highlight><bold>535</bold></highlight> may also be performed as a manufacturing step if, for example, the host were to be simply a memory such as a programmable read-only memory (PROM). The PROM would be programmed, or burned in, with the configuration information during manufacturing of the PROM circuit boards. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> Once stored, the encrypted configuration information is transferred to the programmable hardware device at step <highlight><bold>540</bold></highlight>. Again, the transfer may be initiated by either the host or the programmable hardware device. The programmable hardware device will decrypt the encrypted configuration information at step <highlight><bold>545</bold></highlight>. At step <highlight><bold>550</bold></highlight>, the programmable logic modules will be configured according to the configuration information, to implement the desired logic or functionality. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In summary, the preferred embodiments described above allow for a new method of downloading configuration information to a programmable hardware device. The methods and apparatus in support of those methods allow for secure downloading of configuration information where the configuration information is provided to the programmable hardware device in encrypted form and decrypted at the device according to a cryptographic algorithm. This allows for securely configuring any types of reprogrammable hardware logic devices from a remote configuration source. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> The above description is illustrative and not restrictive. Many variations of the invention will become apparent to those of skill in the art upon review of this disclosure. The scope of the invention should, therefore, be determined not with reference to the above description, but instead should be determined with reference to the appended claims along with their full scope of equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of securely configuring a programmable hardware device from a host, wherein the programmable hardware device includes a plurality of programmable logic modules, and the host contains configuration information defining a function of the programmable logic modules, the method comprising the steps of. encrypting configuration information according to a cryptographic 
<claim-text>algorithm; </claim-text>
<claim-text>transferring the encrypted configuration information from the host to the programmable hardware device; </claim-text>
<claim-text>decrypting the configuration information according to the same cryptographic algorithm; and </claim-text>
<claim-text>configuring the programmable logic modules in the programmable hardware device according to the decrypted configuration information.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005292A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005292A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005292A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030005292A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030005292A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030005292A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
