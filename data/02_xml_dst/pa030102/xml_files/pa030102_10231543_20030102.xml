<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004675A1-20030102-D00000.TIF SYSTEM "US20030004675A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00001.TIF SYSTEM "US20030004675A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00002.TIF SYSTEM "US20030004675A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00003.TIF SYSTEM "US20030004675A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00004.TIF SYSTEM "US20030004675A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00005.TIF SYSTEM "US20030004675A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00006.TIF SYSTEM "US20030004675A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00007.TIF SYSTEM "US20030004675A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00008.TIF SYSTEM "US20030004675A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00009.TIF SYSTEM "US20030004675A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00010.TIF SYSTEM "US20030004675A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00011.TIF SYSTEM "US20030004675A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00012.TIF SYSTEM "US20030004675A1-20030102-D00012.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00013.TIF SYSTEM "US20030004675A1-20030102-D00013.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00014.TIF SYSTEM "US20030004675A1-20030102-D00014.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00015.TIF SYSTEM "US20030004675A1-20030102-D00015.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00016.TIF SYSTEM "US20030004675A1-20030102-D00016.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00017.TIF SYSTEM "US20030004675A1-20030102-D00017.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00018.TIF SYSTEM "US20030004675A1-20030102-D00018.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00019.TIF SYSTEM "US20030004675A1-20030102-D00019.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00020.TIF SYSTEM "US20030004675A1-20030102-D00020.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00021.TIF SYSTEM "US20030004675A1-20030102-D00021.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00022.TIF SYSTEM "US20030004675A1-20030102-D00022.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00023.TIF SYSTEM "US20030004675A1-20030102-D00023.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00024.TIF SYSTEM "US20030004675A1-20030102-D00024.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00025.TIF SYSTEM "US20030004675A1-20030102-D00025.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00026.TIF SYSTEM "US20030004675A1-20030102-D00026.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00027.TIF SYSTEM "US20030004675A1-20030102-D00027.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00028.TIF SYSTEM "US20030004675A1-20030102-D00028.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00029.TIF SYSTEM "US20030004675A1-20030102-D00029.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00030.TIF SYSTEM "US20030004675A1-20030102-D00030.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00031.TIF SYSTEM "US20030004675A1-20030102-D00031.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00032.TIF SYSTEM "US20030004675A1-20030102-D00032.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00033.TIF SYSTEM "US20030004675A1-20030102-D00033.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00034.TIF SYSTEM "US20030004675A1-20030102-D00034.TIF" NDATA TIF>
<!ENTITY US20030004675A1-20030102-D00035.TIF SYSTEM "US20030004675A1-20030102-D00035.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004675</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10231543</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020830</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F019/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>702</class>
<subclass>123000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Routing with signal modifiers in a measurement system</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10231543</doc-number>
<kind-code>A1</kind-code>
<document-date>20020830</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>10174369</doc-number>
<document-date>20020618</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-in-part-of>
<parent-child>
<child>
<document-id>
<doc-number>10174369</doc-number>
<document-date>20020618</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>10008792</doc-number>
<document-date>20011113</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-in-part-of>
</continuations>
<non-provisional-of-provisional>
<document-id>
<doc-number>60301785</doc-number>
<document-date>20010629</document-date>
<country-code>US</country-code>
</document-id>
</non-provisional-of-provisional>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Robert</given-name>
<middle-name>W.</middle-name>
<family-name>Thurman</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Jeff</given-name>
<middle-name>A.</middle-name>
<family-name>Carbonell</family-name>
</name>
<residence>
<residence-us>
<city>Austin</city>
<state>TX</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>National Instruments Corporation</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>Jeffrey C. Hood</name-1>
<name-2>Conley, Rose, &amp; Tayon, P.C.</name-2>
<address>
<address-1>P.O. Box 398</address-1>
<city>Austin</city>
<state>TX</state>
<postalcode>78767</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">System and method for programmatically determining routing with signal modifications in a measurement system to perform a measurement task. Information is received specifying a route from a source terminal to a destination terminal in the measurement system, including signal modification requirements and a graph of possible routes in the measurement system. A current signal modification of the route is determined and used with the signal modification requirements to determine desired changes in the signal modification of the route. The legs of the route are walked in the graph, and one or more legs are replaced with respective alternative legs, each of which includes at least a portion of the desired changes in the signal modification, thereby generating a modified route which satisfies the signal modification requirements for the route, where the modified route is usable to route signals in performing the measurement task. The modified route is then stored. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">CONTINUATION DATA </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a Continuation of U.S. application Ser. No. 10/174,369 titled &ldquo;Routing With Signal Modifiers For A Measurement System&rdquo; filed Jun. 18, 2002, which is a Continuation In Part (CIP) of U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, whose inventors were Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski and Christopher T. Bartz, which claims benefit of priority of U.S. Provisional Application Serial No. 60/301,785 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Jun. 29, 2001, whose inventors were Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski and Christopher T. Bartz.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to the field of measurement and automation systems, and more particularly to a system and method for route sharing in a measurement system. </paragraph>
</section>
<section>
<heading lvl="1">DESCRIPTION OF THE RELATED ART </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Scientists and engineers often use measurement or automation systems to perform a variety of functions, including measurement of a physical phenomena or unit under test (UUT), test and analysis of physical phenomena, simulation, hardware-in-the-loop testing, process monitoring and control, control of mechanical or electrical machinery, data logging, laboratory research, and analytical chemistry, to name a few examples. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> A typical measurement system comprises a computer system with a measurement device or measurement hardware. The measurement device may be or include a computer-based instrument, a data acquisition device or board, a programmable logic device (PLD), a sensor, a smart sensor, an actuator, or other type of device for acquiring or generating data. The measurement device may be a card or board plugged into one of the I/O slots of the computer system, or a card or board plugged into a chassis, or an external device. For example, in a common measurement system configuration, the measurement hardware is coupled to the computer system via other means such as through a VXI (VME eXtensions for Instrumentation) bus, a PXI (PCI extensions for Instrumentation) bus, a GPIB (General Purpose Interface Bus), a serial port, or parallel port of the computer system. Optionally, the measurement system includes signal conditioning devices which receive the field signals and condition the signals to be acquired. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A measurement system may also typically include transducers, sensors, actuators or other detecting (or generating) means for providing &ldquo;field&rdquo; electrical signals representing a process, physical phenomena, equipment being monitored or measured, etc. The field signals are provided to the measurement hardware. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The measurement hardware is generally configured and controlled by measurement software executing on the computer system. The measurement software for configuring and controlling the measurement system typically comprises two portions: the device interface or driver-level software and the application software, or the application. The driver-level software serves to interface the measurement hardware to the application. The driver-level software may be supplied by the manufacturer of the measurement hardware or by some other third party software vendor. An example of measurement or DAQ driver-level software is NI-DAQ from National Instruments Corporation. The application or client is typically developed by the user of the measurement system and is tailored to the particular function which the user intends the measurement system to perform. The measurement hardware manufacturer or third party software vendor sometimes supplies the application software for certain applications which are common, generic or straightforward. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> A measurement task typically involves the transmittal of one or more signals through various components and/or devices in the measurement system. Thus, in all but the simplest measurement systems, one or more signal routes must be determined as part of the configuration of the measurement system to perform a specified measurement task. For example, a user must typically specify input, output, trigger, and/or synchronization signal routes through the components of a measurement devices. Furthermore, when multiple devices are included in the measurement system, additional inter-device routing must be determined and specified, which may complicate the routing determination process substantially. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> In prior art systems, it is often necessary to manually configure the various routes in the task. In many measurement systems, there may be multiple routes through the devices or devices which may each provide the necessary routing functionality for the specified task. However, some of the routes may be more efficient than others. Therefore, a user may need to carefully analyze each prospective route to determine which is most suitable for the task, an effort which may be tedious and error prone. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> In general, once routes have been determined for a measurement system, they do not change. In other words, routes are generally static. However, in some multi-device measurement systems, such as, for example, automated manufacturing systems, the equipment roster for the system may change dynamically. Thus, the constraints on system routing may change correspondingly, requiring a user to re-analyze the system to manually determine new routes to perform the same (previous) task. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In many measurement tasks, a signal may need to be modified during routing. For example, a digital signal may need to be inverted, pre-scaled, filtered, and/or delayed before reception by a particular component or device. As mentioned above, routing is typically specified as a source-destination pair, where each source-destination pair uses a predetermined path in hardware. In prior art systems, signal modification is generally simple due to the fact that all of the signal modification cases can be predetermined. In other words, signal modification can be predetermined because routes for a source-destination pair can be predetermined. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> However, prior art approaches generally do not facilitate the configuration of multiple signal modifiers between the source and destination, which may result in underutilization of hardware resources. For example, as <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> shows, two signal inverters may be configured between the source and destination of a route. A traditional Application Programming Interface (API) would be limited to configuring only one of the inverters between the source and destination, resulting in underutilization of the hardware. If a traditional API were used to configure both inverters, then multiple API calls or parameters would be needed. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> Additionally, traditional APIs do not account for the effect of multiple inverters on a signal. For example, a signal that has been inverted twice is logically equivalent to a signal that has not been inverted. Since traditional API&apos;s only evaluate a route&apos;s source and destination, they cannot program the components of the route with much flexibility. </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> Furthermore, routing across devices using a traditional API is generally only achievable by breaking up a multi-device route into two or more component routes. An example of a route spanning multiple devices is illustrated in <cross-reference target="DRAWINGS">FIG. 13</cross-reference>B, where the route source is located in device A <highlight><bold>1308</bold></highlight>A, and the route destination is located in device B <highlight><bold>1308</bold></highlight>B. The user is then responsible for maintaining the modification of the signal across the devices. For example, if device A has a signal inverter <highlight><bold>1306</bold></highlight>, as shown, and device B does not, then a route spanning both devices will need to be specified so that the sub-route in device A <highlight><bold>1308</bold></highlight>A inverts the signal and the sub-route in device B <highlight><bold>1308</bold></highlight>B does not. Breaking up the route may thus require the user to understand the capabilities of both devices in order to specify the multi-device route. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> In traditional routing systems, there are typically a set number of route destinations. Each of these route destinations has a defined set of sources. For the most part, the routes (as defined by their destinations) do not overlap or share routing resources. This allows route tracking for traditional routing systems to be very minimal or non-existent. Even when route tracking is provided, the routes are tracked as source/destination pairs. Traditional routing systems do not typically need more granularity than these simple source/destination pairs. </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In some measurement systems, multiple routes may traverse respective components which are similar in function and configuration. In other words, the respective components are substantially interchangeable from a functional perspective. In prior art systems, routes defined or managed at the level of source/destination terminal pairs cannot easily share hardware resources. Therefore, it would be desirable to define and manage routes at a higher granularity so that routes or sub-routes may share resources. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> As mentioned above, customers often must create measurement systems in order to perform their desired measurement tasks. These measurement systems are often composed of multiple measurement devices which generally need to communicate with one another for the purposes of timing and synchronization. When a customer receives a new device, they must first learn the connectivity of the device before integrating it into the measuring system. A good way to learn the connectivity of a device is to view all the possible routes the device can make. This allows the customer to weigh the options they have for the integration of the device into the measurement system. The presentation of possible routes in a device or system is referred to as &ldquo;meta-routing&rdquo;. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> Prior art solutions for presenting device routability involve using hand-built static tables. These tables are typically in the form of paper or digital media. There are a number of drawbacks to this method of presentation. First, the routability table must be built and maintained by hand. This requires time and effort at the expense of documentation and software development tasks. Additionally, because the table is built by hand, the table is prone to mistakes. Second, when a device is modified or functionality is added, the routability table may need to be amended, which increases the likelihood for a number of errors. For example, the person responsible for making the routability table may forget to update the table. Additionally, any pre-existing documentation will not be updated because once paper documentation is printed, it is not changeable. Thus, in the event of an amendment, any old copies of the document would need to be found and replaced with the new amended document. </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> Device families also present a problem for this approach, in that while devices in a family are normally exactly the same in most respects, they often differ slightly in terms of routability. This generally requires routability tables to have a number of annotations or footnotes detailing these differences. Finally, in general, routability tables are available in multiple places, i.e., there is generally no central location for all device routability tables, due to the fact that multiple APIs for routing are often used. Thus, maintaining synchrony and consistency between the various routability tables may be problematic. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Therefore, for at least a portion of the reasons given above, it would be desirable to provide new systems and methods for performing routing in a measurement task. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> Various embodiments of a system and method for dynamically determining routing with signal modifications in a measurement system are provided. The system may include a computer system and one or more measurement devices. The one or more measurement devices may comprise a measurement hardware device, a virtual measurement device and/or other types of devices. The signal modifications may include one or more of signal inversion, synchronization, filtering, pre-scaling, and logical combination with a signal from another terminal, among others. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The routing system, also referred to as the routing manager, may receive information specifying a route from a source terminal to a destination terminal in the measurement system, where the information includes one or more signal modification requirements for the route. The route may be a single device route, where the source terminal and the destination terminal are both included in a single device in the measurement system, or a multi-device route, where the source terminal is include in a first device in the measurement system, and the destination terminal is included in a second device in the measurement system. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> A current signal modification of the route may be determined. As used herein, the term &ldquo;current signal modification&rdquo;, which also may be referred to as the native signal modification of the route, refers to the signal modifications, e.g., inversions, synchronizations, etc., present on the route before the routing manager attempts to satisfy the route&apos;s specified or desired signal modifications. For example, if portions of the route, i.e., legs or components of the route, are shared with a pre-existing route, the shared legs or components may include signal modifications set by or for the pre-existing route. These signal modifications are constraints for the current route determination, in that modifying them would interfere with the pre-existing route. Thus, the signal modifications which were set in a prior route determination may not be changed to meet the signal modification requirements for the route. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> In one embodiment, the current signal modification of the route also includes information indicating signal modifications for legs or components of the route that are not shared with a pre-existing route. These signal modifications may comprise default signal modifications for the components. In other words, if a component or leg of the route has not been previously reserved or set, then the method may assume a signal modification setting for the component which is &ldquo;most natural&rdquo; for the component, e.g., a &lsquo;no inversion&rsquo; setting. One or more desired changes in the signal modification of the route may be determined based on the signal modification requirements and the current signal modification of the route. In other words, the desired changes in the signal modification of the route are the signal modification requirements which are not met by the current signal modification of the route. The route may be modified to include at least a portion of the desired changes in the signal modification of the route, thereby generating a modified route which satisfies at least a portion of the signal modification requirements for the route. A determination may be made as to whether the modified route satisfies the signal modification requirements for the route, and if the modified route does not satisfy the signal modification requirements for the route, an error message may be generated. The modified route may then be stored, where the modified route is usable to route signals in performing the measurement task. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In one embodiment, the received information also includes a graph of possible routes from the source terminal to the destination terminal. Modifying the route to include at least a portion of the desired changes in the signal modification of the route may include walking the legs of the route in the graph, and replacing at least one of the legs with an alternative leg which includes at least one of the desired changes in the signal modification of the route. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> For example, a current (e.g., a first) leg of the one or more legs of the route may be selected, and a determination made as to whether alternative legs for the current leg exist, i.e., whether the signal modification for the leg has already been set in a prior route determination. If alternative legs exist, then for at least one of the alternative legs, signal modification of the current leg may be compared with signal modification of the alternative leg. If replacement of the current leg with the alternative leg in the route fulfills at least a portion of the desired changes in signal modification for the route, the current leg may be replaced with the alternative leg. The desired changes in signal modification for the route may then be modified to reflect the replacement. If there are more desired changes in signal modification for the route to be made, and more legs of the route to walk, then a next leg of the route may be selected as the current leg, and the above process repeated until there are no more changes to be made, i.e., all of the signal modification requirements have been met, or there are no more legs in the route. If there are no more legs to process, and the signal modification requirements have not been satisfied, then an error message may be generated, e.g., the route may fail. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In one embodiment, the method may include dynamically determining the route prior to receiving the information specifying the route. The routing manager may receive input specifying the source terminal and destination terminal in the measurement system. A topography description may also be received, where the topography description indicates a plurality of components in a device in the measurement system and connectivity between each of the components. In one embodiment, the topography description for a device may also include configuration information specifying one or more operational parameters for the respective components of the device. In a multi-device route, a topography description may be received for each device. Although the method is described below regarding a single device, the method readily extends to multiple device routes, where each device has an associated graph, current signal modification, etc. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The topography description may be preprocessed to generate a graph, where the graph is a representation of possible routes in the respective device, and is usable to determine routes from the source terminal to the destination terminal. The graph may be a weighted graph, where edges in the graph are weighted in accordance with one or more metrics. Dynamically determining the route may include traversing the graph to determine a plurality of routes from the source terminal to the destination terminal, and selecting the route from the plurality of routes based on the one or more metrics. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> In one embodiment, the determined route may be stored in a run-time specification which is usable to configure one or more devices to perform the measurement task, for example, by configuring the route in the device(s). Additionally, storing the route in the run-time specification may include storing the operational parameters for components of the device(s). The run-time specification may then be usable to configure the components of the device(s) using the operational parameters to implement the one or more routes. At runtime, the run-time specification may be analyzed, and the one or more routes configured in the device(s) based on the analysis. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> In one embodiment, the run-time specification may include a specification of the one or more operational parameters of one or more measurement routing primitives, where each measurement routing primitive includes a software object and corresponding configuration settings. Each measurement routing primitive may be operable to implement at least a portion of the route. In one embodiment, after analyzing the runtime specification, the method may generate a run-time based on the analysis, where the run-time is executable to perform the measurement task. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> Thus, in various embodiments, the present invention provides systems and method whereby routing with specified signal modifications in a measurement system may be dynamically determined for routing signals in a measurement task. The dynamically determined route may then be used to route signals with the specified signal modifications in performing the measurement task. </paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which: </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C illustrate representative instrumentation and process control systems including various I/O interface options; </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a block diagram of the computer system of FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C; </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates one embodiment of a software architecture of a measurement system; </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates measurement driver program components, according to one embodiment; </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> flowcharts a method for performing dynamic routing in a measurement system, according to one embodiment; </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C flowchart various embodiments of a method for programmatically determining routes in a measurement system; </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a topography diagram for a multi-chassis measurement task, according to one embodiment; </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> is a topography diagram of a PXI-<highlight><bold>4070</bold></highlight> card, according to one embodiment; </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> FIGS. <highlight><bold>9</bold></highlight>A-<highlight><bold>9</bold></highlight>F are topography diagrams for a PCI E-Series card, according to one embodiment; </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a topography diagram for a synchronization routing task, according to one embodiment; </paragraph>
<paragraph id="P-0042" lvl="0"><number>&lsqb;0042&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> is a topography diagram for a PCI-PCI routing task, according to one embodiment; </paragraph>
<paragraph id="P-0043" lvl="0"><number>&lsqb;0043&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> is a topography diagram for a PXI-PXI routing task, according to one embodiment; </paragraph>
<paragraph id="P-0044" lvl="0"><number>&lsqb;0044&rsqb;</number> FIGS. <highlight><bold>13</bold></highlight>A-<highlight><bold>13</bold></highlight>C illustrate several embodiments of routing with signal inverters; </paragraph>
<paragraph id="P-0045" lvl="0"><number>&lsqb;0045&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> flowcharts a method for determining routing with inline signal modification, according to one embodiment; </paragraph>
<paragraph id="P-0046" lvl="0"><number>&lsqb;0046&rsqb;</number> FIGS. <highlight><bold>15</bold></highlight>A-<highlight><bold>15</bold></highlight>B illustrate simple routes with signal inversion, according to one embodiment; </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> flowcharts more detailed portion of the method of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>, according to one embodiment; </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 17A and 17B</cross-reference> illustrate two simple examples of shared routing, according to one embodiment; </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C illustrate a route determination sequence for the routing scenario of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>A, where a first route is a subset of a second route, according to one embodiment; </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> FIGS. <highlight><bold>19</bold></highlight>A-<highlight><bold>19</bold></highlight>C illustrates a route determination sequence for the routing scenario of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>B, where a first route and a second route overlap, according to one embodiment; </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> flowcharts a method for dynamically managing shared routing resources for a measurement task, according to one embodiment; </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 21A and 21B</cross-reference> respectively flowchart creation and destruction of task-independent routes, according to one embodiment; </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 22A and 22B</cross-reference> illustrate a meta-routing table, according to one embodiment; and </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference> flowcharts a meta-routing method, according to one embodiment.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. </paragraph>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE EMBODIMENTS </heading>
<paragraph id="P-0056" lvl="7"><number>&lsqb;0056&rsqb;</number> Incorporation by Reference </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> The following U.S. Patent Applications are hereby incorporated by reference as though fully and completely set forth herein: </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, whose inventors were Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski and Christopher T. Bartz; </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> U.S. Provisional Application Serial No. 60/301,785 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Jun. 29, 2001, whose inventors were Geoffrey Schmit, Brent Schwan, Jonathan Brumley, Thomas A. Makowski and Christopher T. Bartz; </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> U.S. application Ser. No. 10/010,826 titled &ldquo;System of Measurements Experts and Method For Generating High-Performance Measurements Software Drivers&rdquo; filed Nov. 13, 2001, whose inventors were Geoffrey Schmit, Jonathan Brumley, Brent Schwan, and Jack Levy; and </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> U.S. application Ser. No. 10/010,829 titled &ldquo;Measurements Expert System and Method For Generating High-Performance Measurements Software Drivers&rdquo; filed Nov. 13, 2001, whose inventors were Geoffrey Schmit, Jonathan Brumley, Brent Schwan, and Jack Levy. </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> As used herein, the term &ldquo;measurement system&rdquo; is intended to include a single measurement device system as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, an instrumentation system such as that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>B, an industrial automation system such as that shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>C, or a modeling or simulation system involved with the design, validation or testing of a product involving &ldquo;real world I/O&rdquo;, i.e., the acquisition or generation of data to/from a model or simulation of a device or product being designed, validated or tested, such as hardware-in-the loop validation. The term &ldquo;measurement&rdquo; may include instrumentation measurement, data acquisitions, automation, control, and simulation. </paragraph>
<paragraph id="P-0063" lvl="0"><number>&lsqb;0063&rsqb;</number> As used herein, the term &ldquo;route&rdquo; refers to a connection between a pair of terminals. Source and destination terminals make a terminal pair. Usually, the user only specifies one terminal for the route. For example, if the user is exporting a hardware trigger to the I/O connector, then the destination terminal is settable by the user while the source terminal is predetermined by the context of the acquisition. If the user is setting up the hardware trigger for an acquisition, then the source terminal is settable by the user while the destination terminal is a predetermined internal terminal on the device. Routing may encompass a variety of hardware components, including, but not limited to, static and dynamic digital multiplexers, connections, connectors, and signal modifiers, described below. </paragraph>
<paragraph id="P-0064" lvl="0"><number>&lsqb;0064&rsqb;</number> As used herein, the term &ldquo;single-device route&rdquo; refers to a connection between two terminals on the same physical device. In prior art systems, all routes were generally single-device routes. In order to route between two devices, it was necessary for the user to pick a trigger line, export a signal from the source device to the trigger line, and import the signal with the destination device. In effect, users had to piece together routes between devices using single device routing to emulate a multi-device routing. </paragraph>
<paragraph id="P-0065" lvl="0"><number>&lsqb;0065&rsqb;</number> As used herein, the term &ldquo;multi-device route&rdquo; refers to a connection between two terminals where the two terminals are on different devices. In order to create a multi-device route, the source and destination devices may be required to share a trigger bus together physically and logically. </paragraph>
<paragraph id="P-0066" lvl="7"><number>&lsqb;0066&rsqb;</number> FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C&mdash;Instrumentation and Industrial Automation Systems </paragraph>
<paragraph id="P-0067" lvl="0"><number>&lsqb;0067&rsqb;</number> FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C illustrate exemplary measurement and automation systems. As used herein, the term &ldquo;measurement system&rdquo; is intended to include the types of measurement systems and automation systems shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C, as well as other types of systems. The measurement system shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C may include software programs according to one embodiment of the present invention. These programs may of course be stored in or used by other types of systems as desired. In accordance with one embodiment of the present invention, the present system and method includes novel software programs for specifying and performing routing functions in measurement and automation tasks (collectively referred to as &ldquo;measurement tasks&rdquo;). </paragraph>
<paragraph id="P-0068" lvl="0"><number>&lsqb;0068&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> illustrates an exemplary measurement system <highlight><bold>100</bold></highlight>A comprising a host computer <highlight><bold>102</bold></highlight> which connects to a measurement device, in this example, an instrumentation card <highlight><bold>143</bold></highlight>. It should be noted that the instrumentation card <highlight><bold>143</bold></highlight> is but one example of a measurement device suitable for using the present invention. For example, in other embodiments, the measurement device may be a stand-alone device, such as an oscilloscope, or a chassis, e.g., a PXI chassis, which contains one or more PXI instrumentation cards. The host computer <highlight><bold>102</bold></highlight> connects through the measurement device <highlight><bold>143</bold></highlight> to analyze, measure, or control a unit under test (UUT) or process <highlight><bold>150</bold></highlight>. Thus, the measurement device <highlight><bold>143</bold></highlight> may be operable to receive signals from the UUT <highlight><bold>150</bold></highlight>, process the signals, and send the signals to the host computer system <highlight><bold>102</bold></highlight>, where the signals may be processed further, analyzed, stored, and/or transmitted to other systems, as desired. Conversely, in another embodiment, the measurement device <highlight><bold>143</bold></highlight> may be operable to receive commands or requests from the host computer <highlight><bold>102</bold></highlight>, and generate a signal to the UUT <highlight><bold>150</bold></highlight>, e.g., for excitation or stimulation. Thus, the measurement device <highlight><bold>143</bold></highlight> may be a signal acquisition and/or a signal generation device, as desired. </paragraph>
<paragraph id="P-0069" lvl="0"><number>&lsqb;0069&rsqb;</number> The measurement device <highlight><bold>143</bold></highlight> may include a plurality of components, such as multiplexers (MUXs), counters, I/O terminals, etc., for routing and/or controlling signals communicated between the UUT <highlight><bold>150</bold></highlight> and the host computer <highlight><bold>102</bold></highlight>. As noted above, there may be a number of different routes through the measurement device <highlight><bold>143</bold></highlight>, one or more of which may be more suitable for a particular measurement task than the others. The host computer <highlight><bold>102</bold></highlight> may store and execute one or more software programs for programmatically determining the plurality of routes through the measurement device <highlight><bold>143</bold></highlight>, as will be described in detail below. </paragraph>
<paragraph id="P-0070" lvl="0"><number>&lsqb;0070&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> illustrates an exemplary instrumentation control system <highlight><bold>100</bold></highlight>B. The system <highlight><bold>100</bold></highlight>B may comprise host computer <highlight><bold>102</bold></highlight> which connects to one or more devices or instruments. The host computer <highlight><bold>102</bold></highlight> may comprise a CPU, a display, memory, and one or more input devices such as a mouse or keyboard, as shown. The host computer <highlight><bold>102</bold></highlight> connects through the one or more instruments to analyze, measure, or control a unit under test (UUT) or process <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0071" lvl="0"><number>&lsqb;0071&rsqb;</number> The host computer <highlight><bold>102</bold></highlight> may execute a program which interacts with or controls the one or more instruments. The one or more instruments may include a GPIB instrument <highlight><bold>112</bold></highlight> and associated GPIB interface card <highlight><bold>122</bold></highlight>, a data acquisition board <highlight><bold>114</bold></highlight> and associated signal conditioning circuitry <highlight><bold>124</bold></highlight>, a VXI instrument <highlight><bold>116</bold></highlight>, a PXI instrument <highlight><bold>118</bold></highlight>, a video device or camera <highlight><bold>132</bold></highlight> and associated image acquisition card <highlight><bold>134</bold></highlight>, a motion control device <highlight><bold>136</bold></highlight> and associated motion control interface card <highlight><bold>138</bold></highlight>, and/or one or more computer based instrument cards <highlight><bold>142</bold></highlight>, among other types of devices. Note that the computer based instrument card <highlight><bold>142</bold></highlight> may be a board or card with one or more FPGAs, one or more CPUs and memory, or various combinations of the two. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> The GPIB instrument <highlight><bold>112</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via the GPIB interface card <highlight><bold>122</bold></highlight> provided by the computer <highlight><bold>102</bold></highlight>. In a similar manner, the video device <highlight><bold>132</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via the image acquisition card <highlight><bold>134</bold></highlight>, and the motion control device <highlight><bold>136</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> through the motion control interface card <highlight><bold>138</bold></highlight>. The data acquisition board <highlight><bold>114</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight>, and may interface through signal conditioning circuitry <highlight><bold>124</bold></highlight> to the UUT. The signal conditioning circuitry <highlight><bold>124</bold></highlight> may comprise an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules <highlight><bold>126</bold></highlight>. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> The GPIB card <highlight><bold>122</bold></highlight>, the image acquisition card <highlight><bold>134</bold></highlight>, the motion control interface card <highlight><bold>138</bold></highlight>, and the DAQ card <highlight><bold>114</bold></highlight> are typically plugged in to an I/O slot in the computer <highlight><bold>102</bold></highlight>, such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer <highlight><bold>102</bold></highlight>. However, these cards <highlight><bold>122</bold></highlight>, <highlight><bold>134</bold></highlight>, <highlight><bold>138</bold></highlight> and <highlight><bold>114</bold></highlight> are shown external to computer <highlight><bold>102</bold></highlight> for illustrative purposes. These cards <highlight><bold>122</bold></highlight>, <highlight><bold>134</bold></highlight>, <highlight><bold>138</bold></highlight>, <highlight><bold>114</bold></highlight> may also connected to the computer 102 through a USB (Universal Serial Bus), IEEE 1394 or <highlight><bold>1394</bold></highlight>.<highlight><bold>2</bold></highlight> bus provided by the computer <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> The VXI chassis or instrument <highlight><bold>116</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> via a VXI bus, MXI bus, or other serial or parallel bus provided by the computer <highlight><bold>102</bold></highlight>. The computer <highlight><bold>102</bold></highlight> may include VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis <highlight><bold>116</bold></highlight>. The PXI instrument may be coupled to the computer <highlight><bold>102</bold></highlight> through the computer&apos;s PXI bus. The PXI chassis may be coupled to the computer <highlight><bold>102</bold></highlight> via a MXI-3 bus. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> A serial instrument (not shown) may also be coupled to the computer <highlight><bold>102</bold></highlight> through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer <highlight><bold>102</bold></highlight>. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> In typical instrumentation control systems an instrument of each interface type may not be present, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments. The instruments are coupled to the unit under test (UUT) or process <highlight><bold>150</bold></highlight>, or are coupled to receive field signals, typically generated by transducers. The system <highlight><bold>100</bold></highlight>B may be used in a data acquisition and control application, in a test and measurement application, a process control application, a man-machine interface application, or a simulation application. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1C</cross-reference> illustrates an exemplary industrial automation system <highlight><bold>160</bold></highlight>. The industrial automation system <highlight><bold>160</bold></highlight> may be similar to the instrumentation or test and measurement system <highlight><bold>100</bold></highlight>B shown in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference>. Elements which are similar or identical to elements in <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> have the same reference numerals for convenience. The system <highlight><bold>160</bold></highlight> comprises a computer <highlight><bold>102</bold></highlight> which connects to one or more devices or instruments. The computer <highlight><bold>102</bold></highlight> comprises a CPU, a display screen, memory, and one or more input devices such as a mouse or keyboard as shown. The computer <highlight><bold>102</bold></highlight> connects through the one or more devices to a process or device <highlight><bold>150</bold></highlight> to perform an automation function, such as MMI (Man Machine Interface), SCADA (Supervisory Control and Data Acquisition), portable or distributed data acquisition, process control, advanced analysis, or other control. In <cross-reference target="DRAWINGS">FIG. 1</cross-reference>C, the computer <highlight><bold>102</bold></highlight> may execute a program that is involved with the automation function performed by the automation system <highlight><bold>160</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> The one or more devices may include a data acquisition board <highlight><bold>114</bold></highlight> and associated signal conditioning circuitry <highlight><bold>124</bold></highlight>, a PXI instrument <highlight><bold>118</bold></highlight>, a video device <highlight><bold>132</bold></highlight> and associated image acquisition card <highlight><bold>134</bold></highlight>, a motion control device <highlight><bold>136</bold></highlight> and associated motion control interface card <highlight><bold>138</bold></highlight>, a FieldBus device <highlight><bold>170</bold></highlight> and associated FieldBus interface card <highlight><bold>172</bold></highlight>, a PLC (Programmable Logic Controller) <highlight><bold>176</bold></highlight>, a serial instrument <highlight><bold>182</bold></highlight> and associated serial interface card <highlight><bold>184</bold></highlight>, or a distributed data acquisition system, such as the FieldPoint system available from National Instruments, among other types of devices. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> The DAQ card <highlight><bold>114</bold></highlight>, the PXI chassis <highlight><bold>118</bold></highlight>, the video device <highlight><bold>132</bold></highlight> and image acquisition card <highlight><bold>134</bold></highlight>, and the motion control device <highlight><bold>136</bold></highlight> and motion control interface card <highlight><bold>138</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> as described above. The serial instrument <highlight><bold>182</bold></highlight> may be coupled to the computer <highlight><bold>102</bold></highlight> through a serial interface card <highlight><bold>184</bold></highlight>, or through a serial port, such as an RS-232 port, provided by the computer <highlight><bold>102</bold></highlight>. The PLC <highlight><bold>176</bold></highlight> may couple to the computer <highlight><bold>102</bold></highlight> through a serial port, Ethernet port, or a proprietary interface. The FieldBus interface card <highlight><bold>172</bold></highlight> may be comprised in the computer <highlight><bold>102</bold></highlight> and interfaces through a FieldBus network to one or more FieldBus devices. Each of the DAQ card <highlight><bold>114</bold></highlight>, the serial card <highlight><bold>184</bold></highlight>, the FieldBus card <highlight><bold>172</bold></highlight>, the image acquisition card <highlight><bold>134</bold></highlight>, and the motion control card <highlight><bold>138</bold></highlight> are typically plugged in to an I/O slot in the computer <highlight><bold>102</bold></highlight> as described above. However, these cards <highlight><bold>114</bold></highlight>, <highlight><bold>184</bold></highlight>, <highlight><bold>172</bold></highlight>, <highlight><bold>134</bold></highlight>, and <highlight><bold>138</bold></highlight> are shown external to computer <highlight><bold>102</bold></highlight> for illustrative purposes. In typical industrial automation systems a device will not be present of each interface type, and in fact many systems may only have one or more devices of a single interface type, such as only PLCs. The devices are coupled to the device or process <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Referring again to FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C, the computer system <highlight><bold>102</bold></highlight> and/or one or more of the instruments or devices may include a memory medium (or memory mediums) on which software according to the present invention may be stored. The memory medium may store one or more experts and a plurality of measurement routing primitives. Additionally, the memory medium(s) may store various products produced by or with these software components, such as a run-time specification described in more detail below. In some embodiments, the memory medium may also store a measurement task specifier, an expert system, additional experts, a run-time builder, and a plurality of additional measurement primitives. Additionally, the memory medium(s) may store other products produced by or with these software components, such as a measurement task specification and a run-time, also described in more detail below. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> The term &ldquo;memory medium&rdquo; is intended to include an installation medium, e.g., a CD-ROM, floppy disks <highlight><bold>104</bold></highlight>, or tape device; a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, RRAM, etc.; or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> In addition, the memory medium may be located in a first computer in which the programs and/or data are stored or executed, or may be located in a second different computer which connects to the first computer over a network, such as the Internet. In the latter instance, the second computer provides the program instructions to the first computer for execution. Also, the computer system <highlight><bold>102</bold></highlight> may take various forms, including a personal computer system, mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), television set-top box, instrument, or other device. In general, the term &ldquo;computer system&rdquo; can be broadly defined to encompass any device having at least one processor which executes instructions from a memory medium. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Various embodiments further include receiving or storing instructions and/or data implemented in accordance with the foregoing description upon a carrier medium. Suitable carrier media include a memory medium as described above, as well as signals such as electrical, electromagnetic, or digital signals, conveyed via a communication medium such as networks and/or a wireless link. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In one embodiment, the software programs and software architecture as described herein may be designed for measurement systems, including data acquisition/generation, analysis, and/or display; automation systems; simulation systems; systems for controlling, modeling, or simulating instrumentation or industrial automation hardware; and systems for controlling, modeling or simulating systems or devices being designed, prototyped, validated or tested. However, it is noted that the present invention can be used for a plethora of applications and is not limited to instrumentation or industrial automation applications. In other words, FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C are exemplary only, and the software programs and software architecture may be used for any of various purposes and may be stored in and execute on any of various types of systems to perform any of various applications. </paragraph>
<paragraph id="P-0085" lvl="7"><number>&lsqb;0085&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference>&mdash;Computer System Block Diagram </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is an exemplary block diagram of the computer system illustrated in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C. It is noted that any type of computer system configuration or architecture can be used in conjunction with the system and method described herein, as desired, and <cross-reference target="DRAWINGS">FIG. 2</cross-reference> illustrates a representative PC embodiment. It is also noted that the computer system may be a general purpose computer system such as illustrated in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C, a computer implemented on a VXI card installed in a VXI chassis, a computer implemented on a PXI card installed in a PXI chassis, or other types of embodiments. The elements of a computer not necessary to understand the present invention have been omitted for simplicity. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The computer <highlight><bold>102</bold></highlight> includes at least one central processing unit or CPU <highlight><bold>160</bold></highlight> which is coupled to a processor or host bus <highlight><bold>162</bold></highlight>. The CPU <highlight><bold>160</bold></highlight> may be any of various types, including a x86 processor, e.g., a Pentium class; a PowerPC processor; a CPU from the SPARC family of RISC processors; as well as others. Main memory <highlight><bold>166</bold></highlight> is coupled to the host bus <highlight><bold>162</bold></highlight> by means of memory controller <highlight><bold>164</bold></highlight>. The main memory <highlight><bold>166</bold></highlight> may store one or more computer programs or libraries according to one embodiment of the present invention, e.g., routing management software. The main memory <highlight><bold>166</bold></highlight> also stores operating system software as well as the software for operation of the computer system, as well known to those skilled in the art. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> The host bus <highlight><bold>162</bold></highlight> is coupled to an expansion or input/output bus <highlight><bold>170</bold></highlight> by means of a bus controller <highlight><bold>168</bold></highlight> or bus bridge logic. The expansion bus <highlight><bold>170</bold></highlight> is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus <highlight><bold>170</bold></highlight> includes slots for various devices such as the data acquisition board <highlight><bold>114</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 1B</cross-reference>), a GPIB interface card <highlight><bold>122</bold></highlight> which provides a GPIB bus interface to the GPIB instrument <highlight><bold>112</bold></highlight> (of <cross-reference target="DRAWINGS">FIG. 1B</cross-reference>), and a reconfigurable instrument <highlight><bold>120</bold></highlight>. Note that as used herein, the term &ldquo;reconfigurable instrument&rdquo; refers to an instrument with one or more of: </paragraph>
<paragraph id="P-0089" lvl="2"><number>&lsqb;0089&rsqb;</number> 1) a processor and memory which is capable of being configured by a user or software program; and/or </paragraph>
<paragraph id="P-0090" lvl="2"><number>&lsqb;0090&rsqb;</number> 2) reconfigurable logic, such as an FPGA (Field Programmable Gate Array). </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> For more information on a reconfigurable instrument which includes an embedded processor and embedded memory, please see U.S. Pat. No. 6,173,438 which is hereby incorporated by reference in its entirety as though fully and completely set forth herein. For more information on a reconfigurable instrument which includes reconfigurable hardware, e.g., an FPGA, please see U.S. Pat. No. 6,219,628 which is hereby incorporated by reference in its entirety as though fully and completely set forth herein. The computer <highlight><bold>102</bold></highlight> may further comprise a video display subsystem <highlight><bold>180</bold></highlight> and hard drive <highlight><bold>182</bold></highlight> coupled to the expansion bus <highlight><bold>170</bold></highlight>. </paragraph>
<paragraph id="P-0092" lvl="7"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference>&mdash;Creating a Measurement Solution </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> illustrates one embodiment of a software architecture for a system such as a measurement system. As shown, the system may include one or more application programs <highlight><bold>202</bold></highlight>. The application programs are typically developed by a user to accomplish a certain task or achieve a certain result. Thus, the application program is typically a user created or developed program to solve a desired problem or accomplish a desired result for the user. The application program <highlight><bold>202</bold></highlight> may be developed in any of various development environments. For example, the application program may be an application developed in the LabVIEW graphical programming environment of National Instruments Corporation. The application program <highlight><bold>202</bold></highlight> may also be developed in other applications, such as National Instruments Measurement Studio, Visual Basic, Visual C&plus;&plus;, Delphi, or other programming development environments. Thus, the application program may be developed in graphical programming environments such as LabVIEW, or a text-based programming environment such as Measurement Studio or Visual Basic. The application program <highlight><bold>202</bold></highlight> may thus comprise the customer&apos;s entire measurement system, and may include many more features and functions in addition to managing the particular measurement task specification and run-time generation, such as data analysis, report generation, or other higher-level functions of the measurement system. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> As shown, the application <highlight><bold>202</bold></highlight> communicates with a measurement driver <highlight><bold>212</bold></highlight>. The measurement driver <highlight><bold>212</bold></highlight> may include a measurement driver application programming interface (API) <highlight><bold>214</bold></highlight>. As shown, the application program <highlight><bold>202</bold></highlight>A or <highlight><bold>202</bold></highlight>B interfaces with the measurement driver API <highlight><bold>214</bold></highlight> in order to access capabilities of the measurement driver <highlight><bold>212</bold></highlight>. In this measurement example, the software architecture may also include interchangeable virtual instrument (IVI) drivers <highlight><bold>222</bold></highlight> wherein the application program <highlight><bold>202</bold></highlight>B may interface through IVI drivers <highlight><bold>222</bold></highlight>, which interface with the measurement driver API <highlight><bold>214</bold></highlight>, to interface with the measurement driver <highlight><bold>212</bold></highlight>. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> The measurement driver <highlight><bold>212</bold></highlight> interfaces to the one or more various measurement devices <highlight><bold>230</bold></highlight> comprised in this system. The measurement devices <highlight><bold>230</bold></highlight> may comprise any of the various devices discussed above with respect to FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C and may comprise other devices not shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C as desired. In one embodiment, at least one of the one or more measurement devices comprises a hardware measurement device. In another embodiment, at least one of the one or more measurement devices comprises a virtual measurement device. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In one embodiment, the present invention provides an improved system and method for dynamically determining routing in a measurement system for a specified measurement task. Thus, the measurement driver software <highlight><bold>212</bold></highlight> may include various components for determining, analyzing, and specifying routing functionality in the measurement system, as described below. The components related to programmatic and dynamic route determination for the measurement system may be referred to collectively as a routing manager. </paragraph>
<paragraph id="P-0097" lvl="7"><number>&lsqb;0097&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference>&mdash;Measurement Driver Program Components </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In various embodiments, the software programs of the present invention may cooperate with or be used in conjunction with additional programs. In other words, various embodiments of the present invention may be used in other systems, such as, for example, for specifying and performing measurement tasks. <cross-reference target="DRAWINGS">FIG. 4</cross-reference> illustrates various software components or programs <highlight><bold>400</bold></highlight> comprised in one embodiment of the measurement driver program <highlight><bold>212</bold></highlight>. As shown, in one embodiment, the measurement driver program <highlight><bold>212</bold></highlight> may also include a measurement task specifier <highlight><bold>730</bold></highlight>, a run-time builder <highlight><bold>780</bold></highlight>, and/or various measurement primitives <highlight><bold>408</bold></highlight>. The measurement driver <highlight><bold>212</bold></highlight> may also include other software components as well. As <cross-reference target="DRAWINGS">FIG. 4</cross-reference> also illustrates, various of the measurement driver components may be operable to generate respective products which may be useable by other measurement driver components, by other software programs or systems, or by a user. More specifically, as shown in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, in one embodiment, the measurement task specifier <highlight><bold>730</bold></highlight> may be operable to generate a measurement task specification <highlight><bold>740</bold></highlight>. In one embodiment, the measurement task specification <highlight><bold>740</bold></highlight> may comprise software objects or data structures, referred to as measurement specification objects (MSOs), such as C&plus;&plus; objects, which may specify the measurement task. In various embodiments, the measurement task specifier <highlight><bold>730</bold></highlight> may be a measurement task wizard, i.e., a software program which leads the user through a measurement task specification process to create the measurement task specification <highlight><bold>740</bold></highlight>, a measurement task configuration tool, which is a software program invocable by the user under a development environment, such as the National Instruments LabVIEW environment or Measurement Studio programming development environment, or an API through which the user makes calls to generate the task specification. Thus, in various embodiments, the measurement task specifier <highlight><bold>730</bold></highlight> may generate the measurement task specification <highlight><bold>740</bold></highlight> in response to user input. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 4</cross-reference> shows, the measurement driver program <highlight><bold>212</bold></highlight> may include an expert system <highlight><bold>750</bold></highlight> which may itself include one or more experts <highlight><bold>406</bold></highlight>, e.g., routing experts. As shown, the expert system <highlight><bold>750</bold></highlight> may use the measurement task specification <highlight><bold>740</bold></highlight> to generate a run-time specification <highlight><bold>770</bold></highlight>. As mentioned above, the expert system <highlight><bold>750</bold></highlight> may include one or more routing experts. The expert system <highlight><bold>750</bold></highlight> may also include one or more experts for each of the measurement device types shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C, in addition to various other experts, including streaming experts, and synchronization experts, among others. The various experts may analyze the measurement task specification <highlight><bold>740</bold></highlight> and &ldquo;solve&rdquo; the MSOs to generate or initialize primitive settings for components, where the primitive settings may be used to configure the components to perform the specified measurement task. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In one embodiment, the run-time specification <highlight><bold>770</bold></highlight> may similarly comprise software objects or data structures, such as C&plus;&plus; objects, which may specify the run-time parameters for software and/or hardware used to implement the specified measurement task. More specifically, in one embodiment, the run-time specification <highlight><bold>770</bold></highlight> may include parameter specifications for one or more measurement primitives <highlight><bold>408</bold></highlight> which correspond to rudimentary routing tasks or operations, described in more detail below. In another embodiment, the run-time specification <highlight><bold>770</bold></highlight> may also include parameter specifications for one or more measurement primitives <highlight><bold>408</bold></highlight> which correspond to rudimentary routing tasks or operations </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> The run-time specification <highlight><bold>770</bold></highlight> may in turn be interpreted by the run-time builder <highlight><bold>780</bold></highlight> to generate a run-time <highlight><bold>790</bold></highlight>, which may be executable to perform the specified measurement task. For more details of a system for specifying and/or performing a measurement task, please see U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, U.S. application Ser. No. 10/010,826 titled </paragraph>
<paragraph id="P-0102" lvl="0"><number>&lsqb;0102&rsqb;</number> &ldquo;System of Measurements Experts and Method For Generating High-Performance Measurements Software Drivers&rdquo; filed Nov. 13, 2001, and U.S. application Ser. No. 10/010,829 titled &ldquo;Measurements Expert System and Method For Generating High-Performance Measurements Software Drivers&rdquo; filed Nov. 13, 2001, all of which were incorporated by reference above. </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> As mentioned above, in one embodiment, the measurement driver program <highlight><bold>212</bold></highlight> may include one or more routing experts which may be operable to analyze routing requirements for a specified measurement task and determine a plurality of routes for the measurement system based on the analysis. Furthermore, in one embodiment, the one or more routing experts may be operable to determine the routes dynamically, e.g., at runtime. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> Thus, in one embodiment, the expert system <highlight><bold>750</bold></highlight> may include a plurality of routing experts, where each routing expert represents one or more routing operations on a signal measured or generated by hardware. A given routing specification or problem, represented by a measurement specification object (MSO), may be broken up into sub-routing problems which may each be solved by an appropriate routing expert. Thus, the solution of the routing problem may involve a significant amount of branching, with subsequent sub-solutions that must be combined to generate the final routing solution. In one embodiment, a decision tree may be used to facilitate the decision process. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In another embodiment, the expert system <highlight><bold>750</bold></highlight> may include a single routing expert that manages routing through all routing components. In this embodiment, the routing expert may solve the routing problem with one decision. However, it should be noted that internally, multiple branches may occur, although the number of branches is preferably low, e.g., for performance reasons. In other words, the routing expert is preferably implemented so that it branches the fewest amount of times. The routing system may minimize component branching by preprocessing the topography of a static component into an optimized graph representing routes through the component, as described below. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> One example where branching may occur is when a device includes a number of similar components that may effectively be interchangeable with respect to a given route. In other words, each of the components is functionally equivalent, also referred to as homogenous, and so the routing system may simply group the components together in the graph. Each component represents a route or a sub-route of a route, and so the collection of components implies route branching, although the routing system may collapse all of the grouped routes into a single branch. The routing system may make the selection of a particular component (and corresponding route) at runtime, based, for example, upon availability. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> Another example of multiple solutions relates to multiplexers. As mentioned above, when routing between two terminals, multiple paths may be possible. The multiple possible paths and the corresponding settings may be encoded into primitive settings which may be stored for use at runtime. This may allow alternatives if a particular path is not available due to resource conflicts. Of course, if there are multiple paths between two terminals, the paths may be sorted based upon cost, so that the best available route may be chosen. Encoding multiple solutions into the primitive settings provides a compromise of maximizing flexibility while keeping routing deterministic. </paragraph>
<paragraph id="P-0108" lvl="0"><number>&lsqb;0108&rsqb;</number> Thus, when a route has multiple possible solutions, the routing system may pre-compute a set of choices that can possibly satisfy the route specification. Situations such as these may occur whenever the routing system encounters an array of homogeneous routing resources while traversing the device topographies. </paragraph>
<paragraph id="P-0109" lvl="7"><number>&lsqb;0109&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference>&mdash;Method for Performing Dynamic Routing for a Measurement Task </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is a flowchart diagram illustrating one embodiment of a method for performing dynamic routing in a measurement system, the method being used to determine and configure routing in installed measurement hardware and/or software devices in the measurement system to perform a measurement task. In one embodiment, the measurement task may comprise a plurality of measurement sub-tasks. In another embodiment, the measurement task may comprise a complex measurement operation using a plurality of measurement devices. It is noted that the flowchart of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> is exemplary only. Further, various steps in the flowchart of <cross-reference target="DRAWINGS">FIG. 5</cross-reference> may occur concurrently or in different order than that shown, or may not be performed, as desired. Also, various steps may be added to <cross-reference target="DRAWINGS">FIG. 5</cross-reference> as desired. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> As shown, in step <highlight><bold>502</bold></highlight> input may be received specifying source and destination terminals in a measurement system. In other words, a start terminal and an end terminal for a desired (yet to be determined) route may be specified by the input information. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> In step <highlight><bold>504</bold></highlight> topography descriptions for one or more devices in the measurement system may be received. As used herein, the term &ldquo;topography description&rdquo; refers to information which indicates connectivity between elements in the measurement system. In one embodiment, a topographical description may be in the form of a text file, i.e., a topographical description file, specifying connections via labels, although any other approaches for indicating connectivity may also be used. In one embodiment, the topography description may indicate a plurality of components in a device in the measurement system, and connectivity between each of the plurality of components in the device. Examples of components for which topographies may be determined include, but are not limited to, STC Chip, NI-TIO Chip, RTSI Chip, RTSI Cable, Normal PXI Trigger Backplane, 18 Slot PXI Trigger Backplane with directional buffers, 6534 FPGA, 4472 FPGA, 5112 FPGA, 5620 FPGA, 5431 FPGA, 5401, FPGA, 5411 FPGA, 5421 FPGA, 4070 FPGA, Switching, and the DHV Motherboard, among others. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In another embodiment, a plurality of topography descriptions may be received respectively indicating connectivity among components of a corresponding plurality of measurement devices in the measurement system. In one embodiment, the topography description may include configuration information for one or more of the components specifying one or more operational parameters for the respective component. In yet another embodiment, a topography description may be received that indicates connectivity between various devices in a multi-device measurement system, i.e., a system map of the hardware devices. Each of these cases is discussed in more detail below with reference to FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C. It should be noted that in one embodiment, the input of step <highlight><bold>504</bold></highlight> may be included in the input of step <highlight><bold>502</bold></highlight>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> In step <highlight><bold>506</bold></highlight>, a plurality of routes from the source terminal to the destination terminal may be programmatically determined, for example, based on the received topographical descriptions of <highlight><bold>504</bold></highlight>. More specifically, a plurality of routes may be programmatically determined which provide the necessary routing functionality for the specified measurement task. Further details of the programmatic determination of the plurality of routes are provided below with reference to FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In step <highlight><bold>508</bold></highlight>, the plurality of routes determined in <highlight><bold>506</bold></highlight> may be stored. In other words, information specifying the determined plurality of routes may be stored, for example, in a memory medium of the computer system <highlight><bold>102</bold></highlight>, or in a memory medium of an external system coupled to the computer system <highlight><bold>102</bold></highlight>. In one embodiment, storing the (information specifying) plurality of routes may include storing the routes in a run-time specification which is usable to configure one or more devices to perform the measurement task, as described above. In other words, the run-time specification may be usable to configure the plurality of routes in the device or devices. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> The run-time specification <highlight><bold>770</bold></highlight> preferably comprises parameter settings for one or more measurement devices or device components included within the measurement system, and may also specify software components or software programs which are to be used during execution of the task. The run-time specification may comprise a specification of the parameters of one or more measurement routing primitives, where each measurement routing primitive includes a software object and corresponding configuration settings, and where each measurement routing primitive is operable to implement at least a portion of one or more signal routes in the measurement system for performing the measurement task. Thus, in an embodiment in which the topographical description for each device includes operational parameters for components of the device included in the plurality of routes, storing the routes in the run-time specification may include storing the operational parameters for components of the device included in the plurality of routes. Thus, the run-time specification may be usable to configure the components of the device using the one or more operational parameters to implement the plurality of routes. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In step <highlight><bold>510</bold></highlight>, a route of the plurality of possible routes may optionally be dynamically determined. In other words, at runtime, a first route may be dynamically determined or selected from the plurality of routes based on a metric. For example, the route may be programmatically determined based on hardware availability, e.g., routing resource availability, as described in more detail below. It is noted that as used herein, the phrase &ldquo;at runtime&rdquo; refers to a point in time at or just prior to performance of the measurement task. In other words, an action or process performed &ldquo;at runtime&rdquo; of the measurement task is performed upon initiation or execution of the measurement task, e.g., the graphical program, just prior to the execution of the measurement task, or during execution of the measurement task. Said another way, &ldquo;at runtime&rdquo; refers to when (or just prior to when) the route is being committed to hardware. Thus, dynamically determining a route refers to determining the route &ldquo;on the fly&rdquo; at or during execution of the task. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In step <highlight><bold>512</bold></highlight>, software executing on the computer system and/or the user may optionally configure the measurement hardware and/or software device(s) to implement the selected route. For example, the configuration registers for one or more multiplexers in a device may be set. The configuration registers can, for example, specify that the multiplexer disconnect its output (i.e. tristate on its output), thereby effectively removing the multiplexer from device operations. Once the device(s) has been configured with the route, the device(s) may be used by an application program to perform the specified measurement task, where the configured routing in the device(s) provides the specified routing functionality in the performance of the measurement task. In one embodiment, the run-time specification may be analyzed, and the route configured in the device based on the analysis. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> Thus, routing management software, also referred to as a routing manager, executing on the host computer system <highlight><bold>102</bold></highlight> may perform the above method to determine routing in a measurement system in accordance with a specified measurement task. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In one embodiment, after the selected route has been configured in the measurement device(s) in <highlight><bold>510</bold></highlight>, a run-time may be created which embodies or implements the measurement task based on the generated run-time specification. More specifically, the run-time specification may be analyzed, and the run-time generated based on the analysis, where the run-time is executable to perform the measurement task. The runtime may be executable to utilize the route based on the generated run-time specification. In one embodiment, the run-time may comprise a collection of measurement operation primitives (or instances of measurement operation primitives) sequenced together which are executable to implement the measurement task. For example, the run-time may comprise a collection of instances of routing operation primitives sequenced together which are executable to perform routing functions for the measurement task. After step <highlight><bold>512</bold></highlight> the user (or a software program) may execute the run-time to perform the measurement task. In other words, the run-time execution may invoke the various configured hardware and/or software components to perform the specified measurement task. For more details on the generation and use of the run-time, please see U.S. application Ser. No. 10/008,792 titled &ldquo;Measurement System Software Architecture for Easily Creating High-Performance Measurement Applications&rdquo; filed Nov. 13, 2001, incorporated by reference above. </paragraph>
<paragraph id="P-0121" lvl="0"><number>&lsqb;0121&rsqb;</number> As noted above, in some embodiments, one or more steps of the method may be omitted. In another embodiment, input specifying a source terminal and a destination terminal in a measurement system may be received, as well as at least one topography description, where the topography description indicates a plurality of components in at least one device in the measurement system, and connectivity between each of the plurality of components in the device. A plurality of possible routes from the source terminal to the destination terminal may be programmatically computed based on the topography description, and the plurality of possible routes stored in a memory. One of the plurality of possible routes is operable to be selected at runtime of the measurement task to configure the measurement system. Each of the plurality of possible routes may include or use a respective one or more routing resources in the measurement system, where one of the plurality of possible routes is operable to be selected at runtime of the measurement task based on routing resource availability. </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> For another example, in one embodiment, a plurality of possible routes from a source terminal to a destination terminal may already be stored, e.g., in a memory or carrier medium. Then, at runtime, the method may receive an indication that the measurement task is to be executed, programmatically determine a first route of the plurality of possible routes in response to the indication, and then configure the measurement system with the first route, thereby producing a signal path in the measurement system from the source terminal to the destination terminal. Programmatically determining the first route from the plurality of routes may include selecting the first route from the plurality of routes based on routing resource availability. In one embodiment, the measurement system may include a plurality of devices, and configuring the measurement system may include writing route configuration information to each of at least a subset of the plurality of devices to configure each device with at least a portion of the first route. </paragraph>
<paragraph id="P-0123" lvl="7"><number>&lsqb;0123&rsqb;</number> FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C&mdash;Route Determination </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C flowchart various embodiments of step <highlight><bold>506</bold></highlight> above, in which plurality of routes from a source terminal to a destination terminal are programmatically determined. In particular, exemplary methods describing this step are disclosed for different measurement systems, ranging from a single-device system, as shown in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, to multi-device measurement systems, as shown in <cross-reference target="DRAWINGS">FIGS. 1B and 1C</cross-reference>. It is noted that the methods presented in FIGS. <highlight><bold>6</bold></highlight>A-<highlight><bold>6</bold></highlight>C are exemplary, and that some of the steps may be performed in a different order than shown, or may be omitted. Additional steps may also be performed as desired. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> is a flowchart of one embodiment of a method for programmatically determining a plurality of routes from a source terminal to a destination terminal, where the source terminal and destination terminal are both included in the same device. In other words, the computed routes are each single-device routes. <cross-reference target="DRAWINGS">FIGS. 6B and 6C</cross-reference> flowchart two approaches to the dynamic determination of multi-device routes in a measurement system. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 6A</cross-reference> shows, in <highlight><bold>602</bold></highlight>A, a received topography description may be preprocessed to generate a graph of possible routes through the device. The graph is preferably generated in a preprocess to avoid violating time constraints at runtime. I.e., depending upon the size of the graph, the graph generation (pre)process may be computationally intensive, and thus may not be suitable for performance at runtime. </paragraph>
<paragraph id="P-0127" lvl="0"><number>&lsqb;0127&rsqb;</number> As is well known in the art, a graph is a collection of nodes and edges, where each edge connects two nodes, often with a direction specified for a given edge. In one embodiment, each edge may represent a respective device, device component, or sub-component, and each node in the graph may represent a terminal of the device or device component. In other words, the graph is a structure that represents the connectivity of the measurement system, or a portion of the measurement system, as described in the topography description. In this example, the graph represents all of the connections of the components in the device, and thus compactly represents all of the possible routes in and/or through the device. In one embodiment, the graph may be a weighted graph, where the edges in the graph are weighted in accordance with a specified metric, e.g., a cost metric. </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> A number of different cost metrics may be used to facilitate the evaluation of routing choices. Each of these methods can be used in combination with one another, and each functions by adding weight to a graph edge. The more weight the edge has, the higher the cost of the edge. Routes with less weight are typically more desirable than heavier routes. It is noted that none of these metrics are perfect, but by combining them, useful heuristics for weighting components may result. Various examples of cost metrics are described below. It should be noted that the metrics presented are meant to be exemplary, and are not intended to limit the invention to any particular set of cost metrics. </paragraph>
<paragraph id="P-0129" lvl="0"><number>&lsqb;0129&rsqb;</number> Size Weighting: When the topography gets processed, the initial weight of the routing component is determined by looking at the number of sources and listeners of the component. This approach is based upon the idea that components with more sources and listeners are likely to be more useful. This usefulness is reflected in the weight rating of the component. </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> Subsystem Trespassing: Terminals in a topography may be tagged with a subsystem. Assume a board with two functions: AI and AO. Also, let some terminals be directly tied to AI or AO, meaning that if a directly tied terminal gets consumed, then there is a very likely chance the associated function will be unusable. For example, if the source input terminal for AI is used, then AI will not be usable unless it can use that identical setting. Terminals associated with AI may still be used, but only for an AI function. In this example, the source input terminal for AI may still be used for a non-AI function, but the price of the terminal may rise, e.g. by doubling its cost, since the entire AI subsystem will probably be unusable for the duration of the route. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Thus, a variety of cost metrics may be used to weight nodes in a prospective route, allowing the graph traversal algorithm to discriminate between competing routes. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> As mentioned above, in another embodiment, the measurement system may be a multi-device measurement system, where a plurality of devices may communicate with one another in the performance of the measurement task. In this case, the source terminal may be comprised in a first device in the measurement system, and the destination terminal may be comprised in a second device in the measurement system. Thus, each of the plurality of routes may comprise a multi-device route. In this embodiment, a plurality of received topography descriptions may be preprocessed to generate a plurality of graphs representing possible routes through each respective device, as shown in step <highlight><bold>602</bold></highlight>B of <cross-reference target="DRAWINGS">FIGS. 6B and 6C</cross-reference>. In other words, a respective graph may be generated from the topography description of each device. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> For example, in an embodiment where the measurement system includes two devices, a first topography description may be received which indicates a plurality of components in the first device, and connectivity between each of the plurality of components. Then, a second topography description may be received which indicates a plurality of components in the second device, and connectivity between each of the plurality of components in the second device. The first topography description may be preprocessed to generate a first graph, where the first graph comprises a representation of possible routes in the first device. Then, the second topography description may be preprocessed to generate a second graph, where the second graph comprises a representation of possible routes in the second device. Of course, the actual order in which the topography descriptions are preprocessed may vary. The first graph and the second graph may then be usable to determine the plurality of routes from the source terminal to the destination terminal, where the plurality of routes span the two devices. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> For another example, consider a multi-device system in which each of the plurality of routes comprises a multi-device route through a plurality of devices in the measurement system. In other words, the source terminal may be comprised in a first device of the plurality of devices, the destination terminal may be comprised in a second device of the plurality of devices, and the first device may be coupled to the second device through one or more other devices of the plurality of devices. In this example, a plurality of device topography descriptions may be received (in <highlight><bold>504</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>), where each of the device topography descriptions indicates a plurality of components in a respective device of the plurality of devices, and connectivity between each of the plurality of components in the respective device. Then, each of the plurality of device topography descriptions may be preprocessed to generate a respective plurality of graphs, where each graph is a representation of possible routes in the respective device. The plurality of graphs may then be usable to determine the plurality of routes from the source terminal to the destination terminal. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> After the graph (or graphs) has been generated in <highlight><bold>602</bold></highlight>A (or <highlight><bold>602</bold></highlight>B), then in <highlight><bold>604</bold></highlight>A the graph may be traversed to determine a plurality of routes (or a single route, if only one route exists) from the source terminal to the destination terminal. As is well known by those skilled in the art, there is a wide variety of algorithms available for traversing a graph. An exemplary graph traversal algorithm is Dijkstra&apos;s shortest path algorithm, as is well known in the art, which finds a &ldquo;best&rdquo; path from one node in the graph to another node in the graph, where the term &ldquo;best&rdquo; connotes a cheapest path based upon a specified metric. For example, in a graph weighted to represent physical distances between nodes, the best path may be the shortest path joining the nodes, either directly or indirectly. In the course of finding the best path, all other paths in the graph from the source terminal to the destination terminal may be discovered and measured. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> In one multi-device embodiment, as mentioned above, each graph may be traversed to determine or compute a respective one or more sub-routes through each graph, as indicated in <highlight><bold>604</bold></highlight>B of <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>. For example, in the two device example from above, where the first device is coupled to the second device through a bus, the first graph may be traversed to determine a plurality of routes from the source terminal to an input terminal of the bus. Then, the second graph may be traversed to determine a plurality of routes from an output terminal of the bus to the destination terminal. The plurality of routes from the source terminal to the input terminal of the bus and the plurality of routes from the output terminal of the bus to the destination terminal may then be combined to determine the plurality of routes from the source terminal to the destination terminal. In other words, the respective one or more sub-routes for each graph may be combined to determine a plurality of routes from the source terminal to the destination terminal. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> Similarly, in the multi-device example from above where the first device is coupled to the second device through one or more other devices, each of the plurality of graphs may be traversed to determine a respective one or more sub-routes through each of the plurality of graphs. The respective one or more sub-routes from each graph may then be combined to generate the plurality of routes from the source terminal to the destination terminal, as indicated in <highlight><bold>605</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>. </paragraph>
<paragraph id="P-0138" lvl="0"><number>&lsqb;0138&rsqb;</number> More specifically, where the first device is coupled to a first bus, where the first bus is coupled to the second device through the one or more other devices and corresponding one or more buses, a first graph of the plurality of graphs may be traversed to determine a plurality of routes from the source terminal to an input terminal of the first bus. Then, each of one or more other graphs of the plurality of graphs may be traversed to determine a plurality of routes from an output terminal of the first bus to the destination terminal. Then, the plurality of routes from the source terminal to the input terminal of the first bus and the plurality of routes from the output terminal of the first bus to the destination terminal may be combined to determine the plurality of routes from the source terminal to the destination terminal. In other words, the respective one or more sub-routes for each graph may be combined to determine a plurality of routes from the source terminal to the destination terminal. </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> In another multi-device embodiment, programmatically determining a plurality of routes from the source terminal to the destination terminal may include combining the plurality of graphs to generate a combined graph, where the combined graph represents possible routes from the source terminal to the destination terminal, as indicated in <highlight><bold>603</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 6C</cross-reference>. Then, the combined graph may be traversed to determine the plurality of routes from the source terminal to the destination terminal, as shown in <highlight><bold>604</bold></highlight>C of <cross-reference target="DRAWINGS">FIG. 6C</cross-reference>. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> For example, in an embodiment where the first device is coupled to a first bus, and the first bus is coupled to the second device through the one or more other devices and corresponding one or more buses, combining the plurality of graphs to generate a combined graph may include linking respective pairs of graphs of the plurality of graphs via respective nodes, where each respective node represents a respective bus of the corresponding one or more buses, and each respective bus couples a respective pair of devices corresponding to the respective pair of graphs. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> In yet another multi-device embodiment, in addition to receiving a plurality of topographical descriptions corresponding to the plurality of devices in the measurement system, a system topography description may be received which indicates connectivity between the plurality of devices. The system topography description may be preprocessed to generate a system graph, where the system graph comprises a representation of possible routes through the plurality of devices. The system graph may then be traversed to determine a plurality of routes from the first device to the second device. Each of the plurality of routes from the first device to the second device may pass through zero or more of the one or more other devices. In other words, the system graph may be traversed to determine interdevice routes through the system. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> The plurality of routes from the first device to the second device may then be used to generate the plurality of routes from the source terminal to the destination terminal. For example, in the embodiment described above where each of the plurality of graphs is traversed to determine a respective one or more sub-routes through each of the plurality of graphs (<cross-reference target="DRAWINGS">FIG. 6B</cross-reference>), the respective one or more sub-routes may be combined based on the determined plurality of routes from the first device to the second device, thereby generating the plurality of routes from the source terminal to the destination terminal. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> Alternatively, in the embodiment described above where the plurality of graphs are first combined to generate a combined graph (<cross-reference target="DRAWINGS">FIG. 6C</cross-reference>), the combination may be performed based on the determined plurality of routes from the first device to the second device. The combined graph may then be traversed to determine the plurality of routes from the source terminal to the destination terminal, as described above. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In one embodiment, the plurality of routes may determined from the graph based on the metric, and the routes sorted based on the metric. Then, at runtime, the routes may be considered in the sorted order. In another embodiment, the plurality of routes may be culled against a threshold, then ranked according to the metric. In one embodiment, the best route may be selected for preferred use in performing the measurement task, but one or more secondary routes from the sorted routes may also be selected as contingency routes, for use in the case of resource conflicts detected at runtime. For example, after selecting a first or primary route from the plurality of routes, a resource conflict may be detected on the first route. A determination may be made as to whether a second or secondary route of the plurality of routes exists which circumvents the resource conflict. If such a second route exists, the second route may be selected, replacing the first route. If the second route does not exist, an error may be returned, e.g., the process may fail. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> It should be noted that in some embodiments, each of the plurality of routes may traverse one or more public buses in the measurement system. For example, one or more of the public buses may be trigger buses. Examples of trigger buses contemplated include, but are not limited to, a RTSI bus, a PXI trigger backplane, and an external trigger bus. An external trigger bus may include any type of bus including, but not limited to, a simple wire or cable, a fiber optic line or cable, a wireless bus, and a switched fabric, among others. Additionally, the methods described above may include performing one or more reservation protocols for the computed routes to prevent resource conflicts on the one or more public buses, as is well known in the art. It is noted that generally, the one or more public buses provide connections between devices in a multi-device measurement system, as described above. However, in some embodiments, routes through a single device may include a public bus. In other words, a single-device route (or sub-route) may begin in the device, exit the device to the public bus, then return to the device. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> In one embodiment, the routing system may arbitrate the reservation of trigger lines, for example, to avoid possible double driving scenarios. In one embodiment, the routing system may leverage PXI&apos;s trigger reservation functionality wherever possible to prevent double driving of trigger lines. Another benefit of PXI&apos;s trigger reservation functions is its ability to reserve an arbitrary line. This ability removes the necessity to branch on every trigger line over the bus. Thus, if an arbitrary trigger line is required, it may not be necessary to consider and store every trigger line. Ex. Instead of pushing <highlight><bold>7</bold></highlight> RTSI lines onto an internal decision tree, only one arbitrary RTSI line is pushed. Then, at runtime, the first available RTSI line may be selected from the 7 RTSI lines. </paragraph>
<paragraph id="P-0147" lvl="7"><number>&lsqb;0147&rsqb;</number> Initialization and Device Detection </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> As mentioned above, multi-device routes may be determined in a system with multiple heterogeneous devices linked together with diverse bus types. The following describes initialization and device detection for the routing system described above, according to one embodiment. Upon initialization of the routing system, the over-all map or graph of the measurement system may be empty. As the measurement system, e.g., software executing on the computer system <highlight><bold>102</bold></highlight>, recognizes devices associated with the system, information indicating the devices may be passed to the routing system one by one. When a device is removed from the measurement system, these same steps may be performed in reverse. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> First, a device may be recognized and passed to the routing system. When the device gets added to the measurement system, the routing system may create a node for it in the routing system. An error may result if the device exists multiple times in the map of the measurement system. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> Second, the connectivity of the device may be determined. For example, the routing system needs to determine what buses are connected to the device. This may be achieved by querying a DIM (device interconnect manager) component. The routing system may then create an edge for each bus/device instance. Note that two devices may be connected multiple times if there are multiple buses between the devices. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> Third, the edges for the newly inserted device may be weighted. Edges representing connections inside a device may be weighed when the device topography is preprocessed. However, this approach may not be available for a dynamic system map, in that after inserting the device node, the routing system may need to compute the new weight for edges adjacent to the device node. The cost metrics for computing the added weight are preferably identical to the cost metrics for preprocessed topographies. </paragraph>
<paragraph id="P-0152" lvl="7"><number>&lsqb;0152&rsqb;</number> Multi-Route Processing </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> The following describes one example embodiment of a multi-device route determination process. </paragraph>
<paragraph id="P-0154" lvl="2"><number>&lsqb;0154&rsqb;</number> 1) A multi-device routing request may be submitted to the routing system. </paragraph>
<paragraph id="P-0155" lvl="2"><number>&lsqb;0155&rsqb;</number> 2) The routing system may then walk (traverse) the system graph from the source device to the destination device. The routing system may then determine what buses are connected to the device by querying the DIM (device interconnect manager) component, as described above. The routing system may then create an edge for each bus/device instance. </paragraph>
<paragraph id="P-0156" lvl="2"><number>&lsqb;0156&rsqb;</number> 3) The route may be partitioned into sub routes. In order to break up the route properly, the routing system may walk the system map. If the route in the system map has n nodes, then the route will preferably be broken up into n pieces. </paragraph>
<paragraph id="P-0157" lvl="2"><number>&lsqb;0157&rsqb;</number> 4) Each of the sub pieces or sub-routes of the route may then be solved individually. The order in which these sub pieces are solved is not important. Each routing sub piece may be a single device routing problem. </paragraph>
<paragraph id="P-0158" lvl="2"><number>&lsqb;0158&rsqb;</number> 5) All the sub route solutions may be combined into a single primitive settings object in the run-time specification. The order of the settings in the run-time specification may be important, in that routes may need to be committed from source to destination in order to minimize glitching. At this point, the route may be considered solved. </paragraph>
<paragraph id="P-0159" lvl="7"><number>&lsqb;0159&rsqb;</number> Alternative Architecture </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> An alternative architecture to using the system map is to make a single map for the entire system. For this architecture, the system and device level would be combined into one entity. The disadvantage to this method results from the dynamic nature of the system map in that a significant amount of processing time may be needed in order to update the system map for a device addition or removal. </paragraph>
<paragraph id="P-0161" lvl="7"><number>&lsqb;0161&rsqb;</number> FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>9</bold></highlight>E&mdash;Examples of Topographies </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> FIGS. <highlight><bold>7</bold></highlight>-<highlight><bold>9</bold></highlight>E illustrate various graphical topographies for several example measurement systems (excluding the computer system <highlight><bold>102</bold></highlight>). <cross-reference target="DRAWINGS">FIG. 7</cross-reference> represents the connections between devices graphically via lines joining the devices, while <cross-reference target="DRAWINGS">FIGS. 8 and 9</cross-reference>A-<highlight><bold>9</bold></highlight>E represent the connections through text labels indicating input sources and output destinations for each component. </paragraph>
<paragraph id="P-0163" lvl="7"><number>&lsqb;0163&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference>&mdash;Topography Diagram for Multi-Chassis Measurement Task </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a topography diagram for a measurement system or task for measuring two voltage phenomena on two channels with two SCXI modules in two SCXI chassis both connected to an MIO DAQ device. Channel &ldquo;myvoltagel&rdquo; <highlight><bold>1512</bold></highlight> is defined to be terminal <highlight><bold>5</bold></highlight> of Device 1, which is an SCXI 1100 module <highlight><bold>1504</bold></highlight> in slot 1 of the SCXI 1001 chassis <highlight><bold>1502</bold></highlight>, identified as device 0. Device 4 <highlight><bold>1510</bold></highlight>, a PCI-6032E MIO DAQ device, is connected to the SCXI 1100 module <highlight><bold>1504</bold></highlight> by a cable connecting the ai0 terminal <highlight><bold>1522</bold></highlight> of device 4 <highlight><bold>1510</bold></highlight> to the mch0 terminal <highlight><bold>1518</bold></highlight>A of Device 1 <highlight><bold>1504</bold></highlight> and the scanclk terminal <highlight><bold>1520</bold></highlight>C of device 4 <highlight><bold>1510</bold></highlight> to the scanclk terminal <highlight><bold>1520</bold></highlight>A of Device 1 <highlight><bold>1504</bold></highlight>. The fully qualified channel path for channel &ldquo;myvoltagel&rdquo; <highlight><bold>1512</bold></highlight> is &ldquo;/dev4:ai0/dev0/dev1:5&rdquo;. Channel &ldquo;myVoltage2&rdquo; <highlight><bold>1514</bold></highlight> is defined to be terminal <highlight><bold>6</bold></highlight> of device 3, which is an SCXI <highlight><bold>1102</bold></highlight> module <highlight><bold>1508</bold></highlight> in slot 1 of another SCXI 1001 chassis <highlight><bold>1506</bold></highlight>, identified as Device 2. Device 4 <highlight><bold>1510</bold></highlight> is connected to the SCXI 1102 module <highlight><bold>1508</bold></highlight> by a cable connecting the ail terminal <highlight><bold>1524</bold></highlight> of device 4 <highlight><bold>1510</bold></highlight> to the mch0 terminal <highlight><bold>1518</bold></highlight>B of device 3 <highlight><bold>1508</bold></highlight> and the scanclk terminal <highlight><bold>1520</bold></highlight>C of device 4 <highlight><bold>1510</bold></highlight> to the scanclk terminal <highlight><bold>1520</bold></highlight>B of device 3. The fully qualified channel path for channel &ldquo;myVoltage2&rdquo; is &ldquo;/dev4:ai1/dev2/dev3:6&rdquo;. </paragraph>
<paragraph id="P-0165" lvl="7"><number>&lsqb;0165&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference>&mdash;Digital Topography of a PXI-4070 Card </paragraph>
<paragraph id="P-0166" lvl="0"><number>&lsqb;0166&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> illustrates the topography of a PXI-4070 card from National Instruments Corporation, according to one embodiment. As <cross-reference target="DRAWINGS">FIG. 8</cross-reference> shows, the card includes a plurality of MUXs <highlight><bold>802</bold></highlight>-<highlight><bold>820</bold></highlight>, and a DMM Timing Engine <highlight><bold>830</bold></highlight>. As <cross-reference target="DRAWINGS">FIG. 8</cross-reference> also shows, each MUX may receive input from a variety of sources. For example, the AuxTrig0 MUX <highlight><bold>802</bold></highlight> may receive input from AuxSyncInverter <highlight><bold>806</bold></highlight> and VMC (or &excl;VMC) from the DMM Timing Engine <highlight><bold>830</bold></highlight>, or may be set to high-Z with the tristate terminal of the MUX, effectively removing the MUX from any routes. Each MUX may be configured to receive input from another component, thus, a variety of routes may be effected by configuration of the MUXs. </paragraph>
<paragraph id="P-0167" lvl="7"><number>&lsqb;0167&rsqb;</number> FIGS. <highlight><bold>9</bold></highlight>A-<highlight><bold>9</bold></highlight>F&mdash;Topographies of PCI E-Series Card </paragraph>
<paragraph id="P-0168" lvl="0"><number>&lsqb;0168&rsqb;</number> FIGS. <highlight><bold>9</bold></highlight>A-<highlight><bold>9</bold></highlight>F illustrate example topographies of a PCI E-Series Card from National Instruments Corporation. As mentioned above, the topographies may each be represented as a topography description file. Alternatively, multiple topographies may be represented in a single topography description file. </paragraph>
<paragraph id="P-0169" lvl="7"><number>&lsqb;0169&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>A&mdash;High Level Topography of PCI E-Series Card </paragraph>
<paragraph id="P-0170" lvl="0"><number>&lsqb;0170&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> illustrates the high level topography/components of the PCI E-Series card from National Instruments Corporation. As <cross-reference target="DRAWINGS">FIG. 9A</cross-reference> shows, the card may include an I/O connector <highlight><bold>902</bold></highlight> and a RTSI connector (and board lines) <highlight><bold>904</bold></highlight> for communication with external buses. In the embodiment shown, the card also includes a counters element <highlight><bold>906</bold></highlight>, an analog input <highlight><bold>908</bold></highlight>, and an analog output <highlight><bold>910</bold></highlight>, each of which is described in more detail below with reference to FIGS. <highlight><bold>9</bold></highlight>B-<highlight><bold>9</bold></highlight>F. </paragraph>
<paragraph id="P-0171" lvl="7"><number>&lsqb;0171&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B&mdash;PCI E-Series Card: I/O Connector </paragraph>
<paragraph id="P-0172" lvl="0"><number>&lsqb;0172&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9B</cross-reference> illustrates an example topography for the I/O connector element <highlight><bold>902</bold></highlight> of the E-Series card of <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. As may be seen in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, I/O connector <highlight><bold>902</bold></highlight> connects to a plurality of MUXs <highlight><bold>903</bold></highlight>A-<highlight><bold>903</bold></highlight>N, each of which may receive input from two or more sources, as labeled. For example, PFI0 MUX <highlight><bold>903</bold></highlight>A may receive input from Safe_AI_START1_Out MUX <highlight><bold>903</bold></highlight>P, as shown. The PFI0 MUX <highlight><bold>903</bold></highlight>A may also be set to high-Z via the tristate terminal. Note that the various I/O connector MUXs may receive inputs from the components of other card elements, namely, the counters element <highlight><bold>906</bold></highlight>, the analog input <highlight><bold>908</bold></highlight>, and the analog output <highlight><bold>910</bold></highlight>. Thus, the I/O connector MUXs may be configured to implement a variety of routes on the E-Series card. </paragraph>
<paragraph id="P-0173" lvl="7"><number>&lsqb;0173&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>C&mdash;PCI E-Series Card: RTSI Connector </paragraph>
<paragraph id="P-0174" lvl="0"><number>&lsqb;0174&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9C</cross-reference> illustrates an example topography for the RTSI connector element <highlight><bold>904</bold></highlight> (with board lines) of the E-Series card of <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. As may be seen in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>C, RTSI connector <highlight><bold>904</bold></highlight> connects to a MUX <highlight><bold>905</bold></highlight>D, which may receive input from each of three other MUXs <highlight><bold>905</bold></highlight>A-<highlight><bold>905</bold></highlight>C, as labeled. For example, the RTSISubSelection1 MUX <highlight><bold>905</bold></highlight>C may receive input from Counter0_Output of the counter element <highlight><bold>906</bold></highlight> (see MUX <highlight><bold>907</bold></highlight>J of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>D, described below), as well as from GPCTR0_OUT from I/O connector MUX <highlight><bold>903</bold></highlight>K of <cross-reference target="DRAWINGS">FIG. 9</cross-reference>B, described above. Thus, the RTSI connector element of the E-Series card may be configured to implement a variety of routes through its resident MUXs. </paragraph>
<paragraph id="P-0175" lvl="7"><number>&lsqb;0175&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>D&mdash;PCI E-Series Card: Counter </paragraph>
<paragraph id="P-0176" lvl="0"><number>&lsqb;0176&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9D</cross-reference> illustrates an example topography for the counter element <highlight><bold>906</bold></highlight> of the E-Series card of <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>D, two general purpose counters <highlight><bold>920</bold></highlight>A and <highlight><bold>920</bold></highlight>B and a simple frequency output counter <highlight><bold>925</bold></highlight> each may couple to various counter element MUXs <highlight><bold>907</bold></highlight>, each of which is configurable to receive input from a variety of sources, including sources from other elements on the E-Series card. Thus, a plurality of routes may be configured through various counter MUXs and counters to provide various counter functions to the E-Series card. </paragraph>
<paragraph id="P-0177" lvl="7"><number>&lsqb;0177&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>E&mdash;PCI E-Series Card: Analog Input </paragraph>
<paragraph id="P-0178" lvl="0"><number>&lsqb;0178&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9E</cross-reference> illustrates an example topography for the analog input element <highlight><bold>908</bold></highlight> of the E-Series card of <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. As may be seen in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>E, an Al timing engine <highlight><bold>930</bold></highlight> may receive inputs from a plurality of Al MUXs <highlight><bold>909</bold></highlight>H-<highlight><bold>909</bold></highlight>O. MUXs <highlight><bold>9091</bold></highlight>-<highlight><bold>909</bold></highlight>O may receive input from corresponding MUXs <highlight><bold>909</bold></highlight>A-<highlight><bold>909</bold></highlight>G, as shown, optionally inverting the polarity of the input, as indicated by the &lsquo;&excl;input&rsquo; terminals. MUXs <highlight><bold>909</bold></highlight>A-<highlight><bold>909</bold></highlight>G may receive inputs from a variety of sources, including RTSI channels, counter outputs, and software control outputs, as shown. Note that AI MUX <highlight><bold>909</bold></highlight>H may receive input from the AI_SI_Source MUX <highlight><bold>909</bold></highlight>M. The AI timing engine <highlight><bold>930</bold></highlight> may then provide various analog input signals (as output from the analog input element) to other elements of the card. Thus, by configuring the settings on each MUX, a plurality of routes may be implemented in and through the analog input element of the E-Series card. </paragraph>
<paragraph id="P-0179" lvl="7"><number>&lsqb;0179&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference>F&mdash;PCI E-Series Card: Analog Input </paragraph>
<paragraph id="P-0180" lvl="0"><number>&lsqb;0180&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9F</cross-reference> illustrates an example topography for the analog output element <highlight><bold>910</bold></highlight> of the E-Series card of <cross-reference target="DRAWINGS">FIG. 9A</cross-reference>. As may be seen in <cross-reference target="DRAWINGS">FIG. 9</cross-reference>F, an AO timing engine <highlight><bold>940</bold></highlight> may receive inputs from a plurality of AI MUXs <highlight><bold>911</bold></highlight>E-<highlight><bold>911</bold></highlight>H. MUXs <highlight><bold>911</bold></highlight>E-<highlight><bold>911</bold></highlight>H may receive input from corresponding MUXs <highlight><bold>911</bold></highlight>A-<highlight><bold>911</bold></highlight>D, as shown, optionally inverting the polarity of the input, as indicated by the &lsquo;&excl;input&rsquo; terminals. MUXs <highlight><bold>911</bold></highlight>A-<highlight><bold>911</bold></highlight>D may themselves receive input from various sources, including RTSI channels, counter outputs, and software control outputs, as <cross-reference target="DRAWINGS">FIG. 9F</cross-reference> shows. The AO timing engine <highlight><bold>940</bold></highlight> may then provide various analog input signals (as output from the analog output element) to other elements of the card. Thus, by configuring the settings on each MUX, a plurality of routes may be implemented in and through the analog output element of the E-Series card. </paragraph>
<paragraph id="P-0181" lvl="0"><number>&lsqb;0181&rsqb;</number> Thus, the PCI E-Series card may facilitate a plurality of routes through its constituent elements via respective pluralities of MUXs comprised in each respective element. As described above, the method may receive topographical descriptions for the E-Series card and its elements, generate respective graphs for each, and determine a plurality of routes through the card in accordance with routing specifications for a measurement task (e.g., a source terminal and a destination terminal). </paragraph>
<paragraph id="P-0182" lvl="7"><number>&lsqb;0182&rsqb;</number> Example: Routing Sub-Problem </paragraph>
<paragraph id="P-0183" lvl="0"><number>&lsqb;0183&rsqb;</number> One example of the use of the routing configuration process involves a routing sub-problem as part of a larger measurement task. In this example, the presented problem includes routing an acquisition timebase signal on a first device (Device 1) to an acquisition timebase signal on a second device (Device 2) to synchronize the two devices for a 1 MHz acquisition. </paragraph>
<paragraph id="P-0184" lvl="0"><number>&lsqb;0184&rsqb;</number> The corresponding routing task specification may be summarized thus: connect terminal &ldquo;device1/timebase_out&rdquo; to &ldquo;device2/timebase_in&rdquo;. Additional information in the specification may include the fact that the terminal &ldquo;device1/timebase&rdquo; is a single-ended TTL digital signal with a bandwidth of 1 MHz. </paragraph>
<paragraph id="P-0185" lvl="7"><number>&lsqb;0185&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference>&mdash;Topography Diagram for Routing Task </paragraph>
<paragraph id="P-0186" lvl="0"><number>&lsqb;0186&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> is a topography diagram for the routing task described above. As <cross-reference target="DRAWINGS">FIG. 10</cross-reference> shows, Device 1 <highlight><bold>3102</bold></highlight>A may be operable to communicate with Device 2 <highlight><bold>3102</bold></highlight>B via a Real-Time System Integration Bus (RTSI) <highlight><bold>3104</bold></highlight>, which may provide support for sending and receiving synchronization signals between devices. In this embodiment, the RTSI bus may comprise a plurality of RTSI lines, e.g., 8 lines designated RTSI0-RTSI7 <highlight><bold>3104</bold></highlight>A-H. In one embodiment, device1 <highlight><bold>3102</bold></highlight>A may be operable to send the timebase_out signal <highlight><bold>3108</bold></highlight> through MUX <highlight><bold>3106</bold></highlight>A to the timebase_in <highlight><bold>3110</bold></highlight> of device2 <highlight><bold>3102</bold></highlight>B via line RTSI0 of the RTSI bus <highlight><bold>3104</bold></highlight>, through MUX <highlight><bold>3106</bold></highlight>B, as shown. In one embodiment, the system may include more than one RTSI bus, and so the RTSI bus <highlight><bold>3104</bold></highlight> shown may be designated as RTSIbus0, and a particular line on the bus, e.g., line 0, as RTSIbus0/RTSI0. </paragraph>
<paragraph id="P-0187" lvl="7"><number>&lsqb;0187&rsqb;</number> Examples of the Routing Determination Process </paragraph>
<paragraph id="P-0188" lvl="0"><number>&lsqb;0188&rsqb;</number> Below are described two examples of the sequence of events involved in specifying and performing routing in a measurement task. It should be noted that these are but examples, and are not intended to limit the implementation and use of the present invention to any particular embodiment. It should be further noted that various steps are described which occur before and after the dynamic determination of the routes, and which are performed by software and/or hardware which may not directly be a part of the present invention, but which may work in conjunction with the present invention as part of a larger system. Additionally, two types of users are described: an external user, referred to as the &ldquo;customer&rdquo;, which refers to the actual end user of the measurement system,; and an internal user, referred to as a &ldquo;user&rdquo; which refers to software components, e.g., device specific driver software, which creates routing experts. </paragraph>
<paragraph id="P-0189" lvl="7"><number>&lsqb;0189&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference>&mdash;Routing Between Two PCI Devices Over RTSI </paragraph>
<paragraph id="P-0190" lvl="0"><number>&lsqb;0190&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11</cross-reference> illustrates one example of routing between two PCI devices over an RTSI cable. As <cross-reference target="DRAWINGS">FIG. 11</cross-reference> shows, a first PCI device <highlight><bold>1110</bold></highlight> is coupled to a second PCI device <highlight><bold>1120</bold></highlight> over RTSI cable <highlight><bold>1140</bold></highlight>. A terminal on each device (terminal A <highlight><bold>1112</bold></highlight>, terminal B <highlight><bold>1122</bold></highlight>) provides a connection to each device&apos;s RTSI connector (<highlight><bold>1130</bold></highlight>A, <highlight><bold>1130</bold></highlight>B). The following describes one embodiment of a list of events that may occur during manual configuration of a RTSI cable. </paragraph>
<paragraph id="P-0191" lvl="0"><number>&lsqb;0191&rsqb;</number> Device 1 <highlight><bold>1110</bold></highlight> and device 2 <highlight><bold>1120</bold></highlight> may be inserted into the PC&apos;s PCI bus, and connected to a RTSI cable <highlight><bold>1140</bold></highlight>. This step is typically performed by the customer. Then, Device 1 <highlight><bold>1110</bold></highlight> and device 2 <highlight><bold>1120</bold></highlight> may be auto-detected by the device driver. The driver may also use the .ini file of the device to retrieve a list of its reservable resources, e.g., RTSI lines and PFI lines. The customer may then launch a configuration tool, e.g., National Instruments Corporation&apos;s Measurements Explorer (MAX), to configure Device 1 <highlight><bold>1110</bold></highlight> and device 2 <highlight><bold>1120</bold></highlight> and the RTSI cable <highlight><bold>1140</bold></highlight>. Note that the customer may now be required to add the RTSI cable <highlight><bold>1140</bold></highlight> to the system configuration if RTSI cables are not auto-detected. </paragraph>
<paragraph id="P-0192" lvl="0"><number>&lsqb;0192&rsqb;</number> The configuration tool, e.g., MAX, may then notify the device driver to add the RTSI cable <highlight><bold>1140</bold></highlight> to itself. An association between the RTSI cable <highlight><bold>1140</bold></highlight> and Device 1 <highlight><bold>1110</bold></highlight> may be made in MAX, for example, by the customer, after which MAX may tell the driver of the association of the RTSI cable to Device 1 <highlight><bold>1110</bold></highlight>. Then, an association between the RTSI cable <highlight><bold>1140</bold></highlight> and Device 2 may be made in MAX, after which MAX may tell the routing manager of the association of the RTSI cable <highlight><bold>1140</bold></highlight> to device 2 <highlight><bold>1120</bold></highlight>. </paragraph>
<paragraph id="P-0193" lvl="0"><number>&lsqb;0193&rsqb;</number> Note that the steps of launching the configuration tool to configure Device 1 <highlight><bold>1110</bold></highlight> and device 2 <highlight><bold>1120</bold></highlight> and the RTSI cable <highlight><bold>1140</bold></highlight>, and creating the associations between the RTSI cable and the two devices can be collapsed into a single step if an auto-detect feature is supported. Auto-detect may be implemented as a command in a tool that tests for connections between all device RTSI connectors. </paragraph>
<paragraph id="P-0194" lvl="7"><number>&lsqb;0194&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference>&mdash;Routing A Trigger Between Two PXI Devices </paragraph>
<paragraph id="P-0195" lvl="0"><number>&lsqb;0195&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> illustrates one example of routing a trigger between two PCI devices. As <cross-reference target="DRAWINGS">FIG. 12</cross-reference> shows, a first PXI device <highlight><bold>1210</bold></highlight> is coupled to a second PXI device <highlight><bold>1120</bold></highlight> over a PXI 1006 trigger bridge <highlight><bold>1240</bold></highlight>. A terminal on each device (terminal A <highlight><bold>1212</bold></highlight>, terminal B <highlight><bold>1222</bold></highlight>) provides a connection to the trigger bridge <highlight><bold>1240</bold></highlight>. There are a great number of possible pitfalls associated with routing triggers in PXI chassis. For the most part, PXI forces cards to be connected to the trigger bus, although with MXI-3 this is not the case. Also, large PXI chassis such as the PXI 1006 have bridges between multiple buses. These bridges may need to be programmed in addition to any normal programming involved. The following describes one embodiment of a list of events which may occur during configuration of the PXI system. </paragraph>
<paragraph id="P-0196" lvl="0"><number>&lsqb;0196&rsqb;</number> First, a customer inserts Device 1 <highlight><bold>1210</bold></highlight> into slot 3, and device 2 <highlight><bold>1220</bold></highlight> is inserted into slot 9 of a PXI 1006. Note that the cards are located in different trigger buses so that a bridge will be necessary to make a connection between these two devices. Then, Device 1 <highlight><bold>1210</bold></highlight> and device 2 <highlight><bold>1220</bold></highlight> may be auto-detected, e.g., by the device driver. The routing manager may also use the .ini file of the device to get a list of its reservable resources, e.g., trigger lines and PFI lines. </paragraph>
<paragraph id="P-0197" lvl="0"><number>&lsqb;0197&rsqb;</number> A routing request may then be submitted, e.g., by a customer or an internal software process, to connect Device 1:Terminal A <highlight><bold>1212</bold></highlight> as a source and Device 2:Terminal B <highlight><bold>1222</bold></highlight> as a destination, denoted by &ldquo;Device 1:Terminal A&equals;&gt;Device 2:Terminal B&rdquo;. Note that the steps where a user of the routing system creates an instance of the routing expert have been omitted. </paragraph>
<paragraph id="P-0198" lvl="0"><number>&lsqb;0198&rsqb;</number> The routing system may examine the canonical or unique device names of the source and destination terminal configurations and determine that they are not equal, meaning that the routing request will cross multiple devices. The routing system may now confirm that there is a possible connection between these two particular devices, then query the routing manager regarding the existence of a trigger connection between Device 1 <highlight><bold>1210</bold></highlight> and device 2 <highlight><bold>1220</bold></highlight>. Assuming that the routing manager returns a positive response, the routing system may transform the routing request of &ldquo;Device 1:Terminal A&equals;&gt;Device 2:Terminal B&rdquo; into &ldquo;Device 1:Terminal A&equals;&gt;Device 1:Trigger X&rdquo; and &ldquo;Device 2:Trigger X&equals;&gt;Device 2:Terminal B&rdquo;. The transformed routing request no longer spans multiple devices. These two &ldquo;single devices&rdquo; sub-path requests will now be resubmitted back to the routing system. It should be noted that &ldquo;Trigger X&rdquo; represents all of the homogeneous trigger lines between Device 1 and device 2. </paragraph>
<paragraph id="P-0199" lvl="0"><number>&lsqb;0199&rsqb;</number> &ldquo;Device 1:Terminal A&equals;&gt;Device 1:Trigger X&rdquo; may then be submitted to the routing manager and primitive settings may be returned (assuming that &ldquo;Device 1 Terminal A&equals;&gt;Device 1:Trigger X&rdquo; has a valid route). Similarly, &ldquo;Device 2:Trigger X&equals;&gt;Device 2:Terminal B&rdquo; may be submitted to the routing manager and primitive settings returned (assuming that &ldquo;Device 2:Trigger X&equals;&gt;Device 2:Terminal B&rdquo; has a valid route). </paragraph>
<paragraph id="P-0200" lvl="0"><number>&lsqb;0200&rsqb;</number> The configuration settings for both sub-paths may be placed into a single primitive settings object. The primitive settings are now returned to the user of the routing system. The primitive settings object contains all the settings for the entire multi-device path. This allows the resolution of &ldquo;Trigger X&rdquo; to be passed from the first section of the path to the second section of the path. </paragraph>
<paragraph id="P-0201" lvl="0"><number>&lsqb;0201&rsqb;</number> The user of the routing system may then place the returned primitive settings into the task, and the verified runtime may be committed. The routing system may then create an instance of the routing primitive supervisor and send primitive settings to the supervisor. The routing primitive supervisor may first attempt to reserve all the necessary resources for the entire route. In one embodiment, the reservation process may be performed in the following manner: </paragraph>
<paragraph id="P-0202" lvl="2"><number>&lsqb;0202&rsqb;</number> 1. Routing resources that connect Terminal A <highlight><bold>1212</bold></highlight> up to, but not including, one of the trigger multiplexers may be reserved. Since the actual trigger line may not be known beforehand, the trigger multiplexer may not be reserved at this point. </paragraph>
<paragraph id="P-0203" lvl="2"><number>&lsqb;0203&rsqb;</number> 2. A trigger line may be reserved by requesting a specific trigger line from the routing manager. In the case of Trigger X, this request may start by requesting Trigger 0, Trigger 1, . . . to Trigger n. This iterative requesting for Trigger X will end upon the first successful reservation. The routing manager may then check to see if the requested trigger line is available. If the trigger line is available, then the routing manager may reserve the line and return a handle for future reference. </paragraph>
<paragraph id="P-0204" lvl="2"><number>&lsqb;0204&rsqb;</number> 3. Now that the trigger line number is known, the correct trigger multiplexer may be reserved on Device 1 <highlight><bold>1210</bold></highlight> by the routing manager. The primitive settings may have reservation settings and register configurations for every valid trigger line. </paragraph>
<paragraph id="P-0205" lvl="2"><number>&lsqb;0205&rsqb;</number> 4. Next, routing resource reservations may be made in Device 2 <highlight><bold>1220</bold></highlight> by the routing manager. However, which trigger line Device 2 <highlight><bold>1220</bold></highlight> will use to receive the signal must be known. The reservation handle that was returned from calling the routing manager is known, as well as the originating trigger line. However, using the trigger line from step 2 may not be reliable in the case of a PXI 1006 chassis. If the two devices straddle a routing bridge in a PXI 1006, then the trigger line number may change from one trigger bus to another. As a result, the trigger line number may need to be rediscovered. The routing manager may now ask its interconnect manager for listening privileges on a line. The reservation handle may be used to specify which signal is being listened to. The routing manager may start by requesting trigger 0, trigger 1, to trigger n. This iterative requesting for trigger X will preferably end upon the first successful listen request. Now that the trigger line the receiving board will be using is known, the routing manager can reserve the correct multiplexer. It should be noted that in cases where trigger lines are not connected to the trigger bus, the settings for the unconnected trigger lines may not be included in the primitive settings. </paragraph>
<paragraph id="P-0206" lvl="0"><number>&lsqb;0206&rsqb;</number> The routing manager may then check to see if the signal represented by the reservation handle is available on the requested trigger line for listening. This may not be a trivial function. In fact, listening to a trigger line on a PXI-1006 chassis could instigate a bridge switch. These routings across bridges are also not necessarily a one to one correspondence. For example, Trigger 0 in a bus could be switched over to Trigger 5 in a neighboring bus. Note that the routing system preferably makes reservation and listening requests in numerical order, for example, from 0 to n. This gives the routing system a more deterministic behavior. Also, ordered requests may minimize trigger line waste, e.g., multiple triggers listening to the same signal. </paragraph>
<paragraph id="P-0207" lvl="2"><number>&lsqb;0207&rsqb;</number> 5. The remaining resources needed to complete the route from Device 2:Trigger X to Device 2:Terminal B may be reserved, e.g., by the routing manager. </paragraph>
<paragraph id="P-0208" lvl="0"><number>&lsqb;0208&rsqb;</number> In another embodiment, the reservation process may be performed in the following manner: </paragraph>
<paragraph id="P-0209" lvl="2"><number>&lsqb;0209&rsqb;</number> 1. The lines what are compatible from the source to &ldquo;Trigger X&rdquo; and from &ldquo;Trigger X&rdquo; to the destination may be determined. </paragraph>
<paragraph id="P-0210" lvl="2"><number>&lsqb;0210&rsqb;</number> 2. The routing manager may be asked to resolve which lines to use and to reserve one of the lines for the route. </paragraph>
<paragraph id="P-0211" lvl="0"><number>&lsqb;0211&rsqb;</number> A benefit of this approach is that the method ensures that there is enough information available to prevent the software from performing an incremental reservation: the software does not need to iterate, asking which trigger line is available to use on the source or destination side of the &ldquo;Trigger X&rdquo; terminal. On the reservation failure, software must undo what it has done. In this embodiment, because the software gathers enough information to allow the routing manager to chose which line to use, backtracking (i.e. trying a different possible solution) may be avoided. </paragraph>
<paragraph id="P-0212" lvl="0"><number>&lsqb;0212&rsqb;</number> The committed runtime may now be started, e.g., by the customer. Then, since all the necessary routing resources are reserved, the routing system run-time may write all of its settings to hardware. The route may be committed from source to destination in order to minimize glitching. </paragraph>
<paragraph id="P-0213" lvl="0"><number>&lsqb;0213&rsqb;</number> The executing runtime may then be stopped, e.g., by the customer. Then, the routing system run-time may uncommits the route or turn the route off in hardware. The route may be shut down from destination to source to minimize glitching. Note that some resources may not have symmetric settings for turning them off. For example, most multiplexers, pre-scalers, and filters, are always on. </paragraph>
<paragraph id="P-0214" lvl="0"><number>&lsqb;0214&rsqb;</number> The stopped runtime may then be uncommitted, e.g., by the customer. The routing system may then free all previously reserved resources. The order of freeing is not important. Also, when a trigger line in a PXI 1006 chassis is freed, it may result in the bridge switch being tri-stated. In one embodiment, the Listen requests are automatically freed when the trigger line gets released. </paragraph>
<paragraph id="P-0215" lvl="7"><number>&lsqb;0215&rsqb;</number> Other Routing Issues </paragraph>
<paragraph id="P-0216" lvl="0"><number>&lsqb;0216&rsqb;</number> In various embodiments of the present invention, a number of issues may arise in the determination of routing for a measurement task. The following describes several of these issues and possible approaches which may be useful in addressing them. </paragraph>
<paragraph id="P-0217" lvl="7"><number>&lsqb;0217&rsqb;</number> Multi-Device Routing and Trigger Buses </paragraph>
<paragraph id="P-0218" lvl="0"><number>&lsqb;0218&rsqb;</number> According to one embodiment, in order to create a multi-device route, the source and destination devices may be required to share a trigger bus together physically and logically. For PCI devices, a user may be required to register the necessary RTSI cable. If the RTSI cable is not registered, then routing may not take advantage or the RTSI cable and the system may fail to create a route. In one embodiment, PXI trigger backplanes may be automatically registered. </paragraph>
<paragraph id="P-0219" lvl="7"><number>&lsqb;0219&rsqb;</number> Dynamic Trigger Bus Line Selection </paragraph>
<paragraph id="P-0220" lvl="0"><number>&lsqb;0220&rsqb;</number> Management of trigger lines is another important feature of dynamic routing. If two measurement tasks are hard coded to the same trigger line for different signals, then at least one of the measurement tasks may result in a resource conflict. Multi-device routing may allow trigger lines to be dynamically selected at runtime. This means that any available trigger line will be selected. A user can still select a specific trigger bus line by splitting a multi-device route into two single device routes. However, the two static routes may lose the ability to dynamically choose an available trigger at runtime. </paragraph>
<paragraph id="P-0221" lvl="7"><number>&lsqb;0221&rsqb;</number> Forms of Routing </paragraph>
<paragraph id="P-0222" lvl="0"><number>&lsqb;0222&rsqb;</number> In one embodiment, routes may be made in two different forms: task based and immediate, also referred to as task-independent. Task based routing is the most common form of routing. It is a route associated with a measurement task. When the user creates a hardware trigger or exports a hardware event, a task-based route may be created. These routes are embedded in a task. When the task is committed, the route is committed. When the task is terminated, the route may be terminated, as well. </paragraph>
<paragraph id="P-0223" lvl="0"><number>&lsqb;0223&rsqb;</number> Immediate routing is not associated with any task. An immediate route may be denoted by a pair of fully qualified terminal names specifying the source and destination of the route. When an immediate route is created, the route may be committed to hardware immediately, hence the name. Since immediate routes&apos; durations are not governed by tasks, the user may need to actively destroy the route when it is no longer needed. Further details of immediate (task-independent) routing are provided below in the section titled &ldquo;Task-Independent Routes&rdquo;. </paragraph>
<paragraph id="P-0224" lvl="7"><number>&lsqb;0224&rsqb;</number> Signal Modifiers </paragraph>
<paragraph id="P-0225" lvl="0"><number>&lsqb;0225&rsqb;</number> When a route is constructed between a source and destination terminal, the routing is often not just a simple connection. There are often options for modifying the signal as it passes from source to destination. A signal modifier is any in-lined hardware capable of changing (versus just propagating) the digital signal. Examples of signal modifiers are digital inverters, pre-scalers, digital low pass filters, and delay elements. None of these modifiers are symmetric with one another. For instance, inverters are Boolean operators while filtering might affect the signal by shunting off the high frequency portion of the signal. While both of these operations are signal modifiers, they have to be treated differently by routing software. </paragraph>
<paragraph id="P-0226" lvl="0"><number>&lsqb;0226&rsqb;</number> In one embodiment, the routing system may handle signal modifier components such as these by examining the signal characteristics and modifying the signal as it passes through the signal modifiers. In another embodiment, the routing system may include flags which indicate whether to apply various signal modifications during a connection. </paragraph>
<paragraph id="P-0227" lvl="0"><number>&lsqb;0227&rsqb;</number> In one embodiment, given a source and destination terminal in a measurement system, the routing system may compute a route that satisfies user-specified constraints. Examples of constraints which may involve signal modification include, but are not limited to, signal polarity, filtering, synchronization, pre-scaling, and logical combinations with other terminals, i.e., with signals from other terminals. </paragraph>
<paragraph id="P-0228" lvl="0"><number>&lsqb;0228&rsqb;</number> An exemplary treatment of routing with signal modifiers (or constraints) is presented below with regards to signal inverters. It should be noted that similar techniques may also be applied to various other signal modifiers, and that the techniques described are not intended to limit the invention to any particular types of signal modifier. It should be noted that in the examples given, the two paths through a multiplexer, where one path includes and inverter and the other path does not, actually represent two possible configuration states for the multiplexer. In other words, depending upon how the multiplexer is configured, the multiplexer may invert the signal or may not. </paragraph>
<paragraph id="P-0229" lvl="7"><number>&lsqb;0229&rsqb;</number> FIGS. <highlight><bold>13</bold></highlight>A-<highlight><bold>13</bold></highlight>C&mdash;Signal Modifiers: Logical Inversion of Signals </paragraph>
<paragraph id="P-0230" lvl="0"><number>&lsqb;0230&rsqb;</number> When the user is setting the input terminal for a start trigger or the output for an export hardware event, it may be desirable to invert the signal. For example, the user may want to look at falling edges versus rising edges. In one embodiment, it may be possible to specify that signal inversion takes place in the desired route. Then the routing manager may attempt to select a route which includes signal inversion. However, inversion could fail if an overlapping route has previously reserved the inverter with an incompatible configuration, thus, the method may need to arbitrate between competing demands upon a resource, i.e., the inverter. FIGS. <highlight><bold>13</bold></highlight>A-<highlight><bold>13</bold></highlight>C illustrate various examples of the use of signal inverters in a route. As mentioned above, <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> illustrates multiple signal inverters (<highlight><bold>1306</bold></highlight>A and <highlight><bold>1306</bold></highlight>B) in a route between a source <highlight><bold>1302</bold></highlight> and a destination <highlight><bold>1304</bold></highlight>. It should be noted that in this simple case, the successive inversion operations on the signal would result in an uninverted signal, since the two inversions effectively &ldquo;cancel out&rdquo; one another, thus an even number of inverters in a route is equivalent to no inverters in the route, while an odd number of inverters is equivalent to a single inverter in the route. </paragraph>
<paragraph id="P-0231" lvl="0"><number>&lsqb;0231&rsqb;</number> Like traditional routing, various embodiments of the present invention may accept a source and destination terminal for specifying a route. Unlike traditional routing, however, dynamic determination of a route from source to destination may make determination of the set of routing components used to satisfy the route a difficult task. Thus, satisfying signal modifications with dynamic routing may require a different and dynamic approach compared to prior art techniques, as described below. </paragraph>
<paragraph id="P-0232" lvl="0"><number>&lsqb;0232&rsqb;</number> Traditional routing approaches may be considered device-centric while various embodiments of the present invention are route-centric, meaning that routes may extend over one or more devices. Similarly, the signal modifiers considered for inclusion in a route may extend across the entire route. <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> illustrates a simple route which spans multiple devices. As <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> shows, the source <highlight><bold>1302</bold></highlight> is in device A <highlight><bold>1308</bold></highlight>A, while the destination of the route <highlight><bold>1304</bold></highlight> is in device B <highlight><bold>1308</bold></highlight>B. As <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> also shows, device A includes inverter <highlight><bold>1306</bold></highlight>C. As in traditional routing, the route still needs to be partitioned or broken up into individual device pieces, however, since the system partitions the route itself, the management of the signal modification may now be performed automatically for the user. Thus, the system may partition the route into a first sub-route which includes the inverter <highlight><bold>1306</bold></highlight>C, and a second sub-route which does not include an inverter. </paragraph>
<paragraph id="P-0233" lvl="0"><number>&lsqb;0233&rsqb;</number> For example, if there are multiple inverters, the system may pick the configuration of inverters based upon several criteria, such as, for example: </paragraph>
<paragraph id="P-0234" lvl="2"><number>&lsqb;0234&rsqb;</number> Is the inverter already reserved in a compatible configuration&quest; In this case, the system may know how to share the inverter&apos;s configuration information. </paragraph>
<paragraph id="P-0235" lvl="2"><number>&lsqb;0235&rsqb;</number> Is the inverter already reserved in an incompatible configuration&quest; In this case, the system may require a different inverter in a part of the route after the inverter. Otherwise, the system may find the first inverter along the route that satisfies the desired inversion. </paragraph>
<paragraph id="P-0236" lvl="0"><number>&lsqb;0236&rsqb;</number> In some cases, an inverter may already be reserved from a preexisting route. In one embodiment, the system may be capable of overlaying two routes and arbitrating the inverter settings for the overlaying routes. <cross-reference target="DRAWINGS">FIG. 13C</cross-reference> illustrates a case where a preexisting route from source <highlight><bold>1302</bold></highlight> to destination1 <highlight><bold>1304</bold></highlight>A with an inversion affects a second route from the source <highlight><bold>1302</bold></highlight> to destination2 <highlight><bold>1304</bold></highlight>B with no inversion. In other words, the route to destination2 <highlight><bold>1304</bold></highlight>B shares a sub-route with the route to destination1 <highlight><bold>1304</bold></highlight>A, where the sub-route includes an inverter <highlight><bold>1306</bold></highlight>D. The routing requirements specified, however, that the route to destination2 <highlight><bold>1304</bold></highlight>B includes no inversion. In this case, the system may determine a route from the source <highlight><bold>1302</bold></highlight> to destination2 <highlight><bold>1304</bold></highlight>B though two inverters <highlight><bold>1306</bold></highlight>D and <highlight><bold>1306</bold></highlight>F so that there is no net inversion for the route. </paragraph>
<paragraph id="P-0237" lvl="7"><number>&lsqb;0237&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference>&mdash;Routing Determination with Signal Modifiers </paragraph>
<paragraph id="P-0238" lvl="0"><number>&lsqb;0238&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> flowcharts a method for programmatically determining a route from a source to a destination which satisfies one or more specified constraints, specifically as regards inline signal modifications. <cross-reference target="DRAWINGS">FIGS. 15A and 15B</cross-reference> illustrate simple examples of routing with signal modification. As noted above, the method presented in <cross-reference target="DRAWINGS">FIG. 14</cross-reference> is exemplary, and some of the steps may be performed in a different order than shown, or may be omitted. Additional steps may also be performed as desired. </paragraph>
<paragraph id="P-0239" lvl="0"><number>&lsqb;0239&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 14</cross-reference> shows, in <highlight><bold>502</bold></highlight>A, routing requirements may be received, including signal modification requirements specifying inline signal modifications desired for the route, e.g., signal inversion, pre-scaling, etc., as mentioned above. </paragraph>
<paragraph id="P-0240" lvl="0"><number>&lsqb;0240&rsqb;</number> Then, in response to the requirements of <highlight><bold>502</bold></highlight>A, in <highlight><bold>1402</bold></highlight>, a route may be determined from the source to the destination, several embodiments of which are described above with reference to FIGS. <highlight><bold>5</bold></highlight>-<highlight><bold>6</bold></highlight>C. Then, in <highlight><bold>1404</bold></highlight>, current signal modification of the determined route may be determined. As used herein, the term &ldquo;current signal modification&rdquo; refers to the signal modifications, e.g., inversions, synchronizations, etc., present on the route before the routing manager attempts to satisfy the route&apos;s specified or desired signal modifications, and thus may be considered the route&apos;s &ldquo;native&rdquo; configuration. For example, if portions of the route, i.e., legs or components of the route, are shared with a pre-existing route, the shared legs or components may include signal modifications set by or for the pre-existing route. These signal modifications comprise constraints for the current route determination, in that modifying them would interfere with the pre-existing route. Thus, the signal modifications which were set in a prior route determination may not be changed to meet the signal modification requirements for the route. </paragraph>
<paragraph id="P-0241" lvl="0"><number>&lsqb;0241&rsqb;</number> In one embodiment, the current signal modification of the route also includes information indicating signal modifications for legs or components that are not shared with a pre-existing route. These signal modifications may comprise default signal modifications for the components. In other words, if a component or leg of the route has not been previously reserved or set, then the method may assume a signal modification setting for the component which is &ldquo;most natural&rdquo; for the component, e.g., a &lsquo;no inversion&rsquo; setting. These signal modifications may be changed to meet the signal modification requirements for the route, as described in more detail below with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0242" lvl="0"><number>&lsqb;0242&rsqb;</number> For example, referring to <cross-reference target="DRAWINGS">FIG. 15A, a</cross-reference> simple topography is shown where two routes lead from the source <highlight><bold>1302</bold></highlight>, through MUX <highlight><bold>1307</bold></highlight>, to the destination <highlight><bold>1304</bold></highlight>. As <cross-reference target="DRAWINGS">FIG. 15A</cross-reference> shows, Route B <highlight><bold>1504</bold></highlight> includes signal inverter <highlight><bold>1306</bold></highlight>, while the Route A <highlight><bold>1502</bold></highlight> does not. Thus, in the initial determination of the route from the source <highlight><bold>1302</bold></highlight> to the destination <highlight><bold>1304</bold></highlight>, i.e., in <highlight><bold>506</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>, the non-inverted path, Route A <highlight><bold>1502</bold></highlight>, may be selected, since initially, no signal modification factored in the determination of routing. The current signal modification of the path is thus &lsquo;non-inverted&rsquo;, or &lsquo;umnodified&rsquo;. It should be noted that in general, the two routes may both correspond to a single input terminal on the MUX <highlight><bold>1307</bold></highlight>, and that which of the two routes is active may determined by configuration settings, i.e., settings in the configuration register of the MUX <highlight><bold>1307</bold></highlight>. In other words, the different routes are distinguished by the different signal modifications or modifiers available at the input terminal of the MUX <highlight><bold>1307</bold></highlight>, and the particular signal modification of the input terminal is determined by the configuration of the MUX configuration register. </paragraph>
<paragraph id="P-0243" lvl="0"><number>&lsqb;0243&rsqb;</number> It should also be noted that the current signal modification of the route may include signal modifications set by pre-existing or prior routes. In other words, some of the route components may be shared by other routes, and thus, the signal modifications set by the other routes may be considered constraints which must be met (i.e., not violated) by the method. </paragraph>
<paragraph id="P-0244" lvl="0"><number>&lsqb;0244&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 15B</cross-reference> illustrates the same routing scenario, but where the non-inverted route <highlight><bold>1502</bold></highlight> is already utilized, i.e., has been reserved by a prior routing solution, e.g., for a preexisting route. Thus, the prior reservation (and signal modification setting) constitutes a constraint for the route determination. In this case, the initial route determination selects the inverted route <highlight><bold>1504</bold></highlight>. Thus, the current signal modification of the route is &lsquo;inverted&rsquo;, i.e., includes one signal inversion (by the inverter <highlight><bold>1306</bold></highlight>). </paragraph>
<paragraph id="P-0245" lvl="0"><number>&lsqb;0245&rsqb;</number> After the current signal modification has been determined for the route, then in <highlight><bold>1405</bold></highlight> a determination may be made as to whether the current signal modification is the same as the desired signal modification specified for the routing task. If the current signal modification is the same as the desired signal modification, then the routing solution is complete, and the route may be stored, as indicated in <highlight><bold>1406</bold></highlight>. </paragraph>
<paragraph id="P-0246" lvl="0"><number>&lsqb;0246&rsqb;</number> If, on the other hand, the desired signal modifications are not met by the current signal modification, then in <highlight><bold>1408</bold></highlight>, the route may be re-walked and an attempt made to modify the route to include the desired signal modification. Further details of this step are provided below with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. In the example of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>A, if the route from the source <highlight><bold>1302</bold></highlight> to the destination <highlight><bold>1304</bold></highlight> is desired to have no signal modification, then no route modification is required. If the desired route should include a signal inversion, then route B <highlight><bold>1504</bold></highlight> may replace route A <highlight><bold>1502</bold></highlight> in the routing solution to meet the signal modification requirements. In the example of <cross-reference target="DRAWINGS">FIG. 15</cross-reference>B, it should be noted that since there is a pre-existing route, illustrated by the pre-existing route <highlight><bold>1503</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 15</cross-reference>B, any determined routing solution must abide by its constraints. Thus, if the desired route includes an inverted signal modification, then the constraint is already satisfied, in that the route leg with the inversion may be shared and used with not modification. However, if the opposite is true, i.e., that the desired route does not include a signal inversion, then a solution cannot be found that meets the constraint, i.e., that does not interfere with the pre-existing route, and an error message may be returned. This is due to the fact that the system, i.e., the hardware, cannot have two routes between the source and destination with different polarities, i.e., with different signal modifications. </paragraph>
<paragraph id="P-0247" lvl="0"><number>&lsqb;0247&rsqb;</number> Once an attempt to meet the signal modification requirements has been made in <highlight><bold>1408</bold></highlight>, then in <highlight><bold>1409</bold></highlight>, the modified route may be checked for compliance with desired signal modification requirements. If the modified route includes the desired signal modification, i.e., satisfies the one or more signal modification requirements for the route, then the route may be stored, as indicated in <highlight><bold>1406</bold></highlight>. Otherwise, an error may be returned, i.e., the route may fail, as indicated in <highlight><bold>1410</bold></highlight>. In one embodiment, when the route fails and an error code is returned, the process which invoked the routing manager may receive the error code and take some predetermined action, such as, for example, terminating the task, or determining a different, alternative route from the source to the destination, among others. </paragraph>
<paragraph id="P-0248" lvl="0"><number>&lsqb;0248&rsqb;</number> Thus, various embodiments of the present invention may provide means for programmatically determining routing with signal modification constraints. As mentioned above, further details of the method are provided below with reference to <cross-reference target="DRAWINGS">FIG. 16</cross-reference>. </paragraph>
<paragraph id="P-0249" lvl="7"><number>&lsqb;0249&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference>&mdash;Modifying the Route to Include Desired Signal Modification </paragraph>
<paragraph id="P-0250" lvl="0"><number>&lsqb;0250&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 16</cross-reference> flowcharts a more detailed embodiment of step <highlight><bold>1408</bold></highlight> of the method of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>. As noted previously, the methods presented herein are intended to be exemplary, and some of the steps may be performed in a different order than shown, or may be omitted. Additional steps may also be performed as desired. </paragraph>
<paragraph id="P-0251" lvl="0"><number>&lsqb;0251&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows, in <highlight><bold>1602</bold></highlight>, desired changes in route signal modification may be determined. Note that prior to performing the method of <cross-reference target="DRAWINGS">FIG. 16</cross-reference>, an initial route has been programmatically determined (step <highlight><bold>1402</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 14</cross-reference>), and desired signal modifications have been determined from route signal modification requirements. In one embodiment, the desired changes in route signal modification may be determined by determining the difference between the current signal modification, i.e., the current signal modification of the route, and the desired signal modification. In other words, the desired changes in the signal modification of the route are the signal modification requirements which are not met by the current signal modification of the route. For example, if the initial determined route does not include signal inversion, and the desired signal modification for the route does include signal inversion, then the desired change in signal modification for the route is a signal inversion. As another example, if the initial determined route does include signal inversion, and the desired signal modification for the route does not include signal inversion, then the desired change in signal modification for the route is removal of the signal inversion. In one embodiment, this may be achieve by addition of a second signal inverter to cancel the initial signal conversion. </paragraph>
<paragraph id="P-0252" lvl="0"><number>&lsqb;0252&rsqb;</number> In <highlight><bold>1604</bold></highlight>, the next (current) leg of the route may be determined, i.e., selected as the current route. It should be noted that a given route comprises one or more legs, connected sequentially from the route&apos;s source to the route&apos;s destination. Each of the legs has a leg source and a leg destination, distinguished from the overall route&apos;s source and destination. A leg&apos;s destination is typically the subsequent leg&apos;s source. In the first pass of the method step <highlight><bold>1604</bold></highlight>, a first leg of the route may be selected, i.e., the route leg whose source is the route source. In other embodiments, the route legs may be walked or processed in other orders as desired. In addition to determining the next leg of the route for processing, the leg&apos;s alternative route legs may be determined. In other words, any alternative legs of the route which share the same source and destination as the current leg may be ascertained. </paragraph>
<paragraph id="P-0253" lvl="0"><number>&lsqb;0253&rsqb;</number> In one embodiment, the alternative legs in a route correspond to the various possible signal modifications available for an input to a MUX. For example, if the MUX input terminal may be configured (via settings in the MUX&apos;s configuration register) for three different signal modifications, e.g., no inversion, inversion, and synchronization, then the graph may include three corresponding legs, and, assuming that the initial route included the &lsquo;no inversion&rsquo; leg, the alternative legs are the inversion leg and the synchronization leg. </paragraph>
<paragraph id="P-0254" lvl="0"><number>&lsqb;0254&rsqb;</number> As noted above, if the input terminal of the MUX has already been included in a pre-existing route, i.e., the current route shares the leg with the prior route, then the signal modification of the MUX is set. Thus, the signal modification of the leg is a constraint on the current route determination. In other words, there may be no alternative legs for the leg being considered. In this regard, the current signal modification of the route may be considered a constraint map for the route. </paragraph>
<paragraph id="P-0255" lvl="0"><number>&lsqb;0255&rsqb;</number> In one embodiment, alternatives to the route leg may comprise more than one leg, i.e., a multi-leg sub-route whose source and destination are the same as those of the current leg may be considered an alternative &lsquo;leg&rsquo;. In another embodiment, an alternative leg in the route may comprise a different hardware component, e.g., a different multiplexer, which shares the source and destination terminals of the route leg. </paragraph>
<paragraph id="P-0256" lvl="0"><number>&lsqb;0256&rsqb;</number> In <highlight><bold>1606</bold></highlight>, the signal modification of each of the determined alternative legs (if any) may be compared to that of the current leg in light of the desired changes in the route signal modification. Said another way, the signal modification of each of the alternative legs may be analyzed to determine whether replacing the current leg with the alternative leg would satisfy part or all of the desired changes in the route signal modification. In one embodiment, once each of the alternative leg&apos;s signal modification has been analyzed, the alternative leg whose signal modification satisfies the greatest portion of the desired changes in route signal modification may be selected for possible replacement of the current leg. </paragraph>
<paragraph id="P-0257" lvl="0"><number>&lsqb;0257&rsqb;</number> If replacement of the current leg with the selected alternative leg would fulfill some or all of the desired changes in route signal modification (without violating constraints), then in <highlight><bold>1608</bold></highlight>, the current leg may be replaced with the alternative leg, thereby modifying the determined route. For example, if the current leg corresponds to a MUX input terminal with a &lsquo;no inversion&rsquo; signal modification setting, and a signal inversion is needed, then replacing the &lsquo;no inversion&rsquo; leg with an alternate leg may simply mean setting the signal modification setting for the MUX input terminal to indicate a signal inversion. </paragraph>
<paragraph id="P-0258" lvl="0"><number>&lsqb;0258&rsqb;</number> After the replacement of the leg with the alternative leg, the desired changes in signal modification for the route may be modified to reflect the leg replacement, as indicated in <highlight><bold>1610</bold></highlight>. In other words, if replacement of the leg satisfies part or all of the desired changes, then the signal modifications satisfied by the replacement may be removed from the desired changes in signal modification. In this way, the degree to which the signal modification for the route approaches the desired signal modification may be tracked. </paragraph>
<paragraph id="P-0259" lvl="0"><number>&lsqb;0259&rsqb;</number> In <highlight><bold>1611</bold></highlight>, a determination may be made as to whether there are further desired changes in signal modification for the route, and whether there are more legs in the route to be processed. In other words, the method may first see if there are additional desired changes in signal modification to be attempted, and also whether there are additional legs in the route to process in the manner described above to attempt to satisfy the additional desired changes. In one embodiment, if there are no further desired changes, the method may omit the check for further legs of the route. </paragraph>
<paragraph id="P-0260" lvl="0"><number>&lsqb;0260&rsqb;</number> If the method determines that there are no further desired changes in signal modification for the route, or that there are no further legs in the route to process, then the method may terminate, as indicated in <highlight><bold>1406</bold></highlight>. Otherwise, as <cross-reference target="DRAWINGS">FIG. 16</cross-reference> shows, the method may return to step <highlight><bold>1604</bold></highlight> and repeat the above described steps until either all of the desired changes to signal modification for the route have been satisfied, or there are no more legs in the route to process. </paragraph>
<paragraph id="P-0261" lvl="0"><number>&lsqb;0261&rsqb;</number> Thus, the method may iteratively walk or process legs of the route in an attempt to substitute respective legs of the route with alternative legs whose signal modifications more closely meet the desired signal modifications for the route. It should be noted that although the examples above were described in terms of a simple route with a single signal inverter, more complex signal modification scenarios are contemplated, including, for example, various combinations of signal (polarity) inversion, filtering, synchronization, pre-scaling, and logical combinations with other terminals, i.e., with signals from other terminals, among others. Furthermore, it is noted that the route may be a single-device route, or a multi-device route, as described above. </paragraph>
<paragraph id="P-0262" lvl="0"><number>&lsqb;0262&rsqb;</number> Thus, various embodiments of the methods described above may programmatically determine routing with signal modifications for a measurement task. More specifically, information specifying a route from a source terminal to a destination terminal in a measurement system may be received that includes one or more signal modification requirements for the route. A current signal modification of the route may be determined. Additionally, one or more desired changes in the signal modification of the route may be determined based on the one or more signal modification requirements for the route and the current signal modification. The route may then be modified to include at least one of the one or more desired changes in the signal modification of the route, thereby generating a modified route which satisfies at least a portion of the one or more signal modification requirements for the route. Finally, the modified route may be stored. The modified route may then be usable to route signals in performing the measurement task. </paragraph>
<paragraph id="P-0263" lvl="7"><number>&lsqb;0263&rsqb;</number> Routing and Hardware Sharing </paragraph>
<paragraph id="P-0264" lvl="0"><number>&lsqb;0264&rsqb;</number> It is possible that two or more routes might overlap in a compatible fashion, e.g., if these two routes have the same source and destination. When routes overlap in a compatible fashion, the routing software may handle this situation as follows: </paragraph>
<paragraph id="P-0265" lvl="0"><number>&lsqb;0265&rsqb;</number> As an example, assume that two separate tasks generate the same route. The resources associated with the routes will generally not be released until both tasks have completed. Mixing task-based and immediate routes may also be allowed. However, the hardware resources may not be released until all task-based routes have been released and the immediate route has been disconnected. The releasing of a task-based route is preferably handled by the software client of the route. It should be noted that typically, releasing a task-based route by calling a termination or destroy function may not be allowed, i.e., in general, task based routes must be released by stopping the task. </paragraph>
<paragraph id="P-0266" lvl="0"><number>&lsqb;0266&rsqb;</number> When multiple routes are programmatically determined for a task, such as a measurement task, routing resources may need to be managed at a more granular level than in traditional routing systems, especially when one or more legs, i.e., routing resources, are shared between multiple routes. Examples of routing determinations with shared routing resources are shown in FIGS. <highlight><bold>17</bold></highlight>-<highlight><bold>19</bold></highlight>C, and described below. </paragraph>
<paragraph id="P-0267" lvl="7"><number>&lsqb;0267&rsqb;</number> FIGS. <highlight><bold>17</bold></highlight>A and <highlight><bold>17</bold></highlight>B&mdash;Examples of Simple Shared Routing </paragraph>
<paragraph id="P-0268" lvl="0"><number>&lsqb;0268&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 17A and 17B</cross-reference> illustrates two simple route sharing scenarios. More specifically, <cross-reference target="DRAWINGS">FIG. 17A</cross-reference> illustrates a scenario where a first route, route A <highlight><bold>1703</bold></highlight>A, runs from source <highlight><bold>1702</bold></highlight> through a first MUX <highlight><bold>1701</bold></highlight>A to destination 1 <highlight><bold>1704</bold></highlight>A, and a second route, route B <highlight><bold>1703</bold></highlight>B, runs from the source <highlight><bold>1702</bold></highlight> through the first MUX <highlight><bold>1701</bold></highlight>A, destination 1 <highlight><bold>1704</bold></highlight>A, and a second MUX <highlight><bold>1701</bold></highlight>B, to destination 2 <highlight><bold>1704</bold></highlight>B. As may be seen, route B <highlight><bold>1703</bold></highlight>B includes route A <highlight><bold>1703</bold></highlight>A in its entirety, thus, route A <highlight><bold>1703</bold></highlight>A is a subset of route B <highlight><bold>1703</bold></highlight>B, and thus the first MUX <highlight><bold>1701</bold></highlight>A is shared between the two routes. It is noted than in other embodiments, the source <highlight><bold>1702</bold></highlight> may not be shared, but rather, each route may have a distinct source, where both the source and destination for route A <highlight><bold>1703</bold></highlight>A lies between the source for route B <highlight><bold>1703</bold></highlight>B and the destination for route B <highlight><bold>1703</bold></highlight>B. </paragraph>
<paragraph id="P-0269" lvl="0"><number>&lsqb;0269&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 17B</cross-reference> illustrates a scenario where a first route, route C <highlight><bold>1703</bold></highlight>C runs from source <highlight><bold>1702</bold></highlight>, through MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>C, to destination 1 <highlight><bold>1704</bold></highlight>C, and the second route, route B <highlight><bold>1703</bold></highlight>B, runs from the source <highlight><bold>1702</bold></highlight>, through MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>B, to destination 2 <highlight><bold>1704</bold></highlight>B. It may thus be seen that route C <highlight><bold>1703</bold></highlight>C and route B <highlight><bold>1703</bold></highlight>B overlap at the source <highlight><bold>1702</bold></highlight> and the first MUX <highlight><bold>1701</bold></highlight>A, and thus share MUX <highlight><bold>1701</bold></highlight>A. Further descriptions of route determination for these two scenarios are presented below with reference to FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C and FIGS. <highlight><bold>19</bold></highlight>A-<highlight><bold>19</bold></highlight>C. </paragraph>
<paragraph id="P-0270" lvl="7"><number>&lsqb;0270&rsqb;</number> FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C&mdash;Example of Routes With A Subset/Superset Relationship </paragraph>
<paragraph id="P-0271" lvl="0"><number>&lsqb;0271&rsqb;</number> FIGS. <highlight><bold>18</bold></highlight>A-<highlight><bold>18</bold></highlight>C illustrate the routing scenario of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>A, where a first determined route is a subset of a second determined route, according to one embodiment. In other words, the route &ldquo;source-destination1&rdquo; is a subset of route &ldquo;source-destination2&rdquo;. In this scenario, a first route is determined, then a second route is determined which includes the first route in its entirety. </paragraph>
<paragraph id="P-0272" lvl="0"><number>&lsqb;0272&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> shows, in this simple example routing scenario, the source <highlight><bold>1702</bold></highlight> is an input terminal for MUX <highlight><bold>1701</bold></highlight>A, destination 1 <highlight><bold>1704</bold></highlight>A lies between MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>B, and destination 2 <highlight><bold>1704</bold></highlight>B is on the output terminal of MUX <highlight><bold>1701</bold></highlight>B. As <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> also shows, the two MUXs <highlight><bold>1701</bold></highlight>A and <highlight><bold>1701</bold></highlight>B have respective usage counts <highlight><bold>1706</bold></highlight>A and <highlight><bold>1706</bold></highlight>B, each with a value of 0, indicating that the respective routing resources, namely the two MUXs, have not been reserved by or for a prior route. </paragraph>
<paragraph id="P-0273" lvl="0"><number>&lsqb;0273&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 18</cross-reference>B, the measurement system (or measurement subsystem) of <cross-reference target="DRAWINGS">FIG. 18A</cross-reference> is shown where route A <highlight><bold>1703</bold></highlight>A, with source <highlight><bold>1702</bold></highlight> and destination 1 <highlight><bold>1704</bold></highlight>A, has reserved multiplexer <highlight><bold>1701</bold></highlight>A. To indicate the reservation of the routing resource (the MUX) <highlight><bold>1701</bold></highlight>A, the usage count <highlight><bold>1706</bold></highlight>A is incremented, e.g., from zero to one, thus indicating to subsequent routing processes that the routing resource <highlight><bold>1701</bold></highlight>A is already included in a route, and thus constitutes a constraint on the subsequent routing determinations. </paragraph>
<paragraph id="P-0274" lvl="0"><number>&lsqb;0274&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 18C</cross-reference> illustrates the measurement system (or subsystem) of <cross-reference target="DRAWINGS">FIG. 18</cross-reference>B, but where a second route <highlight><bold>1703</bold></highlight>B has been determined, in this case, from source <highlight><bold>1702</bold></highlight> to destination 2 <highlight><bold>1704</bold></highlight>B. The second route <highlight><bold>1703</bold></highlight>B thus traverses both MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>B, and includes the first route <highlight><bold>1703</bold></highlight>A entirely. Note that once the first and second multiplexers <highlight><bold>1701</bold></highlight>A and <highlight><bold>1701</bold></highlight>B are included in or reserved by the second route <highlight><bold>1703</bold></highlight>B, their respective usage counts <highlight><bold>1706</bold></highlight>A and <highlight><bold>1706</bold></highlight>B are incremented, as shown. </paragraph>
<paragraph id="P-0275" lvl="7"><number>&lsqb;0275&rsqb;</number> FIGS. <highlight><bold>19</bold></highlight>A-<highlight><bold>19</bold></highlight>C&mdash;Example of Overlapping Routes </paragraph>
<paragraph id="P-0276" lvl="0"><number>&lsqb;0276&rsqb;</number> FIGS. <highlight><bold>19</bold></highlight>A-<highlight><bold>19</bold></highlight>C illustrate the routing scenario of <cross-reference target="DRAWINGS">FIG. 17</cross-reference>B, where a first determined route overlaps a second determined route, according to one embodiment. In other words, the two routes simply overlap one another. In this use case the route &ldquo;source-destination1&rdquo; overlaps &ldquo;source-destination2&rdquo; at the beginning of the route, but the ends of the routes do not overlap. </paragraph>
<paragraph id="P-0277" lvl="0"><number>&lsqb;0277&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 19A</cross-reference> shows, in this example routing scenario, the source <highlight><bold>1702</bold></highlight> is an input terminal for MUX <highlight><bold>1701</bold></highlight>A, destination 1 <highlight><bold>1704</bold></highlight>C is on the output terminal of MUX <highlight><bold>1701</bold></highlight>C, and destination 2 <highlight><bold>1704</bold></highlight>B is on the output terminal of MUX <highlight><bold>1701</bold></highlight>B. As <cross-reference target="DRAWINGS">FIG. 19A</cross-reference> also shows, initially the three MUXs <highlight><bold>1701</bold></highlight>A, <highlight><bold>1701</bold></highlight>B, and <highlight><bold>1701</bold></highlight>C have respective usage counts <highlight><bold>1706</bold></highlight>A and <highlight><bold>1706</bold></highlight>B, each with a value of 0, indicating that the respective routing resources, namely the three MUXs, have not been reserved by or for a prior route. </paragraph>
<paragraph id="P-0278" lvl="0"><number>&lsqb;0278&rsqb;</number> In <cross-reference target="DRAWINGS">FIG. 19</cross-reference>B, the first route, route C <highlight><bold>1703</bold></highlight>C has been determined, running from source <highlight><bold>1702</bold></highlight> to destination 1 <highlight><bold>1704</bold></highlight>C, and thus reserving and incrementing the respective usage counts of MUX <highlight><bold>1701</bold></highlight>A and <highlight><bold>1701</bold></highlight>C, as shown. </paragraph>
<paragraph id="P-0279" lvl="0"><number>&lsqb;0279&rsqb;</number> Then, as <cross-reference target="DRAWINGS">FIG. 19C</cross-reference> shows, the second route, route B <highlight><bold>1703</bold></highlight>B is determined, where the route <highlight><bold>1703</bold></highlight>B begins at the source <highlight><bold>1702</bold></highlight>, traverses MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>B, and ends at destination 2 <highlight><bold>1704</bold></highlight>B. The usage counts of MUX <highlight><bold>1701</bold></highlight>A and MUX <highlight><bold>1701</bold></highlight>B are incremented to indicate reservation by the route <highlight><bold>1703</bold></highlight>B, as shown. Thus, the usage count <highlight><bold>1706</bold></highlight>A of MUX <highlight><bold>1701</bold></highlight>A, which was previously reserved by route A <highlight><bold>1703</bold></highlight>, is incremented from 1 to 2, and the usage count <highlight><bold>1706</bold></highlight>B of MUX <highlight><bold>1701</bold></highlight>B, which was not previously reserved, is incremented from zero to one. </paragraph>
<paragraph id="P-0280" lvl="7"><number>&lsqb;0280&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference>&mdash;Method for Route Sharing </paragraph>
<paragraph id="P-0281" lvl="0"><number>&lsqb;0281&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is a flowchart of one embodiment of a computer-implemented method for managing routing resources in a measurement system, where at least one of the routing resources is shared between routes. As noted above, the method presented in <cross-reference target="DRAWINGS">FIG. 20</cross-reference> is exemplary, and some of the steps may be performed in a different order than shown, or may be omitted. Additional steps may also be performed as desired. In this embodiment, the source and destination of the route have been specified, and the respective legs of the route may be created and/or analyzed for inclusion in the route, as described below. In one embodiment, the legs of the route may already by selected as a preliminary or proposed set of legs. In another embodiment, the proposed set of legs may not be previously determined, and thus may be determined as the method is performed. </paragraph>
<paragraph id="P-0282" lvl="0"><number>&lsqb;0282&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 20</cross-reference> shows, in <highlight><bold>2002</bold></highlight>, a next leg of the route may be determined or selected as the current leg. In one embodiment, in a first pass of the method, this selected next leg of the route is the first leg of the route, i.e., the leg of the route which includes the route source. </paragraph>
<paragraph id="P-0283" lvl="0"><number>&lsqb;0283&rsqb;</number> In <highlight><bold>2004</bold></highlight>, a determination may be made as to whether a routing resource of the current leg is already reserved for use by a prior or existing leg. In other words, the method may determine if the routing resource for the respective leg is not currently used in an existing route. In one embodiment, the routing resource has a usage count indicating the number of prior or existing routes that have reserved the routing resource. In this embodiment, determining if a routing resource for the respective leg is not currently used in an existing route comprises determining if the usage count has a value of zero. </paragraph>
<paragraph id="P-0284" lvl="0"><number>&lsqb;0284&rsqb;</number> Then, as indicated in <highlight><bold>2005</bold></highlight>, if the routing resource of the current leg has not been used or reserved in a prior or existing route, then the routing resource may be configured with a desired configuration of the current leg. In other words, the routing resource is not constrained by a prior configuration, and thus may be set to the current leg&apos;s desired configuration. In one embodiment, the current leg may have a default configuration, and so, if the default configuration is the desired configuration, configuring the resource may not be necessary. </paragraph>
<paragraph id="P-0285" lvl="0"><number>&lsqb;0285&rsqb;</number> Once the routing resource has been configured, then in <highlight><bold>2007</bold></highlight>, the method may indicate that the resource is reserved. In the embodiment where each routing resource has a usage count, indicating that the routing resource is reserved may comprises incrementing the usage count of the routing resource by one. Thus, since the resource was not previously reserved, the usage count was initially equal to zero, thus, incrementing the usage count by one results in a usage count of one. </paragraph>
<paragraph id="P-0286" lvl="0"><number>&lsqb;0286&rsqb;</number> After the resource has been reserved, then the method may determine if there are more legs in the route to analyze or create, as indicated in <highlight><bold>2009</bold></highlight>, and if there are more legs in the route, the method may return to step <highlight><bold>2002</bold></highlight>, as shown. </paragraph>
<paragraph id="P-0287" lvl="0"><number>&lsqb;0287&rsqb;</number> If there are no more routes to process, then in <highlight><bold>2011</bold></highlight>, the route may be stored, e.g., in a memory of the computer, and the method may terminate, as indicated in <highlight><bold>2020</bold></highlight>, where the route is operable to route signals in performing the measurement task. </paragraph>
<paragraph id="P-0288" lvl="0"><number>&lsqb;0288&rsqb;</number> In step <highlight><bold>2004</bold></highlight> above, if the method determines that the routing resource of the current leg is used in a prior or existing route, i.e., has been reserved for use by another route, then in <highlight><bold>2006</bold></highlight>, the method may determine whether the routing resource&apos;s configuration is the same as the desired configuration of the current leg. If the routing resource&apos;s configuration is the same as the desired configuration of the current leg, then the method may proceed with step <highlight><bold>2007</bold></highlight>, as described above. </paragraph>
<paragraph id="P-0289" lvl="0"><number>&lsqb;0289&rsqb;</number> If the routing resource&apos;s configuration is not the same as the desired configuration of the current leg, then an error, e.g., an error message or code, may be returned indicating that the leg failed, as shown in <highlight><bold>2008</bold></highlight>. In one embodiment, if the leg fails, then the method may optionally determine if alternative legs (to the current leg) are possible or exist, as indicated in <highlight><bold>2010</bold></highlight>, and if no alternative legs for the current leg exist, the route may fail, as <highlight><bold>2016</bold></highlight> indicates, and the method may terminate in <highlight><bold>2020</bold></highlight>. For example, the method may analyze a graph representing the connectivity of routing resources and identify alternative possible legs for the route, i.e., legs with the same source and destination as the current leg. Note that the source and destination of a leg is not generally the same as the source and destination of the route. Thus, determining if an alternative leg exists may mean checking whether an alternative leg is possible, rather than whether the alternative leg is already existent in a previously determined route. </paragraph>
<paragraph id="P-0290" lvl="0"><number>&lsqb;0290&rsqb;</number> If one or more alternative legs for the current leg do in fact exist, i.e., are possible, then in <highlight><bold>2014</bold></highlight>, the method may optionally select an alternative leg as the current leg, and the method may continue with step <highlight><bold>2004</bold></highlight>, as described above. In other words, an alternative leg for the route may be created if the desired configuration of the current leg does not match the current configuration of the routing resource, where the alternative leg includes a different routing resource than the respective leg. </paragraph>
<paragraph id="P-0291" lvl="0"><number>&lsqb;0291&rsqb;</number> Thus, in one embodiment, the method may repeat the above steps for each respective leg of the route until either the route fails, or there are no more legs in the route to determine or create, in which case the route determination is successful and the route is stored. The stored route may then be useable at runtime of the task, as described above. For example, if a plurality of routes are determined, then at runtime, one of the routes may be selected, e.g., based on routing resource availability, and one or more devices in the measurement system configured with the route, as described above in steps <highlight><bold>510</bold></highlight> and <highlight><bold>512</bold></highlight> of <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. </paragraph>
<paragraph id="P-0292" lvl="0"><number>&lsqb;0292&rsqb;</number> In one embodiment, after performance of the measurement task, the route may be released. In other words, the routing manager may indicate that each of the routing resources reserved by or for the route is &ldquo;un-reserved&rdquo; by the route. In the embodiment where each routing resource has a usage count, releasing the route may include decrementing usage counts of the routing resources of the respective legs of the route by one. If and when the usage count of a routing resource is zero, the routing resource of is freed, i.e., is available as a free resource for use and/or re-configuration in subsequent route determinations. Thus, in one embodiment, each respective routing resource has a usage count which indicates the number of routes which have reserved the respective routing resource. Furthermore, reserving the respective routing resource includes incrementing the usage count, and releasing the respective routing resource includes decrementing the usage count, where a usage count of zero indicates that the respective routing resource is free. </paragraph>
<paragraph id="P-0293" lvl="0"><number>&lsqb;0293&rsqb;</number> In some embodiments, the mechanism of usage counts for routing resources may be used in different ways. For example, in one embodiment, when creating and storing the legs of the route are performed in a verify stage, i.e., as a pre-process, the usage count of a respective routing resource may be a temporary usage count indicating the number of routes in the measurement system which have reserved the respective routing resource for the measurement task. In other words, the usage count may only reflect reservations by routes for a particular task. In this case, when route determination for the measurement task begins, the usage counts will preferably be set to zero, indicating that no prior routes for this task have reserved the routing resource. Thus, in this context, the usage count may be considered to be a local usage count. </paragraph>
<paragraph id="P-0294" lvl="0"><number>&lsqb;0294&rsqb;</number> In another embodiment, creating and storing the legs of the route may be performed in a runtime stage, i.e., at or just prior to execution of the measurement task. </paragraph>
<paragraph id="P-0295" lvl="0"><number>&lsqb;0295&rsqb;</number> The usage count of the respective routing resource may indicate the number of routes in the measurement system which have reserved the respective routing resource, including route reservations by and for routes for other tasks. In other words, the usage count of the respective routing resource may represent an actual state of the respective routing resource hardware. Thus, in this case, the usage count may reflect reservations by and for prior or existing routes associated with other tasks, as well as any reservations may by and for the current task. In this context, the usage count may be considered to be a global usage count, meaning that the usage count reflects use by any routes in the measurement system. </paragraph>
<paragraph id="P-0296" lvl="0"><number>&lsqb;0296&rsqb;</number> It should be noted that in some embodiments, both usage counts may be used. For example, the route determination may be performed initially in a verify stage of the measurement process, where the feasibility of routes is checked for a proposed measurement task. In this situation, some or all of the actual hardware of the measurement system (except the computer <highlight><bold>102</bold></highlight>, of course) may not be installed. In other words, the route determination may be performed using data, e.g., topography descriptions, route specifications, etc., to determine the routes, where the local usage counts are used to track routing resource usage/reservations. Then, at runtime, the route determination may be performed again, but with the hardware in place. In this context, the global usage counts may be used to manage the routing resources, as described above. </paragraph>
<paragraph id="P-0297" lvl="7"><number>&lsqb;0297&rsqb;</number> Task-Independent (Immediate) Routes </paragraph>
<paragraph id="P-0298" lvl="0"><number>&lsqb;0298&rsqb;</number> Routes created for a measurement task may generally include a task reference which indicates the associated measurement task. However, in some embodiments, it may be desirable to create routes outside the context of a measurement task. In other words, there may be a need to create and release a route independent of the task(s) in which it is used. Immediate routes may thus not have an associated task reference. Such routes may be referred to as task-independent routes, or immediate routes, as described briefly above. </paragraph>
<paragraph id="P-0299" lvl="0"><number>&lsqb;0299&rsqb;</number> In one embodiment, an immediate route may be created and destroyed by API (Application Programming Interface) calls. For example, in one embodiment, a call to &ldquo;Connect Terminals&rdquo; with the source and destination terminals as arguments may be used to create the route, and a call to &ldquo;Disconnect Terminals&rdquo; for destruction of the route. </paragraph>
<paragraph id="P-0300" lvl="0"><number>&lsqb;0300&rsqb;</number> Creation and destruction of immediate routes may differ somewhat from task-based routes. For example, usage counts of components in a task-based route may be incremented each time a route reserves the components, and thus, if a task-based route is reserved three times, then the route must be released three times (or the task terminated) before being destroyed. In contrast, in the case of an immediate route, if route were created multiple times for a source and destination, then the route could be destroyed with a single function call, as will be described below. In one embodiment, there may only be one immediate route between a particular source and destination, and so immediate routing calls may be tracked on a source/destination basis. More specifically, immediate routes may be tracked by storing their associated source/destination pairs in a routing table. Because of the fact that only one immediate route may exist between a particular source/destination, the first immediate route reserved between that source and destination will be the immediate route for that pair. In other words, in task-independent routing, there may not be multiple routes between a particular source and destination. Creation and destruction of an immediate route are described below with reference to <cross-reference target="DRAWINGS">FIGS. 21A and 21B</cross-reference>. </paragraph>
<paragraph id="P-0301" lvl="7"><number>&lsqb;0301&rsqb;</number> FIGS. <highlight><bold>21</bold></highlight>A and <highlight><bold>21</bold></highlight>B&mdash;Creation and Destruction of Immediate Routes </paragraph>
<paragraph id="P-0302" lvl="0"><number>&lsqb;0302&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 21A and 21B</cross-reference> illustrate the creation and destruction of immediate, or task-independent routes, respectively. As noted above, in some embodiments, various of the steps may be performed in a different order than shown, or may be omitted. Additional steps may also be performed. </paragraph>
<paragraph id="P-0303" lvl="0"><number>&lsqb;0303&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21A</cross-reference> flowcharts one embodiment of a method for creating an immediate or task-independent route. As <cross-reference target="DRAWINGS">FIG. 21A</cross-reference> shows, in <highlight><bold>2102</bold></highlight>, a source destination pair may be received. For example, in one embodiment, a call to &ldquo;Connect Terminals&rdquo; may be made with the source/destination pair as arguments. </paragraph>
<paragraph id="P-0304" lvl="0"><number>&lsqb;0304&rsqb;</number> Then, in <highlight><bold>2104</bold></highlight>, the routing table may be checked for inclusion of the received source/destination pair. </paragraph>
<paragraph id="P-0305" lvl="0"><number>&lsqb;0305&rsqb;</number> If the source/destination pair is found in the routing table, then the method may simply return, as indicated in <highlight><bold>2105</bold></highlight>. In other words, the immediate route between the source and destination already exists, and so nothing more needs to be done. </paragraph>
<paragraph id="P-0306" lvl="0"><number>&lsqb;0306&rsqb;</number> If the source/destination pair is not found in the routing table, then in <highlight><bold>2106</bold></highlight>, the method may process the legs of the route normally, as described above with reference to <cross-reference target="DRAWINGS">FIG. 20</cross-reference>. </paragraph>
<paragraph id="P-0307" lvl="0"><number>&lsqb;0307&rsqb;</number> Then, in <highlight><bold>2108</bold></highlight>, a determination may be made as to whether the route has processed successfully, i.e., if the route was successfully determined from the source to the destination. If the route was not processed successfully, then an error may be returned, as indicated in <highlight><bold>2109</bold></highlight>. If, on the other hand, the route was process successfully, then the source/destination pair may be added to the routing table, as <highlight><bold>2110</bold></highlight> indicates. It is noted that this route may then be the only immediate route allowed between the source and destination. It is also noted that when the route is committed to hardware, the method may proceed in the same manner as with task based routes. </paragraph>
<paragraph id="P-0308" lvl="0"><number>&lsqb;0308&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 21B</cross-reference> flowcharts one embodiment of a method for destroying an immediate route. As <cross-reference target="DRAWINGS">FIG. 21B</cross-reference> shows, in <highlight><bold>2202</bold></highlight>, a source/destination pair may be received for immediate route destruction. In one embodiment, for example, a call to &ldquo;Disconnect Terminals&rdquo; may be made with the source/destination pair as arguments. </paragraph>
<paragraph id="P-0309" lvl="0"><number>&lsqb;0309&rsqb;</number> Then, in <highlight><bold>2104</bold></highlight>, the routing table may be checked for inclusion of the received source/destination pair. </paragraph>
<paragraph id="P-0310" lvl="0"><number>&lsqb;0310&rsqb;</number> If the source/destination pair is not found in the routing table, then the method may simply return, as indicated in <highlight><bold>2105</bold></highlight>. In other words, the immediate route between the source and destination has already be destroyed, and so nothing more needs to be done. </paragraph>
<paragraph id="P-0311" lvl="0"><number>&lsqb;0311&rsqb;</number> If the source/destination pair is found in the routing table, then the method may release the route normally, as indicated in <highlight><bold>2206</bold></highlight>. In other words, all of the routing resources reserved by the route may be decremented and possibly freed. </paragraph>
<paragraph id="P-0312" lvl="0"><number>&lsqb;0312&rsqb;</number> Thus, various embodiments of the systems and methods presented above may programmatically manage shared routing resources, preserving and utilizing pre-configured or specified routing resources reserved by prior determined routes. The route determination may be performed programmatically, utilizing routing resources in a more efficient manner by sharing the resources where possible. Additionally, the method may operate for both task-based and task-independent route determination (and destruction). </paragraph>
<paragraph id="P-0313" lvl="7"><number>&lsqb;0313&rsqb;</number> Line Tri-stating Issues </paragraph>
<paragraph id="P-0314" lvl="0"><number>&lsqb;0314&rsqb;</number> In one embodiment, during device initialization, all terminals on the I/O connector and trigger buses must be tri-stated. Tri-stated means the multiplexer is electrically disconnected from its output bus. In order for the terminal to be driven from the device, the tri-state buffer associated with the terminal must be enabled. There are a number of different cases of tri-state buffer configuration, as illustrated by the examples described below. </paragraph>
<paragraph id="P-0315" lvl="0"><number>&lsqb;0315&rsqb;</number> In a first case, a device includes a single bi-directional terminal on the I/O connector, referred to as the trigger terminal for reference purposes. The trigger terminal of the device is bi-directional in that the device can read from the trigger terminal or drive onto the trigger terminal. </paragraph>
<paragraph id="P-0316" lvl="7"><number>&lsqb;0316&rsqb;</number> Scenario: </paragraph>
<paragraph id="P-0317" lvl="0"><number>&lsqb;0317&rsqb;</number> The trigger terminal is being driven by an external trigger signal only. </paragraph>
<paragraph id="P-0318" lvl="7"><number>&lsqb;0318&rsqb;</number> Usages and Consequences: </paragraph>
<paragraph id="P-0319" lvl="0"><number>&lsqb;0319&rsqb;</number> This is a common use case for triggering an operation from an external source. As a result of this operation, the tri-state buffer associated with the trigger terminal must be disabled so that the internal trigger signal does not drive the trigger terminal too. </paragraph>
<paragraph id="P-0320" lvl="7"><number>&lsqb;0320&rsqb;</number> Scenario: </paragraph>
<paragraph id="P-0321" lvl="0"><number>&lsqb;0321&rsqb;</number> The trigger terminal is being driven by the internal device trigger only. </paragraph>
<paragraph id="P-0322" lvl="7"><number>&lsqb;0322&rsqb;</number> Usages and Consequences: </paragraph>
<paragraph id="P-0323" lvl="0"><number>&lsqb;0323&rsqb;</number> In this use case, an internally generated trigger triggers an operation of the device. This signal could be useful for other devices, as well. In order to export this trigger signal, the tri-state buffer associated with the trigger terminal must be enabled so that the device is able to drive the terminal with the trigger signal. It is important that there be no other devices driving the trigger terminal, thus any other connected device terminal should be tri-stated. </paragraph>
<paragraph id="P-0324" lvl="7"><number>&lsqb;0324&rsqb;</number> Scenario: </paragraph>
<paragraph id="P-0325" lvl="0"><number>&lsqb;0325&rsqb;</number> The trigger terminal is being driven by both the internal device trigger AND an external trigger signal. </paragraph>
<paragraph id="P-0326" lvl="7"><number>&lsqb;0326&rsqb;</number> Usages and Consequences: </paragraph>
<paragraph id="P-0327" lvl="0"><number>&lsqb;0327&rsqb;</number> Driving the trigger terminal both internally and externally is called double driving. If the internal and external sources drive the terminal differently, usually the driving hardware will be damaged, but more extreme consequences can occur, as well. Thus, care should be taken to avoid double driving any terminals on I/O connectors. </paragraph>
<paragraph id="P-0328" lvl="7"><number>&lsqb;0328&rsqb;</number> Lazy Line Transitions </paragraph>
<paragraph id="P-0329" lvl="0"><number>&lsqb;0329&rsqb;</number> When a route gets created and released, it need not program the hardware to disable the route. The hardware resources associated with the route may certainly be released, but the configuration may remain so that glitches may be minimized. </paragraph>
<paragraph id="P-0330" lvl="0"><number>&lsqb;0330&rsqb;</number> In one embodiment, all tri-state buffers associated with I/O connector pins may be disabled by default. When a route with a destination on the I/O connector is released, the tri-state buffer associated with the I/O connector may not be disabled. This means that even though the route was released, glitches are minimized on the destination pin on the I/O connector. If this behavior is not desirable, the tri-state buffer associated with the I/O line may be disabled by using the tri-state mode. Putting the line back into a tri-state mode is necessary if an external signal must be connected to the I/O pin. If the line is not tri-stated first, then double driving the line may damage the hardware. </paragraph>
<paragraph id="P-0331" lvl="0"><number>&lsqb;0331&rsqb;</number> In contrast, terminals on public buses may not be driven if the terminal is not reserved. This is so because the routing manager may allow another device to drive that terminal. If the terminal were not properly released, then more than once device may be driving that terminal. Terminal contention for the I/O connector may not be handled by the routing manager if the user is responsible for managing it. </paragraph>
<paragraph id="P-0332" lvl="7"><number>&lsqb;0332&rsqb;</number> Device Resetting and Interactions with Routing </paragraph>
<paragraph id="P-0333" lvl="7"><number>&lsqb;0333&rsqb;</number> In one embodiment, when the user resets a device, every route associated with the device may be invalidated. If a task-based route is invalidated using a device reset, then its parent task may be invalidated, as well. </paragraph>
<paragraph id="P-0334" lvl="0"><number>&lsqb;0334&rsqb;</number> For example, assume device A is used by a task that performs a measurement operation. This same measurement operation receives a trigger from device B. This task spans devices A and B via multi-device routing. If device B is reset, then all routes associated with device B will be destroyed. The invalidation of the task based route on device B may cause its parent task on device A to be invalidated, as well. The user should consider these possible consequences when issuing a device reset. If the route between device A and B were an immediate route, then there would not be a relationship between the immediate route and the task, thus, the task will not be invalidated. However, because an integral route was destroyed without the task&apos;s knowledge, the task may not behave correctly. </paragraph>
<paragraph id="P-0335" lvl="7"><number>&lsqb;0335&rsqb;</number> Wired-Or and Routing </paragraph>
<paragraph id="P-0336" lvl="0"><number>&lsqb;0336&rsqb;</number> In an embodiment where the measurement system includes an SCXI trigger backplane, the SCXI trigger backplane may support wired-or functionality. Wired-or allows multiple devices to send multiple signals over a single trigger line. Since &ldquo;n&rdquo; devices can send &ldquo;n&rdquo; signals over a single trigger line, then &ldquo;n&minus;1&rdquo; trigger lines are saved. </paragraph>
<paragraph id="P-0337" lvl="7"><number>&lsqb;0337&rsqb;</number> Terminal Aliasing </paragraph>
<paragraph id="P-0338" lvl="0"><number>&lsqb;0338&rsqb;</number> Some terminals may have more than one name, referred to as terminal aliasing. By default all terminals have a physical terminal name. For example, the counter source selection for counter 0 on an E-series board has a fully qualified terminal name of &ldquo;MyDevice/stc0/Counter0SourcePolarity&rdquo;. This functional terminal name is not very useable to an end user, so it is mapped to &ldquo;MyDevice/Counter0Source&rdquo;. Both names refer to the same internal terminal on the STC chip, but the aliased name is provided as a user friendly label. Of course, both terminal names may be used interchangeably. </paragraph>
<paragraph id="P-0339" lvl="7"><number>&lsqb;0339&rsqb;</number> Meta-Routing Tool </paragraph>
<paragraph id="P-0340" lvl="0"><number>&lsqb;0340&rsqb;</number> In one embodiment, the routing system may include a meta-routing tool which operates to provide routability information for one or more devices in the measurement system. The meta-routing tool may include a meta-routing API which gives users means to query the system for a broad range of routing information. The meta-routing tool may not allow users to make routes, but it may allow users to query the system regarding possible or current routes. </paragraph>
<paragraph id="P-0341" lvl="0"><number>&lsqb;0341&rsqb;</number> While prior art solutions to meta-routing generally present all possible routes for a device, the meta-routing tool may provide this information, and may also provide additional benefits. For example, in one embodiment, the meta-routing tool may generate routability tables automatically. While the source of the tables or device topographies may, in some cases, still be built by hand, the table building process may be fully automated and thus more reliable. In embodiments where device topography files are generated automatically, the entire process may then be substantially automated, thereby reducing the chance for human error. Furthermore, because the routability tables are generated automatically, no additional effort is required by the user, i.e., there is no human investment in the building of the routability tables. </paragraph>
<paragraph id="P-0342" lvl="0"><number>&lsqb;0342&rsqb;</number> The meta-routing tool preferably uses device topographies, as described above, to generate the routability tables, thus, any device which has a topography file supports the meta-routing tool. In one embodiment, if a device&apos;s routing information changes, with a corresponding change in its topography file, then the meta-routing tool may update itself. The meta-routing tool may only be available on the user&apos;s machine in its dynamic form, and thus, the generated routing tables may not get stale, i.e., may not become outdated. Furthermore, because each device has generally has its own topography, the meta-routing tool may create a routability table individual to each device. </paragraph>
<paragraph id="P-0343" lvl="0"><number>&lsqb;0343&rsqb;</number> In one embodiment, the meta-routing tool may be coupled to or comprised in a device manager on the users computer system <highlight><bold>102</bold></highlight>. For example, in one embodiment, the meta-routing tool may be available in the National Instruments device manager known as MAX (Measurements and Automation Explorer). The inclusion of the meta-routing tool in the device manager may provide a single location for the tool where it is always available and always up to date. </paragraph>
<paragraph id="P-0344" lvl="0"><number>&lsqb;0344&rsqb;</number> As mentioned above, in one embodiment, the meta-routing tool may augment the information traditionally given in a routability table. For example, a user may be able to see the actual path a route takes through the hardware. As another example, the user may be able to see potential side effects a route may have upon the device. </paragraph>
<paragraph id="P-0345" lvl="7"><number>&lsqb;0345&rsqb;</number> FIGS. <highlight><bold>22</bold></highlight>A and <highlight><bold>22</bold></highlight>B&mdash;Meta-Routing Tool Display </paragraph>
<paragraph id="P-0346" lvl="0"><number>&lsqb;0346&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 22A and 22B</cross-reference> illustrates the meta-routing display, according to one embodiment. In the embodiment shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>A, when the user invokes the meta-routing tool for a device, for example, by opening or executing a device manager program, a screen may be displayed indicating that the meta-routing tool is determining all of the possible routes for the device. In other words, the meta-routing tool may initialize itself, using the device&apos;s topography description to determine a route from every public source to every public destination in the device. This process is described in more detail below with reference to <cross-reference target="DRAWINGS">FIG. 23</cross-reference>. </paragraph>
<paragraph id="P-0347" lvl="0"><number>&lsqb;0347&rsqb;</number> Then, once the initialization process is complete, then as <cross-reference target="DRAWINGS">FIG. 22B</cross-reference> shows, a screen may be displayed indicating the determined routes. As <cross-reference target="DRAWINGS">FIG. 22B</cross-reference> shows, the valid sources are displayed in the left most column and the destinations are shown in the top row. The other cells in the table represent the possible routes between the sources and destinations. Black cells symbolize valid routes while gray cells represent valid routes with some side effects. In the screen shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>B, the user has clicked on the cell corresponding to a route with the source PFI7 and destination PFI3, shown with black border. </paragraph>
<paragraph id="P-0348" lvl="0"><number>&lsqb;0348&rsqb;</number> In the embodiment shown, more detailed information regarding the selected route may be displayed in an information window below the table. In this example, because the route is valid, a list of terminals from the source to the destination, e.g., a component-wise path, appears in the information window. Since the cell is gray, the side effect of the selected route is also described. More specifically, the information indicates that counter 1 on the device is used in the route, and thus may be unusable for other routes. </paragraph>
<paragraph id="P-0349" lvl="0"><number>&lsqb;0349&rsqb;</number> Users may use this table to peruse, assess, and analyze the routability of a device. For example, a user will generally require routability information for a device for setting up triggers or exporting hardware events. Additionally, if there is a resource conflict on the device, the user may use the meta-routing tool to gather information for resolving the conflict. For example, the user may use the meta-routing tool to compare the side effects of two conflicting routes, and may select one of the routes as a higher priority route based on the side effects and/or other criteria. The user may then use the meta-routing tool to determine an alternative route to replace the lower priority route. </paragraph>
<paragraph id="P-0350" lvl="7"><number>&lsqb;0350&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 23</cross-reference>&mdash;Determination of Device Routability </paragraph>
<paragraph id="P-0351" lvl="0"><number>&lsqb;0351&rsqb;</number> As mentioned above, the meta-routing tool may generate the routability information based on device topography information. Thus, the meta-routing tool may require that all supported devices have a map or topography of the (device) board, e.g., in the form of a topography file. <cross-reference target="DRAWINGS">FIG. 23</cross-reference> flowcharts one embodiment of a method for generating the routability display shown in <cross-reference target="DRAWINGS">FIGS. 22A and 22B</cross-reference>. As noted above, in various embodiments, some of the steps of the method may be performed in a different order than shown, or may be omitted as desired. Additional steps may also be performed. </paragraph>
<paragraph id="P-0352" lvl="0"><number>&lsqb;0352&rsqb;</number> As <cross-reference target="DRAWINGS">FIG. 23</cross-reference> shows, in <highlight><bold>2302</bold></highlight>, user input may be received specifying a device for which routability information is desired. In an embodiment in which the meta-routing tool is comprised in (or coupled to) a device manager program, the user may run the device manager on the computer system <highlight><bold>102</bold></highlight>, and select the device for routability analysis. The device manager may automatically invoke the meta-routing tool, or may receive input from the user specifically invoking the tool for the specified device. </paragraph>
<paragraph id="P-0353" lvl="0"><number>&lsqb;0353&rsqb;</number> In response to specifying the device in <highlight><bold>2302</bold></highlight>, the meta-routing tool may retrieve topographical information for the device, e.g., in the form of a topography file, as indicated in <highlight><bold>2304</bold></highlight>. For example, the topographical information may be retrieved from a database. As described above, in one embodiment, the topography file for a device may be a text file which indicates the connectivity among the components of the device. In other embodiments, the topography file may be in the form of a graphical diagram, or a graph comprising nodes and edges representing the terminals and components of the device. The topography file may be stored on the user computer system <highlight><bold>102</bold></highlight>, or alternatively, may be stored on a server computer which is coupled to the computer system <highlight><bold>102</bold></highlight> over a network, such as the Internet. For example, in one embodiment, a routability information server may store topography descriptions for many devices, and may be accessed by the client computer <highlight><bold>102</bold></highlight>, e.g., over a network, to retrieve respective topography descriptions for supported devices, e.g., by device IDs. In one embodiment, device manufacturers (or providers) may register devices with the routability server, providing topography descriptions for the registered devices. Users may then access the server (e.g., via respective client computer systems <highlight><bold>102</bold></highlight>) to retrieve the topography descriptions as needed (e.g., via the meta-routing tool, or a routing manager program). In one embodiment, payment of a fee may be required to retrieve the latest topography description for a device, and thus payment information, e.g., a credit card number, may be provided by the client to an e-commerce server prior to retrieving the topography description. </paragraph>
<paragraph id="P-0354" lvl="0"><number>&lsqb;0354&rsqb;</number> Once the topography description for the device has been retrieved, then, in <highlight><bold>2306</bold></highlight>, the meta-routing tool may walk the topography of the device to determine routability information for the device. In other words, the meta-routing tool may parse the topography file, tracing the connectivity through all of the routing components of the device. Additionally, the meta-routing tool may retrieve information from the topography file indicating side effects for routes through one or more of the components. For example, if a routing component in a proposed route includes a counter, then use of the route may preclude use of the counter by other routes (see <cross-reference target="DRAWINGS">FIG. 22</cross-reference>B, described above). </paragraph>
<paragraph id="P-0355" lvl="0"><number>&lsqb;0355&rsqb;</number> Finally, in <highlight><bold>2308</bold></highlight>, the meta-routing tool may display the determined routability information for the device in a routability table, e.g., as shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>B and described above. In one embodiment, the method may further include receiving user input specifying one of the indicated possible routes in the routability table. The meta-routing tool may then display additional routing information related to the specified route. For example, as shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>B and described above, the additional material may include the actual path, e.g., a component-wise path, taken by the route. Additionally, if there are any potential side effects of the route, they may be displayed as well. For example, if one or more sub-systems are used in the route, e.g., a counter, then the subsystems may be listed in an information window, as shown in <cross-reference target="DRAWINGS">FIG. 22</cross-reference>B, indicating that use of the sub-system by other routes may be constrained or precluded. </paragraph>
<paragraph id="P-0356" lvl="0"><number>&lsqb;0356&rsqb;</number> In one embodiment, the determined routability information may not only be displayed to the user for analysis, but may also be made available to other systems. In other words, the routability information may be provided in various formats to external systems, e.g., other software programs, for a any of a variety of uses, such as automatic route determination, among others. It is noted that if the topography of the board is updated because of a software or hardware upgrade, then the meta-routing tool will return up-to-date routability information. In other words, the meta-routing tool is data-driven from the device&apos;s topography, and thus the routability table generated automatically reflects any updates of the topography descriptions for the device. </paragraph>
<paragraph id="P-0357" lvl="0"><number>&lsqb;0357&rsqb;</number> In one embodiment, the meta-routing tool may be used to determine routability in a system which includes a plurality of devices. For example, the user may specify two or more devices for routing analysis, and the meta-routing tool may retrieve a corresponding two or more topology descriptions, determine all possible routes through all of the devices, and present the information to the user. Alternatively, the meta-routing tool may retrieve a system topography description for the two or more devices, and provide routing information to the user at the device level. In yet another embodiment, the meta-routing tool may retrieve both device topography descriptions and a system topography description, and determine complete system routability for presentation to the user. </paragraph>
<paragraph id="P-0358" lvl="0"><number>&lsqb;0358&rsqb;</number> Thus, in various embodiments, the meta-routing tool may provide means for a user to easily and reliably determine routability for a device, or, in other embodiments, for a system comprising two or more devices. The meta-routing tool may display information indicating all possible routes in the device or system, and may optionally also provide information indicating any possible side effects for particular routes. The meta-routing tool may also be operable to display the actual path a route takes through the hardware. Additionally, if there is a resource conflict related to the route, the meta-routing tool may provide means for gathering information for resolving the conflict. </paragraph>
<paragraph id="P-0359" lvl="0"><number>&lsqb;0359&rsqb;</number> Thus, various embodiments of the systems and methods described above may provide improved means for determining, analyzing, and implementing routing in measurement systems. </paragraph>
<paragraph id="P-0360" lvl="7"><number>&lsqb;0360&rsqb;</number> Glossary of Terms </paragraph>
<paragraph id="P-0361" lvl="1"><number>&lsqb;0361&rsqb;</number> actuator&mdash;device used to convert from one phenomenon to another. Typically, the user will need to use an actuator to convert the phenomenon generated by a device to a more useful phenomenon. </paragraph>
<paragraph id="P-0362" lvl="1"><number>&lsqb;0362&rsqb;</number> application program&mdash;a software program which is executable to perform one or more functions, e.g., a software program that is executable to perform one or more specified measurement tasks. </paragraph>
<paragraph id="P-0363" lvl="1"><number>&lsqb;0363&rsqb;</number> attribute desirability&mdash;expressed by clients of the measurements expert system or measurements experts themselves. Specifies preferences (weighting) for the value of a specification attribute when there exists multiple possibilities. </paragraph>
<paragraph id="P-0364" lvl="1"><number>&lsqb;0364&rsqb;</number> branch&mdash;a proposal made by a measurements expert to extend a partial solution. Measurements experts may present several possibilities for extending one partial solution, effectively branching that partial solution into several independent partial solutions. </paragraph>
<paragraph id="P-0365" lvl="1"><number>&lsqb;0365&rsqb;</number> capabilities&mdash;capabilities store all attributes unique to the registration of an expert. Ex. A multiplexer expert is registered for three multiplexers, so the multiplexer has three capability records. For a multiplexer, the capability record will store the name of the multiplexer, the name of the output terminal, the names of all the input terminals, a list of the register settings for multiplexer configuration, and finally the limitations of the multiplexer. Anything that makes an expert registration unique or different is stored in the capability record. Expert developers can circumvent the need for capabilities by creating a unique expert subclass per registration. </paragraph>
<paragraph id="P-0366" lvl="1"><number>&lsqb;0366&rsqb;</number> channel&mdash;hardware and software resources used to make a measurement or a generation. Hardware resources of a channel include I/O connector resources and internal resources such as filters, ADC, counters, and the like. Software resources of a channel include scaling, analysis, transfer, and the like. Experts may choose the optimal attribute settings for a channel based on the task specification. </paragraph>
<paragraph id="P-0367" lvl="1"><number>&lsqb;0367&rsqb;</number> compile&mdash;the act of the measurements expert system solving a problem, effectively transforming a measurement task specification into a complete run-time specification. The Lenn &ldquo;compile&rdquo; also refers to converting a software program from source code into executable object code. </paragraph>
<paragraph id="P-0368" lvl="1"><number>&lsqb;0368&rsqb;</number> complete solution&mdash;a collection of decisions in which the measurement task specification has been fully solved by measurements experts. </paragraph>
<paragraph id="P-0369" lvl="1"><number>&lsqb;0369&rsqb;</number> completeness&mdash;a quantification of how close a measurement task specification is to being solved. The measurements expert system currently expresses this in the form of an estimate. </paragraph>
<paragraph id="P-0370" lvl="1"><number>&lsqb;0370&rsqb;</number> connection&mdash;a link between a two terminals. Physical manifestation of a connection could be a wire, trace, fiber optic line, or infrared link. </paragraph>
<paragraph id="P-0371" lvl="1"><number>&lsqb;0371&rsqb;</number> connectors&mdash;a set of pins made to link with a set of sockets or vise versa. Connectors also delineate when one component ends and another component begins. Components are joined to one another using connectors. Connectors allow connection MSOs to propagate across components. Examples of components are boards (PWBs), chips, cables, PXI chassis, and any other component that is reusable. Every component has one or more connectors. If a component is capable of joining with five other components, then the component will have five connectors. Two components can only join with one another if their connectors are compatible. When a connector pin is driven, the pin needs to be reserved so that it cannot be double driven in the future. </paragraph>
<paragraph id="P-0372" lvl="1"><number>&lsqb;0372&rsqb;</number> constraints&mdash;associated Boolean expressions of a solution that must be satisfied for the solution to meet the designer&apos;s needs. Example constraints include an attribute expression where measurable attributes include: price, maximum latency, throughput, determinism, accuracy, precision, and mass. An example expression could be (price &lt;$5000). Other constraints may be fixed hardware settings (i.e. jumpered settings), limited resources (memory, computational power, counters, terminals), fixed hardware connectivity or fixed phenomenon connectivity, or artificial user constraints (i.e. gain must be 1) </paragraph>
<paragraph id="P-0373" lvl="1"><number>&lsqb;0373&rsqb;</number> cost&mdash;a composite measurement of attribute desirability, complexity, and resource consumption achieved by a particular solution. The measurements expert system uses costs and estimates to prioritize solutions. When selecting complete solutions, the measurements expert system chooses those complete solutions with the least cost. When selecting partial solutions, the measurements expert system chooses those partial solutions with the least cost and the lowest estimate of work remaining. Also referred to as a metric. </paragraph>
<paragraph id="P-0374" lvl="1"><number>&lsqb;0374&rsqb;</number> crystal oscillator&mdash;a component that generates a signal at a fixed frequency. </paragraph>
<paragraph id="P-0375" lvl="1"><number>&lsqb;0375&rsqb;</number> data store&mdash;destination specified for samples from a measurement, or source of updates specified for a generation. </paragraph>
<paragraph id="P-0376" lvl="1"><number>&lsqb;0376&rsqb;</number> decision&mdash;encapsulates a single extension of a partial solution. Measurements experts create one or more decisions based on their inputs which may be a measurement task specification. These decisions are either branched or failed </paragraph>
<paragraph id="P-0377" lvl="1"><number>&lsqb;0377&rsqb;</number> digital high&mdash;a level of voltage that corresponds to a binary 1 versus a 0. </paragraph>
<paragraph id="P-0378" lvl="1"><number>&lsqb;0378&rsqb;</number> digital low&mdash;a level of voltage that corresponds to a binary 0 or ground. </paragraph>
<paragraph id="P-0379" lvl="1"><number>&lsqb;0379&rsqb;</number> divide down counter&mdash;also known as a pre-scaler counter, divide down counters output one pulse for every N pulses received. </paragraph>
<paragraph id="P-0380" lvl="1"><number>&lsqb;0380&rsqb;</number> event&mdash;used to control the timing and triggering of a measurement, generation, or connection. Users indicate timing and triggering by associating events with measurements, generations, and connections through messages. Users register observers with events to receive notifications while the task is running. The source of the event is often a hardware resource, but may be a software program, as well. Events can also be associated with other events to construct more complex events. </paragraph>
<paragraph id="P-0381" lvl="1"><number>&lsqb;0381&rsqb;</number> failed solution&mdash;a partial solution terminated by a failed decision. </paragraph>
<paragraph id="P-0382" lvl="1"><number>&lsqb;0382&rsqb;</number> fully qualified terminal names&mdash;unique identifiers that refer to a physical terminal in a system. In order to guarantee the uniqueness of a terminal name across multiple homogeneous devices, terminal names are scoped by placing the name of the device before the name of the terminal. The filly qualified terminal name for &ldquo;PFI3&rdquo; on device &ldquo;DancingMonkey&rdquo; would be &ldquo;DancingMonkey/PFI3&rdquo;. The delimiter for fully qualified terminal names is the forward slash &ldquo;/&rdquo;. Many fully qualified terminal names may have multiple delimiters. For example, the start trigger for the analog input subsection of the &ldquo;Dancing Monkey&rdquo; device would be &ldquo;DancingMonkey/ai/start&rdquo;. </paragraph>
<paragraph id="P-0383" lvl="1"><number>&lsqb;0383&rsqb;</number> generation&mdash;production of a phenomenon, or a process which produces a phenomenon. The act of driving a phenomenon on a terminal. If the generation is specified using a MSO (Measurement Specification Object), then the generation will have specific attributes such as frequency, voltage levels, and the destination terminal for the generation. Generations may seem similar to connections. The difference is that the routing experts instead of the user figure out the source of the generation. </paragraph>
<paragraph id="P-0384" lvl="1"><number>&lsqb;0384&rsqb;</number> generation specification&mdash;a specification for the generation of a phenomenon, which might include the type of generation (waveform, sine wave, control function), and other attributes of the generation (amplitude, frequency, etc.) </paragraph>
<paragraph id="P-0385" lvl="1"><number>&lsqb;0385&rsqb;</number> independent&mdash;a specification is considered independent if it can be solved in parallel with any other specifications in a given measurement task specification. </paragraph>
<paragraph id="P-0386" lvl="1"><number>&lsqb;0386&rsqb;</number> digital low pass filter&mdash;low pass filters have the ability to reject portions of signals whose frequencies are above a certain level. Low pass filters can achieve this by sampling the signal at a certain frequency. If the signal stays constant between two subsequent samples, then the output of the low pass filter reflects the filter&apos;s input value. Another interesting side effect of low pass filters is that the propagation of a signal is delayed proportionally to the sampling frequency of the filter. </paragraph>
<paragraph id="P-0387" lvl="1"><number>&lsqb;0387&rsqb;</number> measurement&mdash;the retrieval of one or more characteristics of a phenomenon in order to produce a useful sample of information. For example, measurements may be performed by instruments or other types of devices which acquire real world data. Measurements may be performed for the purposes of simulation, hardware in the loop testing, validation, test, instrumentation, and manufacturing assembly, among other purposes. Measurements are how users quantify a phenomenon on a terminal. If the measurement is specified by a MSO (Measurement Specification Object), then the measurement will have specific attributes such as scaling factors, sampling rates, descriptions of the phenomenon, and the source terminal for the phenomenon being quantified. </paragraph>
<paragraph id="P-0388" lvl="1"><number>&lsqb;0388&rsqb;</number> measurement device&mdash;a hardware or virtual device which is operable to perform a measurement on a phenomenon, a generation of a phenomenon, or a connection. Example measurement devices include any of the devices shown in FIGS. <highlight><bold>1</bold></highlight>A-<highlight><bold>1</bold></highlight>C. </paragraph>
<paragraph id="P-0389" lvl="1"><number>&lsqb;0389&rsqb;</number> measurement expert registry&mdash;a data structure correlating one or more experts with respective types of measurement tasks. The registry may be used by an expert system to select experts to populate run-time specifications for a given measurement task. measurement expert system&mdash;a software program which may compile a measurement task specification into a run-time specification by selecting and invoking one or more experts. </paragraph>
<paragraph id="P-0390" lvl="1"><number>&lsqb;0390&rsqb;</number> measurement specification&mdash;a specification for the measurement of a phenomenon, which may include the type of measurement (e.g., present-value, frequency), other attributes of the measurement, and preferences of the measurement (e.g., accuracy, precision, throughput, latency). </paragraph>
<paragraph id="P-0391" lvl="1"><number>&lsqb;0391&rsqb;</number> measurement specification object (MSO)&mdash;the atomic objects used to describe concepts in the measurements domain. Measurement specification objects are associated to form a measurement task specification. MSOs are a way to specify a measurement, generation, or connection. Classical measurement APIs are centered on specifying the device, solution, and technology used to make the measurement. MSOs center around the specification of the problem versus the solution. It is the job of the decision tree to map the MSO to the measurement, generation, or connection to devices, solutions, and technology. Decision trees make this mapping happen using experts. In this way, the customer&apos;s specification is now loosely coupled to devices, solutions, and technology. </paragraph>
<paragraph id="P-0392" lvl="1"><number>&lsqb;0392&rsqb;</number> measurement task&mdash;a group of measurements, generations, and connections that share timing, synchronization, and control. </paragraph>
<paragraph id="P-0393" lvl="1"><number>&lsqb;0393&rsqb;</number> measurement task configuration tool&mdash;a software program which may be used to configure measurement tasks; this may be a general purpose development tool or a specific tool; a type of a measurement task specifier, below. </paragraph>
<paragraph id="P-0394" lvl="1"><number>&lsqb;0394&rsqb;</number> measurement task specification&mdash;a set of phenomena specifications, measurement specifications, generation specifications, timing specifications, and program specifications that comprise a measurement and automation application. A collection of one or more related specifications. Conceptually, the contents of a task specification represent one task which a customer would like to solve atomically. The measurements expert system uses measurements experts to compile a task specification into a populated run-time specification. </paragraph>
<paragraph id="P-0395" lvl="1"><number>&lsqb;0395&rsqb;</number> measurement task specifier&mdash;a program which accepts user input and may be used to produce a measurement task specification for a given measurement task; similar to a task configuration tool, below. An example measurement task specifier is a measurement task configuration tool which may be invoked from a graphical or text-based development environment. Other examples of a measurement task specifier include a measurement task wizard, and a measurement task API. Specific examples of a measurement task specifier include LabVIEW, LabWindows/CVI, DiaDem, DasyLab, Visual Basic, Visual C&plus;&plus;, Delphi, Mathwork&apos;s Simulink, Agilent Vee, SoftWire, and other similar programming development environments. </paragraph>
<paragraph id="P-0396" lvl="1"><number>&lsqb;0396&rsqb;</number> measurements expert&mdash;a type of expert designed to operate under arbitration of the Measurements Experts Library. The goal of a measurements expert is to compile a portion of a measurement task specification into a populated run-time specification. </paragraph>
<paragraph id="P-0397" lvl="1"><number>&lsqb;0397&rsqb;</number> partial solution&mdash;a collection of decisions for which no complete solution for the measurement task specification has yet been found. </paragraph>
<paragraph id="P-0398" lvl="1"><number>&lsqb;0398&rsqb;</number> phenomenon&mdash;a detectable signal. Users make measurements on phenomena, or generate them. Sensors and actuators convert from one phenomenon to another. </paragraph>
<paragraph id="P-0399" lvl="1"><number>&lsqb;0399&rsqb;</number> phenomenon specification&mdash;a characterization of a phenomenon in the real world, containing information about the type of the phenomenon (such as voltage, temperature, rotation speed, area luminosity, etc.), and characteristics of that phenomenon (such as range, bandwidth, shape, periodicity, etc.). </paragraph>
<paragraph id="P-0400" lvl="1"><number>&lsqb;0400&rsqb;</number> preferences&mdash;a formula that qualifies how well a solution meets a designer&apos;s needs. An example formula is f(mass), where f is the square of mass, such that less mass is a better solution. Another example is g(maximum latency, throughput) where g is a formula that calculates the throughput less 1000 times the maximum latency. In this case, a higher value for g is a better solution for the user (an identical concept is the &ldquo;cost&rdquo; function of a solution). </paragraph>
<paragraph id="P-0401" lvl="1"><number>&lsqb;0401&rsqb;</number> primitive&mdash;a single, cohesive object implementing a particular aspect of a measurement system. Primitive supervisors broker primitives. A run-time is composed of an aggregation of primitives. </paragraph>
<paragraph id="P-0402" lvl="1"><number>&lsqb;0402&rsqb;</number> primitive setting&mdash;a collection of properties associated with a particular primitive. Primitive settings are configured by measurements experts, and interpreted by primitive supervisors. </paragraph>
<paragraph id="P-0403" lvl="1"><number>&lsqb;0403&rsqb;</number> primitive supervisor&mdash;invoked by run-time builders, primitive supervisors interpret a specific primitive setting, using the contained properties to reserve an associated primitive. </paragraph>
<paragraph id="P-0404" lvl="1"><number>&lsqb;0404&rsqb;</number> reader&mdash;used to retrieve samples from a data source. Readers may be specific to the data source and the attributes will reflect this. For example, a buffer reader may have a parameter to indicate where in the buffer to retrieve data from. </paragraph>
<paragraph id="P-0405" lvl="1"><number>&lsqb;0405&rsqb;</number> registrations&mdash;expert registrations are how the decision tree knows which experts to ask to solve an MSO. If an expert is not registered, then they never get asked. An expert may be registered by using software calls or by placing entries in the registration portion of a component topography. Most hardware experts will use the latter method. </paragraph>
<paragraph id="P-0406" lvl="1"><number>&lsqb;0406&rsqb;</number> resource&mdash;a single, reservable element of the total means available for performing measurements in a measurement system. Examples of resources include a hardware counter, a RTSI line, or a fixed amount of CPU cycles. </paragraph>
<paragraph id="P-0407" lvl="1"><number>&lsqb;0407&rsqb;</number> route&mdash;a route is a connection between two terminals. When the user is setting up a data acquisition, routes may be implicitly created. The user may only be required to know the source or destination of the created connection. </paragraph>
<paragraph id="P-0408" lvl="1"><number>&lsqb;0408&rsqb;</number> run-time&mdash;a collection or sequence of primitives in a specific environment implementing a measurement system. Run-times are built by run-time builders, and may be executed to perform a specific measurement task or operation. The term &ldquo;runtime&rdquo; may also refer to other forms of a software program that implement a measurement system. </paragraph>
<paragraph id="P-0409" lvl="1"><number>&lsqb;0409&rsqb;</number> run-time builder&mdash;a software program which may analyze a run-time specification, reserve one or more primitives according to the run-time specification, and configure one or more primitives according to the run-time specification. Interprets a particular run-time specification and builds a run-time. Primitive brokering is delegated to primitive supervisors. The term &ldquo;run-time builder&rdquo; may also refer to a software program which may analyze a run-time specification and configure other types of software entities, such as by configuring other types of software program(s) or data structures according to the run-time specification. </paragraph>
<paragraph id="P-0410" lvl="1"><number>&lsqb;0410&rsqb;</number> run-time specification&mdash;a set of parameters specifying hardware or software primitive configurations required for a specified measurement task. A collection of primitive settings populated by measurements experts. Run-time specifications are interpreted by run-time supervisors. The term &ldquo;run-time specification&rdquo; may also include a data structure or other representation of information that specifies a measurement task. </paragraph>
<paragraph id="P-0411" lvl="1"><number>&lsqb;0411&rsqb;</number> sensor&mdash;device used to convert from one phenomenon type to another. Typically, the user will need to use a sensor to convert the phenomenon to a type the device can sample. Example sensors include thermocouples, pressure transducers, cameras, etc. </paragraph>
<paragraph id="P-0412" lvl="1"><number>&lsqb;0412&rsqb;</number> signal modifier&mdash;any hardware in a route which capable of changing versus just propagating the digital signal. Examples of signal modifiers are digital inverters, pre-scalers, digital low pass filters, and delay elements. </paragraph>
<paragraph id="P-0413" lvl="1"><number>&lsqb;0413&rsqb;</number> solution&mdash;a complete solution, failed solution, or partial solution. </paragraph>
<paragraph id="P-0414" lvl="1"><number>&lsqb;0414&rsqb;</number> solution builder&mdash;a self-contained piece of expert logic (&ldquo;expertise&rdquo;) used to perform post-processing on a complete or failed solution. Measurements experts attach solution builders to decisions at solution-time when a partial solution is expanded. Deployed solution builders are invoked when a complete or failed solution is selected by the measurements expert system. </paragraph>
<paragraph id="P-0415" lvl="1"><number>&lsqb;0415&rsqb;</number> specification attribute&mdash;a data member of a measurement specification object. Used to describe some characteristic of a particular object. </paragraph>
<paragraph id="P-0416" lvl="1"><number>&lsqb;0416&rsqb;</number> static digital multiplexer&mdash;a multiplexer (MUX) which is programmed then used without further modifications. Some switching boards have multiplexers that are dynamic. Digital refers to the fact that the multiplexer is binary and directional. Digital multiplexers can only drive from an input pin to their output pin. Mechanical multiplexers used in switching applications are bidirectional. Digital multiplexers are unidirectional. Static digital multiplexers are used to route one out of a list of discrete list of inputs to its single output. </paragraph>
<paragraph id="P-0417" lvl="1"><number>&lsqb;0417&rsqb;</number> terminal&mdash;a physical location on a measurement device, cable, terminal block, accessory, or other measurement product where an phenomenon resides. For example, a terminal may be a connector on a terminal block, a pin on an ASIC, or the end of a thermocouple. Said another way, terminals are points on hardware where a signal is present. A terminal may be physically impossible to probe&mdash;especially if it is located within a chip. </paragraph>
<paragraph id="P-0418" lvl="1"><number>&lsqb;0418&rsqb;</number> terminal configuration&mdash;a collection of terminals with a specified usage. Examples of terminal configurations are referenced single-ended, non-referenced single-ended, two-wire differential, and four-wire excitation. </paragraph>
<paragraph id="P-0419" lvl="1"><number>&lsqb;0419&rsqb;</number> timing specification&mdash;a specification for the timing of measurements, generations, and control functions in the systems. Timing can include specification of synchronized measurement and generation, timed sequences and constraints on the completion of tasks. </paragraph>
<paragraph id="P-0420" lvl="1"><number>&lsqb;0420&rsqb;</number> topography&mdash;a topography normally refers to the layout of a component. People sometimes refer to a collection of topographies as a single topography. This too is correct. A topography has three main sections: 1) list of connectors 2) list of registrations 3) list of capabilities. The variation of these three sections is what makes topographies customizable and powerful. Topographies are stored as data dictionaries and are retrieved using MXS. It is the responsibility of the device group to create their device topographies. Sub components could possibly be specified by outside group. If a single device group only uses the sub component, then it is the responsibility of the using group to create the sub component topography. </paragraph>
<paragraph id="P-0421" lvl="1"><number>&lsqb;0421&rsqb;</number> trigger bus&mdash;a trigger bus is a collection of lines that many devices share by reading signals from or driving signals to the trigger bus. Examples of trigger buses are RTSI and the PXI Trigger backplane. </paragraph>
<paragraph id="P-0422" lvl="1"><number>&lsqb;0422&rsqb;</number> tri-state&mdash;tri-stating is a mode in which an output driver (e.g. on a multiplexer) electrically disconnects its output terminal from its bus. </paragraph>
<paragraph id="P-0423" lvl="1"><number>&lsqb;0423&rsqb;</number> virtual measurement device&mdash;a device which is implemented as a software program, or at least a portion of which is implemented as a software program. </paragraph>
<paragraph id="P-0424" lvl="1"><number>&lsqb;0424&rsqb;</number> writer&mdash;used to write updates to a data store. Writers are generally specific to the data store and the attributes will reflect this. For example, a buffer writer may have a parameter to indicate where in the buffer to write data to. </paragraph>
<paragraph id="P-0425" lvl="0"><number>&lsqb;0425&rsqb;</number> Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">We claim: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A carrier medium which stores program instructions for programmatically determining routing for a measurement task, wherein the program instructions are executable to perform: 
<claim-text>receiving information specifying a route from a source terminal to a destination terminal in a measurement system, wherein said information includes one or more signal modification requirements for the route; </claim-text>
<claim-text>determining a current signal modification of the route; </claim-text>
<claim-text>determining one or more desired changes in the signal modification of the route based on the one or more signal modification requirements for the route and the current signal modification of the route; </claim-text>
<claim-text>modifying the route to include at least one of the one or more desired changes in the signal modification of the route, thereby generating a modified route, wherein the modified route satisfies at least a portion of the one or more signal modification requirements for the route; and </claim-text>
<claim-text>storing the modified route, wherein the modified route is usable to route signals in performing the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>determining if the modified route satisfies the one or more signal modification requirements for the route; and </claim-text>
<claim-text>if the modified route does not satisfy the one or more signal modification requirements for the route, generating an error message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein said information further includes a graph of possible routes from the source terminal to the destination terminal; wherein the route comprises one or more legs; and </claim-text>
<claim-text>wherein said modifying the route to include at least one of the one or more desired changes in the signal modification of the route comprises: 
<claim-text>walking the one or more legs of the route in the graph; and </claim-text>
<claim-text>replacing at least one of the one or more legs with an alternative leg, wherein the alternate leg includes said at least one of the one or more desired changes in the signal modification of the route. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00003">claim 3</dependent-claim-reference>, wherein said walking and said replacing comprise: 
<claim-text>a) selecting a current leg of the one or more legs of the route; </claim-text>
<claim-text>b) determining from the graph and/or the current signal modification of the route whether one or more alternative legs for the current leg exist; </claim-text>
<claim-text>c) if the one or more alternative legs exist, for at least one of the one or more alternative legs: 
<claim-text>d) comparing signal modification of the current leg with signal modification of the at least one alternative leg; and </claim-text>
<claim-text>e) if replacement of the current leg with the at least one alternative leg in the route fulfills at least a portion of the desired changes in signal modification for the route, replacing the current leg with the at least one alternative leg. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>after said replacing the current leg with the alternative leg, 
<claim-text>f) modifying the one or more desired changes in signal modification for the route to reflect said replacing; </claim-text>
<claim-text>g) if at least one of the one or more desired changes in signal modification for the route remains and at least one of the one or more legs of the route has not been selected, </claim-text>
<claim-text>h) selecting a next leg of the one or more legs of the route as the current leg; and </claim-text>
<claim-text>i) repeating b) through g). </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00004">claim 4</dependent-claim-reference>, 
<claim-text>wherein the current signal modification of the route includes signal modifications for one or more legs of the route that are shared with a pre-existing route; </claim-text>
<claim-text>wherein said signal modifications for one or more legs of the route that are shared with a pre-existing route comprise constraints on the route which may not be changed to meet the one or more signal modification requirements for the route; and </claim-text>
<claim-text>wherein determining from the graph and/or the current signal modification of the route whether one or more alternative legs for the current leg exist comprises determining whether the leg includes a constraint from the pre-existing route, and wherein if the leg includes a constraint, then there are no alternative legs for the leg. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, 
<claim-text>wherein the route includes a plurality of components; </claim-text>
<claim-text>wherein the current signal modification of the route comprises information indicating signal modifications for one or more components of the plurality of components that are shared with a pre-existing route; and </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are shared with the pre-existing route may not be changed to meet the one or more signal modification requirements for the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, 
<claim-text>wherein the current signal modification of the route comprises information indicating signal modifications for one or more components of the plurality of components that are not shared with a pre-existing route; </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are not shared comprise default signal modifications for the one or more components; and </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are not shared may be changed to meet the one or more signal modification requirements for the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein said signal modifications include one or more of: 
<claim-text>signal inversion; </claim-text>
<claim-text>synchronization; </claim-text>
<claim-text>filtering; </claim-text>
<claim-text>pre-scaling; and </claim-text>
<claim-text>logical combination with a signal from another terminal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the route comprises a single device route, and wherein the source terminal and the destination terminal are both comprised in a single device in the measurement system. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the route comprises a multi-device route, wherein the source terminal is comprised in a first device in the measurement system, and wherein the destination terminal is comprised in a second device in the measurement system. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>programmatically determining the route from the source terminal to the destination terminal prior to said receiving information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein, prior to said programmatically determining the route, the carrier medium further comprises: 
<claim-text>receiving input specifying the source terminal and the destination terminal in the measurement system; </claim-text>
<claim-text>receiving at least one topography description, wherein the topography description indicates a plurality of components in at least one device in the measurement system, and connectivity between each of the plurality of components in the device; and </claim-text>
<claim-text>preprocessing the topography description to generate the graph. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 13</dependent-claim-reference>, wherein the graph comprises a weighted graph, and wherein edges in the graph are weighted in accordance with one or more metrics, and wherein said programmatically determining the route comprises: 
<claim-text>traversing the graph to determine a plurality of routes from the source terminal to the destination terminal; and </claim-text>
<claim-text>selecting the route from the plurality of routes based on the one or more metrics. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, wherein the topography description further comprises: 
<claim-text>configuration information specifying one or more operational parameters for respective components of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said storing the route comprises storing the route in a run-time specification, wherein the run-time specification is usable to configure the route in the device. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 16</dependent-claim-reference>, 
<claim-text>wherein said storing the route in the run-time specification comprises storing the operational parameters for components of the device included in the route; and wherein the run-time specification is usable to configure the components of the device using the one or more operational parameters to implement the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>analyzing the run-time specification; and </claim-text>
<claim-text>configuring the route in the device based on said analyzing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>analyzing the run-time specification; and </claim-text>
<claim-text>generating a run-time based on said analyzing, wherein the run-time is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the run-time specification comprises a specification of the one or more operational parameters of one or more measurement routing primitives, wherein each measurement routing primitive comprises a software object and corresponding configuration settings, and wherein each measurement routing primitive is operable to implement at least a portion of the route. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer-implemented method for determining routing with signal modifications for a measurement task, the method comprising: 
<claim-text>receiving information specifying a route from a source terminal to a destination terminal in a measurement system, wherein said information includes one or more signal modification requirements for the route; </claim-text>
<claim-text>determining a current signal modification of the route; </claim-text>
<claim-text>determining one or more desired changes in the signal modification of the route based on the one or more signal modification requirements for the route and the current signal modification of the route; </claim-text>
<claim-text>modifying the route to include at least one of the one or more desired changes in the signal modification of the route, thereby generating a modified route, wherein the modified route satisfies at least a portion of the one or more signal modification requirements for the route; and </claim-text>
<claim-text>storing the modified route, wherein the modified route is usable to route signals in performing the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising: 
<claim-text>determining if the modified route satisfies the one or more signal modification requirements for the route; and </claim-text>
<claim-text>if the modified route does not satisfy the one or more signal modification requirements for the route, generating an error message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said information further includes a graph of possible routes from the source terminal to the destination terminal; 
<claim-text>wherein the route comprises one or more legs; and </claim-text>
<claim-text>wherein said modifying the route to include at least one of the one or more desired changes in the signal modification of the route comprises: 
<claim-text>walking the one or more legs of the route in the graph; and </claim-text>
<claim-text>replacing at least one of the one or more legs with an alternative leg, wherein the alternate leg includes said at least one of the one or more desired changes in the signal modification of the route. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 23</dependent-claim-reference>, wherein said walking and said replacing comprise: 
<claim-text>a) selecting a current leg of the one or more legs of the route; </claim-text>
<claim-text>b) determining from the graph and/or the current signal modification of the route whether one or more alternative legs for the current leg exist; </claim-text>
<claim-text>c) if the one or more alternative legs exist, for at least one of the one or more alternative legs: 
<claim-text>d) comparing signal modification of the current leg with signal modification of the at least one alternative leg; and </claim-text>
<claim-text>e) if replacement of the current leg with the at least one alternative leg in the route fulfills at least a portion of the desired changes in signal modification for the route, replacing the current leg with the at least one alternative leg. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, further comprising: 
<claim-text>after said replacing the current leg with the alternative leg, 
<claim-text>f) modifying the one or more desired changes in signal modification for the route to reflect said replacing; </claim-text>
<claim-text>g) if at least one of the one or more desired changes in signal modification for the route remains and at least one of the one or more legs of the route has not been selected, 
<claim-text>h) selecting a next leg of the one or more legs of the route as the current leg; and </claim-text>
<claim-text>i) repeating b) through g). </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 24</dependent-claim-reference>, 
<claim-text>wherein the current signal modification of the route includes signal modifications for one or more legs of the route that are shared with a pre-existing route; </claim-text>
<claim-text>wherein said signal modifications for one or more legs of the route that are shared with a pre-existing route comprise constraints on the route which may not be changed to meet the one or more signal modification requirements for the route; and </claim-text>
<claim-text>wherein determining from the graph and/or the current signal modification of the route whether one or more alternative legs for the current leg exist comprises determining whether the leg includes a constraint from the pre-existing route, and wherein if the leg includes a constraint, then there are no alternative legs for the leg. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, 
<claim-text>wherein the route includes a plurality of components; </claim-text>
<claim-text>wherein the current signal modification of the route comprises information indicating signal modifications for one or more components of the plurality of components that are shared with a pre-existing route; and </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are shared with the pre-existing route may not be changed to meet the one or more signal modification requirements for the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 27</dependent-claim-reference>, 
<claim-text>wherein the current signal modification of the route comprises information indicating signal modifications for one or more components of the plurality of components that are not shared with a pre-existing route; </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are not shared comprise default signal modifications for the one or more components; and </claim-text>
<claim-text>wherein said signal modifications for the one or more components of the route that are not shared may be changed to meet the one or more signal modification requirements for the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein said signal modifications include one or more of: 
<claim-text>signal inversion; </claim-text>
<claim-text>synchronization; </claim-text>
<claim-text>filtering; </claim-text>
<claim-text>pre-scaling; and </claim-text>
<claim-text>logical combination with a signal from another terminal. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the route comprises a single device route, and wherein the source terminal and the destination terminal are both comprised in a single device in the measurement system. </claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the route comprises a multi-device route, wherein the source terminal is comprised in a first device in the measurement system, and wherein the destination terminal is comprised in a second device in the measurement system. </claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, further comprising: 
<claim-text>programmatically determining the route from the source terminal to the destination terminal prior to said receiving information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein, prior to said programmatically determining the route, the method further comprises: 
<claim-text>receiving input specifying the source terminal and the destination terminal in the measurement system; </claim-text>
<claim-text>receiving at least one topography description, wherein the topography description indicates a plurality of components in at least one device in the measurement system, and connectivity between each of the plurality of components in the device; and </claim-text>
<claim-text>preprocessing the topography description to generate the graph. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the graph comprises a weighted graph, and wherein edges in the graph are weighted in accordance with one or more metrics, and wherein said programmatically determining the route comprises: 
<claim-text>traversing the graph to determine a plurality of routes from the source terminal to the destination terminal; and </claim-text>
<claim-text>selecting the route from the plurality of routes based on the one or more metrics. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00035">
<claim-text><highlight><bold>35</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 32</dependent-claim-reference>, wherein the topography description further comprises: 
<claim-text>configuration information specifying one or more operational parameters for respective components of the device. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00036">
<claim-text><highlight><bold>36</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 35</dependent-claim-reference>, wherein said storing the route comprises storing the route in a run-time specification, wherein the run-time specification is usable to configure the route in the device. </claim-text>
</claim>
<claim id="CLM-00037">
<claim-text><highlight><bold>37</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 36</dependent-claim-reference>, 
<claim-text>wherein said storing the route in the run-time specification comprises storing the operational parameters for components of the device included in the route; and </claim-text>
<claim-text>wherein the run-time specification is usable to configure the components of the device using the one or more operational parameters to implement the route. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00038">
<claim-text><highlight><bold>38</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, further comprising: 
<claim-text>analyzing the run-time specification; and </claim-text>
<claim-text>configuring the route in the device based on said analyzing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00039">
<claim-text><highlight><bold>39</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, further comprising: 
<claim-text>analyzing the run-time specification; and </claim-text>
<claim-text>generating a run-time based on said analyzing, wherein the run-time is executable to perform the measurement task. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00040">
<claim-text><highlight><bold>40</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00033">claim 37</dependent-claim-reference>, wherein the run-time specification comprises a specification of the one or more operational parameters of one or more measurement routing primitives, wherein each measurement routing primitive comprises a software object and corresponding configuration settings, and wherein each measurement routing primitive is operable to implement at least a portion of the route. </claim-text>
</claim>
<claim id="CLM-00041">
<claim-text><highlight><bold>41</bold></highlight>. A system for determining routing with signal modifications for a measurement task, comprising: 
<claim-text>a processor; and </claim-text>
<claim-text>a memory medium, coupled to the processor; and </claim-text>
<claim-text>an input, coupled to the memory medium, wherein the input is operable to receive input information specifying a route from a source terminal to a destination terminal in a measurement system, wherein said information includes one or more signal modification requirements for the route; </claim-text>
<claim-text>wherein the memory medium stores program instructions which are executable by the processor to perform: 
<claim-text>receiving information specifying a route from a source terminal to a destination terminal in a measurement system, wherein said information includes one or more signal modification requirements for the route; </claim-text>
<claim-text>determining a current signal modification of the route; </claim-text>
<claim-text>determining one or more desired changes in the signal modification of the route based on the one or more signal modification requirements for the route and the current signal modification of the route; </claim-text>
<claim-text>modifying the route to include at least one of the one or more desired changes in the signal modification of the route, thereby generating a modified route, wherein the modified route satisfies at least a portion of the one or more signal modification requirements for the route; and </claim-text>
<claim-text>storing the modified route, wherein the modified route is usable to route signals in performing the measurement task. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00042">
<claim-text><highlight><bold>42</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein the program instructions are further executable to perform: 
<claim-text>determining if the modified route satisfies the one or more signal modification requirements for the route; and </claim-text>
<claim-text>if the modified route does not satisfy the one or more signal modification requirements for the route, generating an error message. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00043">
<claim-text><highlight><bold>43</bold></highlight>. The carrier medium of <dependent-claim-reference depends_on="CLM-00044">claim 41</dependent-claim-reference>, wherein said information further includes a graph of possible routes from the source terminal to the destination terminal; 
<claim-text>wherein the route comprises one or more legs; and </claim-text>
<claim-text>wherein said modifying the route to include at least one of the one or more desired changes in the signal modification of the route comprises: 
<claim-text>walking the one or more legs of the route in the graph; and </claim-text>
<claim-text>replacing at least one of the one or more legs with an alternative leg, wherein the alternate leg includes said at least one of the one or more desired changes in the signal modification of the route. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00044">
<claim-text><highlight><bold>44</bold></highlight>. A system for programmatically determining routing for a measurement task, comprising: 
<claim-text>means for receiving information specifying a route from a source terminal to a destination terminal in a measurement system, wherein said information includes one or more signal modification requirements for the route; </claim-text>
<claim-text>means for determining a current signal modification of the route; </claim-text>
<claim-text>means for determining one or more desired changes in the signal modification of the route based on the one or more signal modification requirements for the route and the current signal modification of the route; </claim-text>
<claim-text>means for modifying the route to include at least one of the one or more desired changes in the signal modification of the route, thereby generating a modified route, wherein the modified route satisfies at least a portion of the one or more signal modification requirements for the route; and </claim-text>
<claim-text>means for storing the modified route, wherein the modified route is usable to route signals in performing the measurement task.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>14</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004675A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004675A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004675A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004675A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004675A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004675A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004675A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004675A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004675A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004675A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004675A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004675A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004675A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00013">
<image id="EMI-D00013" file="US20030004675A1-20030102-D00013.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00014">
<image id="EMI-D00014" file="US20030004675A1-20030102-D00014.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00015">
<image id="EMI-D00015" file="US20030004675A1-20030102-D00015.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00016">
<image id="EMI-D00016" file="US20030004675A1-20030102-D00016.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00017">
<image id="EMI-D00017" file="US20030004675A1-20030102-D00017.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00018">
<image id="EMI-D00018" file="US20030004675A1-20030102-D00018.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00019">
<image id="EMI-D00019" file="US20030004675A1-20030102-D00019.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00020">
<image id="EMI-D00020" file="US20030004675A1-20030102-D00020.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00021">
<image id="EMI-D00021" file="US20030004675A1-20030102-D00021.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00022">
<image id="EMI-D00022" file="US20030004675A1-20030102-D00022.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00023">
<image id="EMI-D00023" file="US20030004675A1-20030102-D00023.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00024">
<image id="EMI-D00024" file="US20030004675A1-20030102-D00024.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00025">
<image id="EMI-D00025" file="US20030004675A1-20030102-D00025.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00026">
<image id="EMI-D00026" file="US20030004675A1-20030102-D00026.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00027">
<image id="EMI-D00027" file="US20030004675A1-20030102-D00027.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00028">
<image id="EMI-D00028" file="US20030004675A1-20030102-D00028.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00029">
<image id="EMI-D00029" file="US20030004675A1-20030102-D00029.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00030">
<image id="EMI-D00030" file="US20030004675A1-20030102-D00030.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00031">
<image id="EMI-D00031" file="US20030004675A1-20030102-D00031.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00032">
<image id="EMI-D00032" file="US20030004675A1-20030102-D00032.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00033">
<image id="EMI-D00033" file="US20030004675A1-20030102-D00033.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00034">
<image id="EMI-D00034" file="US20030004675A1-20030102-D00034.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00035">
<image id="EMI-D00035" file="US20030004675A1-20030102-D00035.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
