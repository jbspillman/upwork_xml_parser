<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030001844A1-20030102-D00000.TIF SYSTEM "US20030001844A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00001.TIF SYSTEM "US20030001844A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00002.TIF SYSTEM "US20030001844A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00003.TIF SYSTEM "US20030001844A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00004.TIF SYSTEM "US20030001844A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00005.TIF SYSTEM "US20030001844A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00006.TIF SYSTEM "US20030001844A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00007.TIF SYSTEM "US20030001844A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030001844A1-20030102-D00008.TIF SYSTEM "US20030001844A1-20030102-D00008.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030001844</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10232069</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020830</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06T015/50</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>345</class>
<subclass>426000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System and method for generating and using systems of cooperating and encapsulated shaders and shader DAGs for use in a computer graphics system</title-of-invention>
</technical-information>
<continuity-data>
<division-of>
<parent-child>
<child>
<document-id>
<doc-number>10232069</doc-number>
<kind-code>A1</kind-code>
<document-date>20020830</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09108596</doc-number>
<document-date>19980701</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</division-of>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Thomas</given-name>
<family-name>Driemeyer</family-name>
</name>
<residence>
<residence-non-us>
<city>Berlin</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Rolf</given-name>
<family-name>Herken</family-name>
</name>
<residence>
<residence-non-us>
<city>Berlin</city>
<country-code>DE</country-code>
</residence-non-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<assignee>
<organization-name>Mental Images G.m.b.H &amp; Co, KG</organization-name>
<assignee-type>03</assignee-type>
</assignee>
<correspondence-address>
<name-1>Richard A. Jordan</name-1>
<name-2></name-2>
<address>
<address-1>P.O. Box 81363</address-1>
<city>Wellesley Hills</city>
<state>MA</state>
<postalcode>02481-0004</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A computer graphics system is described in which a new type of entity, referred to as a &ldquo;phenomenon,&rdquo; can be created, instantiated and used in rendering an image of a scene. A phenomenon is an encapsulated shader DAG comprising one or more nodes each comprising a shader, or an encapsulated set of such DAGs which are interconnected so as to cooperate, which are instantiated and attached to entities in the scene which are created during the scene definition process to define diverse types of features of a scene, including color and textural features of surfaces of objects in the scene, characteristics of volumes and geometries in the scene, features of light sources illuminating the scene, features of simulated cameras will be simulated during rendering, and numerous other features which are useful in rendering. Phenomena selected for use by an operator in connection with a scene may be predefined, or they may be constructed from base shader nodes by an operator using a phenomenon creator. The phenomenon creator ensures that phenomena are constructed so that the shaders in the DAG or cooperating DAGs can correctly cooperate during rendering of an image of the scene. Prior to being attached to a scene, a phenomenon is instantiated by providing values, or functions which are used to define the values, for each of the phenomenon&apos;s parameters, using a phenomenon editor. The phenomenon editor allows the operator to view the effects produced by various settings for the parameter values which are selected. During scene image generation, a scene image generator operates in a series of phases, including a including a preprocessing phase, a rendering phase and a post-processing phase. During a pre-processing phase, the scene image generator can perform pre-processing operations, such as shadow and photon mapping, multiple inheritance resolution, and the like. The scene image generator may perform preprocessing operations if, for example, a phenomenon attached to the scene includes a geometry shader to generate geometry defined thereby for the scene. During the rendering phase, the scene image generator renders the image. During the post-processing phase, the scene image generator may perform post-processing operations if, for example, a phenomenon attached to the scene includes a shader that defines post-processing operations. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">INCORPORATION BY REFERENCE </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> &ldquo;Mental Ray Phenomena,&rdquo; an unpublished paper by Thomas Driemeyer and Rolf Herken, attached hereto as an appendix, incorporated by reference. </paragraph>
</section>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The invention relates generally to the field of computer graphics, computer-aided design and the like, and more particularly to systems and methods for generating shader systems and using the shader systems so generated in rendering an image of a scene. The invention in particular provides a new type of component useful in a computer graphics system, identified herein as a &ldquo;phenomenon,&rdquo; which comprises a system including a packaged and encapsulated shader DAG (&ldquo;directed acyclic graph&rdquo;) or set of cooperating shader DAGs, each of which can include one or more shaders, which is generated and encapsulated to assist in defining at least a portion of a scene, in a manner which will ensure that the shaders can correctly cooperate during rendering. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> In computer graphics, computer-aided geometric design and the like, an artist, draftsman or the like (generally referred to herein as an &ldquo;operator&rdquo;) attempts to generate a three-dimensional representation of objects in a scene, as maintained by a computer, and thereafter render respective two-dimensional images of the objects in the scene from one or more orientations. In the first, representation generation phase, conventionally, computer graphics systems generate a three-dimensional representation from, for example, various two-dimensional line drawings comprising contours and/or cross-sections of the objects in the scene and by applying a number of operations to such lines which will result in two-dimensional surfaces in three-dimensional space, and subsequent modification of parameters and control points of such surfaces to correct or otherwise modify the shape of the resulting representation of the object. During this process, the operator also defines various properties of the surfaces of the objects, the structure and characteristics of light sources which illuminate the scene, and the structure and characteristics of one or more simulated cameras which generate the images. After the structure and characteristics of the scene, light source(s) and camera(s) have been defined, in the second phase, an operator enables the computer to render an image of the scene from a particular viewing direction. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> The objects in the scene, light source(s) and camera(s) are defined, in the first, scene definition, phase, by respective multiple-dimensional mathematical representations, including at least the three spatial dimensions, and possibly one time dimension. The mathematical representations are typically stored in a tree-structured data structure. The properties of the surfaces of the objects, in turn, are defined by &ldquo;shade trees,&rdquo; each of which includes one or more shaders which, during the second, scene rendering, phase, enables the computer to render the respective surfaces, essentially providing color values representative of colors of the respective surfaces. The shaders of a shade tree are generated by an operator, or are provided a priori by a computer graphics system, in a high-level language such as C or C&plus;&plus;, which together enable the computer to render an image of a respective surface in the second, scene rendering, phase. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> A number of problems arise from the generation and use of shaders and shade trees as currently provided in computer graphics arrangements. First, shaders generally cannot cooperate with each other unless they are programmed to do so. Typically, input values provided to shaders are constant values, which limits the shaders&apos; flexibility and ability to render features in an interesting and life-like manner. In addition, it is generally difficult to set up systems of cooperating shaders which can get their input values from a common source. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> The invention provides a new and improved computer graphic system and method that provides for enhanced cooperation among shaders by facilitating generation of packaged and encapsulated shader DAGs, each of which can include one or more shaders, generated in a manner so as to ensure that the shaders in the shader DAGs can correctly cooperate during rendering. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> In brief summary, a computer graphics system is provided in which a new type of entity, referred to as a &ldquo;phenomenon,&rdquo; can be created, instantiated and used in rendering an image of a scene. A phenomenon is an encapsulated shader DAG comprising one or more nodes each comprising a shader, or an encapsulated set of such DAGs which are interconnected so as to cooperate, which are instantiated and attached to entities in the scene which are created during the scene definition process to define diverse types of features of a scene, including color and textural features of surfaces of objects in the scene, characteristics of volumes and geometries in the scene, features of light sources illuminating the scene, features of simulated cameras which will be simulated during rendering, and numerous other features which are useful in rendering. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Phenomena selected for use by an operator in connection with a scene may be predefined, or they may be constructed from base shader nodes by an operator using a phenomenon creator. The phenomenon creator ensures that phenomena are constructed so that the shaders in the DAG or cooperating DAGs can correctly cooperate during rendering of an image of the scene. </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> Prior to being attached to a scene, a phenomenon is instantiated by providing values, or functions which are used to define the values, for each of the phenomenon&apos;s parameters, using a phenomenon editor. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> After a representation of a scene has been defined and phenomena attached, a scene image generator can generate an image of the scene. In that operation, the scene image generator operates in a series of phases, including a pre-processing phase, a rendering phase and a post-processing phase. During a pre-processing phase, the scene image generator can perform pre-processing operations, such as shadow and photon mapping, multiple inheritance resolution, and the like. The scene image generator may perform pre-processing operations if, for example, a phenomenon attached to the scene includes a geometry shader to generate geometry defined thereby for the scene. During the rendering phase, the scene image generator renders the image. During the post-processing phase, the scene image generator may perform post-processing operations if, for example, a phenomenon attached to the scene includes a shader that defines post-processing operations, such as depth of field or motion blur calculations which are dependent on velocity and depth information stored in connection with each pixel value in the rendered image.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> This invention is pointed out with particularity in the appended claims. The above and further advantages of this invention may be better understood by referring to the following description taken in conjunction with the accompanying drawings, in which: </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> depicts a computer graphics system that provides for enhanced cooperation among shaders by facilitating generation of packaged and encapsulated shader DAGs, each of which can include one or more shaders, which shader DAGs are generated in a manner so as to ensure that the shaders in the shader DAG can correctly cooperate during rendering, constructed in accordance with the invention; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> is a functional block diagram of the computer graphics system depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a graphical user interface for one embodiment of the phenomenon creator used in the computer graphics system whose functional block diagram is depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> graphically depicts an illustrative phenomenon generated using the phenomenon creator depicted in <cross-reference target="DRAWINGS">FIGS. 2 and 3</cross-reference>; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a graphical user interface for one embodiment of the phenomenon editor used in the computer graphics system whose functional block diagram is depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> depict details of the graphical user interface depicted in <cross-reference target="DRAWINGS">FIG. 5</cross-reference>; and </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7</cross-reference> is a flowchart depicting operations performed by a scene image generation portion of the computer graphics system depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference> in generating an image of a scene.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF AN ILLUSTRATIVE EMBODIMENT </heading>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> attached hereto depicts elements comprising an computer graphics system <highlight><bold>10</bold></highlight> constructed in accordance with the invention. The computer graphics system <highlight><bold>10</bold></highlight> provides for enhanced cooperation among shaders by facilitating generation of new computer graphic components, referred to herein as &ldquo;phenomenon&rdquo; (in the singular) or &ldquo;phenomena&rdquo; (in the plural), which are used to define features of a scene for use in rendering. A phenomenon is a packaged and encapsulated system comprising one or more shaders, which are organized and interconnected in the form of one or more directed acyclic graphs (&ldquo;DAGs&rdquo;), with each DAG including one or more shaders. The phenomena generated by the computer graphics system <highlight><bold>10</bold></highlight> are generated in such a manner as to ensure that the shader or shaders in each shader DAG can correctly cooperate during rendering, to facilitate the rendering of realistic or complex visual effects. In addition, for phenomena which comprise multiple cooperating shader DAGs, the computer graphics system <highlight><bold>10</bold></highlight> generates the phenomena such that the shaders in all of the shader DAGs can correctly cooperate during the rendering, to facilitate the rendering of progressively realistic or complex visual effects. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> With reference to <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, the computer graphics system <highlight><bold>10</bold></highlight> in one embodiment includes a computer including a processor module <highlight><bold>11</bold></highlight> and operator interface elements comprising operator input components such as a keyboard <highlight><bold>12</bold></highlight>A and/or a mouse <highlight><bold>12</bold></highlight>B (generally identified as operator input element(s) <highlight><bold>12</bold></highlight>) and an operator output element such as a video display device <highlight><bold>13</bold></highlight>. The illustrative computer system <highlight><bold>10</bold></highlight> is of the conventional stored-program computer architecture. The processor module <highlight><bold>11</bold></highlight> includes, for example, processor, memory and mass storage devices such as disk and/or tape storage elements (not separately shown) which perform processing and storage operations in connection with digital data provided thereto. The operator input element(s) <highlight><bold>12</bold></highlight> are provided to permit an operator to input information for processing. The video display device <highlight><bold>13</bold></highlight> is provided to display output information generated by the processor module <highlight><bold>11</bold></highlight> on a screen <highlight><bold>14</bold></highlight> to the operator, including data that the operator may input for processing, information that the operator may input to control processing, as well as information generated during processing. The processor module <highlight><bold>11</bold></highlight> generates information for display by the video display device <highlight><bold>13</bold></highlight> using a so-called &ldquo;graphical user interface&rdquo; (&ldquo;GUI&rdquo;), in which information for various applications programs is displayed using various &ldquo;windows.&rdquo; Although the computer system <highlight><bold>10</bold></highlight> is shown as comprising particular components, such as the keyboard <highlight><bold>12</bold></highlight>A and mouse <highlight><bold>12</bold></highlight>B for receiving input information from an operator, and a video display device <highlight><bold>13</bold></highlight> for displaying output information to the operator, it will be appreciated that the computer system <highlight><bold>10</bold></highlight> may include a variety of components in addition to or instead of those depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> In addition, the processor module <highlight><bold>11</bold></highlight> may include one or more network ports, generally identified by reference numeral <highlight><bold>14</bold></highlight>, which are connected to communication links which connect the computer system <highlight><bold>10</bold></highlight> in a computer network. The network ports enable the computer system <highlight><bold>10</bold></highlight> to transmit information to, and receive information from, other computer systems and other devices in the network. In a typical network organized according to, for example, the client-server paradigm, certain computer systems in the network are designated as servers, which store data and programs (generally, &ldquo;information&rdquo;) for processing by the other, client computer systems, thereby to enable the client computer systems to conveniently share the information. A client computer system which needs access to information maintained by a particular server will enable the server to download the information to it over the network. After processing the data, the client computer system may also return the processed data to the server for storage. In addition to computer systems (including the above-described servers and clients), a network may also include, for example, printers and facsimile devices, digital audio or video storage and distribution devices, and the like, which may be shared among the various computer systems connected in the network. The communication links interconnecting the computer systems in the network may, as is conventional, comprise any convenient information-carrying medium, including wires, optical fibers or other media for carrying signals among the computer systems. Computer systems transfer information over the network by means of messages transferred over the communication links, with each message including information and an identifier identifying the device to receive the message. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> As noted above, computer graphics system <highlight><bold>10</bold></highlight> provides for enhanced cooperation among shaders by facilitating generation of phenomena comprising packaged and encapsulated shader DAGs or cooperating shader DAGs, with each shader DAG comprising at least one shader, which define features of a three-dimensional scene. Phenomena can be used to define diverse types of features of a scene, including color and textural features of surfaces of objects in the scene, characteristics of volumes and geometries in the scene, features of light sources illuminating the scene, features of simulated cameras or other image recording devices which will be simulated during rendering, and numerous other features which are useful in rendering as will be apparent from the following description. The phenomena are constructed so as to ensure that the shaders in the DAG or cooperating DAGs can correctly cooperate during rendering of an image of the scene. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a functional block diagram of the computer graphics system <highlight><bold>10</bold></highlight> used in one embodiment of the invention. As depicted in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the computer graphics system <highlight><bold>10</bold></highlight> includes two general portions, including a scene structure generation portion <highlight><bold>20</bold></highlight> and an scene image generation portion <highlight><bold>21</bold></highlight>. The scene structure generation portion <highlight><bold>20</bold></highlight> is used by an artist, draftsman or the like (generally, an &ldquo;operator&rdquo;) during a scene entity generation phase to generate a representation of various elements which will be used by the scene image generation portion <highlight><bold>21</bold></highlight> in rendering an image of the scene, which may include, for example, the objects in the scene and their surface characteristics, the structure and characteristics of the light source or sources illuminating the scene, and the structure and characteristics of a particular device, such as a camera, which will be simulated in generating the image when the image is rendered. The representation generated by the scene structure generation portion <highlight><bold>20</bold></highlight> is in the form of a mathematical representation, which is stored in the scene object database <highlight><bold>22</bold></highlight>. The mathematical representation is evaluated by the image rendering portion <highlight><bold>21</bold></highlight> for display to the operator. The scene structure generation portion <highlight><bold>20</bold></highlight> and the scene image generation portion <highlight><bold>21</bold></highlight> may reside on and form part of the same computer, in which case the scene object database <highlight><bold>22</bold></highlight> may also reside on that same computer or alternatively on a server for which the computer <highlight><bold>20</bold></highlight> is a client. Alternatively, the portions <highlight><bold>20</bold></highlight> and <highlight><bold>21</bold></highlight> may reside on and form parts of different computers, in which case the scene object database <highlight><bold>22</bold></highlight> may reside on either computer or a server for both computers. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> More particularly, the scene structure generation portion <highlight><bold>20</bold></highlight> is used by the operator to generate a mathematical representation defining comprising the geometric structures of the objects in the scene, the locations and geometric characteristics of light sources illuminating the scene, and the locations, geometric and optical characteristics of the cameras to be simulated in generating the images that are to be rendered. The mathematical representation preferably defines the three spatial dimensions, and thus identifies the locations of the object in the scene and the features of the objects. The objects may be defined in terms of their one-, two- or three-dimensional features, including straight or curved lines embedded in a three-dimensional space, two-dimensional surfaces embedded in a three-dimensional space, one or more bounded and/or closed three-dimensional surfaces, or any combination thereof. In addition, the mathematical representations may also define a temporal dimension, which may be particularly useful in connection with computer animation, in which the objects and their respective features are considered to move as a function of time. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> In addition to the mathematical representation of the geometrical structure of the object(s) in the scene to be rendered, the mathematical representation further defines the one or more light sources which illuminate the scene and a camera. The mathematical representation of a light source particularly defines the location and/or the direction of the light source relative to the scene and the structural characteristics of the light source, including whether the light source is a point source, a straight or curved line, a flat or curved surface or the like. The mathematical representation of the camera particularly defines the conventional camera parameters, including the lens or lenses, focal length, orientation of the image plane, and so forth. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The scene structure generation portion <highlight><bold>20</bold></highlight> also facilitates generation of phenomena, which will be described in detail below, and association of the phenomena to respective elements of the scene. Phenomena generally define other information that is required for the completion of the definition of the scene which will be used in rendering. This information includes, but is not limited to, characteristics of the colors, textures, and so forth, of the surfaces of the geometrical entities defined by the scene structure generation portion <highlight><bold>20</bold></highlight>. A phenomenon may include mathematical representations or other objects which, when evaluated during the rendering operation, will enable the computer generating the rendered image to display the respective surfaces in the desired manner. The scene structure generation portion <highlight><bold>20</bold></highlight>, under control of the operator, effectively associates the phenomena to the mathematical representations for the respective elements (that is, objects, surfaces, volumes and the like) with which they are to be used, effectively &ldquo;attaching&rdquo; the phenomena to the respective elements. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> After the mathematical representations have been generated by the scene structure generation portion <highlight><bold>20</bold></highlight> and stored in the scene representation database <highlight><bold>22</bold></highlight>, the scene image generation portion <highlight><bold>21</bold></highlight> is used by an operator during a rendering phase to generate an image of the scene on, for example, the video display unit <highlight><bold>13</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 1</cross-reference>). </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> The scene structure generation portion <highlight><bold>20</bold></highlight> includes several elements, including an entity geometrical representation generator <highlight><bold>23</bold></highlight>, a phenomenon creator <highlight><bold>24</bold></highlight>, a phenomenon database <highlight><bold>25</bold></highlight>, a phenomenon editor <highlight><bold>26</bold></highlight>, a base shader node database <highlight><bold>32</bold></highlight>, a phenomenon instance database <highlight><bold>33</bold></highlight> and a scene assembler <highlight><bold>34</bold></highlight>, all of which operate under control of operator input information entered through an operator interface <highlight><bold>27</bold></highlight>. The operator interface <highlight><bold>27</bold></highlight> may generally include the operator input devices <highlight><bold>12</bold></highlight> and the video display unit <highlight><bold>13</bold></highlight> of computer graphics system <highlight><bold>10</bold></highlight> as described above in connection with <cross-reference target="DRAWINGS">FIG. 1</cross-reference>. The entity geometrical representation generator <highlight><bold>23</bold></highlight>, under control of operator input from the operator interface <highlight><bold>27</bold></highlight>, facilitates the generation of the mathematical representation of the objects in the scene and the light source(s) and camera as described above. The phenomenon creator <highlight><bold>24</bold></highlight> provides a mechanism whereby the operator, using the operator interface <highlight><bold>27</bold></highlight> and base shader nodes from the base shader node database <highlight><bold>32</bold></highlight>, can generate phenomena which can be used in connection with the scene or otherwise (as will be described below). After a phenomenon is generated by the phenomenon creator <highlight><bold>24</bold></highlight>, it (that is, the phenomenon) will be stored in the phenomenon database <highlight><bold>25</bold></highlight>. After a phenomenon has been stored in the phenomenon database <highlight><bold>25</bold></highlight>, an instance of the phenomenon can be created by the phenomenon editor <highlight><bold>26</bold></highlight>. In that operation, the operator will use the phenomenon editor <highlight><bold>26</bold></highlight> to provide values for the phenomenon&apos;s various parameters (if any). For example, if the phenomenon has been created so as to provide features, such as color balance, texture graininess, glossiness, or the like, which may be established, adjusted or modified based on input from the operator at attachment time or thereafter, the phenomenon editor <highlight><bold>26</bold></highlight> allows the operator, through the operator interface <highlight><bold>27</bold></highlight>, to establish, adjust or modify the particular feature. The values for the parameters may be either fixed, or they may vary according to a function of a variable (illustratively, time). The operator, using the scene assembler <highlight><bold>34</bold></highlight>, can attach phenomenon instances generated using the phenomenon editor <highlight><bold>26</bold></highlight> to elements of the scene as generated by the entity geometrical representation generator <highlight><bold>23</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Although the phenomenon editor <highlight><bold>26</bold></highlight> has been described as retrieving phenomena from the phenomenon database <highlight><bold>25</bold></highlight> which have been generated by the phenomenon creator <highlight><bold>24</bold></highlight> of the scene structure generation portion <highlight><bold>20</bold></highlight> of computer graphics system <highlight><bold>10</bold></highlight>, it will be appreciated that one or more, and perhaps all, of the phenomena provided in the computer graphics system <highlight><bold>10</bold></highlight> may be predefined and created by other devices (not shown) and stored in the phenomenon database <highlight><bold>25</bold></highlight> for use by the phenomenon editor <highlight><bold>26</bold></highlight>. In such a case, the operator, controlling the phenomenon editor through the operator interface <highlight><bold>27</bold></highlight>, can select appropriate predefined phenomena for attachment to the scene. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> The scene image generation portion <highlight><bold>21</bold></highlight> includes several components including an image generator <highlight><bold>30</bold></highlight> and an operator interface <highlight><bold>31</bold></highlight>. If the scene image generation portion <highlight><bold>21</bold></highlight> forms part of the same computer as the scene structure generation portion <highlight><bold>20</bold></highlight>, the operator interface <highlight><bold>31</bold></highlight> may, but need not, comprise the same components as operator interface <highlight><bold>27</bold></highlight>. On the other hand, if the scene image generation portion <highlight><bold>21</bold></highlight> forms part of a different computer from the computer of which the scene structure generation portion, the operator interface <highlight><bold>31</bold></highlight> will generally comprise different components as operator interface <highlight><bold>27</bold></highlight>, although the components of the two operator interfaces <highlight><bold>31</bold></highlight> and <highlight><bold>27</bold></highlight> may be similar. The image generator <highlight><bold>30</bold></highlight>, under control of the operator interface <highlight><bold>31</bold></highlight>, retrieves the representation of the scene to be rendered from the scene representation database <highlight><bold>22</bold></highlight> and generates a rendered image for display on the video display unit of the operator interface <highlight><bold>31</bold></highlight>. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> Before proceeding further, it would be helpful to further describe a &ldquo;phenomenon&rdquo; used in connection with the invention. A phenomenon provides information that, in addition to the mathematical representation generated by the entity geometrical representation generator <highlight><bold>23</bold></highlight>, is used to complete the definition of the scene which will be used in rendering, including, but not limited to, characteristics of the colors, textures, and closed volumes, and so forth, of the surfaces of the geometrical entities defined by the scene structure generation portion <highlight><bold>20</bold></highlight>. A phenomenon comprises one or more nodes interconnected in the form of a directed acyclic graph (&ldquo;DAG&rdquo;) or a plurality of cooperating DAGs. One of the nodes is a primary root node which is used to attach the phenomenon to an entity in a scene, or, more specifically, to a mathematical representation of the entity. Other types of nodes which can be used in a phenomenon comprise optional root nodes and shader nodes. The shader nodes can comprise any of a plurality of conventional shaders, including conventional simple shaders, as well as texture shaders, material shaders, volume shaders, environmental shaders, shadow shaders, and displacement shaders, and material shaders which can be used in connection with generating a representation to be rendered. In addition, a number of other types of shader nodes can be used in a phenomenon, including </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> (i) Geometry shaders, which can be used to add geometric objects to the scene. Geometry shaders essentially comprise pre-defined static or procedural mathematical representations of entities in three-dimensional space, similar to representations that are generated by the entity geometrical representation generator <highlight><bold>23</bold></highlight> in connection with in connection with entities in the scene, except that they can be provided at pre-processing time to, for example, define respective regions in which other shaders used in the respective phenomenon are to be delimited. A geometry shader essentially has access to the scene construction elements of the entity geometrical representation generator <highlight><bold>23</bold></highlight> so that it can alter the scene representation as stored in the scene object database to, for example, modify or create new geometric elements of the scene in either a static or a procedural manner. It should be noted that a Phenomenon that consists entirely of a geometry shader DAG or of a set of cooperating geometry shader DAGs can be used to represent objects in a scene in a procedural manner. This is in contrast to typical modeling, which is accomplished in a modeling system by a human operator by performing a sequence of modeling operations to obtain the desired representation of an object in the computer. Hence, in the essence, a geometry phenomenon represents an encapsulated and automated, parameterized abstract modeling operation. An instance of a geometry phenomenon (that is, a geometry phenomenon associated with a set of parameter values which are either fixed or which vary in a predetermined manner with time or the like) will result in a specific geometric scene extension when it is evaluated by the scene image generator <highlight><bold>30</bold></highlight> at runtime during a pre-processing phase. </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> (ii) Photon shaders, which can be used to control the paths of photons in the scene and the characteristics of interaction of photons with surfaces of objects in the scene, such as absorption, reflection and the like. Photon shaders facilitate the physically correct simulation of global illumination and caustics in connection with rendering. In one embodiment, photon shaders are used during rendering by the scene image generator <highlight><bold>30</bold></highlight> during a pre-processing operation. </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> (iii) Photon volume shaders, which are similar to photon shaders, except that they operate in connection with a three-dimensional volume of space in the scene instead of on the surface of an object. This allows simulation of caustics and global illumination to be extended to volumes and accompanying enclosed participating media, such as scattering of photons by dust or fog particles in the air, by water vapor such as in clouds, or the like. </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> (iv) Photon emitter shaders, which are also similar to photon shaders, except that they are related to light sources and hence to emission of photons. The simulated photons for which emission is simulated in connection with photon emitter shaders may then be processed in connection with the photon shaders, which can be used to simulate path and surface interaction characteristics of the simulated photons, and photon volume shaders which can be used to simulate path and other characteristics in three-dimensional volumes in particular along the respective paths. </paragraph>
<paragraph id="P-0036" lvl="2"><number>&lsqb;0036&rsqb;</number> (v) Contour shaders, which are used in connection with generation of contour lines during rendering. In one embodiment, there are three sub-types of contour shaders, namely, contour store shaders, contour contrast shaders and contour generation shaders. A contour store shader is used to collect contour sampling information for, for example, a surface. A contour contrast shader is used to compare two sets of the sampling information which is collected by use of a contour store shader. Finally, a contour generation shader is used to generation contour dot information for storage in a buffer, which is then used by an output shader (described below) in generating contour lines. </paragraph>
<paragraph id="P-0037" lvl="2"><number>&lsqb;0037&rsqb;</number> (vi) Output shaders, which are used to process information in buffers generated by the scene image generator <highlight><bold>30</bold></highlight> during rendering. An output shader can access pixel information generated during rendering to, in one embodiment, perform compositing operations, complex convolutions, and contour line drawing from contour dot information generated by contour generation shaders as described above. </paragraph>
<paragraph id="P-0038" lvl="2"><number>&lsqb;0038&rsqb;</number> (vii) Three-dimensional volume shaders, which are used to control how light, other visible rays and the like pass through part or all of the empty three-dimensional space in a scene. A three-dimensional volume shader may be used for any of a number of types of volume effects, including, for example, fog, and procedural effects such as smoke, flames, fur, and particle clouds. In addition, since a three-dimensional volume shader is used in connection with light, they are also useful in connection with shadows which would arise from the procedural effects; and </paragraph>
<paragraph id="P-0039" lvl="2"><number>&lsqb;0039&rsqb;</number> (viii) Light shaders, which are used to control emission characteristics of light sources, including, for example, color, direction, and attenuation characteristics which can result from properties such as the shapes of respective light sources, texture projection, shadowing and other light properties. </paragraph>
<paragraph id="P-0040" lvl="7"><number>&lsqb;0040&rsqb;</number> Other types of shaders, which may be useful in connection with definition of a scene may also be used in a phenomenon. </paragraph>
<paragraph id="P-0041" lvl="0"><number>&lsqb;0041&rsqb;</number> A phenomenon is defined by </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> (i) a description of the phenomenon&apos;s externally-controllable parameters, </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> (ii) one primary root node and, optionally, one or more optional root nodes, </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> (iii) a description of the internal structure of the phenomenon, including the identification of the shaders that are to be used as nodes and how they are interconnected to form a DAG or a plurality of cooperating DAGs, and </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> (iv) optionally, a description of dialog boxes and the like which may be defined by the phenomenon for use by the phenomenon editor <highlight><bold>26</bold></highlight> to allow the operator to provide values for parameters or properties that will be used in evaluation of the respective phenomenon. </paragraph>
<paragraph id="P-0046" lvl="7"><number>&lsqb;0046&rsqb;</number> In addition, a phenomenon may include external declarations and link-executable code from libraries, as is standard in programming. </paragraph>
<paragraph id="P-0047" lvl="0"><number>&lsqb;0047&rsqb;</number> As noted above, a phenomenon may include a plurality of cooperating DAGs. In such a phenomenon, during rendering, information generated from processing of one or more nodes of a first DAG in the phenomenon may be used in processing in connection with one or more nodes of a second DAG in the phenomenon. The two DAGs are, nonetheless, processed independently, and may be processed at different stages in the rendering process. The information generated by a respective node in the first DAG which may be &ldquo;cooperating&rdquo; with a node in the second DAG (that is, which may be used by the node in the second DAG in its processing, may be transferred from the respective node in the first DAG to the node in the second DAG over any convenient communication channel, such as a buffer which may be allocated therefor. Providing all of the DAGs which may need to cooperate in this manner in a single phenomenon ensures that all of the conditions for cooperation will be satisfied, which may not be the case if the DAGs are provided unencapsulated or separated in distinct phenomena or other entities. </paragraph>
<paragraph id="P-0048" lvl="0"><number>&lsqb;0048&rsqb;</number> As an example of a phenomenon including several cooperating DAGs, a phenomenon may include several DAGs, including a material shader DAG, an output shader DAG and instructions for generating a label frame buffer. The material shader DAG includes at least one material shader for generating a color value for a material and also stores label information about the objects which are encountered during processing of the material shader DAG in the label frame buffer which is established in connection with processing of the label frame buffer generation instructions. The output shader DAG, in turn, includes at least one output shader which retrieves the label information from the label frame buffer to facilitate performing object-specific compositing operations. In addition to the label frame buffer generation instructions, the phenomenon may also have instructions for controlling operating modes of the scene image generator <highlight><bold>30</bold></highlight> such that both DAGs can function and cooperate. For example, such instructions may control the minimum sample density required for the two DAGs to be evaluated. </paragraph>
<paragraph id="P-0049" lvl="0"><number>&lsqb;0049&rsqb;</number> As a second example of a phenomenon including multiple cooperating shader DAGs, a material phenomenon may represent a material that is simulated by both a photon shader DAG, which includes at least one photon shader, and a material shader DAG, which includes at least one material shader. During rendering, the photon shader DAG will be evaluated during caustics and global illumination pre-processing, and the material shader DAG will be evaluated later during rendering of an image. During processing of the photon shader DAG, information representing simulated photons will be stored in such a way that it can be used during later processing of the material shader DAG to add lighting contributions from the caustic or global illumination preprocessing stage. In one embodiment, the photon shader DAG stores the simulated photon information in a photon map, which is used by the photon shader DAG to communicate the simulated photon information to the material shader DAG. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> As a third example of a phenomenon including multiple cooperating shader DAGs, a phenomenon may include a contour shader DAG, which includes at least one shader of the contour shader type, and an output shader DAG, which includes at least one output shader. The contour shader DAG is used to determine how to draw contour lines by storing &ldquo;dots&rdquo; of a selected color, transparency, width and other attributes. The output shader DAG is used to collect all cells created during rendering and, when the rendering is completed, join them into contour lines. The contour shader DAG includes a contour store shader, a contour contrast shader and a contour generation shader. The contour store shader is used to collect sampling information for later use by a contour contrast shader. The contour contrast shader, in turn, is used to determine whether the sampling information collected by the contour store shader is such that a contour dot is to be placed in the image, and, if so, the contour generation shader actually places the contour dot. This illustrative phenomenon illustrates four-stage cooperation, including </paragraph>
<paragraph id="P-0051" lvl="2"><number>&lsqb;0051&rsqb;</number> (1) a first stage, in which sampling information is collected (by the contour store shader); </paragraph>
<paragraph id="P-0052" lvl="2"><number>&lsqb;0052&rsqb;</number> (2) a second stage, in which the decision as to whether a contour cell is to be placed (by the contour contrast shader); </paragraph>
<paragraph id="P-0053" lvl="2"><number>&lsqb;0053&rsqb;</number> (3) a third stage, in which the contour dot is created (by the contour generation shader); and </paragraph>
<paragraph id="P-0054" lvl="2"><number>&lsqb;0054&rsqb;</number> (4) a fourth stage, in which created contour dots are created (by the output shader DAG). </paragraph>
<paragraph id="P-0055" lvl="7"><number>&lsqb;0055&rsqb;</number> None of the shaders in any stage makes use of another shader in another stage, but instead are processed and evaluated individually at different times, but they cooperate to enable the generation of the final result. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> As a fourth example of a phenomenon including multiple cooperating shader DAGs, a phenomenon may include a volume shader DAG and a geometry shader DAG. The volume shader DAG includes at least one volume shader that defines properties of a bounded volume, for example a fur shader that simulates fur within the bounded volume. The geometry shader DAG includes at least one geometry shader that is used to include an outer boundary surface as a new geometry into the scene before rendering begins, with appropriate material and volume shader DAGs attached to the outer boundary surface to define the calculations that are to be performed in connection with hair in connection with the original volume shader DAG. In this illustrative phenomenon, the cooperation is between the geometry shader DAG and the volume shader DAG, with the geometry shader DAG introducing a procedural geometry in which the geometry shader DAG supports the volume shader DAG. The volume shader DAG makes use of this geometry, but it would not be able to create the geometry itself since the geometry is generated using the geometry shader DAG during a pre-processing operation prior to rendering, whereas the volume shader DAG is used during rendering. The cooperation illustrated in connection with this fourth illustrative example differs from that illustrated in connection with the first through third illustrative examples since the shader or shaders comprising the geometry shader procedurally provide elements that are used by the volume shader DAG, and do not just store data, as is the case in connection with the cooperation in connection with the first through third illustrative examples. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> All of these examples illustrate computer graphic effects in which an image of a scene can be rendered using multiple cooperating but independent shader DAGs which are bundled and encapsulated into a single phenomenon. </paragraph>
<paragraph id="P-0058" lvl="0"><number>&lsqb;0058&rsqb;</number> With this background, the operations performed in connection with the phenomenon creator <highlight><bold>24</bold></highlight> and phenomenon editor <highlight><bold>26</bold></highlight> will be described in connection with <cross-reference target="DRAWINGS">FIGS. 3 and 5</cross-reference>, respectively. In addition, an illustrative phenomenon created in connection with the phenomenon creator <highlight><bold>24</bold></highlight> will be described in connection with <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, and details of the operations performed by the phenomenon editor <highlight><bold>26</bold></highlight> in connection with the phenomenon depicted in connection with <cross-reference target="DRAWINGS">FIG. 4</cross-reference> will be described in connection with <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>. <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts a phenomenon creator window <highlight><bold>40</bold></highlight>, which the phenomenon creator <highlight><bold>24</bold></highlight> enables the operator interface <highlight><bold>27</bold></highlight> to display to the operator, to enable the operator to define a new phenomenon and modify the definition of an existing phenomenon. The phenomenon creator window <highlight><bold>40</bold></highlight> includes a plurality of frames, including a shelf frame <highlight><bold>41</bold></highlight>, a supported graph node frame <highlight><bold>42</bold></highlight>, a controls frame <highlight><bold>43</bold></highlight> and a phenomenon graph canvas frame <highlight><bold>44</bold></highlight>. The shelf frame <highlight><bold>41</bold></highlight> can include one or more phenomenon icons, generally identified by reference numeral <highlight><bold>45</bold></highlight>, each of which represents a phenomenon which has been at least partially defined for use in the scene structure generation portion <highlight><bold>20</bold></highlight>. The supported graph node frame <highlight><bold>42</bold></highlight> includes one or more icons, generally identified by reference numeral <highlight><bold>46</bold></highlight>, which represent entities, such as interfaces, the various types of shaders which can be used in a phenomenon, and the like, which can the operator can select for use in a phenomenon. As will be described below, the icons depicted in the supported graph node frame <highlight><bold>42</bold></highlight> can be used by an operator to form the nodes of the directed acyclic graph defining a phenomenon to be created or modified. In one embodiment, there are a number of types of nodes, including: </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> (i) A primary root node, which forms the root of the directed acyclic graph and forms the connection to the scene and typically provides a color value during rendering. </paragraph>
<paragraph id="P-0060" lvl="2"><number>&lsqb;0060&rsqb;</number> (ii) Several types of optional root nodes, which may be used as anchor points in a phenomenon DAG to support the main root node (item (i) above). Illustrative types of optional root nodes include: </paragraph>
<paragraph id="P-0061" lvl="3"><number>&lsqb;0061&rsqb;</number> (a) A lens root node, which can be used to insert lens shaders or lens shader DAGs into a camera for use during rendering; </paragraph>
<paragraph id="P-0062" lvl="3"><number>&lsqb;0062&rsqb;</number> (b) A volume root node, which can be used to insert global volume (or atmosphere) shaders or shader DAGs into a camera for use during rendering; </paragraph>
<paragraph id="P-0063" lvl="3"><number>&lsqb;0063&rsqb;</number> (c) An environment root node, which can be used to insert global environment shader or shader DAGs into a camera for use during rendering; </paragraph>
<paragraph id="P-0064" lvl="3"><number>&lsqb;0064&rsqb;</number> (d) A geometry root node, which can be used to specify geometry shaders or shader DAGs that may be pre-processed during rendering to enable procedural supporting geometry or other elements of a scene to be added to the scene database; </paragraph>
<paragraph id="P-0065" lvl="3"><number>&lsqb;0065&rsqb;</number> (e) A contour store root node, which can be used to insert a contour store shader into a scene options data structure; </paragraph>
<paragraph id="P-0066" lvl="3"><number>&lsqb;0066&rsqb;</number> (f) An output root node, which can be used in connection with post processing after a rendering phase, and </paragraph>
<paragraph id="P-0067" lvl="3"><number>&lsqb;0067&rsqb;</number> (g) A contour contrast root, which can be used to insert a contour contrast shader into the scene options data structure. </paragraph>
<paragraph id="P-0068" lvl="2"><number>&lsqb;0068&rsqb;</number> (iii) A shader node, which represents a shader, that is, a function written in a high-level language such as C or C&plus;&plus;. </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> (iv) A light node, which is used in conjunction with a light source. A light node provides the light source with a light shader, color, intensity, origin and/or direction, and optionally, a photon emitter shader. </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> (v) A material node, which is used in conjunction with a surface. A material node provides a surface with a color value, and has inputs for an opaque indication, indicating whether the surface is opaque, and for material, volume, environment, shadow, displacement, photon, photon volume, and contour shaders. </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> (vi) A phenomenon node, which is a phenomenon instance. </paragraph>
<paragraph id="P-0072" lvl="2"><number>&lsqb;0072&rsqb;</number> (vii) A constant node, which provides a constant value, which may be an input to any of the other nodes. The constant value may be most types of data types in the programming language used for the entities, such as shaders, represented by any of the other nodes, such as scalar, vector, logical (boolean), color, transformation, and so forth; and </paragraph>
<paragraph id="P-0073" lvl="2"><number>&lsqb;0073&rsqb;</number> (viii) A dialog node, which represents dialog boxes which may be displayed by the phenomenon editor <highlight><bold>26</bold></highlight> to the operator, and which may be used by the operator to provide input information to control the phenomenon before or during rendering. The dialog nodes may enable the phenomenon editor <highlight><bold>26</bold></highlight> to enable pushbuttons, sliders, wheels, and so forth, to be displayed to allow the operator to specify, for example, color and other values to be used in connection with the surface to which the phenomenon including the dialog node is connected. </paragraph>
<paragraph id="P-0074" lvl="7"><number>&lsqb;0074&rsqb;</number> As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the shelf frame <highlight><bold>41</bold></highlight> and the supported graph node frame <highlight><bold>42</bold></highlight> both include left and right arrow icons, generally identified by reference numeral <highlight><bold>47</bold></highlight>, which allow the icons shown in the respective frame to be shifted to the left or right (as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), to shift icons to be displayed in the phenomenon creator window <highlight><bold>40</bold></highlight> if there are more entities than could be displayed at one time. </paragraph>
<paragraph id="P-0075" lvl="0"><number>&lsqb;0075&rsqb;</number> The controls frame <highlight><bold>43</bold></highlight> contains icons (not shown) which represent buttons which the operator can use to perform control operations, including, for example, deleting or duplicating nodes in the shelf frame <highlight><bold>41</bold></highlight> or supported graph node frame <highlight><bold>42</bold></highlight>, beginning construction of a new phenomenon, starting an on-line help system, exiting the phenomenon creator <highlight><bold>24</bold></highlight>, and so forth. </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> The phenomenon graph canvas <highlight><bold>44</bold></highlight> provides an area in which a phenomenon can be created or modified by an operator. If the operator wishes to modify an existing phenomenon, he or she can, using a &ldquo;drag and drop&rdquo; methodology using a pointing device such as a mouse, select and drag the icon <highlight><bold>45</bold></highlight> from the shelf frame <highlight><bold>41</bold></highlight> representing the phenomenon to the phenomenon graph canvas <highlight><bold>44</bold></highlight>. After the selected icon <highlight><bold>45</bold></highlight> associated with the phenomenon to be modified has been dragged to the phenomenon graph canvas <highlight><bold>44</bold></highlight>, the operator can enable the icon <highlight><bold>45</bold></highlight> to be expanded to show one or more nodes, interconnected by arrows, representing the graph defining the phenomenon. A graph <highlight><bold>50</bold></highlight> representing an illustrative phenomenon, is depicted in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. As shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>, the graph <highlight><bold>50</bold></highlight> includes a plurality of graph nodes, comprising circles and blocks, each of which is associated with an entity which can be used in a phenomenon, which nodes are interconnected by arrows to define the graph associated with the phenomenon. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> After the graph associated with the icon <highlight><bold>45</bold></highlight> which has been dragged to the phenomenon graph canvas <highlight><bold>44</bold></highlight> has been expanded to show the graph defining the phenomenon associated with the icon <highlight><bold>45</bold></highlight>, the operator can modify the graph defining the phenomenon. In that operation, the operator can, using a corresponding &ldquo;drag and drop&rdquo; methodology, select and drag icons <highlight><bold>46</bold></highlight> from the supported graph nodes frames <highlight><bold>42</bold></highlight> representing the entities to be added to the graph to the phenomenon graph canvass <highlight><bold>44</bold></highlight>, thereby to establish a new node for the graph. After the new node has been established, the operator can interconnect it to a node in the existing graph by clicking on both nodes in an appropriate manner so as to enable an arrow to be displayed therebetween. Nodes in the graph can also be disconnected from other nodes by deleting arrows extending between the respective nodes, and deleted from the graph by appropriate actuation of a delete pushbutton in the controls frame <highlight><bold>43</bold></highlight>. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> Similarly, if the operator wishes to create a new phenomenon, he or she can, using the corresponding &ldquo;drag and drop&rdquo; methodology, select and drag icons <highlight><bold>46</bold></highlight> from the supported graph nodes frames <highlight><bold>42</bold></highlight> representing the entities to be added to the graph to the phenomenon graph canvas <highlight><bold>44</bold></highlight>, thereby to establish a new node for the graph to be created. After the new node has been established in the phenomenon graph canvas <highlight><bold>44</bold></highlight>, the operator can interconnect it to a node in the existing graph by clicking on both nodes in an appropriate manner so as to enable an arrow to be displayed therebetween. Nodes in the graph can also be disconnected from other nodes by deleting arrows extending between the respective nodes, and deleted from the graph by appropriate actuation of a delete pushbutton in the controls frame <highlight><bold>43</bold></highlight>. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> After the operator has specified the DAG or set of cooperating DAGs for the phenomenon, either for a new phenomenon or for a modified phenomenon, and before the phenomenon represented by the graph is stored in the phenomenon database <highlight><bold>25</bold></highlight>, the phenomenon creator <highlight><bold>24</bold></highlight> will examine the phenomenon graph to verify that it is consistent and can be processed during rendering. In that operation, the phenomenon creator <highlight><bold>24</bold></highlight> will ensure that the interconnections between graph nodes do not form a cycle, thereby ensuring that the graph or graphs associated with the phenomenon form directed acyclic graphs, and that interconnections between graph nodes represent respective input and output data types which are consistent. It will be appreciated that, if the phenomenon creator <highlight><bold>24</bold></highlight> determines that the graph nodes do form a cycle, the phenomenon will essentially form an endless loop that generally cannot be properly processed. These operations will ensure that the phenomenon so created or modified can be processed by the scene image generation portion when an image of a scene to which the phenomenon is attached is being rendered. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> After the operator has created or modified a phenomenon, it will be stored in the phenomenon database <highlight><bold>25</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts an illustrative phenomenon created in connection with the phenomenon creator <highlight><bold>24</bold></highlight> which can be generated using the phenomenon creator window described above in connection with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The illustrative phenomenon depicted in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, which is identified by reference numeral <highlight><bold>60</bold></highlight>, is one which may be used for surface features of a wood material. With reference to <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, the phenomenon <highlight><bold>60</bold></highlight> includes one root node, identified by reference numeral <highlight><bold>61</bold></highlight>, which is used to attach the phenomenon <highlight><bold>60</bold></highlight> to an element of a scene. Other nodes in the graph include a material shader node <highlight><bold>62</bold></highlight>, a texture shader node <highlight><bold>63</bold></highlight>, a coherent noise shader node <highlight><bold>64</bold></highlight>, which represent a material shader, a texture shader and a coherent noise shader, respectively, and a dialog node <highlight><bold>65</bold></highlight>. The dialog node <highlight><bold>65</bold></highlight> represents a dialog box that is displayed by the phenomenon editor <highlight><bold>26</bold></highlight> to allow the operator to provide input information for use with the phenomenon when the image is rendered. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> Details of a material shader, a texture shader and a coherent noise shader are known to those skilled in the art and will not be described further herein. Generally, the material shader has one or more outputs, represented by &ldquo;result,&rdquo; which are provided to the root node <highlight><bold>61</bold></highlight>. The material shader, in turn, has several inputs, including a &ldquo;glossiness&rdquo; input, an &ldquo;ambient&rdquo; color input, a &ldquo;diffuse&rdquo; color input, a &ldquo;transparency&rdquo; input, and a &ldquo;lights&rdquo; input, and the material shader node <highlight><bold>62</bold></highlight> represented thereby is shown as receiving inputs therefor from the dialog node <highlight><bold>65</bold></highlight> (in the case of the glossiness input), from the texture shader node <highlight><bold>63</bold></highlight> (in the case of the ambient and diffuse color inputs), from a hard-wired constant (in the case of the transparency input) and from a lights list (in the case of the lights input). The hard-wired constant value, indicated as &ldquo;0.0,&rdquo; provided to the transparency input indicates that the material is opaque. The &ldquo;glossiness&rdquo; input is connected to a &ldquo;glossiness&rdquo; output provided by the dialog node <highlight><bold>65</bold></highlight>, and, when the material shader represented by node <highlight><bold>62</bold></highlight> is processed during rendering, it will obtain the glossiness input value therefor from the dialog box represented by the dialog node, as will be described below in connection with <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> The ambient and diffuse inputs of the material shader represented by node <highlight><bold>62</bold></highlight> are provided by the output of the texture shader, as indicated by the connection of the &ldquo;result&rdquo; output of node <highlight><bold>63</bold></highlight> to the respective inputs of node <highlight><bold>62</bold></highlight>. When the wood material phenomenon <highlight><bold>60</bold></highlight> is processed during the rendering operation, and, in particular, when the material shader represented by node <highlight><bold>62</bold></highlight> is processed, it will enable the texture shader represented by node <highlight><bold>63</bold></highlight> to be processed to provide the ambient and diffuse color input values. The texture shader, in turn, has three inputs, including ambient and diffuse color inputs, represented by &ldquo;color1&rdquo; and &ldquo;color2&rdquo; inputs shown on node <highlight><bold>63</bold></highlight>, and a &ldquo;blend&rdquo; input. The values for the ambient and diffuse color inputs are provided by the operator using the dialog box represented by the dialog node <highlight><bold>65</bold></highlight>, as represented by the connections from the respective diffuse and ambient color outputs from the dialog node <highlight><bold>65</bold></highlight> to the texture shader node <highlight><bold>63</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> In addition, the input value for the input of the texture shader represented by node <highlight><bold>63</bold></highlight> is provided by the coherent noise shader represented by node <highlight><bold>64</bold></highlight>. Thus, when the texture shader represented by node <highlight><bold>63</bold></highlight> is processed during the rendering operation, it will enable the coherent noise shader represented by node <highlight><bold>64</bold></highlight> to be processed to provide the blend input value. The coherent noise shader has two inputs, including a &ldquo;turbulence&rdquo; input and a &ldquo;cylindrical&rdquo; input. The value for the turbulence input is provided by the operator using the dialog box represented by the dialog node <highlight><bold>65</bold></highlight>, as represented by the connections from the turbulence output from the dialog node <highlight><bold>65</bold></highlight> to the coherent noise shader node <highlight><bold>64</bold></highlight>. The input value for the cylindrical input, which is shown as a logical value &ldquo;TRUE,&rdquo; is hard-wired into the phenomenon <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> Operations performed by the phenomenon editor <highlight><bold>26</bold></highlight> will be described in connection with <cross-reference target="DRAWINGS">FIG. 5</cross-reference>. <cross-reference target="DRAWINGS">FIG. 5</cross-reference> depicts a phenomenon editor window <highlight><bold>70</bold></highlight> which the phenomenon editor <highlight><bold>26</bold></highlight> enables to be displayed by the operator interface <highlight><bold>27</bold></highlight> for use by an operator in one embodiment of the invention to establish and adjust input values for phenomena which have been attached to a scene. In particular, the operator can use the phenomenon editor window to establish values for phenomena which are provided by dialog boxes associated with dialog nodes, such as dialog node <highlight><bold>65</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>), established for the respective phenomena during the creation or modification as described above in connection with <cross-reference target="DRAWINGS">FIG. 3</cross-reference>. The phenomenon editor window <highlight><bold>70</bold></highlight> includes a plurality of frames, including a shelf frame <highlight><bold>71</bold></highlight> and a controls frame <highlight><bold>72</bold></highlight>, and also includes a phenomenon dialog window <highlight><bold>73</bold></highlight> and a phenomenon preview window <highlight><bold>74</bold></highlight>. The shelf frame <highlight><bold>71</bold></highlight> depicts icons <highlight><bold>80</bold></highlight> representing the various phenomena which are available for attachment to a scene. As with the phenomenon creator window <highlight><bold>40</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 3</cross-reference>), the shelf frame includes left and right arrow icons, generally identified by reference numeral <highlight><bold>81</bold></highlight>, which allow the icons shown in the respective frame to be shifted to the left or right (as shown in <cross-reference target="DRAWINGS">FIG. 3</cross-reference>), to shift icons to be displayed in the phenomenon editor window <highlight><bold>70</bold></highlight> if there are more icons than could be displayed at one time. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> The controls frame <highlight><bold>73</bold></highlight> contains icons (not shown) which represent buttons which the operator can use to perform control operations, including, for example, deleting or duplicating icons in the shelf frame <highlight><bold>71</bold></highlight>, starting an on-line help system, exiting the phenomenon editor <highlight><bold>26</bold></highlight>, and so forth. </paragraph>
<paragraph id="P-0087" lvl="0"><number>&lsqb;0087&rsqb;</number> The operator can select a phenomenon whose parameter values are to be established by suitable manipulation of a pointing device such as a mouse in order to create an instance of a phenomenon. (An instance of a phenomenon corresponds to a phenomenon whose parameter values have been fixed.) After the operator has selected a phenomenon, the phenomenon editor <highlight><bold>26</bold></highlight> will enable the operator interface <highlight><bold>27</bold></highlight> to display the dialog box associated with its dialog node in the phenomenon dialog window. An illustrative dialog box, used in connection with one embodiment of the wood material phenomenon <highlight><bold>60</bold></highlight> described above in connection with <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, will be described below in connection with <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference>. As the operator provides and adjusts the input values that can be provided through the dialog box, the phenomenon editor <highlight><bold>26</bold></highlight> effectively processes the phenomenon and displays the resulting output in the phenomenon preview window <highlight><bold>74</bold></highlight>. Thus, the operator can use the phenomenon editor window <highlight><bold>70</bold></highlight> to view the result of the values which he or she establishes using the inputs available through the dialog box displayed in the phenomenon dialog window. </paragraph>
<paragraph id="P-0088" lvl="0"><number>&lsqb;0088&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> graphically depict details of a dialog node (in the case of <cross-reference target="DRAWINGS">FIG. 6A</cross-reference>) and an illustrative associated dialog box (in the case of <cross-reference target="DRAWINGS">FIG. 6B</cross-reference>), which are used in connection with the wood material phenomenon <highlight><bold>60</bold></highlight> depicted in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The dialog node, which is identified by reference numeral <highlight><bold>65</bold></highlight> in <cross-reference target="DRAWINGS">FIG. 4</cross-reference>, is defined and created by the operator using the phenomenon creator <highlight><bold>24</bold></highlight> during the process of creating or modifying the particular phenomenon with which it is associated. With reference to <cross-reference target="DRAWINGS">FIG. 6</cross-reference>A, the dialog box <highlight><bold>65</bold></highlight> includes a plurality of tiles, namely, an ambient color tile <highlight><bold>90</bold></highlight>, a diffuse color tile <highlight><bold>91</bold></highlight>, a turbulence tile <highlight><bold>92</bold></highlight> and a glossiness tile <highlight><bold>93</bold></highlight>. It will be appreciated that the respective tiles <highlight><bold>90</bold></highlight> through <highlight><bold>93</bold></highlight> are associated with the respective ambient, diffuse, turbulence and glossiness output values provided by the dialog node <highlight><bold>65</bold></highlight> as described above in connection with <cross-reference target="DRAWINGS">FIG. 4</cross-reference>. The ambient and diffuse color tiles are associated with color values, which can be specified using the conventional red/green/blue/alpha, or &ldquo;RGBA,&rdquo; color/transparency specification, and, thus, each of the color tiles will actually be associated with multiple input values, one for each of the red, green and blue colors in the color representation and one for transparency (alpha). On the other hand, each of the turbulence and glossiness tiles <highlight><bold>92</bold></highlight> and <highlight><bold>93</bold></highlight> is associated with a scalar value. </paragraph>
<paragraph id="P-0089" lvl="0"><number>&lsqb;0089&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6B</cross-reference> depicts an illustrative dialog box <highlight><bold>100</bold></highlight> which is associated with the dialog node <highlight><bold>65</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 6A</cross-reference>), as displayed by the operator interface <highlight><bold>27</bold></highlight> under control of the phenomenon editor <highlight><bold>26</bold></highlight>. In the dialog box <highlight><bold>100</bold></highlight>, the ambient and diffuse color tiles <highlight><bold>90</bold></highlight> and <highlight><bold>91</bold></highlight> of the dialog node <highlight><bold>65</bold></highlight> are each displayed by the operator interface <highlight><bold>27</bold></highlight> as respective sets of sliders, generally identified by reference numerals <highlight><bold>101</bold></highlight> and <highlight><bold>102</bold></highlight>, respectively, each of which is associated with one of the colors in the color representation to be used during processing of the associated phenomenon during rendering. In addition, the turbulence and glossiness tiles <highlight><bold>92</bold></highlight> and <highlight><bold>93</bold></highlight> of the dialog node <highlight><bold>65</bold></highlight> are each displayed by the operator interface as individual sliders <highlight><bold>103</bold></highlight> and <highlight><bold>104</bold></highlight>. The sliders in the respective sets of sliders <highlight><bold>101</bold></highlight> and <highlight><bold>102</bold></highlight> may be manipulated by the operator, using a pointing device such as a mouse, in a conventional manner thereby to enable the phenomenon editor <highlight><bold>26</bold></highlight> to adjust the respective combinations of colors for the respective ambient and diffuse color values provided by the dialog node <highlight><bold>65</bold></highlight> to the shaders associated with the other nodes of the phenomenon <highlight><bold>60</bold></highlight> (<cross-reference target="DRAWINGS">FIG. 4</cross-reference>). In addition, the sliders <highlight><bold>103</bold></highlight> and <highlight><bold>104</bold></highlight> associated with the turbulence and glossiness inputs may be manipulated by the operator thereby to enable the phenomenon editor <highlight><bold>26</bold></highlight> to adjust the respective turbulence and glossiness values provided by the dialog node <highlight><bold>65</bold></highlight> to the shaders associated with the other nodes of the wood material phenomenon <highlight><bold>60</bold></highlight>. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Returning to <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, after the operator, using the phenomenon editor <highlight><bold>26</bold></highlight>, has established the values for the various phenomena and phenomena instances associated with a scene, those values are stored with the scene in the scene object database <highlight><bold>22</bold></highlight>. Thereafter, an image of scene can be rendered by the scene image generation portion <highlight><bold>21</bold></highlight>, in particular by the scene image generator <highlight><bold>30</bold></highlight> for display by the operator interface <highlight><bold>31</bold></highlight>. Operations performed by the scene image generator <highlight><bold>30</bold></highlight> will generally be described in connection with the flowchart depicted in <cross-reference target="DRAWINGS">FIG. 7</cross-reference>. With reference to <cross-reference target="DRAWINGS">FIG. 7</cross-reference>, the scene image generator <highlight><bold>30</bold></highlight> operates in a series of phases, including a pre-processing phase, a rendering phase and a post-processing phase. In the pre-processing phase, the scene image generator <highlight><bold>30</bold></highlight> will examine the phenomena which are attached to a scene to determine whether it will need to perform pre-processing and/or post-processing operations in connection therewith (step <highlight><bold>100</bold></highlight>). The scene image generator <highlight><bold>30</bold></highlight> then determines whether the operations in step <highlight><bold>100</bold></highlight> indicated that preprocessing operations are required in connection with at least one phenomenon attached to the scene (step <highlight><bold>101</bold></highlight>), and, if so, will perform the pre-processing operations (step <highlight><bold>102</bold></highlight>). Illustrative preprocessing operations include, for example, generation of geometry for the scene if a phenomenon attached to the scene includes a geometry shader, to generate geometry defined thereby for the scene. Other illustrative pre-processing operations include, for example, shadow and photon mapping, multiple inheritance resolution, and the like. Following step <highlight><bold>102</bold></highlight>, or step <highlight><bold>101</bold></highlight> if the scene image generator <highlight><bold>30</bold></highlight> makes a negative determination in that step, the scene image generator <highlight><bold>30</bold></highlight> can perform further pre-processing operations which may be required in connection with the scene representation prior to rendering, which are not related to phenomena attached to the scene (step <highlight><bold>103</bold></highlight>). </paragraph>
<paragraph id="P-0091" lvl="0"><number>&lsqb;0091&rsqb;</number> Following step <highlight><bold>103</bold></highlight>, the scene image generator <highlight><bold>30</bold></highlight> will perform the rendering phase, in which it performs rendering operations in connection with the pre-processed scene representation to generate a rendered image (step <highlight><bold>104</bold></highlight>). In that operation, the scene image generator <highlight><bold>30</bold></highlight> will identify the phenomena stored in the scene object database <highlight><bold>22</bold></highlight> which are to be attached to the various components of the scene, as generated by the entity geometric representation generator <highlight><bold>23</bold></highlight> and attach all primary and optional root nodes of the respective phenomena to the scene components appropriate to the type of the root node. Thereafter, the scene image generator <highlight><bold>30</bold></highlight> will render the image. In addition, the scene image generator <highlight><bold>30</bold></highlight> will generate information as necessary which may be used in post-processing operations during the post-processing phase. </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> Following the rendering phase (step <highlight><bold>104</bold></highlight>), the scene image generator <highlight><bold>30</bold></highlight> will perform the post-processing phase. In that operation, the scene image generator <highlight><bold>30</bold></highlight> will determine whether operations performed in step <highlight><bold>100</bold></highlight> indicated that post-processing operations are required in connection with phenomena attached to the scene (step <highlight><bold>105</bold></highlight>). If the scene image generator <highlight><bold>30</bold></highlight> makes a positive determination in step <highlight><bold>105</bold></highlight>, it will perform the post-processing operations required in connection with the phenomena attached to the scene (step <highlight><bold>106</bold></highlight>). In addition, the scene image generator <highlight><bold>30</bold></highlight> may also perform other post-processing operations which are not related to phenomena in step <highlight><bold>106</bold></highlight>. The scene image generator <highlight><bold>30</bold></highlight> may perform post-processing operations in connection with manipulate pixel values for color correction, filtering to provide various optical effects. In addition, the scene image generator <highlight><bold>30</bold></highlight> may perform post-processing operations if, for example, a phenomenon attached to the scene includes an output shader that defines post-processing operations, such as depth of field or motion blur calculations that can be, in one embodiment, entirely done in an output shader, for example, dependent on the velocity and depth information stored in connection with each pixel value, in connection with the rendered image. </paragraph>
<paragraph id="P-0093" lvl="0"><number>&lsqb;0093&rsqb;</number> The invention provides a number of advantages. In particular, the invention provides an computer graphics system providing arrangements for creating (reference the phenomenon creator <highlight><bold>24</bold></highlight>) and manipulating (reference the phenomenon editor <highlight><bold>26</bold></highlight>) phenomena. The phenomena so created are processed by the phenomenon creator <highlight><bold>24</bold></highlight> to ensure that they are consistent and can be processed during rendering. Since the phenomena are created prior to being attached to a scene, it will be appreciated that they can be created by programmers or others who are expert in the development in computer programs, thereby alleviating others, such as artists, draftsmen and the like of the necessity developing them. Also, phenomena relieve the artist from the complexity of instrumenting the scene with many different and inter-related shaders by separating it (that is, the complexity) into an independent task performed by a phenomenon creator expert user in advance. With phenomena, the instrumentation becomes largely automated. Once a phenomenon or phenomenon instance has been created, it is scene-independent and can be re-used in many scenes thus avoiding repetitive work. </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> It will be appreciated that a number of changes and modifications may be made to the invention. As noted above, since phenomena may be created separately from their use in connection with a scene, the phenomenon creator <highlight><bold>24</bold></highlight> used to create and modify phenomena, and the phenomenon editor <highlight><bold>26</bold></highlight> used to create phenomenon instances, may be provided in separate computer graphics systems. For example, a computer graphics system <highlight><bold>10</bold></highlight> which includes a phenomenon editor <highlight><bold>26</bold></highlight> need not include a phenomenon creator <highlight><bold>24</bold></highlight> if, for example, the phenomenon database <highlight><bold>25</bold></highlight> includes appropriate previously-created phenomena and the operator will not need to create or modify phenomena. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> Furthermore, as noted above, the values of parameters of a phenomenon may be fixed, or they may vary based on a function of one or more variables. For example, if one or more values of respective parameters vary in accordance with time as a variable, the phenomenon instance can made time dependent, or &ldquo;animated.&rdquo; This is normally discretized in time intervals that are labeled by the frame-numbers of a series of frames comprising an animation, but the time dependency may nevertheless take on the form of any phenomenon parameter valued function over the time, each of which can be tagged with an absolute time value, so that, even if an image is rendered at successive frame numbers, the shaders are not bound to discrete intervals. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In this connection, the phenomenon editor is used to select time dependent values for one or more parameters of a phenomenon, creating a time dependent &ldquo;phenomenon instance.&rdquo; The selection of time dependent values for the parameters of a phenomenon is achieved, in one particular embodiment, by the graphically interactive attachment of what will be referred to herein as &ldquo;phenomenon property control trees&rdquo; to an phenomenon. A phenomenon property control tree, which may be in the form of a tree or a DAG, is attached to phenomenon parameters, effectively outside of the phenomenon, and is stored with the phenomenon in the phenomenon instance database. A phenomenon property control tree consists of one or more nodes, each of which is a shader in the sense of the functions that it provides, for example, motion curves, data look-up functions and the like. A phenomenon property control tree preferably can remain shallow, and will normally have only very few branching levels. A phenomenon property control tree can consist of only one shader, which defines a function to compute the value for the parameter associated with it at run time. A phenomenon property control tree can remain shallow because the phenomenon allows and encourages encapsulation of the complicated shader trees or DAGs, facilitating evaluation in an optimized manner during the rendering step, by for example, storing data for re-use. Allowing an operator to attach such phenomenon property control trees to control the phenomenon&apos;s parameters greatly increases the flexibility of the user to achieve custom effects based on his use of a predefined and packaged phenomenon. The number of distinct phenomenon instances that may be created this way is therefore greatly increased, while the ease of use is not compromised thanks to the encapsulation of all complexity in the phenomenon. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> In addition, it will be appreciated that the appearance and structures of the windows used in connection with the phenomenon creator <highlight><bold>24</bold></highlight> and phenomenon editor <highlight><bold>26</bold></highlight>, described in connection with <cross-reference target="DRAWINGS">FIGS. 3 and 5</cross-reference>, may differ from those described herein. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> It will be appreciated that a system in accordance with the invention can be constructed in whole or in part from special purpose hardware or a general purpose computer system, or any combination thereof, any portion of which may be controlled by a suitable program. Any program may in whole or in part comprise part of or be stored on the system in a conventional manner, or it may in whole or in part be provided in to the system over a network or other mechanism for transferring information in a conventional manner. In addition, it will be appreciated that the system may be operated and/or otherwise controlled by means of information provided by an operator using operator input elements (not shown) which may be connected directly to the system or which may transfer the information to the system over a network or other mechanism for transferring information in a conventional manner. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> The foregoing description has been limited to a specific embodiment of this invention. It will be apparent, however, that various variations and modifications may be made to the invention, with the attainment of some or all of the advantages of the invention. It is the object of the appended claims to cover these and such other variations and modifications as come within the true spirit and scope of the invention.</paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed as new and desired to be secured by Letters Patent of the United States is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A computer graphics system for generating an image of a scene from a representation to which at least one instantiated phenomenon has been attached, said instantiated phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics system comprising: 
<claim-text>A. a pre-processor configured to determine whether the at least one instantiated phenomenon requires a pre-processing operation in connection with said representation, and, if so, performing said pre-processing operation to generate a pre-processed representation of the scene; and </claim-text>
<claim-text>B. a renderer configured to generate a rendered image from said pre-processed representation of the scene. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which at least one type of shader node is of a geometry shader node type, the pre-processor being configured to perform said pre-processing operation if the at least one shader node is of the geometry shader node type to define geometry for the scene. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which at least one type of shader node is of a photon shader node type, the pre-processor being configured to perform said pre-processing operation if the at least one shader node is of the photon shader node type to control the paths of photons in the scene and the characteristics of interaction of photons with surfaces of objects in the scene. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which at least one type of shader node is of a photon emitter shader node type, the pre-processor being configured to perform said pre-processing operation if the at least one shader node is of the photon emitter shader node type to simulate generation of photons by a light source illuminating the scene. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which at least one type of shader node is of a photon volume shader node type, the pre-processor being configured to perform said preprocessing operation if the at least one shader node is of the photon volume shader node type to simulate interaction of photons from a light source with a three-dimensional volume of space in the scene. </claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> further comprising a post-processor configured to determine whether the at least one instantiated phenomenon requires a post-processing operation in connection with said representation and, if so, performing said post-processing operation. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference> in which the at least one shader node is of an output shader node type, the post-processor being configured to perform said post-processing operation if the at least one shader node is of he output shader node type. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference> in which the rendered image comprises a plurality of pixels each associated with a pixel value, the post-processor being configured to perform said post-processing operation in connection with said pixel values. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight> A computer graphics system for generating an image of a scene from a representation to which at least one instantiated phenomenon has been attached, said instantiated phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics system comprising: 
<claim-text>A. a renderer configured to generate a rendered image from said representation of the scene; and </claim-text>
<claim-text>B. a post-processor configured to determine whether the at least one instantiated phenomenon requires a post-processing operation in connection with said representation and, if so, performing said post-processing operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00009">claim 9</dependent-claim-reference> in which the at least one shader node is of an output shader node type, the post-processor being configured to perform said post-processing operation if the at least one shader node is of he output shader node type. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 10</dependent-claim-reference> in which the rendered image comprises a plurality of pixels each associated with a pixel value, the post-processor being configured to perform said post-processing operation in connection with said pixel values. </claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. A computer graphics system for enabling an operator to create a phenomenon, the phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics system comprising: 
<claim-text>A. a base shader node database configured to store a plurality of base shader nodes, each base shader node including a shader; </claim-text>
<claim-text>B. a phenomenon creator configured to enable said operator to interconnect said base shader nodes from said base shader node database into a DAG, the phenomenon creator verifying that interconnections among said base shader nodes as provided by said operator comprise a DAG. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> in which said phenomenon creator stores the phenomenon created by said operator in a phenomenon database. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference> in which said phenomenon creator is further configured to enable said operator to interconnect said base shader nodes in phenomenon comprising a plurality of cooperating DAGs, in which a shader node in one of said cooperating DAGs, when used during rendering of an image of a scene, provides at least one value which is used in connection with another of said cooperating DAGs. </claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A computer graphics system for enabling an operator to generate, from a phenomenon, an instantiated phenomenon, the phenomenon comprising an encapsulated shader DAG comprising at least one shader DAG including at least one shader node, the computer graphics system comprising: 
<claim-text>A. a phenomenon database configured to store said phenomenon, and </claim-text>
<claim-text>B. a phenomenon editor configured to enable said operator to select said phenomenon and provide a value for at least one parameter associated with said at least one shader node. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> in which the value is fixed. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> in which the value is a predetermined function of a variable. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference> in which the variable is time, thereby providing for animation of the instantiated phenomenon. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference> in which the value is provided by a property control tree, comprising at least one node defining a function. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> in which the value is fixed. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> in which the value is a predetermined function of a variable. </claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference> in which the variable is time, thereby providing for animation of the instantiated phenomenon. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> in which at least one function defines a motion curve. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. A computer graphics system as defined in <dependent-claim-reference depends_on="CLM-00011">claim 19</dependent-claim-reference> in which at least one function defines a texture look-up function. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A computer graphics method of generating an image of a scene from a representation to which at least one instantiated phenomenon has been attached, said instantiated phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics method comprising: 
<claim-text>A. a pre-processing step of determining whether the at least one instantiated phenomenon requires a pre-processing operation in connection with said representation, and, if so, performing said pre-processing operation to generate a pre-processed representation of the scene; and </claim-text>
<claim-text>B. a rendering step of generating a rendered image from said pre-processed representation of the scene. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. A computer graphics method of generating an image of a scene from a representation to which at least one instantiated phenomenon has been attached, said instantiated phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics method comprising: 
<claim-text>A. a rendering step of generating a rendered image from said representation of the scene; and </claim-text>
<claim-text>B. a post-processing step of determining whether the at least one instantiated phenomenon requires a post-processing operation in connection with said representation and, if so, performing said post-processing operation. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. A computer graphics method of enabling an operator to create a phenomenon, the phenomenon comprising an encapsulated shader DAG comprising at least one shader node, the computer graphics method comprising: 
<claim-text>A. providing base shader node database configured to store a plurality of base shader nodes, each base shader node including a shader; </claim-text>
<claim-text>B. a phenomenon creator step of enabling said operator to interconnect said base shader nodes from said base shader node database into a DAG, and of verifying that interconnections among said base shader nodes as provided by said operator comprise a DAG. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A computer graphics method of enabling an operator to generate, from a phenomenon, an instantiated phenomenon, the phenomenon comprising an encapsulated shader DAG comprising at least one shader DAG including at least one shader node, the computer graphics method comprising: 
<claim-text>A. providing a phenomenon database configured to store said phenomenon, and </claim-text>
<claim-text>B. a phenomenon editor step of enabling said operator to select said phenomenon and provide a value for at least one parameter associated with said at least one shader node.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030001844A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030001844A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030001844A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030001844A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030001844A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030001844A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030001844A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030001844A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030001844A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
