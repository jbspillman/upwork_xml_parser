<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030005184A1-20030102-D00000.TIF SYSTEM "US20030005184A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030005184A1-20030102-D00001.TIF SYSTEM "US20030005184A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030005184A1-20030102-D00002.TIF SYSTEM "US20030005184A1-20030102-D00002.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030005184</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10232219</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020829</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F003/00</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>710</class>
<subclass>001000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>Soft programming for recovery of overerasure</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10232219</doc-number>
<kind-code>A1</kind-code>
<document-date>20020829</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09034861</doc-number>
<document-date>19980227</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Frankie</given-name>
<middle-name>Fariborz</middle-name>
<family-name>Roohparvar</family-name>
</name>
<residence>
<residence-us>
<city>Cupertino</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
</inventors>
<assignee>
<organization-name>Micron Technology, Inc.</organization-name>
<assignee-type>02</assignee-type>
</assignee>
<correspondence-address>
<name-1>SCHWEGMAN, LUNDBERG, WOESSNER &amp; KLUTH, P.A.</name-1>
<name-2></name-2>
<address>
<address-1>P.O. BOX 2938</address-1>
<city>MINNEAPOLIS</city>
<state>MN</state>
<postalcode>55402</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">A method of erasing a memory cell includes the step of erasing a memory cell. The current in the memory cell is measured. If the measured memory cell current approximately exceeds a predetermined level, the memory cell is soft programmed so if the memory cell is not overerased, the memory cell is undisturbed. The memory cell is soft programmed until the measured memory cell current is less than or equal to the predetermined level. </paragraph>
</subdoc-abstract>
<subdoc-description>
<cross-reference-to-related-applications>
<heading lvl="1">RELATED APPLICATIONS </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> This application is a Continuation of U.S. Ser. No. 09/034,861 filed Feb. 27, 1998, which is incorporated herein by reference.</paragraph>
</cross-reference-to-related-applications>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> The present invention relates to operations in flash memory devices. More particularly, the present invention relates to a method and apparatus to diminish undesirable programming in a flash memory device. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND </heading>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> Flash memory devices have proven to be important memory elements in the past several years, and industry pundits predict an ever-increasing role for such devices in the future. A great advantage flash memory devices have over typical EPROM&apos;s and EEPROM&apos;s are, respectively, system programmability and lower cost. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Despite the many advantages of flash memories over other memories, flash memory devices have several opportunities for improvement. For example, flash memories in their typical implementations suffer from the problems of &ldquo;overerased memory cells&rdquo; and &ldquo;wild cells&rdquo; which result in all memory cells not behaving exactly alike with respect to their electrical behavior. In fact, many flash memory devices include wide variations of electrical behavior between adjacent memory cells. </paragraph>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> Overerased memory cells are particularly undesirable. Overerased memory cells arise when a block of memory cells is erased. Because of the behavioral dissimilarities of the memory cells within the block, one memory cell typically takes longer to erase than other memory cells. As a result, this memory cell defines the erasure time for all memory cells in the block. </paragraph>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> Erasing the block for the defined erasure time results in some memory cells being overerased. Overerased memory cells are memory cells that were erased for an excessive period of time. Overerased memory cells have an undesirable large positive charge on their floating gate. For example, an overerased memory cell will have a floating gate voltage of 3V. A non-overerased memory cell will typically have a floating gate voltage of 0.5V. As a result, overerased memory cells operate in the depletion mode. Hence, overerased memory cells conduct current through a bit line to which they are coupled even when the overerased cells are biased with zero drain voltages. </paragraph>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> Thus, selected programmed memory cells, coupled to the same bit line as an overerased memory cell, will appear to draw current and appear to be erased. Therefore, data stored in the flash memory devices may not be accurately read. Therefore, overerased memory cells are preferably corrected. </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> Typically, overerased memory cells are corrected, by applying a gate voltage of 12 volts to the entire block of memory cells. As the floating gate voltage of such memory cells becomes sufficiently lower to come out of depletion mode. With the gate of the overerased cells sufficiently higher than normally erased cells, the control gate couples the floating gate even higher, through a tunnelling mechanism in the channel or source area. Electrons are pulled to the floating gate, and lower the voltage of the floating gate. However, during the aforementioned process, since the procedure affects all of the cells in the block, some non-overerased memory cells become undesirably programmed. Therefore, there is a need to correct overerased memory cells while avoiding undesired programming of non-overerased memory cells. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> The present invention provides a method of erasing a memory cell, including the step of erasing a memory cell. The current in the memory cell is measured. If the measured memory cell current approximately exceeds a predetermined level, the memory cell is soft programmed so if the memory cell is not overerased, the memory cell is undisturbed. The memory cell is soft programmed until the measured memory cell current is less than or equal to the predetermined level. </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> In one embodiment, the memory cell is soft programmed for approximately 100 microseconds. In another embodiment, the predetermined level is 10 microamps. In yet another embodiment, the present invention includes the step of applying a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to a memory cell. </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> In another embodiment, the present invention provides a state machine, controlling soft programming of a memory cell, that includes a distribution adjustment group. The distribution adjustment group includes a read column state for ascertaining whether overerased cells exist in a column. An increment column state, coupled to the read column state, selects a next column. A soft program row state, coupled to the read column state, corrects an overerased memory cell while not disturbing a non-overased memory cell. An increment row state, coupled to the soft program row and read column states, selects a memory cell in a subsequent row. </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> In yet a further embodiment, the present invention provides a memory, including a memory cell array including blocks of memory cells, and a command execution logic module. A state machine, coupled to the command execution logic module, controls soft programming of a memory cell in the memory cell array. An X-interface circuit is coupled to the state machine. A Y-interface circuit is coupled to the state machine. The state machine includes a distribution adjustment group that comprises a read column state. An increment column state is coupled to the read column state. A soft program row state, in which a non-overerased memory cell is undisturbed, is coupled to the read column state. An increment row state is coupled to the soft program row and read column states. In another embodiment, as system may be formed by coupling the memory to a memory controller.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">BRIEF DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> shows a schematic diagram illustrating generally a memory system embodying features of the present invention. </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a state diagram of an erase operation for use with a state machine.</paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS </heading>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> In the following detailed description, reference is made to the accompanying drawings which form a part hereof, and in which is shown, by way of illustration, specific embodiments in which the invention may be practiced. In the drawings, like numerals describe substantially similar components throughout the several views. The embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be used and logical, structural, and electrical changes may be made without departing from the scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined only by the claims and their equivalents. </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> The present invention provides a method of soft programming overerased cells so that non-overerased cells are not undesirably programmed. In one embodiment, soft programming is accomplished by applying a relatively low gate voltage, of approximately 6 to 7 volts, to memory cells. As a result, non-overerased memory cells are not undesirably programmed, or disturbed, because the relatively lower gate voltage in addition to the relatively low floating gate voltage of the non-overerased cell are insufficient to draw not electrons into the floating gates of the non-overerased memory cells. However, the present invention permits overerased memory cells to be corrected by hot electron injection. This technique can be used in a memory system as described below. </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1</cross-reference> is a schematic diagram illustrating generally, by way of example, but not by way of limitation, one embodiment of a memory system <highlight><bold>100</bold></highlight> embodying features of the present invention. Memory system <highlight><bold>100</bold></highlight> includes memory controller <highlight><bold>105</bold></highlight> and memory integrated circuit (IC) <highlight><bold>110</bold></highlight>. Controller <highlight><bold>105</bold></highlight> includes a microprocessor or any other controller providing interface signals to the memory IC <highlight><bold>110</bold></highlight>, as described below. Such interface signals include addressing signals, provided at address lines <highlight><bold>115</bold></highlight>, and data signals, communicated at data lines <highlight><bold>120</bold></highlight>. Other interface signals provided by controller <highlight><bold>105</bold></highlight> include write enable (WE*) at node <highlight><bold>121</bold></highlight>, chip enable (CE*) at node <highlight><bold>122</bold></highlight>, reset/power-down (RP*) at node <highlight><bold>123</bold></highlight>, and output enable (OE*) at node <highlight><bold>124</bold></highlight>, all of which are active low signals. Memory IC <highlight><bold>110</bold></highlight> provides a status signal (RY/BY*) at node <highlight><bold>125</bold></highlight> to controller <highlight><bold>105</bold></highlight> to indicate the status of internal state machine <highlight><bold>130</bold></highlight>. Memory IC <highlight><bold>110</bold></highlight> also receives a positive power supply voltage (Vcc) at node <highlight><bold>126</bold></highlight> (e.g., approximately 3.3 Volts or approximately 5 Volts), a write/erase supply voltage (V<highlight><subscript>PP</subscript></highlight>) at node <highlight><bold>127</bold></highlight> (e.g., approximately 5 Volts), and a reference voltage such as substrate ground voltage (V<highlight><subscript>SS</subscript></highlight>) at node <highlight><bold>128</bold></highlight> (e.g., approximately 0 Volts). </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> In the embodiment of <cross-reference target="DRAWINGS">FIG. 1</cross-reference>, memory IC <highlight><bold>110</bold></highlight> includes a memory cell array <highlight><bold>135</bold></highlight> of floating gate transistor memory cells arranged in 32 memory cell blocks. Each memory cell block in memory cell array <highlight><bold>135</bold></highlight> contains 64 kilobytes of floating gate transistor memory cells. Data stored in each memory cell block is erased independently, as described below, without disturbing data stored in other memory cell blocks. A command execution logic module <highlight><bold>140</bold></highlight> receives the above-described interface signals from controller <highlight><bold>105</bold></highlight>. The command execution logic module <highlight><bold>140</bold></highlight> controls an internal state machine <highlight><bold>130</bold></highlight>, which provides write and block erase timing sequences to memory cell array <highlight><bold>135</bold></highlight> through X-interface circuit <highlight><bold>145</bold></highlight> and Y-interface circuit <highlight><bold>150</bold></highlight>. </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> Y-interface circuit <highlight><bold>150</bold></highlight> provides access to individual memory cells through bit lines in memory cell array <highlight><bold>135</bold></highlight>. Y-interface circuit <highlight><bold>150</bold></highlight> includes a Y-decoder circuit, Y-select gates, sense-amplifiers, and write/erase bit compare and verify circuits. X-interface circuit <highlight><bold>145</bold></highlight> provides access to rows of memory cells through wordlines in memory cell array <highlight><bold>135</bold></highlight>, which are electrically coupled to control gates (also called select gates) of floating gate transistors in memory cell array <highlight><bold>135</bold></highlight>. X-interface circuit <highlight><bold>145</bold></highlight> includes decoding and control circuits for erasing individual blocks of memory cells in memory cell array <highlight><bold>135</bold></highlight>. </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> shows a state diagram, of the state machine <highlight><bold>130</bold></highlight>, for controlling an erase operation in a flash memory. Another state machine is described in U.S. Pat. No. 5,619,453, which is hereby incorporated by reference for its description of the state diagram therein. The state diagram includes a plurality of interconnected execution cycles including incremental cycles and other cycles. The execution cycles of the erase operation are arranged in a plurality of interconnected groups, including a pre-program group <highlight><bold>210</bold></highlight>, an erase group <highlight><bold>212</bold></highlight>, and a distribution adjustment group <highlight><bold>214</bold></highlight> connected together in the order shown. In order to erase a block of flash memory, the state machine <highlight><bold>130</bold></highlight> executes the cycles in the interconnected groups. </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> The pre-program group <highlight><bold>210</bold></highlight> includes a plurality of interconnected execution cycles including incremental cycles and other cycles. As shown in <cross-reference target="DRAWINGS">FIG. 2</cross-reference>, the preprogram group includes a high voltage state <highlight><bold>216</bold></highlight> connected to a setup verify state <highlight><bold>218</bold></highlight>. The setup verify state <highlight><bold>218</bold></highlight> is connected to a program verify state <highlight><bold>220</bold></highlight>. If the program verify state <highlight><bold>220</bold></highlight> determines that the program is not in order, the operation jumps to a high voltage level setup state <highlight><bold>222</bold></highlight>. The high voltage level setup state <highlight><bold>222</bold></highlight> is connected back to the high voltage state <highlight><bold>216</bold></highlight>. If the program verify state <highlight><bold>220</bold></highlight> determines that the operation is indeed in order, the operation jumps to a program cleanup state <highlight><bold>224</bold></highlight>. The above described states are designated as other cycles, as opposed to incremental cycles described below. </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> The program clean up state <highlight><bold>224</bold></highlight> jumps to an increment address state <highlight><bold>226</bold></highlight> when the operation has completed the program for a given address. The increment address state <highlight><bold>226</bold></highlight> is designated as an incremental cycle because it adjusts a variable, determines if the adjusted variable is a predefined stopping point, and, if so, proceeds with the operation. If not, the incremental cycle sends the operation back into another loop, as appreciated by those skilled in the art. With regard to the increment address state <highlight><bold>226</bold></highlight>, the operation increases the address variable and compares it to a predetermined maximum address. If the variable is at the maximum address, the operation proceeds to the erase group <highlight><bold>212</bold></highlight> of cycles. If not, the operation jumps back to the high voltage level setup state <highlight><bold>222</bold></highlight> and repeats the cycles in the preprogram group <highlight><bold>210</bold></highlight>. </paragraph>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> The erase group <highlight><bold>212</bold></highlight> also includes a plurality of cycles including incremental cycles and other cycles. The initial cycle in the erase group <highlight><bold>212</bold></highlight> is a high voltage level setup state <highlight><bold>230</bold></highlight> which takes approximately 400 nanoseconds to complete. The high voltage level setup state <highlight><bold>230</bold></highlight> then jumps to a high voltage state <highlight><bold>232</bold></highlight> which takes approximately 10 milliseconds to complete. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> In one embodiment of the present invention, a block of memory cells is erased during the high voltage state <highlight><bold>232</bold></highlight>. In another embodiment, the block of memory cells is erased by applying a gate voltage of approximately &minus;10 to &minus;11 volts to the memory cells. By Fowler-Nordheim tunneling, electrons are drawn from the floating gates into the sources of the memory cells. In this state, some memory cells become overerased and have a floating gate biased with a net positive voltage. As described above, the net positive voltage causes the overerased memory cells to become normally conductive. Therefore, the present invention provides a method for soft programming a block of memory cells to correct overerasures, as subsequently described. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> The next cycle is the setup verify state <highlight><bold>234</bold></highlight>, which takes approximately 5 microseconds to complete. The erase verify state <highlight><bold>236</bold></highlight> follows the setup verify state <highlight><bold>234</bold></highlight> and takes approximately 200 nanoseconds to complete. The above described cycles of the erase group <highlight><bold>212</bold></highlight> are know as other cycles, again as opposed to increment cycles. If the erase verify state <highlight><bold>236</bold></highlight> determines that the erase operation is complete, the operation jumps to an increment address state <highlight><bold>238</bold></highlight> which is an increment cycle. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> The increment address state <highlight><bold>238</bold></highlight> of the erase group <highlight><bold>212</bold></highlight> is designated as an incremental cycle because, like the increment address state <highlight><bold>226</bold></highlight> of the pre-program group <highlight><bold>210</bold></highlight>, it adjusts a variable, determines if the adjusted variable is a predefined stopping point, and, if so, proceeds with the operation. If not, the incremental cycle sends the operation back into another loop. With regard to the increment address state <highlight><bold>238</bold></highlight> of the erase group <highlight><bold>212</bold></highlight>, the operation increases the address variable and compares it to a predetermined maximum address. If the variable is at the maximum address, the operation proceeds to distribution adjustment group <highlight><bold>214</bold></highlight> of cycles. If not, the operation jumps back to the erase verify state <highlight><bold>236</bold></highlight>. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> The distribution adjustment group <highlight><bold>214</bold></highlight> includes a plurality of other cycles. The erase group <highlight><bold>212</bold></highlight> jumps to the read column state <highlight><bold>240</bold></highlight> of the distribution adjustment group <highlight><bold>214</bold></highlight>. Upon commencing the read column state <highlight><bold>240</bold></highlight>, the first column is selected. This read operation is performed with no rows selected. If the read column state <highlight><bold>240</bold></highlight> ascertains that no memory cells in the selected column are overerased then the operation jumps to the increment column state <highlight><bold>242</bold></highlight> which selects the next column. Subsequently, the operation jumps back to the read column state <highlight><bold>240</bold></highlight>, until the last column is selected. After the last column is selected, the operation proceeds to the erase done group <highlight><bold>250</bold></highlight>. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> However, if the read column state <highlight><bold>240</bold></highlight> ascertains that one or more memory cells in the selected column are overerased, then the operation jumps from the read column state <highlight><bold>240</bold></highlight> to soft program row state <highlight><bold>244</bold></highlight>. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> Upon commencing the soft program row state <highlight><bold>244</bold></highlight> in this manner, the memory cell in the first row of the selected column is selected. The memory cell in selected row is then soft programmed to correct the memory cell if it is overerased. The operation then jumps to the increment row state <highlight><bold>248</bold></highlight> which selects the memory cell in a subsequent row. Then, the operation jumps to the read column state <highlight><bold>240</bold></highlight> to ascertain whether any memory cells in the selected column remain overerased. If no memory cells remain overerased, then the operation jumps to the increment column state <highlight><bold>242</bold></highlight>, and proceeds as described above. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> However, if memory cells remain overerased, the operation sequentially jumps to the soft program row state <highlight><bold>244</bold></highlight> and then the increment row state <highlight><bold>248</bold></highlight>, as described above. As a result, subsequent rows are soft programmed, even repeatedly, until either the read column state <highlight><bold>240</bold></highlight> ascertains that no overerased cells remain in the column, or until each memory cell is soft programmed a maximum number of times. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> One embodiment of soft programming according to the present invention will now be described. First, during the read column state <highlight><bold>240</bold></highlight>, a column of memory cells is read, with all memory cells biased off, by measuring current in a corresponding bit line. Each column includes a bit line to which memory cells are coupled. The memory cells are biased off by applying a gate voltage of zero volts to each memory cell coupled to the bit line. If the current does not exceed approximately a predetermined level, the next column is read during the increment column state <highlight><bold>242</bold></highlight>. The predetermined level is a current level, for example, approximately between 10 and 12 microamps, which would not mask, and hence permits, an accurate reading of a programmed memory cell. </paragraph>
<paragraph id="P-0032" lvl="0"><number>&lsqb;0032&rsqb;</number> If the bit line current exceeds the predetermined level, then memory cells in the column are soft programmed, in the soft program row state <highlight><bold>244</bold></highlight> in the manner described below, until the bit line current does not exceed the predetermined level. </paragraph>
<paragraph id="P-0033" lvl="0"><number>&lsqb;0033&rsqb;</number> A memory cell is soft programmed during the soft program row state <highlight><bold>240</bold></highlight> by biasing the selected memory cell with a gate voltage of between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts for approximately 100 microseconds. Typically, even the most overerased memory cells are corrected by applying this bias for such a time period. After soft programming the selected memory cell, the bit line current is measured again during the read column state <highlight><bold>240</bold></highlight>. If the current is below the predetermined level, then the next column is analyzed during the read column state <highlight><bold>240</bold></highlight> after performing the increment column state <highlight><bold>240</bold></highlight>. However, if the bit line current still exceeds the predetermined level, subsequent memory cells in the column are sequentially soft programmed as described above until the measured current is less than the predetermined level. Again, each bit line in a block of flash memory cells is measured during the read column state <highlight><bold>240</bold></highlight>, and if necessary, soft programmed as described above. In one embodiment, each memory cell coupled to a bit line is soft programmed a maximum of one time. In another embodiment, the foregoing technique can be used to soft program a single memory cell. </paragraph>
<paragraph id="P-0034" lvl="0"><number>&lsqb;0034&rsqb;</number> This method effectively eliminates overerasures. However, numerous non-overerased memory cells may precede the overerased memory cells in a column. Thus, execution of the distribution adjustment group <highlight><bold>214</bold></highlight> may take a long time, for example, approximately at least two seconds. Such a lengthy process is undesirable in many systems incorporating flash memory devices. Therefore, there is a further need to diminish the performance time of the distribution adjustment group <highlight><bold>214</bold></highlight>. </paragraph>
<paragraph id="P-0035" lvl="0"><number>&lsqb;0035&rsqb;</number> An alternative embodiment of the present invention provides a faster method of soft programming. The alternative method of soft programming differs from the first method in that each memory cell is soft programmed during the soft program row state <highlight><bold>240</bold></highlight> for a relatively shorter predetermined period of time, such as equal to or less than approximately 10, 25 or 50 microseconds, which is substantially less time than required to correct an average overerased memory cell. After each memory cell is soft programmed, the column current is measured. If the column current is below the predetermined level, then the next column is analyzed. However, if the current still exceeds the predetermined level, the subsequent memory cell in the column is soft programmed as described above. If the last memory cell in the column is soft programmed, and the measured current still exceeds the predetermined level, then the foregoing process is repeated such that the first and subsequent memory cells in the column are soft programmed until the measured current is less than the predetermined level, or until each memory cell in the column has been soft programmed a maximum number, for example 10 or 32, of times. If the memory cells in a column have been soft programmed a maximum number of times, and the corresponding measured bit line current still exceeds the predetermined level, then a status register in the memory <highlight><bold>110</bold></highlight> is set and the memory fails soft programming. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> The alternative embodiment of the method of soft programming has the benefit that the overerased cells are soft programmed for a diminished period of time. Thus, the speed of operation of the flash memory is enhanced. Furthermore, the disturbance of non-overerased cells is also diminished. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reviewing the above description. The invention should, therefore, be determined with reference to the appended claims, along with the full scope to which such claims are entitled. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method of erasing a memory cell, comprising the steps of: 
<claim-text>erasing a memory cell; </claim-text>
<claim-text>measuring current in the memory cell; and </claim-text>
<claim-text>if the measured memory cell current approximately exceeds a predetermined level, soft programming the memory cell so if the memory cell is not overerased, the memory cell is undisturbed, wherein the memory cell is soft programmed until the measured memory cell current is less than or equal to the predetermined level. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of soft programming comprises the step of soft programming a memory cell for approximately 100 microseconds. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the predetermined level is 10 microamps. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the step of soft programming comprises the step of applying a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to a memory cell. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method of erasing a memory cell, comprising the steps of: 
<claim-text>erasing a memory cell; </claim-text>
<claim-text>measuring current in the memory cell; </claim-text>
<claim-text>if the measured memory cell current approximately exceeds a predetermined level, soft programming the memory cell so non-overerased memory cells are undisturbed, and until the measured memory cell current is less than or equal to a predetermined level; and </claim-text>
<claim-text>wherein the step of soft programming comprises the step of applying a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to a memory cell. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the step of soft programming comprises the step of soft programming a memory cell for approximately 100 microseconds. </claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method of <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein the predetermined level is 10 microamps. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a distribution adjustment group including: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell while not disturbing a non-overased memory cell; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the memory cell has a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts in the soft program row state. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, further comprising: 
<claim-text>an erase group coupled to the distribution adjustment group; </claim-text>
<claim-text>a preprogram group coupled to the erase group; and </claim-text>
<claim-text>an erase done group coupled to the increment column state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. A memory, comprising: 
<claim-text>a memory cell array including blocks of memory cells; </claim-text>
<claim-text>a command execution logic module; </claim-text>
<claim-text>a state machine, coupled to the command execution logic module, controlling soft programming of a memory cell in the memory cell array; </claim-text>
<claim-text>an X-interface circuit coupled to the state machine; </claim-text>
<claim-text>a Y-interface circuit coupled to the state machine; and </claim-text>
<claim-text>wherein the state machine includes, 
<claim-text>a distribution adjustment group including, 
<claim-text>a read column state; </claim-text>
<claim-text>an increment column state coupled to the read column state; </claim-text>
<claim-text>a soft program row state, in which a non-overerased memory cell is undisturbed, coupled to the read column state; and </claim-text>
<claim-text>an increment row state coupled to the soft program row and read column states. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The memory of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, wherein the memory cell has a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts in the soft program row state. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The memory of <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, further comprising: 
<claim-text>an erase group coupled to the distribution adjustment group; </claim-text>
<claim-text>a preprogram group coupled to the erase group; and </claim-text>
<claim-text>an erase done group coupled to the increment column state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. A memory, comprising: 
<claim-text>a memory cell array including blocks of memory cells; </claim-text>
<claim-text>a command execution logic module; </claim-text>
<claim-text>a state machine, coupled to the command execution logic module, controlling soft programming of a memory cell in the memory cell array; </claim-text>
<claim-text>an X-interface circuit coupled to the state machine; </claim-text>
<claim-text>a Y-interface circuit coupled to the state machine; and </claim-text>
<claim-text>wherein the state machine includes, 
<claim-text>a distribution adjustment group including, 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell while not disturbing a non-overased memory cell; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. The memory of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, wherein the memory cell has a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts in the soft program row state. </claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. The memory of <dependent-claim-reference depends_on="CLM-00011">claim 14</dependent-claim-reference>, further comprising: 
<claim-text>an erase group coupled to the distribution adjustment group; </claim-text>
<claim-text>a preprogram group coupled to the erase group; and </claim-text>
<claim-text>an erase done group coupled to the increment column state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A system comprising, 
<claim-text>a memory controller; and </claim-text>
<claim-text>a memory, coupled to the memory controller, including, 
<claim-text>a memory cell array including blocks of memory cells; </claim-text>
<claim-text>a command execution logic module; </claim-text>
<claim-text>a state machine, coupled to the command execution logic module, for soft programming a memory cell in the memory cell array; </claim-text>
<claim-text>an X-interface circuit coupled to the state machine; </claim-text>
<claim-text>a Y-interface circuit coupled to the state machine; and </claim-text>
</claim-text>
<claim-text>wherein the state machine includes, 
<claim-text>a distribution adjustment group including, 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell while not disturbing a non-overased memory cell; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim-text>
</claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, wherein the memory cell has a gate voltage between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts in the soft program row state. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. The system of <dependent-claim-reference depends_on="CLM-00011">claim 17</dependent-claim-reference>, further comprising: 
<claim-text>an erase group coupled to the distribution adjustment group; </claim-text>
<claim-text>a preprogram group coupled to the erase group; and </claim-text>
<claim-text>an erase done group coupled to the increment column state. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00008">claim 8</dependent-claim-reference>, wherein the soft program state includes a soft programming voltage applied to a control gate, and wherein the soft programming voltage is between a control gate programming voltage and a drain programming voltage to correct the overerased memory cell. </claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column, wherein the read column state includes a state for measuring a first leakage current in a column containing the memory cell; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell while not disturbing a non-overased memory cell if the measured leakage current exceeds a predetermined level; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00022">
<claim-text><highlight><bold>22</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 21</dependent-claim-reference>, wherein the read column state includes a state for measuring a second leakage current in the column after soft programming each memory cell in the column to determine if the second leakage current is below the predetermined level. </claim-text>
</claim>
<claim id="CLM-00023">
<claim-text><highlight><bold>23</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the soft programming state includes a soft programming state that applies appropriate voltages to a gate and a drain of each memory cell for a time period of less than 100 microseconds. </claim-text>
</claim>
<claim id="CLM-00024">
<claim-text><highlight><bold>24</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 22</dependent-claim-reference>, wherein the soft programming state includes a soft programming state that applies a gate voltage of between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to each memory cell. </claim-text>
</claim>
<claim id="CLM-00025">
<claim-text><highlight><bold>25</bold></highlight>. A state machine, comprising: 
<claim-text>a memory cell erase state; </claim-text>
<claim-text>a read column state for ascertaining whether overerased memory cells exist in a column by measuring a first current; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell while not disturbing a non-overased memory cell, the soft programming state including a state for applying a gate voltage of between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to a memory cell for a time period of less than 50 microseconds if the first current exceeds a predetermined level; </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00026">
<claim-text><highlight><bold>26</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the time period comprises approximately 25 microseconds. </claim-text>
</claim>
<claim id="CLM-00027">
<claim-text><highlight><bold>27</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the predetermined level comprises 10 microamps. </claim-text>
</claim>
<claim id="CLM-00028">
<claim-text><highlight><bold>28</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00022">claim 25</dependent-claim-reference>, wherein the time period comprises approximately 10 microseconds. </claim-text>
</claim>
<claim id="CLM-00029">
<claim-text><highlight><bold>29</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell by applying a gate voltage that is between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to the memory cells for a time period of less than 100 microseconds, and by measuring a current of the array column after soft programming each memory cell in the column to determine if the current is below a predetermined level; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00030">
<claim-text><highlight><bold>30</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell by applying a gate voltage that is between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to the memory cells for a time period of less than 50 microseconds, and by measuring a current of the array column after soft programming each memory cell in the column to determine if the current is below a predetermined level; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00031">
<claim-text><highlight><bold>31</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell by applying a gate voltage that is between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to the memory cells for a time period of less than 25 microseconds, and by measuring a current of the array column after soft programming each memory cell in the column to determine if the current is below a predetermined level; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00032">
<claim-text><highlight><bold>32</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell by applying a gate voltage that is between approximately 6 and 7 volts, and a drain voltage of approximately 5 volts to the memory cells for a time period of less than 10 microseconds, and by measuring a current of the array column after soft programming each memory cell in the column to determine if the current is below a predetermined level; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00033">
<claim-text><highlight><bold>33</bold></highlight>. A state machine controlling soft programming of a memory cell, comprising: 
<claim-text>a read column state for ascertaining whether overerased cells exist in a column; </claim-text>
<claim-text>an increment column state, coupled to the read column state, for selecting a next column; </claim-text>
<claim-text>a soft program row state, coupled to the read column state, for correcting an overerased memory cell by applying appropriate voltages to a gate and a drain of the memory cell for a time period of less than 50 microseconds, and applying a soft program gate voltage that is approximately one-half of a program gate voltage applied during a program operation, and a drain voltage of approximately 5 volts to a memory cell; and </claim-text>
<claim-text>an increment row state, coupled to the soft program row and read column states, for selecting a memory cell in a subsequent row. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00034">
<claim-text><highlight><bold>34</bold></highlight>. The state machine of <dependent-claim-reference depends_on="CLM-00033">claim 33</dependent-claim-reference>, wherein the program gate voltage comprises approximately 12 volts.</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>2</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030005184A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030005184A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030005184A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
