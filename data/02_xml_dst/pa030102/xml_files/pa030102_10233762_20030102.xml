<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE patent-application-publication SYSTEM "pap-v16-2002-01-01.dtd" [
<!ENTITY US20030004894A1-20030102-D00000.TIF SYSTEM "US20030004894A1-20030102-D00000.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00001.TIF SYSTEM "US20030004894A1-20030102-D00001.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00002.TIF SYSTEM "US20030004894A1-20030102-D00002.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00003.TIF SYSTEM "US20030004894A1-20030102-D00003.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00004.TIF SYSTEM "US20030004894A1-20030102-D00004.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00005.TIF SYSTEM "US20030004894A1-20030102-D00005.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00006.TIF SYSTEM "US20030004894A1-20030102-D00006.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00007.TIF SYSTEM "US20030004894A1-20030102-D00007.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00008.TIF SYSTEM "US20030004894A1-20030102-D00008.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00009.TIF SYSTEM "US20030004894A1-20030102-D00009.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00010.TIF SYSTEM "US20030004894A1-20030102-D00010.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00011.TIF SYSTEM "US20030004894A1-20030102-D00011.TIF" NDATA TIF>
<!ENTITY US20030004894A1-20030102-D00012.TIF SYSTEM "US20030004894A1-20030102-D00012.TIF" NDATA TIF>
]>
<patent-application-publication>
<subdoc-bibliographic-information>
<document-id>
<doc-number>20030004894</doc-number>
<kind-code>A1</kind-code>
<document-date>20030102</document-date>
</document-id>
<publication-filing-type>new</publication-filing-type>
<domestic-filing-data>
<application-number>
<doc-number>10233762</doc-number>
</application-number>
<application-number-series-code>10</application-number-series-code>
<filing-date>20020903</filing-date>
</domestic-filing-data>
<technical-information>
<classification-ipc>
<classification-ipc-primary>
<ipc>G06F017/60</ipc>
</classification-ipc-primary>
<classification-ipc-edition>07</classification-ipc-edition>
</classification-ipc>
<classification-us>
<classification-us-primary>
<uspc>
<class>705</class>
<subclass>064000</subclass>
</uspc>
</classification-us-primary>
</classification-us>
<title-of-invention>System, method and article of manufacture for secure network electronic payment and credit collection</title-of-invention>
</technical-information>
<continuity-data>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>10233762</doc-number>
<kind-code>A1</kind-code>
<document-date>20020903</document-date>
</document-id>
</child>
<parent>
<document-id>
<doc-number>09314565</doc-number>
<document-date>19990622</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>PENDING</parent-status>
</parent-child>
</continuation-of>
</continuations>
<continuations>
<continuation-of>
<parent-child>
<child>
<document-id>
<doc-number>09314565</doc-number>
<document-date>19990622</document-date>
<country-code>US</country-code>
</document-id>
</child>
<parent>
<document-id>
<doc-number>08639909</doc-number>
<document-date>19960426</document-date>
<country-code>US</country-code>
</document-id>
</parent>
<parent-status>GRANTED</parent-status>
<parent-patent>
<document-id>
<doc-number>5987140</doc-number>
<country-code>US</country-code>
</document-id>
</parent-patent>
</parent-child>
</continuation-of>
</continuations>
</continuity-data>
<inventors>
<first-named-inventor>
<name>
<given-name>Kevin</given-name>
<middle-name>T. B.</middle-name>
<family-name>Rowney</family-name>
</name>
<residence>
<residence-us>
<city>San Francisco</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</first-named-inventor>
<inventor>
<name>
<given-name>Deepak</given-name>
<family-name>Nadig</family-name>
</name>
<residence>
<residence-us>
<city>San Jose</city>
<state>CA</state>
<country-code>US</country-code>
</residence-us>
</residence>
<authority-applicant>INV</authority-applicant>
</inventor>
</inventors>
<correspondence-address>
<name-1>IP Administration</name-1>
<name-2>Legal Department, M/S 35</name-2>
<address>
<address-1>HEWLETT-PACKARD COMPANY</address-1>
<address-2>P.O. Box 272400</address-2>
<city>Fort Collins</city>
<state>CO</state>
<postalcode>80527-2400</postalcode>
<country>
<country-code>US</country-code>
</country>
</address>
</correspondence-address>
</subdoc-bibliographic-information>
<subdoc-abstract>
<paragraph id="A-0001" lvl="0">Secure transmission of data is provided between a plurality of computer systems over a public communication system, such as the Internet. Secure transmission of data is provided from a customer computer system to a merchant computer system, and for the further secure transmission of data from the merchant computer system to a payment gateway computer system. The payment gateway system evaluates the information and returns authorization or denial of credit via a secure transmission to the merchant which is communicated to the customer by the merchant. </paragraph>
</subdoc-abstract>
<subdoc-description>
<summary-of-invention>
<section>
<heading lvl="1">FIELD OF THE INVENTION </heading>
<paragraph id="P-0001" lvl="0"><number>&lsqb;0001&rsqb;</number> The present invention relates to the electronic payment in exchange for goods and services purchased over a communication network, and more specifically, and more particularly, to a system, method and article of manufacture for securely transmitting payment information from a customer to a merchant to a payment gateway and returning appropriate, secure authorization to the merchant and the customer. </paragraph>
</section>
<section>
<heading lvl="1">BACKGROUND OF THE INVENTION </heading>
<paragraph id="P-0002" lvl="0"><number>&lsqb;0002&rsqb;</number> It is desirable for a computer operated under the control of a merchant to obtain information offered by a customer and transmitted by a computer operating under the control of the customer over a publicly accessible packet-switched network (e.g., the Internet) to the computer operating under the control of the merchant, without risking the exposure of the information to interception by third parties that have access to the network, and to assure that the information is from an authentic source. It is further desirable to have the ability for the merchant to transmit information, including a subset of the information provided by the customer, over such a network to a payment gateway computer system that is authorized, by a bank or other financial institution that has the responsibility of providing payment on behalf of the customer, to authorize a commercial transaction on behalf of such a financial institution, without the risk of exposing that information to interception by third parties. Such institutions include, for example, financial institutions offering credit or debit card services. </paragraph>
<paragraph id="P-0003" lvl="0"><number>&lsqb;0003&rsqb;</number> One such attempt to provide such a secure transmission channel is a secure payment technology such as Secure Electronic Transaction (hereinafter &ldquo;SET&rdquo;), jointly developed by the Visa and MasterCard card associations, and described in Visa and MasterCard&apos;s <highlight><italic>Secure Electronic Transaction (SET) Specification</italic></highlight>, Feb. 23, 1996, hereby incorporated by reference. Other such secure payment technologies include Secure Transaction Technology &ldquo;STT&rdquo;), Secure Electronic Payments Protocol (&ldquo;SEPP&rdquo;), Internet Keyed Payments (&ldquo;iKP&rdquo;), Net Trust, and Cybercash Credit Payment Protocol. One of ordinary skill in the art will readily comprehend that any of the secure payment technologies can be substituted for the SET protocol without undue experimentation. Such secure payment technologies require the customer to operate software that is compliant with the secure payment technology, interacting with third-party certification authorities, thereby allowing the customer to transmit encoded information to a merchant, some of which may be decoded by the merchant, and some which can be decoded only by a payment gateway specified by the customer. A drawback to the secure payment technology approach is that it requires deployment of special-purpose software compliant with the particular secure payment technology to the customer, thereby limiting user acceptance of the secure payment technology to those customers willing to install that software. Customers are generally reluctant to install such specialized software in the absence of a general acceptance of merchant software and payment gateway software that incorporate the corresponding secure payment technology with which to interact. Similarly, merchants and payment gateways are reluctant to implement a secure payment technology in the absence of an installed customer base that is available to use that secure payment technology. This presents a &ldquo;chicken-and-the-egg&rdquo; problem in that no particular component of a secure payment technology is likely to achieve general acceptance until the other components also achieve general acceptance. </paragraph>
<paragraph id="P-0004" lvl="0"><number>&lsqb;0004&rsqb;</number> Another such attempt to provide such a secure transmission channel is a general-purpose secure communication protocol such as Netscape, Inc.&apos;s Secure Sockets Layer (hereinafter &ldquo;SSL&rdquo;), as described in Freier, Karlton &amp; Kocher (hereinafter &ldquo;Freier&rdquo;), <highlight><italic>The SSL Protocol Version </italic></highlight>3.0, March 1996, and hereby incorporated by reference. SSL provides a means for secure transmission between two computers. SSL has the advantage that it does not require special-purpose software to be installed on the customer&apos;s computer because it is already incorporated into widely available software that many people utilize as their standard Internet access medium, and does not require that the customer interact with any third-party certification authority. Instead, the support for SSL may be incorporated into software already in use by the customer, e.g., the Netscape Navigator World Wide Web browsing tool. However, although a computer on an SSL connection may initiate a second SSL connection to another computer, a drawback to the SSL approach is each SSL connection supports only a two-computer connection. Therefore, SSL does not provide a mechanism for transmitting encoded information to a merchant for retransmission to a payment gateway such that a subset of the information is readable to the payment gateway but not to the merchant. Although SSL allows for robustly secure two-party data transmission, it does not meet the ultimate need of the electronic commerce market for robustly secure three-party data transmission. Other examples of general-purpose secure communication protocols include Private Communications Technology (&ldquo;PCT&rdquo;) from Microsoft, Inc., Secure Hyper-Text Transport Protocol (&ldquo;SHTTP&rdquo;) from Theresa Systems, Shen, Kerberos, Photuris, Pretty Good Privacy (&ldquo;PGP&rdquo;) and Ipv6 which meets the IPSEC criteria. One of ordinary skill in the art will readily comprehend that any of the general-purpose secure communication protocols can be substituted for the SSL transmission protocol without undue experimentation. </paragraph>
</section>
<section>
<heading lvl="1">OBJECTS OF THE INVENTION </heading>
<paragraph id="P-0005" lvl="0"><number>&lsqb;0005&rsqb;</number> It is desirable to provide a hybrid approach that encourages the deployment of a three-party secure channel such as SET by payment gateways in the absence of customer acceptance, thereby providing customers with an incentive to install SET-compliant software on their computer systems. It is further desirable to provide a means by which a merchant may communicate with a customer using a readily deployed secure channel such SSL or another general-purpose secure communication protocol, and communicate with a payment gateway using a modified SET-like protocol that is not dependent upon customer certification. </paragraph>
</section>
<section>
<heading lvl="1">SUMMARY OF THE INVENTION </heading>
<paragraph id="P-0006" lvl="0"><number>&lsqb;0006&rsqb;</number> According to a broad aspect of a preferred embodiment of the invention, secure transmission of data is provided between a plurality of computer systems over a public communication system, such as the Internet. Secure transmission of data is provided from a customer computer system to a merchant computer system, and for the further secure transmission of data from the merchant computer system to a payment gateway computer system. The payment gateway system evaluates the information and returns authorization or denial of credit via a secure transmission to the merchant which is communicated to the customer by the merchant.</paragraph>
</section>
</summary-of-invention>
<brief-description-of-drawings>
<section>
<heading lvl="1">DESCRIPTION OF THE DRAWINGS </heading>
<paragraph id="P-0007" lvl="0"><number>&lsqb;0007&rsqb;</number> The foregoing and other objects, aspects and advantages are better understood from the following detailed description of a preferred embodiment of the invention with reference to the drawings, in which: </paragraph>
<paragraph id="P-0008" lvl="0"><number>&lsqb;0008&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> is a block diagram of a representative hardware environment in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0009" lvl="0"><number>&lsqb;0009&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> depicts an overview in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0010" lvl="0"><number>&lsqb;0010&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a more detailed view of a customer computer system in communication with merchant system under the Secure Sockets Layer protocol in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0011" lvl="0"><number>&lsqb;0011&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts an overview of the method of securely supplying payment information to a payment gateway in order to obtain payment authorization in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0012" lvl="0"><number>&lsqb;0012&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts the detailed steps of generating and transmitting a payment authorization request in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0013" lvl="0"><number>&lsqb;0013&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 5A through 5F</cross-reference> depict views of the payment authorization request and its component parts in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0014" lvl="0"><number>&lsqb;0014&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 6A and 6B</cross-reference> depict the detailed steps of processing a payment authorization request and generating and transmitting a payment authorization request response in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0015" lvl="0"><number>&lsqb;0015&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 7A through 7J</cross-reference> depict views of the payment authorization response and its component parts in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0016" lvl="0"><number>&lsqb;0016&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts the detailed steps of processing a payment authorization response in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0017" lvl="0"><number>&lsqb;0017&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts an overview of the method of securely supplying payment capture information to a payment gateway in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0018" lvl="0"><number>&lsqb;0018&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts the detailed steps of generating and transmitting a payment capture request in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0019" lvl="0"><number>&lsqb;0019&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 11A through 11F</cross-reference> depict views of the payment capture request and its component parts in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0020" lvl="0"><number>&lsqb;0020&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 12A and 12B</cross-reference> depict the detailed steps of processing a payment capture request and generating and transmitting a payment capture request response in accordance with a preferred embodiment; </paragraph>
<paragraph id="P-0021" lvl="0"><number>&lsqb;0021&rsqb;</number> <cross-reference target="DRAWINGS">FIGS. 13A through 13F</cross-reference> depict views of the payment capture response and its component parts in accordance with a preferred embodiment; and </paragraph>
<paragraph id="P-0022" lvl="0"><number>&lsqb;0022&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts the detailed steps of processing a payment capture response in accordance with a preferred embodiment. </paragraph>
</section>
</brief-description-of-drawings>
<detailed-description>
<section>
<heading lvl="1">DETAILED DESCRIPTION </heading>
<paragraph id="P-0023" lvl="0"><number>&lsqb;0023&rsqb;</number> A preferred embodiment of a system in accordance with the present invention is preferably practiced in the context of a personal computer such as the IBM PS/2, Apple Macintosh computer or UNIX based workstation. A representative hardware environment is depicted in <cross-reference target="DRAWINGS">FIG. 1</cross-reference>A, which illustrates a typical hardware configuration of a workstation in accordance with a preferred embodiment having a central processing unit <highlight><bold>10</bold></highlight>, such as a microprocessor, and a number of other units interconnected via a system bus <highlight><bold>12</bold></highlight>. The workstation shown in <cross-reference target="DRAWINGS">FIG. 1A</cross-reference> includes a Random Access Memory (RAM) <highlight><bold>14</bold></highlight>, Read Only Memory (ROM) <highlight><bold>16</bold></highlight>, an I/O adapter <highlight><bold>18</bold></highlight> for connecting peripheral devices such as disk storage units <highlight><bold>20</bold></highlight> to the bus <highlight><bold>12</bold></highlight>, a user interface adapter <highlight><bold>22</bold></highlight> for connecting a keyboard <highlight><bold>24</bold></highlight>, a mouse <highlight><bold>26</bold></highlight>, a speaker <highlight><bold>28</bold></highlight>, a microphone <highlight><bold>32</bold></highlight>, and/or other user interface devices such as a touch screen (not shown) to the bus <highlight><bold>12</bold></highlight>, communication adapter <highlight><bold>34</bold></highlight> for connecting the workstation to a communication network (e.g., a data processing network) and a display adapter <highlight><bold>36</bold></highlight> for connecting the bus <highlight><bold>12</bold></highlight> to a display device <highlight><bold>38</bold></highlight>. The workstation typically has resident thereon an operating system such as the Microsoft Windows Operating System (OS), the IBM OS/2 operating system, the MAC OS, or UNIX operating system. Those skilled in the art will appreciate that the present invention may also be implemented on platforms and operating systems other than those mentioned. </paragraph>
<paragraph id="P-0024" lvl="0"><number>&lsqb;0024&rsqb;</number> A preferred embodiment is written using JAVA, C, and the C&plus;&plus; language and utilizes object oriented programming methodology. Object oriented programming (OOP) has become increasingly used to develop complex applications. As OOP moves toward the mainstream of software design and development, various software solutions will need to be adapted to make use of the benefits of OOP. A need exists for these principles of OOP to be applied to a messaging interface of an electronic messaging system such that a set of OOP classes and objects for the messaging interface can be provided. </paragraph>
<paragraph id="P-0025" lvl="0"><number>&lsqb;0025&rsqb;</number> OOP is a process of developing computer software using objects, including the steps of analyzing the problem, designing the system, and constructing the program. An object is a software package that contains both data and a collection of related structures and procedures. Since it contains both data and a collection of structures and procedures, it can be visualized as a self-sufficient component that does not require other additional structures, procedures or data to perform its specific task. OOP, therefore, views a computer program as a collection of largely autonomous components, called objects, each of which is responsible for a specific task. This concept of packaging data, structures, and procedures together in one component or module is called encapsulation. </paragraph>
<paragraph id="P-0026" lvl="0"><number>&lsqb;0026&rsqb;</number> In general, OOP components are reusable software modules which present an interface that conforms to an object model and which are accessed at run-time through a component integration architecture. A component integration architecture is a set of architecture mechanisms which allow software modules in different process spaces to utilize each others capabilities or functions. This is generally done by assuming a common component object model on which to build the architecture. </paragraph>
<paragraph id="P-0027" lvl="0"><number>&lsqb;0027&rsqb;</number> It is worthwhile to differentiate between an object and a class of objects at this point. An object is a single instance of the class of objects, which is often just called a class. A class of objects can be viewed as a blueprint, from which many objects can be formed. </paragraph>
<paragraph id="P-0028" lvl="0"><number>&lsqb;0028&rsqb;</number> OOP allows the programmer to create an object that is a part of another object. For example, the object representing a piston engine is said to have a composition-relationship with the object representing a piston. In reality, a piston engine comprises a piston, valves and many other components; the fact that a piston is an element of a piston engine can be logically and semantically represented in OOP by two objects. </paragraph>
<paragraph id="P-0029" lvl="0"><number>&lsqb;0029&rsqb;</number> OOP also allows creation of an object that &ldquo;depends from&rdquo; another object. If there are two objects, one representing a piston engine and the other representing a piston engine wherein the piston is made of ceramic, then the relationship between the two objects is not that of composition. A ceramic piston engine does not make up a piston engine. Rather it is merely one kind of piston engine that has one more limitation than the piston engine; its piston is made of ceramic. In this case, the object representing the ceramic piston engine is called a derived object, and it inherits all of the aspects of the object representing the piston engine and adds further limitation or detail to it. The object representing the ceramic piston engine &ldquo;depends from&rdquo; the object representing the piston engine. The relationship between these objects is called inheritance. </paragraph>
<paragraph id="P-0030" lvl="0"><number>&lsqb;0030&rsqb;</number> When the object or class representing the ceramic piston engine inherits all of the aspects of the objects representing the piston engine, it inherits the thermal characteristics of a standard piston defined in the piston engine class. However, the ceramic piston engine object overrides these ceramic specific thermal characteristics, which are typically different from those associated with a metal piston. It skips over the original and uses new functions related to ceramic pistons. Different kinds of piston engines will have different characteristics, but may have the same underlying functions associated with it (e.g., how many pistons in the engine, ignition sequences, lubrication, etc.). To access each of these functions in any piston engine object, a programmer would call the same functions with the same names, but each type of piston engine may have different/overriding implementations of functions behind the same name. This ability to hide different implementations of a function behind the same name is called polymorphism and it greatly simplifies communication among objects. </paragraph>
<paragraph id="P-0031" lvl="0"><number>&lsqb;0031&rsqb;</number> With the concepts of composition-relationship, encapsulation, inheritance and polymorphism, an object can represent just about anything in the real world. In fact, our logical perception of the reality is the only limit on determining the kinds of things that can become objects in object-oriented software. Some typical categories are as follows: </paragraph>
<paragraph id="P-0032" lvl="2"><number>&lsqb;0032&rsqb;</number> Objects can represent physical objects, such as automobiles in a traffic-flow simulation, electrical components in a circuit-design program, countries in an economics model, or aircraft in an air-traffic-control system. </paragraph>
<paragraph id="P-0033" lvl="2"><number>&lsqb;0033&rsqb;</number> Objects can represent elements of the computer-user environment such as windows, menus or graphics objects. </paragraph>
<paragraph id="P-0034" lvl="2"><number>&lsqb;0034&rsqb;</number> An object can represent an inventory, such as a personnel file or a table of the latitudes and longitudes of cities. </paragraph>
<paragraph id="P-0035" lvl="2"><number>&lsqb;0035&rsqb;</number> An object can represent user-defined data types such as time, angles, and complex numbers, or points on the plane. </paragraph>
<paragraph id="P-0036" lvl="0"><number>&lsqb;0036&rsqb;</number> With this enormous capability of an object to represent just about any logically separable matters, OOP allows the software developer to design and implement a computer program that is a model of some aspects of reality, whether that reality is a physical entity, a process, a system, or a composition of matter. Since the object can represent anything, the software developer can create an object which can be used as a component in a larger software project in the future. </paragraph>
<paragraph id="P-0037" lvl="0"><number>&lsqb;0037&rsqb;</number> If 90% of a new OOP software program consists of proven, existing components made from preexisting reusable objects, then only the remaining 10% of the new software project has to be written and tested from scratch. Since 90% already came from an inventory of extensively tested reusable objects, the potential domain from which an error could originate is 10% of the program. As a result, OOP enables software developers to build objects out of other, previously built, objects. </paragraph>
<paragraph id="P-0038" lvl="0"><number>&lsqb;0038&rsqb;</number> This process closely resembles complex machinery being built out of assemblies and sub-assemblies. OOP technology, therefore, makes software engineering more like hardware engineering in that software is built from existing components, which are available to the developer as objects. All this adds up to an improved quality of the software as well as an increased speed of its development. </paragraph>
<paragraph id="P-0039" lvl="0"><number>&lsqb;0039&rsqb;</number> Programming languages are beginning to fully support the OOP principles, such as encapsulation, inheritance, polymorphism, and composition-relationship. With the advent of the C&plus;&plus; language, many commercial software developers have embraced OOP. C&plus;&plus; is an OOP language that offers a fast, machine-executable code. Furthermore, C&plus;&plus; is suitable for both commercial-application and systems-programming projects. For now, C&plus;&plus; appears to be the most popular choice among many OOP programmers, but there is a host of other OOP languages, such as Smalltalk, common lisp object system (CLOS), and Eiffel. Additionally, OOP capabilities are being added to more traditional popular computer programming languages such as Pascal. </paragraph>
<paragraph id="P-0040" lvl="0"><number>&lsqb;0040&rsqb;</number> The benefits of object classes can be summarized, as follows: </paragraph>
<paragraph id="P-0041" lvl="2"><number>&lsqb;0041&rsqb;</number> Objects and their corresponding classes break down complex programming problems into many smaller, simpler problems. </paragraph>
<paragraph id="P-0042" lvl="2"><number>&lsqb;0042&rsqb;</number> Encapsulation enforces data abstraction through the organization of data into small, independent objects that can communicate with each other. Encapsulation protects the data in an object from accidental damage, but allows other objects to interact with that data by calling the object&apos;s member functions and structures. </paragraph>
<paragraph id="P-0043" lvl="2"><number>&lsqb;0043&rsqb;</number> Subclassing and inheritance make it possible to extend and modify objects through deriving new kinds of objects from the standard classes available in the system. Thus, new capabilities are created without having to start from scratch. </paragraph>
<paragraph id="P-0044" lvl="2"><number>&lsqb;0044&rsqb;</number> Polymorphism and multiple inheritance make it possible for different programmers to mix and match characteristics of many different classes and create specialized objects that can still work with related objects in predictable ways. </paragraph>
<paragraph id="P-0045" lvl="2"><number>&lsqb;0045&rsqb;</number> Class hierarchies and containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them. </paragraph>
<paragraph id="P-0046" lvl="2"><number>&lsqb;0046&rsqb;</number> Libraries of reusable classes are useful in many situations, but they also have some limitations. For example: </paragraph>
<paragraph id="P-0047" lvl="2"><number>&lsqb;0047&rsqb;</number> Complexity. In a complex system, the class hierarchies for related classes can become extremely confusing, with many dozens or even hundreds of classes. </paragraph>
<paragraph id="P-0048" lvl="2"><number>&lsqb;0048&rsqb;</number> Flow of control. A program written with the aid of class libraries is still responsible for the flow of control (i.e., it must control the interactions among all the objects created from a particular library). The programmer has to decide which functions to call at what times for which kinds of objects. </paragraph>
<paragraph id="P-0049" lvl="2"><number>&lsqb;0049&rsqb;</number> Duplication of effort. Although class libraries allow programmers to use and reuse many small pieces of code, each programmer puts those pieces together in a different way. Two different programmers can use the same set of class libraries to write two programs that do exactly the same thing but whose internal structure (i.e., design) may be quite different, depending on hundreds of small decisions each programmer makes along the way. Inevitably, similar pieces of code end up doing similar things in slightly different ways and do not work as well together as they should. </paragraph>
<paragraph id="P-0050" lvl="0"><number>&lsqb;0050&rsqb;</number> Class libraries are very flexible. As programs grow more complex, more programmers are forced to reinvent basic solutions to basic problems over and over again. A relatively new extension of the class library concept is to have a framework of class libraries. This framework is more complex and consists of significant collections of collaborating classes that capture both the small scale patterns and major mechanisms that implement the common requirements and design in a specific application domain. They were first developed to free application programmers from the chores involved in displaying menus, windows, dialog boxes, and other standard user interface elements for personal computers. </paragraph>
<paragraph id="P-0051" lvl="0"><number>&lsqb;0051&rsqb;</number> Frameworks also represent a change in the way programmers think about the interaction between the code they write and code written by others. In the early days of procedural programming, the programmer called libraries provided by the operating system to perform certain tasks, but basically the program executed down the page from start to finish, and the programmer was solely responsible for the flow of control. This was appropriate for printing out paychecks, calculating a mathematical table, or solving other problems with a program that executed in just one way. </paragraph>
<paragraph id="P-0052" lvl="0"><number>&lsqb;0052&rsqb;</number> The development of graphical user interfaces began to turn this procedural programming arrangement inside out. These interfaces allow the user, rather than program logic, to drive the program and decide when certain actions should be performed. Today, most personal computer software accomplishes this by means of an event loop which monitors the mouse, keyboard, and other sources of external events and calls the appropriate parts of the programmer&apos;s code according to actions that the user performs. The programmer no longer determines the order in which events occur. Instead, a program is divided into separate pieces that are called at unpredictable times and in an unpredictable order. By relinquishing control in this way to users, the developer creates a program that is much easier to use. Nevertheless, individual pieces of the program written by the developer still call libraries provided by the operating system to accomplish certain tasks, and the programmer must still determine the flow of control within each piece after it&apos;s called by the event loop. Application code still &ldquo;sits on top of&rdquo; the system. </paragraph>
<paragraph id="P-0053" lvl="0"><number>&lsqb;0053&rsqb;</number> Even event loop programs require programmers to write a lot of code that should not need to be written separately for every application. The concept of an application framework carries the event loop concept further. Instead of dealing with all the nuts and bolts of constructing basic menus, windows, and dialog boxes and then making these things all work together, programmers using application frameworks start with working application code and basic user interface elements in place. Subsequently, they build from there by replacing some of the generic capabilities of the framework with the specific capabilities of the intended application. </paragraph>
<paragraph id="P-0054" lvl="0"><number>&lsqb;0054&rsqb;</number> Application frameworks reduce the total amount of code that a programmer has to write from scratch. However, because the framework is really a generic application that displays windows, supports copy and paste, and so on, the programmer can also relinquish control to a greater degree than event loop programs permit. The framework code takes care of almost all event handling and flow of control, and the programmer&apos;s code is called only when the framework needs it (e.g., to create or manipulate a proprietary data structure). </paragraph>
<paragraph id="P-0055" lvl="0"><number>&lsqb;0055&rsqb;</number> A programmer writing a framework program not only relinquishes control to the user (as is also true for event loop programs), but also relinquishes the detailed flow of control within the program to the framework. This approach allows the creation of more complex systems that work together in interesting ways, as opposed to isolated programs, having custom code, being created over and over again for similar problems. </paragraph>
<paragraph id="P-0056" lvl="0"><number>&lsqb;0056&rsqb;</number> Thus, as is explained above, a framework basically is a collection of cooperating classes that make up a reusable design solution for a given problem domain. It typically includes objects that provide default behavior (e.g., for menus and windows), and programmers use it by inheriting some of that default behavior and overriding other behavior so that the framework calls application code at the appropriate times. </paragraph>
<paragraph id="P-0057" lvl="0"><number>&lsqb;0057&rsqb;</number> There are three main differences between frameworks and class libraries: </paragraph>
<paragraph id="P-0058" lvl="2"><number>&lsqb;0058&rsqb;</number> Behavior versus protocol. Class libraries are essentially collections of behaviors that you can call when you want those individual behaviors in your program. A framework, on the other hand, provides not only behavior but also the protocol or set of rules that govern the ways in which behaviors can be combined, including rules for what a programmer is supposed to provide versus what the framework provides. </paragraph>
<paragraph id="P-0059" lvl="2"><number>&lsqb;0059&rsqb;</number> Call versus override. With a class library, the code the programmer instantiates objects and calls their member functions. It&apos;s possible to instantiate and call objects in the same way with a framework (i.e., to treat the framework as a class library), but to take full advantage of a framework&apos;s reusable design, a programmer typically writes code that overrides and is called by the framework. The framework manages the flow of control among its objects. Writing a program involves dividing responsibilities among the various pieces of software that are called by the framework rather than specifying how the different pieces should work together. </paragraph>
<paragraph id="P-0060" lvl="0"><number>&lsqb;0060&rsqb;</number> Implementation versus design. With class libraries, programmers reuse only implementations, whereas with frameworks, they reuse design. A framework embodies the way a family of related programs or pieces of software work. It represents a generic design solution that can be adapted to a variety of specific problems in a given domain. For example, a single framework can embody the way a user interface works, even though two different user interfaces created with the same framework might solve quite different interface problems. </paragraph>
<paragraph id="P-0061" lvl="0"><number>&lsqb;0061&rsqb;</number> Thus, through the development of frameworks for solutions to various problems and programming tasks, significant reductions in the design and development effort for software can be achieved. A preferred embodiment of the invention utilizes HyperText Markup Language (HTML) to implement documents on the Internet together with a general-purpose secure communication protocol for a transport medium between the client and the merchant. HTML is a simple data format used to create hypertext documents that are portable from one platform to another. HTML documents are SGML documents with generic semantics that are appropriate for representing information from a wide range of domains. HTML has been in use by the World-Wide Web global information initiative since 1990. HTML is an application of ISO Standard 8879:1986 Information Processing Text and Office Systems; Standard Generalized Markup Language (SGML). </paragraph>
<paragraph id="P-0062" lvl="0"><number>&lsqb;0062&rsqb;</number> To date, Web development tools have been limited in their ability to create dynamic Web applications which span from client to server and interoperate with existing computing resources. Until recently, HTML has been the dominant technology used in development of Web-based solutions. However, HTML has proven to be inadequate in the following areas: </paragraph>
<paragraph id="P-0063" lvl="2"><number>&lsqb;0063&rsqb;</number> Poor performance; </paragraph>
<paragraph id="P-0064" lvl="2"><number>&lsqb;0064&rsqb;</number> Restricted user interface capabilities; </paragraph>
<paragraph id="P-0065" lvl="2"><number>&lsqb;0065&rsqb;</number> Can only produce static Web pages; </paragraph>
<paragraph id="P-0066" lvl="2"><number>&lsqb;0066&rsqb;</number> Lack of interoperability with existing applications and data; and </paragraph>
<paragraph id="P-0067" lvl="2"><number>&lsqb;0067&rsqb;</number> Inability to scale. </paragraph>
<paragraph id="P-0068" lvl="7"><number>&lsqb;0068&rsqb;</number> Sun Microsystem&apos;s Java language solves many of the client-side problems by: </paragraph>
<paragraph id="P-0069" lvl="2"><number>&lsqb;0069&rsqb;</number> Improving performance on the client side; </paragraph>
<paragraph id="P-0070" lvl="2"><number>&lsqb;0070&rsqb;</number> Enabling the creation of dynamic, real-time Web applications; and </paragraph>
<paragraph id="P-0071" lvl="2"><number>&lsqb;0071&rsqb;</number> Providing the ability to create a wide variety of user interface components. </paragraph>
<paragraph id="P-0072" lvl="0"><number>&lsqb;0072&rsqb;</number> With Java, developers can create robust User Interface (UI) components. Custom &ldquo;widgets&rdquo; (e.g. real-time stock tickers, animated icons, etc.) can be created, and client-side performance is improved. Unlike HTML, Java supports the notion of client-side validation, offloading appropriate processing onto the client for improved performance. Dynamic, real-time Web pages can be created. Using the above-mentioned custom UI components, dynamic Web pages can also be created. Sun&apos;s Java language has emerged as an industry-recognized language for &ldquo;programming the Internet.&rdquo; Sun defines Java as: &ldquo;a simple, object-oriented, distributed, interpreted, robust, secure, architecture-neutral, portable, high-performance, multithreaded, dynamic, buzzword-compliant, general-purpose programming language. Java supports programming for the Internet in the form of platform-independent Java applets.&rdquo; Java applets are small, specialized applications that comply with Sun&apos;s Java Application Programming Interface (API) allowing developers to add &ldquo;interactive content&rdquo; to Web documents (e.g. simple animations, page adornments, basic games, etc.). Applets execute within a Java-compatible browser (e.g. Netscape Navigator) by copying code from the server to client. From a language standpoint, Java&apos;s core feature set is based on C&plus;&plus;. Sun&apos;s Java literature states that Java is basically &ldquo;C&plus;&plus;, with extensions from Objective C for more dynamic method resolution&rdquo;. </paragraph>
<paragraph id="P-0073" lvl="0"><number>&lsqb;0073&rsqb;</number> Another technology that provides similar function to JAVA is provided by Microsoft and ActiveX Technologies, to give developers and Web designers wherewithal to build dynamic content for the Internet and personal computers. ActiveX includes tools for developing animation, 3-D virtual reality, video and other multimedia content. The tools use Internet standards, work on multiple platforms, and are being supported by over 100 companies. The group&apos;s building blocks are called ActiveX Controls, small, fast components that enable developers to embed parts of software in hypertext markup language (HTML) pages. ActiveX Controls work with a variety of programming languages including Microsoft Visual C&plus;&plus;, Borland Delphi, Microsoft Visual Basic programming system and, in the future, Microsoft&apos;s development tool for Java, code named &ldquo;Jakarta.&rdquo; ActiveX Technologies also includes ActiveX Server Framework, allowing developers to create server applications. One of ordinary skill in the art will readily recognize that ActiveX could be substituted for JAVA without undue experimentation to practice the invention. </paragraph>
<paragraph id="P-0074" lvl="0"><number>&lsqb;0074&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 1B</cross-reference> depicts an overview of the present invention. Customer computer system <highlight><bold>120</bold></highlight> is in communication with merchant computer system <highlight><bold>130</bold></highlight>. The customer-merchant session <highlight><bold>150</bold></highlight> operates under a general-purpose secure communication protocol such as the SSL protocol. Merchant computer system <highlight><bold>130</bold></highlight> is additionally in communication with payment gateway computer system <highlight><bold>140</bold></highlight>. A payment gateway is a system that provides electronic commerce services in support of a bank or other financial institution, and that interfaces to the financial institution to support the authorization and capture of transactions. The customer-institution session <highlight><bold>170</bold></highlight> operates under a variant of a secure payment technology such as the SET protocol, as described herein, referred to as Merchant-Originated Secure Electronic Transactions (&ldquo;MOSET&rdquo;), as is more fully described herein. </paragraph>
<paragraph id="P-0075" lvl="7"><number>&lsqb;0075&rsqb;</number> Customer-to-Merchant Communication </paragraph>
<paragraph id="P-0076" lvl="0"><number>&lsqb;0076&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 2</cross-reference> depicts a more detailed view of customer computer system <highlight><bold>120</bold></highlight> in communication with merchant system <highlight><bold>130</bold></highlight> using customer-merchant session <highlight><bold>150</bold></highlight> operating under the SSL protocol as documented in Freier and incorporated by reference. </paragraph>
<paragraph id="P-0077" lvl="0"><number>&lsqb;0077&rsqb;</number> Customer computer system <highlight><bold>120</bold></highlight> initiates communication with merchant computer system <highlight><bold>130</bold></highlight> using any well-known access protocol, e.g., Transmission Control Protocol/Internet Protocol (&ldquo;TCP/IP&rdquo;). In this implementation, customer computer system <highlight><bold>120</bold></highlight> acts as a client and merchant computer system <highlight><bold>130</bold></highlight> acts as a server. Customer computer system <highlight><bold>120</bold></highlight> initiates communication by sending &ldquo;client hello&rdquo; message <highlight><bold>210</bold></highlight> to the merchant computer system <highlight><bold>130</bold></highlight>. When a client first connects to a server it is required to send the client hello message <highlight><bold>210</bold></highlight> as its first message. The client can also send a client hello message <highlight><bold>210</bold></highlight> in response to a hello request on its own initiative in order to renegotiate the security parameters in an existing connection. The client hello message includes a random structure, which is used later in the protocol. Specifically, the random structure includes the current time and date in standard UNIX 32-bit format according to the sender&apos;s internal clock and twenty-eight bytes of data generated by a secure random number generator. The client hello message <highlight><bold>210</bold></highlight> further includes a variable length session identifier. If not empty, the session identifier value identifies a session between the same client and server whose security parameters the client wishes to reuse. The session identifier may be from an earlier connection, the current connection, or another currently active connection. It is useful to specify the current connection if the client only wishes to update the random structures and derived values of a connection. It is useful to specify another currently active connection if the client wishes to establish several simultaneous independent secure connections to the same server without repeating the full handshake protocol. Client hello message <highlight><bold>210</bold></highlight> further includes an indicator of the cryptographic algorithms supported by the client in order of the client&apos;s preference, ordered according to client preference. </paragraph>
<paragraph id="P-0078" lvl="0"><number>&lsqb;0078&rsqb;</number> In response to client hello message <highlight><bold>210</bold></highlight>, if merchant computer system <highlight><bold>130</bold></highlight> wishes to correspond with customer computer system <highlight><bold>120</bold></highlight>, it responds with server hello message <highlight><bold>215</bold></highlight>. If merchant computer system <highlight><bold>130</bold></highlight> does not wish to communicate with customer computer system <highlight><bold>120</bold></highlight>, it responds with a message, not shown, indicating refusal to communicate. </paragraph>
<paragraph id="P-0079" lvl="0"><number>&lsqb;0079&rsqb;</number> Server hello message <highlight><bold>215</bold></highlight> includes a random structure, which is used later in the protocol. The random structure in server hello message <highlight><bold>215</bold></highlight> is in the same format as, but has contents independent of, the random structure in client hello message <highlight><bold>210</bold></highlight>. Specifically, the random structure includes the current time and date in standard UNIX 32-bit format according to the sender&apos;s internal clock and twenty-eight bytes of data generated by a secure random number generator. Server hello message <highlight><bold>215</bold></highlight> further includes a variable length session identifier. The session identifier value identifies a new or existing session between the same client and server. Server hello message <highlight><bold>215</bold></highlight> further includes an indicator of the cryptographic algorithms selected from among the algorithms specified by client hello message <highlight><bold>210</bold></highlight>, which will be used in further encrypted communications. </paragraph>
<paragraph id="P-0080" lvl="0"><number>&lsqb;0080&rsqb;</number> Optionally, Merchant computer system <highlight><bold>130</bold></highlight> transmits a server certificate <highlight><bold>220</bold></highlight>. If transmitted, server certificate <highlight><bold>130</bold></highlight> enables customer computer system <highlight><bold>120</bold></highlight> to authenticate the identity of merchant computer system <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0081" lvl="0"><number>&lsqb;0081&rsqb;</number> If merchant computer system <highlight><bold>130</bold></highlight> does not transmit a server certificate <highlight><bold>220</bold></highlight>, or if server certificate <highlight><bold>220</bold></highlight> is suitable only for authentication, it may optionally transmit a server key exchange message <highlight><bold>225</bold></highlight>. Server key exchange message <highlight><bold>225</bold></highlight> identifies a key that may be used by customer computer system <highlight><bold>120</bold></highlight> to decrypt further messages sent by merchant computer system <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0082" lvl="0"><number>&lsqb;0082&rsqb;</number> After transmitting server hello message <highlight><bold>215</bold></highlight>, and optionally transmitting server certificate <highlight><bold>220</bold></highlight> or server key exchange message <highlight><bold>225</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> transmits a server hello done message <highlight><bold>230</bold></highlight> and waits for a further response from customer computer system <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0083" lvl="0"><number>&lsqb;0083&rsqb;</number> Customer computer system <highlight><bold>120</bold></highlight> optionally transmits client certificate <highlight><bold>240</bold></highlight> to merchant computer system <highlight><bold>130</bold></highlight>. If transmitted, client certificate <highlight><bold>240</bold></highlight> enables merchant computer system <highlight><bold>130</bold></highlight> to authenticate the identity of customer computer system <highlight><bold>120</bold></highlight>. Alternatively, customer computer system <highlight><bold>120</bold></highlight> may transmit a no-client-certificate alert <highlight><bold>245</bold></highlight>, to indicate that the customer has not registered with any certification authority. </paragraph>
<paragraph id="P-0084" lvl="0"><number>&lsqb;0084&rsqb;</number> If customer computer system <highlight><bold>130</bold></highlight> does not transmit a client certificate <highlight><bold>240</bold></highlight>, or if client certificate <highlight><bold>240</bold></highlight> is suitable only for authentication, customer computer system <highlight><bold>130</bold></highlight> may optionally transmit a client key exchange message <highlight><bold>250</bold></highlight>. Client key exchange message <highlight><bold>250</bold></highlight> identifies a key that may be used by merchant computer system <highlight><bold>130</bold></highlight> to decrypt further messages sent by customer computer system <highlight><bold>120</bold></highlight>. </paragraph>
<paragraph id="P-0085" lvl="0"><number>&lsqb;0085&rsqb;</number> After optionally transmitting client certificate <highlight><bold>240</bold></highlight>, no-client-certificate alert <highlight><bold>245</bold></highlight>, and/or client key exchange message <highlight><bold>250</bold></highlight>, customer computer system <highlight><bold>120</bold></highlight> transmits a finished message <highlight><bold>260</bold></highlight>. </paragraph>
<paragraph id="P-0086" lvl="0"><number>&lsqb;0086&rsqb;</number> At this point, customer computer system <highlight><bold>120</bold></highlight> and merchant computer system <highlight><bold>130</bold></highlight> have: </paragraph>
<paragraph id="P-0087" lvl="2"><number>&lsqb;0087&rsqb;</number> 1) negotiated an encryption scheme that may be commonly employed in further communications, and </paragraph>
<paragraph id="P-0088" lvl="2"><number>&lsqb;0088&rsqb;</number> 2) have communicated to each other a set of encryption keys that may be used to decrypt further communications between the two computer systems. </paragraph>
<paragraph id="P-0089" lvl="7"><number>&lsqb;0089&rsqb;</number> Customer computer system <highlight><bold>120</bold></highlight> and merchant computer system <highlight><bold>130</bold></highlight> may thereafter engage in secure communications <highlight><bold>270</bold></highlight> with less risk of interception by third parties. </paragraph>
<paragraph id="P-0090" lvl="0"><number>&lsqb;0090&rsqb;</number> Among the messages communicated by customer computer system <highlight><bold>120</bold></highlight> to merchant computer system <highlight><bold>130</bold></highlight> may be messages that specify goods or services to be ordered and payment information, such as a credit card number and related information, collectively referred to as &ldquo;payment information,&rdquo; that may be used to pay for the goods and/or services ordered. In order to obtain payment, the merchant must supply this information to the bank or other payment gateway responsible for the proffered payment method. This enables the merchant to perform payment authorization and payment capture. Payment authorization is the process by which permission is granted by a payment gateway operating on behalf of a financial institution to authorize payment on behalf of the financial institution. This is a process that assesses transaction risk, confirms that a given transaction does not raise the account holder&apos;s debt above the account&apos;s credit limit, and reserves the specified amount of credit. Payment capture is the process that triggers the movement of funds from the financial institution to the merchant&apos;s account. </paragraph>
<paragraph id="P-0091" lvl="7"><number>&lsqb;0091&rsqb;</number> Payment Authorization </paragraph>
<paragraph id="P-0092" lvl="0"><number>&lsqb;0092&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 3</cross-reference> depicts an overview of the method of securely supplying payment information to a payment gateway in order to obtain payment authorization. In function block <highlight><bold>310</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> generates a payment authorization request <highlight><bold>315</bold></highlight> and transmits it to payment gateway computer system <highlight><bold>140</bold></highlight>. In function block <highlight><bold>330</bold></highlight>, payment gateway system <highlight><bold>140</bold></highlight> processes the payment authorization request, generates a payment authorization response <highlight><bold>325</bold></highlight> and transmits it to merchant computer system <highlight><bold>130</bold></highlight>. In function block <highlight><bold>320</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> processes payment authorization response <highlight><bold>325</bold></highlight> and determines whether payment for the goods or services sought to be obtained by the customer has been authorized. </paragraph>
<paragraph id="P-0093" lvl="7"><number>&lsqb;0093&rsqb;</number> Payment Authorization Request Generation </paragraph>
<paragraph id="P-0094" lvl="0"><number>&lsqb;0094&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 4</cross-reference> depicts the detailed steps of generating and transmitting a payment authorization request. <cross-reference target="DRAWINGS">FIGS. 5A through 5F</cross-reference> depict views of the payment authorization request and its component parts. In function block <highlight><bold>410</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> creates a basic authorization request <highlight><bold>510</bold></highlight>. The basic authorization request is a data area that includes all the information for determining whether a request should be granted or denied. Specifically, it includes such information as the party who is being charged, the amount to be charged, the account number of the account to be charged, and any additional data, such as passwords, needed to validate the charge. </paragraph>
<paragraph id="P-0095" lvl="0"><number>&lsqb;0095&rsqb;</number> This information is either calculated based upon prior customer merchandise selection, or provided by the customer over the secure link <highlight><bold>270</bold></highlight> established in the customer-merchant general-purpose secure communication protocol session. <cross-reference target="DRAWINGS">FIG. 5A</cross-reference> depicts a basic authorization request <highlight><bold>510</bold></highlight>. </paragraph>
<paragraph id="P-0096" lvl="0"><number>&lsqb;0096&rsqb;</number> In function block <highlight><bold>420</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> combines basic authorization request <highlight><bold>510</bold></highlight>, a copy of its encryption public key certificate <highlight><bold>515</bold></highlight> and a copy of its signature public key certificate <highlight><bold>520</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> calculates a digital signature <highlight><bold>525</bold></highlight> for the combined contents of the combined block <highlight><bold>530</bold></highlight> comprising basic authorization request <highlight><bold>510</bold></highlight>, the encryption public key certificate <highlight><bold>515</bold></highlight> and the signature public key certificate <highlight><bold>520</bold></highlight>, and appends it to the combination of the combined basic authorization request <highlight><bold>510</bold></highlight>, the encryption public key certificate <highlight><bold>515</bold></highlight> and the signature public key certificate <highlight><bold>520</bold></highlight>. The merchant computer system calculates digital signature <highlight><bold>525</bold></highlight> by first calculating a &ldquo;message digest&rdquo; based upon the contents of the combined basic authorization request <highlight><bold>510</bold></highlight>, the encryption public key certificate <highlight><bold>515</bold></highlight> and the signature public key certificate <highlight><bold>520</bold></highlight>. A message digest is the fixed-length result that is generated when a variable length message is fed into a one-way hashing function. Message digests help verify that a message has not been altered because altering the message would change the digest. The message digest is then encrypted using the merchant computer system&apos;s <highlight><bold>130</bold></highlight> digital signature private key, thus forming a digital signature. </paragraph>
<paragraph id="P-0097" lvl="0"><number>&lsqb;0097&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 5B</cross-reference> depicts the combined block <highlight><bold>530</bold></highlight> formed by function block <highlight><bold>420</bold></highlight> and containing basic authorization request <highlight><bold>510</bold></highlight>, the encryption public key certificate <highlight><bold>515</bold></highlight>, the signature public key certificate <highlight><bold>520</bold></highlight>, and digital signature <highlight><bold>525</bold></highlight>. </paragraph>
<paragraph id="P-0098" lvl="0"><number>&lsqb;0098&rsqb;</number> In function block <highlight><bold>430</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> generates a random encryption key RK-0 <highlight><bold>540</bold></highlight>, denoted as RK-0. Random encryption key RK-0 <highlight><bold>540</bold></highlight> is a symmetric encryption key. A symmetric encryption key is a key characterized by the property that a message encrypted with a symmetric key can be decrypted with that same key. This is contrasted with an asymmetric key pair, such as a public-key/private-key key pair, where a message encrypted with one key of the key pair may only be decrypted with the other key of the same key pair. <cross-reference target="DRAWINGS">FIG. 5C</cross-reference> depicts random encryption key RK-0 <highlight><bold>540</bold></highlight>. </paragraph>
<paragraph id="P-0099" lvl="0"><number>&lsqb;0099&rsqb;</number> In function block <highlight><bold>440</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> encrypts combined block <highlight><bold>530</bold></highlight> using random encryption key RK-0 <highlight><bold>540</bold></highlight> to form encrypted combined block <highlight><bold>550</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 5D</cross-reference> depicts encrypted combined block <highlight><bold>550</bold></highlight>. The encryption state of encrypted combined block <highlight><bold>550</bold></highlight> is graphically shown by random key lock <highlight><bold>555</bold></highlight>, which indicates that encrypted combined block <highlight><bold>550</bold></highlight> is encrypted using random key RK-0 <highlight><bold>540</bold></highlight>. </paragraph>
<paragraph id="P-0100" lvl="0"><number>&lsqb;0100&rsqb;</number> In function block <highlight><bold>450</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> encrypts random encryption key RK-0 <highlight><bold>540</bold></highlight> using the public key of payment gateway system <highlight><bold>140</bold></highlight> to form encrypted random key <highlight><bold>560</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 5E</cross-reference> depicts encrypted random key <highlight><bold>560</bold></highlight>. The encryption state of encrypted random key <highlight><bold>560</bold></highlight> is graphically shown by payment gateway public key lock <highlight><bold>565</bold></highlight>, which indicates that encrypted random key <highlight><bold>560</bold></highlight> is encrypted using the payment gateway public key. </paragraph>
<paragraph id="P-0101" lvl="0"><number>&lsqb;0101&rsqb;</number> In function block <highlight><bold>460</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> concatenates encrypted combined block <highlight><bold>550</bold></highlight> and encrypted random key <highlight><bold>560</bold></highlight> to form merchant authorization request <highlight><bold>315</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 5F</cross-reference> depicts merchant authorization request <highlight><bold>315</bold></highlight> comprising encrypted combined block <highlight><bold>550</bold></highlight> and encrypted random key <highlight><bold>560</bold></highlight>. In function block <highlight><bold>470</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> transmits merchant authorization request <highlight><bold>315</bold></highlight> to payment gateway system <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0102" lvl="7"><number>&lsqb;0102&rsqb;</number> Payment Authorization Request Processing </paragraph>
<paragraph id="P-0103" lvl="0"><number>&lsqb;0103&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 6</cross-reference> depicts the detailed steps of processing a payment authorization request and generating and transmitting a payment authorization request response. Function blocks <highlight><bold>610</bold></highlight> through <highlight><bold>630</bold></highlight> depict the steps of processing a payment authorization request, while function blocks <highlight><bold>635</bold></highlight> through <highlight><bold>685</bold></highlight> depict the steps of generating and transmitting a payment authorization request response. </paragraph>
<paragraph id="P-0104" lvl="0"><number>&lsqb;0104&rsqb;</number> In function block <highlight><bold>610</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies its private key to encrypted random key <highlight><bold>560</bold></highlight> contained within received merchant authorization request <highlight><bold>315</bold></highlight>, thereby decrypting it and obtaining a cleartext version of random key RK-0 <highlight><bold>540</bold></highlight>. In function block <highlight><bold>615</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies random key RK-0 <highlight><bold>540</bold></highlight> to encrypted combined block <highlight><bold>550</bold></highlight>, thereby decrypting it and obtaining a cleartext version of combined block <highlight><bold>530</bold></highlight>. It will be recalled that combined block <highlight><bold>530</bold></highlight> comprises basic authorization request <highlight><bold>510</bold></highlight>, a copy of merchant computer system&apos;s <highlight><bold>130</bold></highlight> encryption public key certificate <highlight><bold>515</bold></highlight> and a copy of merchant computer system&apos;s <highlight><bold>130</bold></highlight> signature public key certificate <highlight><bold>520</bold></highlight>, as well as merchant digital signature <highlight><bold>525</bold></highlight>. </paragraph>
<paragraph id="P-0105" lvl="0"><number>&lsqb;0105&rsqb;</number> In function block <highlight><bold>620</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> verifies merchant computer system&apos;s <highlight><bold>130</bold></highlight> encryption public key certificate <highlight><bold>515</bold></highlight> and merchant computer system&apos;s <highlight><bold>130</bold></highlight> signature public key certificate <highlight><bold>520</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> performs this verification by making a call to the certification authorities associated with each certificate. If verification of either certificate fails, payment gateway computer system <highlight><bold>140</bold></highlight> rejects the authorization request. </paragraph>
<paragraph id="P-0106" lvl="0"><number>&lsqb;0106&rsqb;</number> In function block <highlight><bold>625</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> validates merchant digital signature <highlight><bold>525</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> performs this validation by calculating a message digest over the contents of the combined basic authorization request <highlight><bold>510</bold></highlight>, the encryption public key certificate <highlight><bold>515</bold></highlight> and the signature public key certificate <highlight><bold>520</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> then decrypts digital signature <highlight><bold>525</bold></highlight> to obtain a copy of the equivalent message digest calculated by merchant computer system <highlight><bold>130</bold></highlight> in function block <highlight><bold>420</bold></highlight>. If the two message digests are equal, the digital signature <highlight><bold>525</bold></highlight> is validated. If validation fails, payment gateway computer system <highlight><bold>140</bold></highlight> rejects the authorization request. </paragraph>
<paragraph id="P-0107" lvl="0"><number>&lsqb;0107&rsqb;</number> In function block <highlight><bold>630</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> determines the financial institution for which authorization is required by inspection of basic authorization request <highlight><bold>510</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> contacts the appropriate financial institution using a secure means, e.g, a direct-dial modem-to-modem connection, or a proprietary internal network that is not accessible to third parties, and using prior art means, obtains a response indicating whether the requested payment is authorized. </paragraph>
<paragraph id="P-0108" lvl="7"><number>&lsqb;0108&rsqb;</number> Payment Authorization Response Generation </paragraph>
<paragraph id="P-0109" lvl="0"><number>&lsqb;0109&rsqb;</number> Function blocks <highlight><bold>635</bold></highlight> through <highlight><bold>685</bold></highlight> depict the steps of generating and transmitting a payment authorization request response. <cross-reference target="DRAWINGS">FIGS. 7A through 7J</cross-reference> depict views of the payment authorization response and its component parts. </paragraph>
<paragraph id="P-0110" lvl="0"><number>&lsqb;0110&rsqb;</number> In function block <highlight><bold>635</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> creates a basic authorization response <highlight><bold>710</bold></highlight>. The basic authorization request is a data area that includes all the information to determine whether a request was granted or denied. <cross-reference target="DRAWINGS">FIG. 7A</cross-reference> depicts basic authorization response <highlight><bold>710</bold></highlight>. </paragraph>
<paragraph id="P-0111" lvl="0"><number>&lsqb;0111&rsqb;</number> In function block <highlight><bold>640</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> combines basic authorization response <highlight><bold>710</bold></highlight>, and a copy of its signature public key certificate <highlight><bold>720</bold></highlight>. Payment computer system <highlight><bold>140</bold></highlight> calculates a digital signature <highlight><bold>725</bold></highlight> for the combined contents of the combined block <highlight><bold>730</bold></highlight> comprising basic authorization response <highlight><bold>710</bold></highlight> and the signature public key certificate <highlight><bold>720</bold></highlight>, and appends the signature to the combination of the combined basic authorization response <highlight><bold>710</bold></highlight> and the signature public key certificate <highlight><bold>720</bold></highlight>. The payment gateway computer system calculates digital signature <highlight><bold>725</bold></highlight> by first calculating a message digest based on the contents of the combined basic authorization response <highlight><bold>710</bold></highlight> and signature public key certificate <highlight><bold>720</bold></highlight>. The message digest is then encrypted using the merchant computer system&apos;s <highlight><bold>140</bold></highlight> digital signature private key, thus forming a digital signature. </paragraph>
<paragraph id="P-0112" lvl="0"><number>&lsqb;0112&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 7B</cross-reference> depicts the combined block <highlight><bold>730</bold></highlight> formed in function block <highlight><bold>640</bold></highlight> and containing basic authorization response <highlight><bold>710</bold></highlight>, the signature public key certificate <highlight><bold>720</bold></highlight>, and digital signature <highlight><bold>725</bold></highlight>. </paragraph>
<paragraph id="P-0113" lvl="0"><number>&lsqb;0113&rsqb;</number> In function block <highlight><bold>645</bold></highlight>, payment gateway computer system <highlight><bold>150</bold></highlight> generates a first symmetric random encryption key <highlight><bold>740</bold></highlight>, denoted as RK-1. <cross-reference target="DRAWINGS">FIG. 7C</cross-reference> depicts first random encryption key RK-1 <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0114" lvl="0"><number>&lsqb;0114&rsqb;</number> In function block <highlight><bold>650</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts combined block <highlight><bold>730</bold></highlight> using random encryption key RK-1 <highlight><bold>740</bold></highlight> to form encrypted combined block <highlight><bold>750</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7D</cross-reference> depicts encrypted combined block <highlight><bold>750</bold></highlight>. The encryption state of encrypted combined block <highlight><bold>750</bold></highlight> is graphically shown by random key lock <highlight><bold>755</bold></highlight>, which indicates that encrypted combined block <highlight><bold>750</bold></highlight> is encrypted using random key RK-1 <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0115" lvl="0"><number>&lsqb;0115&rsqb;</number> In function block <highlight><bold>655</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts random encryption key RK-1 <highlight><bold>740</bold></highlight> using the public key of merchant computer system <highlight><bold>130</bold></highlight> to form encrypted random key RK <highlight><bold>760</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7E</cross-reference> depicts encrypted random key RK-1 <highlight><bold>760</bold></highlight>. The encryption state of encrypted random key <highlight><bold>760</bold></highlight> is graphically shown by merchant public key lock <highlight><bold>765</bold></highlight>, which indicates that encrypted random key <highlight><bold>760</bold></highlight> is encrypted using the merchant public key. </paragraph>
<paragraph id="P-0116" lvl="0"><number>&lsqb;0116&rsqb;</number> In function block <highlight><bold>660</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> generates a random capture token <highlight><bold>770</bold></highlight>. Random capture token <highlight><bold>770</bold></highlight> will be used in subsequent payment capture processing to associate the payment capture request with the payment authorization request being processed. <cross-reference target="DRAWINGS">FIG. 7F</cross-reference> depicts capture token <highlight><bold>775</bold></highlight>. </paragraph>
<paragraph id="P-0117" lvl="0"><number>&lsqb;0117&rsqb;</number> In function block <highlight><bold>665</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> generates a second symmetric random encryption key <highlight><bold>775</bold></highlight>, denoted as RK-2. <cross-reference target="DRAWINGS">FIG. 7G</cross-reference> depicts second random encryption key RK-2 <highlight><bold>775</bold></highlight>. </paragraph>
<paragraph id="P-0118" lvl="0"><number>&lsqb;0118&rsqb;</number> In function block <highlight><bold>670</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts capture token <highlight><bold>770</bold></highlight> using random encryption key RK-2 <highlight><bold>770</bold></highlight> to form encrypted capture token <highlight><bold>780</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7H</cross-reference> depicts encrypted capture token <highlight><bold>780</bold></highlight>. The encryption state of encrypted capture token <highlight><bold>780</bold></highlight> is graphically shown by random key lock <highlight><bold>785</bold></highlight>, which indicates that encrypted capture token <highlight><bold>780</bold></highlight> is encrypted using random key RK-2 <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0119" lvl="0"><number>&lsqb;0119&rsqb;</number> In function block <highlight><bold>675</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts second random encryption key RK-2 <highlight><bold>775</bold></highlight> using its own public key to form encrypted random key RK-2 <highlight><bold>790</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 71</cross-reference> depicts encrypted random key RK-2 <highlight><bold>790</bold></highlight>. The encryption state of encrypted random key <highlight><bold>790</bold></highlight> is graphically shown by payment gateway public key lock <highlight><bold>795</bold></highlight>, which indicates that encrypted random key <highlight><bold>790</bold></highlight> is encrypted using the payment gateway public key. </paragraph>
<paragraph id="P-0120" lvl="0"><number>&lsqb;0120&rsqb;</number> In function block <highlight><bold>680</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> concatenates encrypted combined block <highlight><bold>750</bold></highlight>, encrypted random key RK-1 <highlight><bold>760</bold></highlight>, encrypted capture token <highlight><bold>780</bold></highlight> and encrypted random key RK-2 <highlight><bold>790</bold></highlight> to form merchant authorization response <highlight><bold>325</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 7J</cross-reference> depicts merchant authorization response <highlight><bold>325</bold></highlight> comprising encrypted combined block <highlight><bold>750</bold></highlight>, encrypted random key RK-1 <highlight><bold>760</bold></highlight>, encrypted capture token <highlight><bold>780</bold></highlight> and encrypted random key RK2 <highlight><bold>790</bold></highlight>. In function block <highlight><bold>685</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> transmits merchant authorization response <highlight><bold>325</bold></highlight> to merchant system <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0121" lvl="7"><number>&lsqb;0121&rsqb;</number> Payment Authorization Response Processing </paragraph>
<paragraph id="P-0122" lvl="0"><number>&lsqb;0122&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 8</cross-reference> depicts the detailed steps of processing a payment authorization response. In function block <highlight><bold>810</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> applies its private key to encrypted random key RK-1 <highlight><bold>760</bold></highlight> contained within received merchant authorization response <highlight><bold>325</bold></highlight>, thereby decrypting it and obtaining a cleartext version of random key RK-1 <highlight><bold>740</bold></highlight>. </paragraph>
<paragraph id="P-0123" lvl="0"><number>&lsqb;0123&rsqb;</number> In function block <highlight><bold>820</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> applies random key RK-1 <highlight><bold>740</bold></highlight> to encrypted combined block <highlight><bold>750</bold></highlight>, thereby decrypting it and obtaining a cleartext version of combined block <highlight><bold>730</bold></highlight>. It will be recalled that combined block <highlight><bold>730</bold></highlight> comprises basic authorization response <highlight><bold>710</bold></highlight>, a copy of payment gateway computer system&apos;s <highlight><bold>140</bold></highlight> signature public key certificate <highlight><bold>720</bold></highlight>, as well as payment gateway digital signature <highlight><bold>725</bold></highlight>. </paragraph>
<paragraph id="P-0124" lvl="0"><number>&lsqb;0124&rsqb;</number> In function block <highlight><bold>830</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> verifies payment gateway computer system&apos;s <highlight><bold>140</bold></highlight> signature public key certificate <highlight><bold>720</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> performs this verification by making a call to the certification authority associated with the certificate. If verification of the certificate fails, merchant computer system <highlight><bold>130</bold></highlight> concludes that the authorization response is counterfeit and treats it though the authorization request had been rejected. </paragraph>
<paragraph id="P-0125" lvl="0"><number>&lsqb;0125&rsqb;</number> In function block <highlight><bold>840</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> validates payment gateway digital signature <highlight><bold>725</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> performs this validation by calculating a message digest over the contents of the combined basic authorization request <highlight><bold>710</bold></highlight> and the signature public key certificate <highlight><bold>720</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> then decrypts digital signature <highlight><bold>725</bold></highlight> to obtain a copy of the equivalent message digest calculated by payment gateway computer system <highlight><bold>140</bold></highlight> in function block <highlight><bold>640</bold></highlight>. If the two message digests are equal, the digital signature <highlight><bold>725</bold></highlight> is validated. If validation fails, concludes that the authorization response is counterfeit and treats it though the authorization request had been rejected. </paragraph>
<paragraph id="P-0126" lvl="0"><number>&lsqb;0126&rsqb;</number> In function block <highlight><bold>850</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> stores encrypted capture token <highlight><bold>780</bold></highlight> and encrypted random key RK-2 <highlight><bold>790</bold></highlight> for later use in payment capture. In function block <highlight><bold>860</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> processes the customer purchase request in accordance with the authorization response <highlight><bold>710</bold></highlight>. If the authorization response indicates that payment in authorized, merchant computer system <highlight><bold>130</bold></highlight> fills the requested order. If the authorization response indicates that payment is not authorized, or if merchant computer system <highlight><bold>130</bold></highlight> determined in function block <highlight><bold>830</bold></highlight> or <highlight><bold>840</bold></highlight> that the authorization response is counterfeit, merchant computer system <highlight><bold>130</bold></highlight> indicates to the customer that the order cannot be filled. </paragraph>
<paragraph id="P-0127" lvl="7"><number>&lsqb;0127&rsqb;</number> Payment Capture </paragraph>
<paragraph id="P-0128" lvl="0"><number>&lsqb;0128&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 9</cross-reference> depicts an overview of the method of securely supplying payment capture information to payment gateway <highlight><bold>140</bold></highlight> in order to obtain payment capture. In function block <highlight><bold>910</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> generates a merchant payment capture request <highlight><bold>915</bold></highlight> and transmits it to payment gateway computer system <highlight><bold>140</bold></highlight>. In function block <highlight><bold>930</bold></highlight>, payment gateway system <highlight><bold>140</bold></highlight> processes the payment capture request <highlight><bold>915</bold></highlight>, generates a payment capture response <highlight><bold>925</bold></highlight> and transmits it to merchant computer system <highlight><bold>130</bold></highlight>. In function block <highlight><bold>920</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> processes payment capture response <highlight><bold>925</bold></highlight> and verifies that payment for the goods or services sought to be obtained by the customer have been captured. </paragraph>
<paragraph id="P-0129" lvl="7"><number>&lsqb;0129&rsqb;</number> Payment Capture Request Generation </paragraph>
<paragraph id="P-0130" lvl="0"><number>&lsqb;0130&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 10</cross-reference> depicts the detailed steps of generating and transmitting a payment capture request. <cross-reference target="DRAWINGS">FIGS. 11A through 11F</cross-reference> depict views of the payment capture request and its component parts. In function block <highlight><bold>1010</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> creates a basic capture request <highlight><bold>510</bold></highlight>. The basic capture request is a data area that includes all the information needed by payment gateway computer system <highlight><bold>140</bold></highlight> to trigger a transfer of funds to the merchant operating merchant computer system <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0131" lvl="0"><number>&lsqb;0131&rsqb;</number> Specifically, a capture request includes a capture request amount, a capture token, a date, summary information of the purchased items and a Merchant ID (MID) for the particular merchant. <cross-reference target="DRAWINGS">FIG. 11A</cross-reference> depicts basic authorization request <highlight><bold>1110</bold></highlight>. </paragraph>
<paragraph id="P-0132" lvl="0"><number>&lsqb;0132&rsqb;</number> In function block <highlight><bold>1020</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> combines basic capture request <highlight><bold>1110</bold></highlight>, a copy of its encryption public key certificate <highlight><bold>1115</bold></highlight> and a copy of its signature public key certificate <highlight><bold>1120</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> calculates a digital signature <highlight><bold>1125</bold></highlight> for the combined contents of the combined block <highlight><bold>1130</bold></highlight> comprising basic capture request <highlight><bold>1110</bold></highlight>, the encryption public key certificate <highlight><bold>1115</bold></highlight> and the signature public key certificate <highlight><bold>1120</bold></highlight>, and appends it to the combination of the combined basic capture request <highlight><bold>1110</bold></highlight>, the encryption public key certificate <highlight><bold>1115</bold></highlight> and the signature public key certificate <highlight><bold>1120</bold></highlight>. The merchant computer system calculates digital signature <highlight><bold>1125</bold></highlight> by first calculating a message digest over the contents of the combined basic capture request <highlight><bold>1110</bold></highlight>, the encryption public key certificate <highlight><bold>1115</bold></highlight> and the signature public key certificate <highlight><bold>1120</bold></highlight>. The message digest is then encrypted using the merchant computer system&apos;s <highlight><bold>130</bold></highlight> digital signature private key, thus forming a digital signature. </paragraph>
<paragraph id="P-0133" lvl="0"><number>&lsqb;0133&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 11B</cross-reference> depicts the combined block <highlight><bold>1130</bold></highlight> formed by function block <highlight><bold>1020</bold></highlight> and containing basic capture request <highlight><bold>1110</bold></highlight>, the encryption public key certificate <highlight><bold>1115</bold></highlight>, the signature public key certificate <highlight><bold>1120</bold></highlight>, and digital signature <highlight><bold>1125</bold></highlight>. </paragraph>
<paragraph id="P-0134" lvl="0"><number>&lsqb;0134&rsqb;</number> In function block <highlight><bold>1030</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> generates a random encryption key <highlight><bold>1140</bold></highlight>, denoted as RK-3. Random encryption key RK-3 <highlight><bold>1140</bold></highlight> is a symmetric encryption key. <cross-reference target="DRAWINGS">FIG. 11C</cross-reference> depicts random encryption key RK-3 <highlight><bold>1140</bold></highlight>. </paragraph>
<paragraph id="P-0135" lvl="0"><number>&lsqb;0135&rsqb;</number> In function block <highlight><bold>1040</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> encrypts combined block <highlight><bold>1130</bold></highlight> using random encryption key RK-3 <highlight><bold>1140</bold></highlight> to form encrypted combined block <highlight><bold>1150</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 11D</cross-reference> depicts encrypted combined block <highlight><bold>1150</bold></highlight>. The encryption state of encrypted combined block <highlight><bold>1150</bold></highlight> is graphically shown by random key lock <highlight><bold>1155</bold></highlight>, which indicates that encrypted combined block <highlight><bold>1150</bold></highlight> is encrypted using random key RK-3 <highlight><bold>1140</bold></highlight>. </paragraph>
<paragraph id="P-0136" lvl="0"><number>&lsqb;0136&rsqb;</number> In function block <highlight><bold>1050</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> encrypts random encryption key RK-3 <highlight><bold>1140</bold></highlight> using the public key of payment gateway system <highlight><bold>140</bold></highlight> to form encrypted random key <highlight><bold>1160</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 11E</cross-reference> depicts encrypted random key <highlight><bold>1160</bold></highlight>. The encryption state of encrypted random key <highlight><bold>1160</bold></highlight> is graphically shown by payment gateway public key lock <highlight><bold>1165</bold></highlight>, which indicates that encrypted random key RK-3 <highlight><bold>1160</bold></highlight> is encrypted using the payment gateway public key. </paragraph>
<paragraph id="P-0137" lvl="0"><number>&lsqb;0137&rsqb;</number> In function block <highlight><bold>1060</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> concatenates encrypted combined block <highlight><bold>1150</bold></highlight>, encrypted random key <highlight><bold>1160</bold></highlight>, and the encrypted capture token <highlight><bold>780</bold></highlight> and encrypted random key RK-2 <highlight><bold>790</bold></highlight> that were stored in function block <highlight><bold>850</bold></highlight> to form merchant capture request <highlight><bold>915</bold></highlight>. FIG. <highlight><bold>11</bold></highlight>F depicts merchant capture request <highlight><bold>915</bold></highlight>, comprising encrypted combined block <highlight><bold>1150</bold></highlight>, encrypted random key <highlight><bold>1160</bold></highlight>, encrypted capture token <highlight><bold>780</bold></highlight> and encrypted random key RK-2 <highlight><bold>790</bold></highlight>. In function block <highlight><bold>1070</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> transmits merchant capture request <highlight><bold>915</bold></highlight> to payment gateway system <highlight><bold>140</bold></highlight>. </paragraph>
<paragraph id="P-0138" lvl="7"><number>&lsqb;0138&rsqb;</number> Payment Capture Request Processing </paragraph>
<paragraph id="P-0139" lvl="0"><number>&lsqb;0139&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 12</cross-reference> depicts the detailed steps of processing a payment capture request and generating and transmitting a payment capture request response. Function blocks <highlight><bold>1210</bold></highlight> through <highlight><bold>1245</bold></highlight> depict the steps of processing a payment capture request, while function blocks <highlight><bold>1250</bold></highlight> through <highlight><bold>1285</bold></highlight> depict the steps of generating and transmitting a payment capture request response. </paragraph>
<paragraph id="P-0140" lvl="0"><number>&lsqb;0140&rsqb;</number> In function block <highlight><bold>1210</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies its private key to encrypted random key <highlight><bold>1160</bold></highlight> contained within received merchant capture request <highlight><bold>915</bold></highlight>, thereby decrypting it and obtaining a cleartext version of random key RK-3 <highlight><bold>1140</bold></highlight>. In function block <highlight><bold>1215</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies random key RK-3 <highlight><bold>1140</bold></highlight> to encrypted combined block <highlight><bold>1150</bold></highlight>, thereby decrypting it and obtaining a cleartext version of combined block <highlight><bold>1130</bold></highlight>. It will be recalled that combined block <highlight><bold>1130</bold></highlight> comprises basic capture request <highlight><bold>1110</bold></highlight>, a copy of merchant computer system&apos;s <highlight><bold>130</bold></highlight> encryption public key certificate <highlight><bold>1115</bold></highlight> and a copy of merchant computer system&apos;s <highlight><bold>130</bold></highlight> signature public key certificate <highlight><bold>1120</bold></highlight>, as well as merchant digital signature <highlight><bold>1125</bold></highlight>. </paragraph>
<paragraph id="P-0141" lvl="0"><number>&lsqb;0141&rsqb;</number> In function block <highlight><bold>1220</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> verifies merchant computer system&apos;s <highlight><bold>130</bold></highlight> encryption public key certificate <highlight><bold>1115</bold></highlight> and merchant computer system&apos;s <highlight><bold>130</bold></highlight> signature public key certificate <highlight><bold>1120</bold></highlight>. </paragraph>
<paragraph id="P-0142" lvl="0"><number>&lsqb;0142&rsqb;</number> Payment gateway computer system <highlight><bold>140</bold></highlight> performs this verification by making a call to the certification authorities associated with each certificate. If verification of either certificate fails, payment gateway computer system <highlight><bold>140</bold></highlight> rejects the capture request. </paragraph>
<paragraph id="P-0143" lvl="0"><number>&lsqb;0143&rsqb;</number> In function block <highlight><bold>1225</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> validates merchant digital signature <highlight><bold>1125</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> performs this validation by calculating a message digest over the contents of the combined basic capture request <highlight><bold>1110</bold></highlight>, the encryption public key certificate <highlight><bold>1115</bold></highlight> and the signature public key certificate <highlight><bold>1120</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> then decrypts digital signature <highlight><bold>1125</bold></highlight> to obtain a copy of the equivalent message digest calculated by merchant computer system <highlight><bold>130</bold></highlight> in function block <highlight><bold>1020</bold></highlight>. If the two message digests are equal, the digital signature <highlight><bold>1125</bold></highlight> is validated. If validation fails, payment gateway computer system <highlight><bold>140</bold></highlight> rejects the capture request. </paragraph>
<paragraph id="P-0144" lvl="0"><number>&lsqb;0144&rsqb;</number> In function block <highlight><bold>1230</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies its private key to encrypted random key RK-2 <highlight><bold>790</bold></highlight> contained within received merchant capture request <highlight><bold>915</bold></highlight>, thereby decrypting it and obtaining a cleartext version of random key RK-2 <highlight><bold>775</bold></highlight>. In function block <highlight><bold>1235</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> applies random key RK-2 <highlight><bold>775</bold></highlight> to encrypted capture token <highlight><bold>780</bold></highlight>, thereby decrypting it and obtaining a cleartext version of capture token <highlight><bold>770</bold></highlight>. </paragraph>
<paragraph id="P-0145" lvl="0"><number>&lsqb;0145&rsqb;</number> In function block <highlight><bold>1240</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> verifies that a proper transaction is being transmitted between capture token <highlight><bold>780</bold></highlight> and capture request <highlight><bold>1110</bold></highlight>. A capture token contains data that the gateway generates at the time of authorization. When the authorization is approved, the encrypted capture token is given to the merchant for storage. At the time of capture, the merchant returns the capture token to the gateway along with other information required for capture. Upon receipt of the capture token, the gateway compares a message made of the capture request data and the capture token data and transmits this information over a traditional credit/debit network. If an improperly formatted transaction is detected, payment gateway computer system <highlight><bold>140</bold></highlight> rejects the capture request. </paragraph>
<paragraph id="P-0146" lvl="0"><number>&lsqb;0146&rsqb;</number> In function block <highlight><bold>1245</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> determines the financial institution for which capture is requested by inspection of basic capture request <highlight><bold>1110</bold></highlight>. Payment gateway computer system <highlight><bold>140</bold></highlight> contacts the appropriate financial institution using a secure means, e.g, a direct-dial modem-to-modem connection, or a proprietary internal network that is not accessible to third parties, and using prior art means, instructs a computer at the financial institution to perform the requested funds transfer. </paragraph>
<paragraph id="P-0147" lvl="7"><number>&lsqb;0147&rsqb;</number> Payment Capture Response Generation </paragraph>
<paragraph id="P-0148" lvl="0"><number>&lsqb;0148&rsqb;</number> Function blocks <highlight><bold>1250</bold></highlight> through <highlight><bold>1285</bold></highlight> depict the steps of generating and transmitting a payment capture request response. <cross-reference target="DRAWINGS">FIGS. 13A through 13F</cross-reference> depict views of the payment capture response and its component parts. </paragraph>
<paragraph id="P-0149" lvl="0"><number>&lsqb;0149&rsqb;</number> In function block <highlight><bold>1250</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> creates a basic capture response <highlight><bold>710</bold></highlight>. The basic capture request is a data area that includes all the information to indicate whether a capture request was granted or denied. <cross-reference target="DRAWINGS">FIG. 13A</cross-reference> depicts basic authorization request <highlight><bold>1310</bold></highlight>. </paragraph>
<paragraph id="P-0150" lvl="0"><number>&lsqb;0150&rsqb;</number> In function block <highlight><bold>1255</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> combines basic capture response <highlight><bold>1310</bold></highlight>, and a copy of its signature public key certificate <highlight><bold>1320</bold></highlight>. Payment computer system <highlight><bold>140</bold></highlight> calculates a digital signature <highlight><bold>1325</bold></highlight> for the combined contents of the combined block <highlight><bold>1330</bold></highlight> comprising basic capture response <highlight><bold>1310</bold></highlight> and the signature public key certificate <highlight><bold>1320</bold></highlight>, and appends the signature to the combination of the combined basic authorization request <highlight><bold>1310</bold></highlight> and the signature public key certificate <highlight><bold>1320</bold></highlight>. The payment gateway computer system calculates digital signature <highlight><bold>1325</bold></highlight> by first calculating a message digest over the contents of the combined basic capture response <highlight><bold>1310</bold></highlight> and signature public key certificate <highlight><bold>720</bold></highlight>. The message digest is then encrypted using the merchant computer system&apos;s <highlight><bold>140</bold></highlight> digital signature private key, thus forming a digital signature. </paragraph>
<paragraph id="P-0151" lvl="0"><number>&lsqb;0151&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 13B</cross-reference> depicts the combined block <highlight><bold>1330</bold></highlight> formed by function block <highlight><bold>1255</bold></highlight> and containing basic capture request <highlight><bold>1310</bold></highlight>, the signature public key certificate <highlight><bold>1320</bold></highlight>, and digital signature <highlight><bold>1325</bold></highlight>. </paragraph>
<paragraph id="P-0152" lvl="0"><number>&lsqb;0152&rsqb;</number> In function block <highlight><bold>1260</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> generates a symmetric random encryption key <highlight><bold>1340</bold></highlight>, denoted as RK-4. <cross-reference target="DRAWINGS">FIG. 13C</cross-reference> depicts random encryption key RK-4 <highlight><bold>1340</bold></highlight>. </paragraph>
<paragraph id="P-0153" lvl="0"><number>&lsqb;0153&rsqb;</number> In function block <highlight><bold>1275</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts combined block <highlight><bold>1330</bold></highlight> using random encryption key RK-4 <highlight><bold>1340</bold></highlight> to form encrypted combined block <highlight><bold>1350</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13D</cross-reference> depicts encrypted combined block <highlight><bold>1350</bold></highlight>. The encryption state of encrypted combined block <highlight><bold>1350</bold></highlight> is graphically shown by random key lock <highlight><bold>1355</bold></highlight>, which indicates that encrypted combined block <highlight><bold>1350</bold></highlight> is encrypted using random key RK-4 <highlight><bold>1340</bold></highlight>. </paragraph>
<paragraph id="P-0154" lvl="0"><number>&lsqb;0154&rsqb;</number> In function block <highlight><bold>1275</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> encrypts random encryption key RK-4 <highlight><bold>1340</bold></highlight> using the public key of merchant computer system <highlight><bold>130</bold></highlight> to form encrypted random key RK-4 <highlight><bold>1360</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13E</cross-reference> depicts encrypted random key RK-4 <highlight><bold>1360</bold></highlight>. The encryption state of encrypted random key <highlight><bold>1360</bold></highlight> is graphically shown by merchant public key lock <highlight><bold>1365</bold></highlight>, which indicates that encrypted random key <highlight><bold>1360</bold></highlight> is encrypted using the merchant public key. </paragraph>
<paragraph id="P-0155" lvl="0"><number>&lsqb;0155&rsqb;</number> In function block <highlight><bold>1280</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> concatenates encrypted combined block <highlight><bold>1350</bold></highlight> and encrypted random key RK-4 <highlight><bold>1360</bold></highlight> to form merchant capture response <highlight><bold>925</bold></highlight>. <cross-reference target="DRAWINGS">FIG. 13F</cross-reference> depicts merchant capture response <highlight><bold>925</bold></highlight> comprising encrypted combined block <highlight><bold>1350</bold></highlight> and encrypted random key RK-4 <highlight><bold>1360</bold></highlight>. In function block <highlight><bold>1285</bold></highlight>, payment gateway computer system <highlight><bold>140</bold></highlight> transmits merchant capture response <highlight><bold>925</bold></highlight> to merchant system <highlight><bold>130</bold></highlight>. </paragraph>
<paragraph id="P-0156" lvl="7"><number>&lsqb;0156&rsqb;</number> Payment Capture Response Processing </paragraph>
<paragraph id="P-0157" lvl="0"><number>&lsqb;0157&rsqb;</number> <cross-reference target="DRAWINGS">FIG. 14</cross-reference> depicts the detailed steps of processing a payment capture response. In function block <highlight><bold>1410</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> applies its private key to encrypted random key RK-4 <highlight><bold>1360</bold></highlight> contained within received merchant capture response <highlight><bold>925</bold></highlight>, thereby decrypting it and obtaining a cleartext version of random key RK-4 <highlight><bold>1340</bold></highlight>. </paragraph>
<paragraph id="P-0158" lvl="0"><number>&lsqb;0158&rsqb;</number> In function block <highlight><bold>1420</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> applies random key RK-4 <highlight><bold>1340</bold></highlight> to encrypted combined block <highlight><bold>1350</bold></highlight>, thereby decrypting it and obtaining a cleartext version of combined block <highlight><bold>1330</bold></highlight>. It will be recalled that combined block <highlight><bold>1330</bold></highlight> comprises basic capture response <highlight><bold>1310</bold></highlight>, a copy of payment gateway computer system&apos;s <highlight><bold>140</bold></highlight> signature public key certificate <highlight><bold>1320</bold></highlight>, as well as payment gateway digital signature <highlight><bold>1325</bold></highlight>. </paragraph>
<paragraph id="P-0159" lvl="0"><number>&lsqb;0159&rsqb;</number> In function block <highlight><bold>1430</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> verifies payment gateway computer system&apos;s <highlight><bold>140</bold></highlight> signature public key certificate <highlight><bold>1320</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> performs this verification by making a call to the certification authority associated with the certificate. If verification of the certificate fails, merchant computer system <highlight><bold>130</bold></highlight> concludes that the capture response is counterfeit and raises an error condition. </paragraph>
<paragraph id="P-0160" lvl="0"><number>&lsqb;0160&rsqb;</number> In function block <highlight><bold>1440</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> validates payment gateway digital signature <highlight><bold>1325</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> performs this validation by calculating a message digest over the contents of the combined basic authorization request <highlight><bold>1310</bold></highlight> and the signature public key certificate <highlight><bold>1320</bold></highlight>. Merchant computer system <highlight><bold>130</bold></highlight> then decrypts digital signature <highlight><bold>1325</bold></highlight> to obtain a copy of the equivalent message digest calculated by payment gateway computer system <highlight><bold>140</bold></highlight> in function block <highlight><bold>1255</bold></highlight>. If the two message digests are equal, the digital signature <highlight><bold>1325</bold></highlight> is validated. If validation fails, merchant computer system <highlight><bold>130</bold></highlight> concludes that the authorization response is counterfeit and raises an error condition. </paragraph>
<paragraph id="P-0161" lvl="0"><number>&lsqb;0161&rsqb;</number> In function block <highlight><bold>1450</bold></highlight>, merchant computer system <highlight><bold>130</bold></highlight> stores capture response for later use in by legacy system accounting programs, e.g. to perform reconciliation between the merchant operating merchant computer system <highlight><bold>130</bold></highlight> and the financial institution from whom payment was requested, thereby completing the transaction. </paragraph>
<paragraph id="P-0162" lvl="0"><number>&lsqb;0162&rsqb;</number> The system of the present invention permits immediate deployment of a secure payment technology architecture such as the SET architecture without first establishing a public-key encryption infrastructure for use by consumers. It thereby permits immediate use of SET-compliant transaction processing without the need for consumers to migrate to SET-compliant application software. </paragraph>
<paragraph id="P-0163" lvl="0"><number>&lsqb;0163&rsqb;</number> All publications and existing subsystems mentioned in this specification are hereby incorporated by reference to the same extent as if each individual publication or existing subsystem were specifically and individually indicated to be incorporated by reference. </paragraph>
<paragraph id="P-0164" lvl="0"><number>&lsqb;0164&rsqb;</number> While various embodiments of a preferred embodiment have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents. </paragraph>
</section>
</detailed-description>
</subdoc-description>
<subdoc-claims>
<heading lvl="1">What is claimed is: </heading>
<claim id="CLM-00001">
<claim-text><highlight><bold>1</bold></highlight>. A method for initiating secure communication between a first and a second computer connected to a network for receiving and transmitting payment information, comprising the steps of: 
<claim-text>(a) establishing a communication between said first and said second computer via said network; </claim-text>
<claim-text>(b) identifying an encryption procedure and a decryption procedure utilized by said first and said second computer; </claim-text>
<claim-text>(c) transmitting encrypted payment information from said first computer to said second computer; </claim-text>
<claim-text>(d) receiving said encrypted payment information at said second computer and decrypting the payment information utilizing the decryption procedure; and </claim-text>
<claim-text>(e) repackaging said payment information to comply with a third party secure protocol for further payment processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00002">
<claim-text><highlight><bold>2</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, including the step of utilizing the Internet for transmitting information between said first and said second computer systems. </claim-text>
</claim>
<claim id="CLM-00003">
<claim-text><highlight><bold>3</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, including the step of transmitting from the second computer system to a third computer system for authorizing or denying credit in the payment processing. </claim-text>
</claim>
<claim id="CLM-00004">
<claim-text><highlight><bold>4</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00001">claim 1</dependent-claim-reference>, wherein the secure third party protocol is a Secure Electronic Transaction protocol. </claim-text>
</claim>
<claim id="CLM-00005">
<claim-text><highlight><bold>5</bold></highlight>. A method for initiating secure communication between a first and a second computer connected to a network for receiving and transmitting payment information, comprising the steps of: 
<claim-text>(a) obtaining client information for use in said secure communication between a first and a second computer; </claim-text>
<claim-text>(b) establishing a communication between said first and said second computer via said network; and </claim-text>
<claim-text>(c) repackaging said payment information to comply with a third party secure protocol for further payment processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00006">
<claim-text><highlight><bold>6</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, including: 
<claim-text>(d) transmitting encrypted payment information from said first computer to said second computer; </claim-text>
<claim-text>(e) receiving said encrypted payment information at said second computer and decrypting the payment information utilizing the decryption procedure; and </claim-text>
<claim-text>(f) performing further payment processing on said decrypted information. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00007">
<claim-text><highlight><bold>7</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein said client information is obtained via a telephone, fax machine or electronic mail. </claim-text>
</claim>
<claim id="CLM-00008">
<claim-text><highlight><bold>8</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, wherein an electronic signature is utilized to authenticate payment processing. </claim-text>
</claim>
<claim id="CLM-00009">
<claim-text><highlight><bold>9</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00007">claim 7</dependent-claim-reference>, wherein said client information is obtained via a secure general purpose protocol. </claim-text>
</claim>
<claim id="CLM-00010">
<claim-text><highlight><bold>10</bold></highlight>. The method as recited in <dependent-claim-reference depends_on="CLM-00005">claim 5</dependent-claim-reference>, further comprises reversing previous payment transactions. </claim-text>
</claim>
<claim id="CLM-00011">
<claim-text><highlight><bold>11</bold></highlight>. Apparatus for initiating payment in a computer under the control of software with an attached display and an input device connected to a network for receiving and transmitting network information, comprising: 
<claim-text>(a) means for establishing a communication between said first and said second computer via said network; </claim-text>
<claim-text>(b) means for identifying an encryption procedure and a decryption procedure utilized by said first and said second computer; </claim-text>
<claim-text>(c) means for transmitting encrypted payment information from said first computer to said second computer; </claim-text>
<claim-text>(d) means for receiving said encrypted payment information at said second computer and decrypting the payment information utilizing the decryption procedure; and </claim-text>
<claim-text>(e) means for repackaging said payment information to comply with a Secure Electronic Transaction protocol for further payment processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00012">
<claim-text><highlight><bold>12</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 11</dependent-claim-reference>, including means for utilizing the Internet for transmitting information between said first and said second computer systems. </claim-text>
</claim>
<claim id="CLM-00013">
<claim-text><highlight><bold>13</bold></highlight>. The apparatus as recited in <dependent-claim-reference depends_on="CLM-00011">claim 12</dependent-claim-reference>, including means for transmitting from the second computer system to a third computer system for authorizing or denying credit in the payment processing. </claim-text>
</claim>
<claim id="CLM-00014">
<claim-text><highlight><bold>14</bold></highlight>. An apparatus for initiating secure communication between a first and a second computer connected to a network for receiving and transmitting payment information, comprising: 
<claim-text>(a) communication hardware utilized by a client to communicate information for use in said secure communication between a first and a second computer; </claim-text>
<claim-text>(b) a computer under the control of software which establishes secure communication between said first and said second computer via said network; and </claim-text>
<claim-text>(c) a computer under the control of software which repackages said payment information to comply with a third party secure protocol for further payment processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00015">
<claim-text><highlight><bold>15</bold></highlight>. A computer program embodied on a computer-readable medium for effecting purchase transactions by a customer system at a merchant system and effecting payment for said transactions by a payment system, comprising: 
<claim-text>(a) a code segment for controlling secure communication of a purchase request from said customer system to said merchant system, including providing payment information from said customer system to said merchant system; </claim-text>
<claim-text>(b) a code segment for controlling secure processing of said payment information by said merchant system to generate a payment authorization request and securely transmit said payment authorization request from said merchant system to said payment system; </claim-text>
<claim-text>(c) a code segment for controlling the secure processing of said payment authorization request by said payment system to generate a payment authorization response authorizing said purchase and securely transmit said payment authorization response to said merchant system pursuant to which said merchant system fills said purchase request; </claim-text>
<claim-text>(d) a code segment for controlling the secure processing of said payment authorization response by said merchant system to generate a payment capture request and securely transmit said payment capture request to said payment system; </claim-text>
<claim-text>(e) a code segment for controlling the secure processing of said payment capture request by said payment system to generate a payment capture response authorizing payment and transmit said payment capture response to said merchant system; and </claim-text>
<claim-text>(f) a code segment for controlling the secure processing of said payment capture response by said merchant system to effect payment to the merchant system for filling said purchase request. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00016">
<claim-text><highlight><bold>16</bold></highlight>. A computer program embodied on a computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said secure protocol is a Secure Electronic Transaction protocol. </claim-text>
</claim>
<claim id="CLM-00017">
<claim-text><highlight><bold>17</bold></highlight>. A computer program embodied on a computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said secure protocol is a Secure Transaction Technology protocol. </claim-text>
</claim>
<claim id="CLM-00018">
<claim-text><highlight><bold>18</bold></highlight>. A computer program embodied on a computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said secure protocol is a Secure Electronic Payments Protocol. </claim-text>
</claim>
<claim id="CLM-00019">
<claim-text><highlight><bold>19</bold></highlight>. A computer program embodied on a computer-readable medium as recited in <dependent-claim-reference depends_on="CLM-00011">claim 15</dependent-claim-reference>, wherein said information includes payment administration information. </claim-text>
</claim>
<claim id="CLM-00020">
<claim-text><highlight><bold>20</bold></highlight>. A computer program embodied on a computer-readable medium for initiating payment in a computer under the control of software with an attached display and an input device connected to a network for receiving and transmitting network information, comprising: 
<claim-text>(a) a code segment for establishing a communication between said first and said second computer via said network; </claim-text>
<claim-text>(b) a code segment for identifying an encryption procedure and a decryption procedure utilized by said first and said second computer; </claim-text>
<claim-text>(c) a code segment for transmitting encrypted payment information from said first computer to said second computer; </claim-text>
<claim-text>(d) a code segment for receiving said encrypted payment information at said second computer and decrypting the payment information utilizing the decryption procedure; and </claim-text>
<claim-text>(e) a code segment for repackaging said payment information to comply with a secure protocol for further payment processing. </claim-text>
</claim-text>
</claim>
<claim id="CLM-00021">
<claim-text><highlight><bold>21</bold></highlight>. A computer program embodied on a computer-readable medium for effecting purchase transactions by a merchant computer system and payment for said transactions by a payment computer system, comprising: 
<claim-text>(a) a code segment controlling communication between said customer and said merchant computer system for effecting purchase requests, including providing payment information from said customer to said merchant computer system; and </claim-text>
<claim-text>(b) a code segment controlling secure communication between said merchant computer system and said payment computer system for effecting operation on said payment information by said merchant computer systems to obtain administration information from said payment computer system to said merchant computer system pursuant to which said merchant computer system completes said purchase request.</claim-text>
</claim-text>
</claim>
</subdoc-claims>
<subdoc-drawings id="DRAWINGS">
<heading lvl="0" align="CENTER">Drawings</heading>
<representative-figure>1</representative-figure>
<figure id="figure-D00000">
<image id="EMI-D00000" file="US20030004894A1-20030102-D00000.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00001">
<image id="EMI-D00001" file="US20030004894A1-20030102-D00001.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00002">
<image id="EMI-D00002" file="US20030004894A1-20030102-D00002.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00003">
<image id="EMI-D00003" file="US20030004894A1-20030102-D00003.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00004">
<image id="EMI-D00004" file="US20030004894A1-20030102-D00004.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00005">
<image id="EMI-D00005" file="US20030004894A1-20030102-D00005.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00006">
<image id="EMI-D00006" file="US20030004894A1-20030102-D00006.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00007">
<image id="EMI-D00007" file="US20030004894A1-20030102-D00007.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00008">
<image id="EMI-D00008" file="US20030004894A1-20030102-D00008.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00009">
<image id="EMI-D00009" file="US20030004894A1-20030102-D00009.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00010">
<image id="EMI-D00010" file="US20030004894A1-20030102-D00010.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00011">
<image id="EMI-D00011" file="US20030004894A1-20030102-D00011.TIF" imf="TIFF" ti="DR"/>
</figure>
<figure id="figure-D00012">
<image id="EMI-D00012" file="US20030004894A1-20030102-D00012.TIF" imf="TIFF" ti="DR"/>
</figure>
</subdoc-drawings>
</patent-application-publication>
